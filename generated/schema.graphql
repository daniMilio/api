schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type CpuStat {
  time: timestamp
  total: bigint
  used: bigint
  window: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type MeResponse {
  avatar_url: String!
  country: String
  discord_id: String
  language: String
  name: String!
  player: players
  profile_url: String
  role: String!
  steam_id: String!
}

type MemoryStat {
  time: timestamp
  total: bigint
  used: bigint
}

type NodeStats {
  cpu: CpuStat
  memory: MemoryStat
  node: String!
}

type PodStats {
  cpu: CpuStat
  memory: MemoryStat
  name: String!
  node: String!
}

type SetupGameServeOutput {
  link: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type SuccessOutput {
  success: Boolean!
}

type TelemetryStats {
  online: Int!
}

"""
columns and relationships of "_map_pool"
"""
type _map_pool {
  map_id: uuid!
  map_pool_id: uuid!
}

"""
aggregated selection of "_map_pool"
"""
type _map_pool_aggregate {
  aggregate: _map_pool_aggregate_fields
  nodes: [_map_pool!]!
}

"""
aggregate fields of "_map_pool"
"""
type _map_pool_aggregate_fields {
  count(columns: [_map_pool_select_column!], distinct: Boolean): Int!
  max: _map_pool_max_fields
  min: _map_pool_min_fields
}

"""
Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'.
"""
input _map_pool_bool_exp {
  _and: [_map_pool_bool_exp!]
  _not: _map_pool_bool_exp
  _or: [_map_pool_bool_exp!]
  map_id: uuid_comparison_exp
  map_pool_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "_map_pool"
"""
enum _map_pool_constraint {
  """
  unique or primary key constraint on columns "map_pool_id", "map_id"
  """
  map_pool_pkey
}

"""
input type for inserting data into table "_map_pool"
"""
input _map_pool_insert_input {
  map_id: uuid
  map_pool_id: uuid
}

"""aggregate max on columns"""
type _map_pool_max_fields {
  map_id: uuid
  map_pool_id: uuid
}

"""aggregate min on columns"""
type _map_pool_min_fields {
  map_id: uuid
  map_pool_id: uuid
}

"""
response of any mutation on the table "_map_pool"
"""
type _map_pool_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [_map_pool!]!
}

"""
on_conflict condition type for table "_map_pool"
"""
input _map_pool_on_conflict {
  constraint: _map_pool_constraint!
  update_columns: [_map_pool_update_column!]! = []
  where: _map_pool_bool_exp
}

"""Ordering options when selecting data from "_map_pool"."""
input _map_pool_order_by {
  map_id: order_by
  map_pool_id: order_by
}

"""primary key columns input for table: _map_pool"""
input _map_pool_pk_columns_input {
  map_id: uuid!
  map_pool_id: uuid!
}

"""
select columns of table "_map_pool"
"""
enum _map_pool_select_column {
  """column name"""
  map_id

  """column name"""
  map_pool_id
}

"""
input type for updating data in table "_map_pool"
"""
input _map_pool_set_input {
  map_id: uuid
  map_pool_id: uuid
}

"""
Streaming cursor of the table "_map_pool"
"""
input _map_pool_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: _map_pool_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input _map_pool_stream_cursor_value_input {
  map_id: uuid
  map_pool_id: uuid
}

"""
update columns of table "_map_pool"
"""
enum _map_pool_update_column {
  """column name"""
  map_id

  """column name"""
  map_pool_id
}

input _map_pool_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: _map_pool_set_input

  """filter the rows which have to be updated"""
  where: _map_pool_bool_exp!
}

"""
columns and relationships of "abandoned_matches"
"""
type abandoned_matches {
  abandoned_at: timestamptz!
  id: uuid!
  steam_id: bigint!
}

"""
aggregated selection of "abandoned_matches"
"""
type abandoned_matches_aggregate {
  aggregate: abandoned_matches_aggregate_fields
  nodes: [abandoned_matches!]!
}

input abandoned_matches_aggregate_bool_exp {
  count: abandoned_matches_aggregate_bool_exp_count
}

input abandoned_matches_aggregate_bool_exp_count {
  arguments: [abandoned_matches_select_column!]
  distinct: Boolean
  filter: abandoned_matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "abandoned_matches"
"""
type abandoned_matches_aggregate_fields {
  avg: abandoned_matches_avg_fields
  count(columns: [abandoned_matches_select_column!], distinct: Boolean): Int!
  max: abandoned_matches_max_fields
  min: abandoned_matches_min_fields
  stddev: abandoned_matches_stddev_fields
  stddev_pop: abandoned_matches_stddev_pop_fields
  stddev_samp: abandoned_matches_stddev_samp_fields
  sum: abandoned_matches_sum_fields
  var_pop: abandoned_matches_var_pop_fields
  var_samp: abandoned_matches_var_samp_fields
  variance: abandoned_matches_variance_fields
}

"""
order by aggregate values of table "abandoned_matches"
"""
input abandoned_matches_aggregate_order_by {
  avg: abandoned_matches_avg_order_by
  count: order_by
  max: abandoned_matches_max_order_by
  min: abandoned_matches_min_order_by
  stddev: abandoned_matches_stddev_order_by
  stddev_pop: abandoned_matches_stddev_pop_order_by
  stddev_samp: abandoned_matches_stddev_samp_order_by
  sum: abandoned_matches_sum_order_by
  var_pop: abandoned_matches_var_pop_order_by
  var_samp: abandoned_matches_var_samp_order_by
  variance: abandoned_matches_variance_order_by
}

"""
input type for inserting array relation for remote table "abandoned_matches"
"""
input abandoned_matches_arr_rel_insert_input {
  data: [abandoned_matches_insert_input!]!

  """upsert condition"""
  on_conflict: abandoned_matches_on_conflict
}

"""aggregate avg on columns"""
type abandoned_matches_avg_fields {
  steam_id: Float
}

"""
order by avg() on columns of table "abandoned_matches"
"""
input abandoned_matches_avg_order_by {
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "abandoned_matches". All fields are combined with a logical 'AND'.
"""
input abandoned_matches_bool_exp {
  _and: [abandoned_matches_bool_exp!]
  _not: abandoned_matches_bool_exp
  _or: [abandoned_matches_bool_exp!]
  abandoned_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  steam_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "abandoned_matches"
"""
enum abandoned_matches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  abandoned_matches_pkey
}

"""
input type for incrementing numeric columns in table "abandoned_matches"
"""
input abandoned_matches_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "abandoned_matches"
"""
input abandoned_matches_insert_input {
  abandoned_at: timestamptz
  id: uuid
  steam_id: bigint
}

"""aggregate max on columns"""
type abandoned_matches_max_fields {
  abandoned_at: timestamptz
  id: uuid
  steam_id: bigint
}

"""
order by max() on columns of table "abandoned_matches"
"""
input abandoned_matches_max_order_by {
  abandoned_at: order_by
  id: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type abandoned_matches_min_fields {
  abandoned_at: timestamptz
  id: uuid
  steam_id: bigint
}

"""
order by min() on columns of table "abandoned_matches"
"""
input abandoned_matches_min_order_by {
  abandoned_at: order_by
  id: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "abandoned_matches"
"""
type abandoned_matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [abandoned_matches!]!
}

"""
on_conflict condition type for table "abandoned_matches"
"""
input abandoned_matches_on_conflict {
  constraint: abandoned_matches_constraint!
  update_columns: [abandoned_matches_update_column!]! = []
  where: abandoned_matches_bool_exp
}

"""Ordering options when selecting data from "abandoned_matches"."""
input abandoned_matches_order_by {
  abandoned_at: order_by
  id: order_by
  steam_id: order_by
}

"""primary key columns input for table: abandoned_matches"""
input abandoned_matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "abandoned_matches"
"""
enum abandoned_matches_select_column {
  """column name"""
  abandoned_at

  """column name"""
  id

  """column name"""
  steam_id
}

"""
input type for updating data in table "abandoned_matches"
"""
input abandoned_matches_set_input {
  abandoned_at: timestamptz
  id: uuid
  steam_id: bigint
}

"""aggregate stddev on columns"""
type abandoned_matches_stddev_fields {
  steam_id: Float
}

"""
order by stddev() on columns of table "abandoned_matches"
"""
input abandoned_matches_stddev_order_by {
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type abandoned_matches_stddev_pop_fields {
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "abandoned_matches"
"""
input abandoned_matches_stddev_pop_order_by {
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type abandoned_matches_stddev_samp_fields {
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "abandoned_matches"
"""
input abandoned_matches_stddev_samp_order_by {
  steam_id: order_by
}

"""
Streaming cursor of the table "abandoned_matches"
"""
input abandoned_matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: abandoned_matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input abandoned_matches_stream_cursor_value_input {
  abandoned_at: timestamptz
  id: uuid
  steam_id: bigint
}

"""aggregate sum on columns"""
type abandoned_matches_sum_fields {
  steam_id: bigint
}

"""
order by sum() on columns of table "abandoned_matches"
"""
input abandoned_matches_sum_order_by {
  steam_id: order_by
}

"""
update columns of table "abandoned_matches"
"""
enum abandoned_matches_update_column {
  """column name"""
  abandoned_at

  """column name"""
  id

  """column name"""
  steam_id
}

input abandoned_matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: abandoned_matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: abandoned_matches_set_input

  """filter the rows which have to be updated"""
  where: abandoned_matches_bool_exp!
}

"""aggregate var_pop on columns"""
type abandoned_matches_var_pop_fields {
  steam_id: Float
}

"""
order by var_pop() on columns of table "abandoned_matches"
"""
input abandoned_matches_var_pop_order_by {
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type abandoned_matches_var_samp_fields {
  steam_id: Float
}

"""
order by var_samp() on columns of table "abandoned_matches"
"""
input abandoned_matches_var_samp_order_by {
  steam_id: order_by
}

"""aggregate variance on columns"""
type abandoned_matches_variance_fields {
  steam_id: Float
}

"""
order by variance() on columns of table "abandoned_matches"
"""
input abandoned_matches_variance_order_by {
  steam_id: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "e_friend_status"
"""
type e_friend_status {
  description: String!
  value: String!
}

"""
aggregated selection of "e_friend_status"
"""
type e_friend_status_aggregate {
  aggregate: e_friend_status_aggregate_fields
  nodes: [e_friend_status!]!
}

"""
aggregate fields of "e_friend_status"
"""
type e_friend_status_aggregate_fields {
  count(columns: [e_friend_status_select_column!], distinct: Boolean): Int!
  max: e_friend_status_max_fields
  min: e_friend_status_min_fields
}

"""
Boolean expression to filter rows from the table "e_friend_status". All fields are combined with a logical 'AND'.
"""
input e_friend_status_bool_exp {
  _and: [e_friend_status_bool_exp!]
  _not: e_friend_status_bool_exp
  _or: [e_friend_status_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_friend_status"
"""
enum e_friend_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_friend_status_pkey
}

enum e_friend_status_enum {
  """Accepted"""
  Accepted

  """Pending"""
  Pending
}

"""
Boolean expression to compare columns of type "e_friend_status_enum". All fields are combined with logical 'AND'.
"""
input e_friend_status_enum_comparison_exp {
  _eq: e_friend_status_enum
  _in: [e_friend_status_enum!]
  _is_null: Boolean
  _neq: e_friend_status_enum
  _nin: [e_friend_status_enum!]
}

"""
input type for inserting data into table "e_friend_status"
"""
input e_friend_status_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_friend_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_friend_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_friend_status"
"""
type e_friend_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_friend_status!]!
}

"""
input type for inserting object relation for remote table "e_friend_status"
"""
input e_friend_status_obj_rel_insert_input {
  data: e_friend_status_insert_input!

  """upsert condition"""
  on_conflict: e_friend_status_on_conflict
}

"""
on_conflict condition type for table "e_friend_status"
"""
input e_friend_status_on_conflict {
  constraint: e_friend_status_constraint!
  update_columns: [e_friend_status_update_column!]! = []
  where: e_friend_status_bool_exp
}

"""Ordering options when selecting data from "e_friend_status"."""
input e_friend_status_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_friend_status"""
input e_friend_status_pk_columns_input {
  value: String!
}

"""
select columns of table "e_friend_status"
"""
enum e_friend_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_friend_status"
"""
input e_friend_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_friend_status"
"""
input e_friend_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_friend_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_friend_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_friend_status"
"""
enum e_friend_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_friend_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_friend_status_set_input

  """filter the rows which have to be updated"""
  where: e_friend_status_bool_exp!
}

"""
columns and relationships of "e_game_server_node_statuses"
"""
type e_game_server_node_statuses {
  description: String!
  value: String!
}

"""
aggregated selection of "e_game_server_node_statuses"
"""
type e_game_server_node_statuses_aggregate {
  aggregate: e_game_server_node_statuses_aggregate_fields
  nodes: [e_game_server_node_statuses!]!
}

"""
aggregate fields of "e_game_server_node_statuses"
"""
type e_game_server_node_statuses_aggregate_fields {
  count(columns: [e_game_server_node_statuses_select_column!], distinct: Boolean): Int!
  max: e_game_server_node_statuses_max_fields
  min: e_game_server_node_statuses_min_fields
}

"""
Boolean expression to filter rows from the table "e_game_server_node_statuses". All fields are combined with a logical 'AND'.
"""
input e_game_server_node_statuses_bool_exp {
  _and: [e_game_server_node_statuses_bool_exp!]
  _not: e_game_server_node_statuses_bool_exp
  _or: [e_game_server_node_statuses_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_game_server_node_statuses"
"""
enum e_game_server_node_statuses_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_game_server_node_statuses_pkey
}

enum e_game_server_node_statuses_enum {
  """Not Accepting New Matches"""
  NotAcceptingNewMatches

  """Offline"""
  Offline

  """Online"""
  Online

  """Waiting to Setup"""
  Setup
}

"""
Boolean expression to compare columns of type "e_game_server_node_statuses_enum". All fields are combined with logical 'AND'.
"""
input e_game_server_node_statuses_enum_comparison_exp {
  _eq: e_game_server_node_statuses_enum
  _in: [e_game_server_node_statuses_enum!]
  _is_null: Boolean
  _neq: e_game_server_node_statuses_enum
  _nin: [e_game_server_node_statuses_enum!]
}

"""
input type for inserting data into table "e_game_server_node_statuses"
"""
input e_game_server_node_statuses_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_game_server_node_statuses_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_game_server_node_statuses_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_game_server_node_statuses"
"""
type e_game_server_node_statuses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_game_server_node_statuses!]!
}

"""
input type for inserting object relation for remote table "e_game_server_node_statuses"
"""
input e_game_server_node_statuses_obj_rel_insert_input {
  data: e_game_server_node_statuses_insert_input!

  """upsert condition"""
  on_conflict: e_game_server_node_statuses_on_conflict
}

"""
on_conflict condition type for table "e_game_server_node_statuses"
"""
input e_game_server_node_statuses_on_conflict {
  constraint: e_game_server_node_statuses_constraint!
  update_columns: [e_game_server_node_statuses_update_column!]! = []
  where: e_game_server_node_statuses_bool_exp
}

"""
Ordering options when selecting data from "e_game_server_node_statuses".
"""
input e_game_server_node_statuses_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_game_server_node_statuses"""
input e_game_server_node_statuses_pk_columns_input {
  value: String!
}

"""
select columns of table "e_game_server_node_statuses"
"""
enum e_game_server_node_statuses_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_game_server_node_statuses"
"""
input e_game_server_node_statuses_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_game_server_node_statuses"
"""
input e_game_server_node_statuses_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_game_server_node_statuses_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_game_server_node_statuses_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_game_server_node_statuses"
"""
enum e_game_server_node_statuses_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_game_server_node_statuses_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_game_server_node_statuses_set_input

  """filter the rows which have to be updated"""
  where: e_game_server_node_statuses_bool_exp!
}

"""
columns and relationships of "e_lobby_access"
"""
type e_lobby_access {
  description: String!
  value: String!
}

"""
aggregated selection of "e_lobby_access"
"""
type e_lobby_access_aggregate {
  aggregate: e_lobby_access_aggregate_fields
  nodes: [e_lobby_access!]!
}

"""
aggregate fields of "e_lobby_access"
"""
type e_lobby_access_aggregate_fields {
  count(columns: [e_lobby_access_select_column!], distinct: Boolean): Int!
  max: e_lobby_access_max_fields
  min: e_lobby_access_min_fields
}

"""
Boolean expression to filter rows from the table "e_lobby_access". All fields are combined with a logical 'AND'.
"""
input e_lobby_access_bool_exp {
  _and: [e_lobby_access_bool_exp!]
  _not: e_lobby_access_bool_exp
  _or: [e_lobby_access_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_lobby_access"
"""
enum e_lobby_access_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_lobby_access_pkey
}

enum e_lobby_access_enum {
  """Friends Only"""
  Friends

  """Invite Only"""
  Invite

  """Public"""
  Open

  """Private"""
  Private
}

"""
Boolean expression to compare columns of type "e_lobby_access_enum". All fields are combined with logical 'AND'.
"""
input e_lobby_access_enum_comparison_exp {
  _eq: e_lobby_access_enum
  _in: [e_lobby_access_enum!]
  _is_null: Boolean
  _neq: e_lobby_access_enum
  _nin: [e_lobby_access_enum!]
}

"""
input type for inserting data into table "e_lobby_access"
"""
input e_lobby_access_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_lobby_access_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_lobby_access_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_lobby_access"
"""
type e_lobby_access_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_lobby_access!]!
}

"""
input type for inserting object relation for remote table "e_lobby_access"
"""
input e_lobby_access_obj_rel_insert_input {
  data: e_lobby_access_insert_input!

  """upsert condition"""
  on_conflict: e_lobby_access_on_conflict
}

"""
on_conflict condition type for table "e_lobby_access"
"""
input e_lobby_access_on_conflict {
  constraint: e_lobby_access_constraint!
  update_columns: [e_lobby_access_update_column!]! = []
  where: e_lobby_access_bool_exp
}

"""Ordering options when selecting data from "e_lobby_access"."""
input e_lobby_access_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_lobby_access"""
input e_lobby_access_pk_columns_input {
  value: String!
}

"""
select columns of table "e_lobby_access"
"""
enum e_lobby_access_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_lobby_access"
"""
input e_lobby_access_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_lobby_access"
"""
input e_lobby_access_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_lobby_access_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_lobby_access_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_lobby_access"
"""
enum e_lobby_access_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_lobby_access_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_lobby_access_set_input

  """filter the rows which have to be updated"""
  where: e_lobby_access_bool_exp!
}

"""
columns and relationships of "e_lobby_player_status"
"""
type e_lobby_player_status {
  description: String!
  value: String!
}

"""
aggregated selection of "e_lobby_player_status"
"""
type e_lobby_player_status_aggregate {
  aggregate: e_lobby_player_status_aggregate_fields
  nodes: [e_lobby_player_status!]!
}

"""
aggregate fields of "e_lobby_player_status"
"""
type e_lobby_player_status_aggregate_fields {
  count(columns: [e_lobby_player_status_select_column!], distinct: Boolean): Int!
  max: e_lobby_player_status_max_fields
  min: e_lobby_player_status_min_fields
}

"""
Boolean expression to filter rows from the table "e_lobby_player_status". All fields are combined with a logical 'AND'.
"""
input e_lobby_player_status_bool_exp {
  _and: [e_lobby_player_status_bool_exp!]
  _not: e_lobby_player_status_bool_exp
  _or: [e_lobby_player_status_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_lobby_player_status"
"""
enum e_lobby_player_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_lobby_player_status_pkey
}

enum e_lobby_player_status_enum {
  """Accepted"""
  Accepted

  """Invited"""
  Invited
}

"""
Boolean expression to compare columns of type "e_lobby_player_status_enum". All fields are combined with logical 'AND'.
"""
input e_lobby_player_status_enum_comparison_exp {
  _eq: e_lobby_player_status_enum
  _in: [e_lobby_player_status_enum!]
  _is_null: Boolean
  _neq: e_lobby_player_status_enum
  _nin: [e_lobby_player_status_enum!]
}

"""
input type for inserting data into table "e_lobby_player_status"
"""
input e_lobby_player_status_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_lobby_player_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_lobby_player_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_lobby_player_status"
"""
type e_lobby_player_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_lobby_player_status!]!
}

"""
on_conflict condition type for table "e_lobby_player_status"
"""
input e_lobby_player_status_on_conflict {
  constraint: e_lobby_player_status_constraint!
  update_columns: [e_lobby_player_status_update_column!]! = []
  where: e_lobby_player_status_bool_exp
}

"""Ordering options when selecting data from "e_lobby_player_status"."""
input e_lobby_player_status_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_lobby_player_status"""
input e_lobby_player_status_pk_columns_input {
  value: String!
}

"""
select columns of table "e_lobby_player_status"
"""
enum e_lobby_player_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_lobby_player_status"
"""
input e_lobby_player_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_lobby_player_status"
"""
input e_lobby_player_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_lobby_player_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_lobby_player_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_lobby_player_status"
"""
enum e_lobby_player_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_lobby_player_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_lobby_player_status_set_input

  """filter the rows which have to be updated"""
  where: e_lobby_player_status_bool_exp!
}

"""
columns and relationships of "e_map_pool_types"
"""
type e_map_pool_types {
  description: String
  value: String!
}

"""
aggregated selection of "e_map_pool_types"
"""
type e_map_pool_types_aggregate {
  aggregate: e_map_pool_types_aggregate_fields
  nodes: [e_map_pool_types!]!
}

"""
aggregate fields of "e_map_pool_types"
"""
type e_map_pool_types_aggregate_fields {
  count(columns: [e_map_pool_types_select_column!], distinct: Boolean): Int!
  max: e_map_pool_types_max_fields
  min: e_map_pool_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_map_pool_types". All fields are combined with a logical 'AND'.
"""
input e_map_pool_types_bool_exp {
  _and: [e_map_pool_types_bool_exp!]
  _not: e_map_pool_types_bool_exp
  _or: [e_map_pool_types_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_map_pool_types"
"""
enum e_map_pool_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_map_pool_types_pkey
}

enum e_map_pool_types_enum {
  """5 vs 5"""
  Competitive

  """Custom"""
  Custom

  """1 vs 1"""
  Duel

  """2 vs 2"""
  Wingman
}

"""
Boolean expression to compare columns of type "e_map_pool_types_enum". All fields are combined with logical 'AND'.
"""
input e_map_pool_types_enum_comparison_exp {
  _eq: e_map_pool_types_enum
  _in: [e_map_pool_types_enum!]
  _is_null: Boolean
  _neq: e_map_pool_types_enum
  _nin: [e_map_pool_types_enum!]
}

"""
input type for inserting data into table "e_map_pool_types"
"""
input e_map_pool_types_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_map_pool_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_map_pool_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_map_pool_types"
"""
type e_map_pool_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_map_pool_types!]!
}

"""
input type for inserting object relation for remote table "e_map_pool_types"
"""
input e_map_pool_types_obj_rel_insert_input {
  data: e_map_pool_types_insert_input!

  """upsert condition"""
  on_conflict: e_map_pool_types_on_conflict
}

"""
on_conflict condition type for table "e_map_pool_types"
"""
input e_map_pool_types_on_conflict {
  constraint: e_map_pool_types_constraint!
  update_columns: [e_map_pool_types_update_column!]! = []
  where: e_map_pool_types_bool_exp
}

"""Ordering options when selecting data from "e_map_pool_types"."""
input e_map_pool_types_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_map_pool_types"""
input e_map_pool_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_map_pool_types"
"""
enum e_map_pool_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_map_pool_types"
"""
input e_map_pool_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_map_pool_types"
"""
input e_map_pool_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_map_pool_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_map_pool_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_map_pool_types"
"""
enum e_map_pool_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_map_pool_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_map_pool_types_set_input

  """filter the rows which have to be updated"""
  where: e_map_pool_types_bool_exp!
}

"""
columns and relationships of "e_match_map_status"
"""
type e_match_map_status {
  description: String!

  """An array relationship"""
  match_maps(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!
  value: String!
}

"""
aggregated selection of "e_match_map_status"
"""
type e_match_map_status_aggregate {
  aggregate: e_match_map_status_aggregate_fields
  nodes: [e_match_map_status!]!
}

"""
aggregate fields of "e_match_map_status"
"""
type e_match_map_status_aggregate_fields {
  count(columns: [e_match_map_status_select_column!], distinct: Boolean): Int!
  max: e_match_map_status_max_fields
  min: e_match_map_status_min_fields
}

"""
Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'.
"""
input e_match_map_status_bool_exp {
  _and: [e_match_map_status_bool_exp!]
  _not: e_match_map_status_bool_exp
  _or: [e_match_map_status_bool_exp!]
  description: String_comparison_exp
  match_maps: match_maps_bool_exp
  match_maps_aggregate: match_maps_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_match_map_status"
"""
enum e_match_map_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  match_map_status_pkey
}

enum e_match_map_status_enum {
  """Canceled"""
  Canceled

  """Finished"""
  Finished

  """Knife"""
  Knife

  """Live"""
  Live

  """Overtime"""
  Overtime

  """Paused"""
  Paused

  """Scheduled"""
  Scheduled

  """Warmup"""
  Warmup
}

"""
Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'.
"""
input e_match_map_status_enum_comparison_exp {
  _eq: e_match_map_status_enum
  _in: [e_match_map_status_enum!]
  _is_null: Boolean
  _neq: e_match_map_status_enum
  _nin: [e_match_map_status_enum!]
}

"""
input type for inserting data into table "e_match_map_status"
"""
input e_match_map_status_insert_input {
  description: String
  match_maps: match_maps_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_match_map_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_match_map_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_match_map_status"
"""
type e_match_map_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_match_map_status!]!
}

"""
input type for inserting object relation for remote table "e_match_map_status"
"""
input e_match_map_status_obj_rel_insert_input {
  data: e_match_map_status_insert_input!

  """upsert condition"""
  on_conflict: e_match_map_status_on_conflict
}

"""
on_conflict condition type for table "e_match_map_status"
"""
input e_match_map_status_on_conflict {
  constraint: e_match_map_status_constraint!
  update_columns: [e_match_map_status_update_column!]! = []
  where: e_match_map_status_bool_exp
}

"""Ordering options when selecting data from "e_match_map_status"."""
input e_match_map_status_order_by {
  description: order_by
  match_maps_aggregate: match_maps_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_match_map_status"""
input e_match_map_status_pk_columns_input {
  value: String!
}

"""
select columns of table "e_match_map_status"
"""
enum e_match_map_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_match_map_status"
"""
input e_match_map_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_match_map_status"
"""
input e_match_map_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_match_map_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_match_map_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_match_map_status"
"""
enum e_match_map_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_match_map_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_match_map_status_set_input

  """filter the rows which have to be updated"""
  where: e_match_map_status_bool_exp!
}

"""
columns and relationships of "e_match_status"
"""
type e_match_status {
  description: String!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): matches_aggregate!
  value: String!
}

"""
aggregated selection of "e_match_status"
"""
type e_match_status_aggregate {
  aggregate: e_match_status_aggregate_fields
  nodes: [e_match_status!]!
}

"""
aggregate fields of "e_match_status"
"""
type e_match_status_aggregate_fields {
  count(columns: [e_match_status_select_column!], distinct: Boolean): Int!
  max: e_match_status_max_fields
  min: e_match_status_min_fields
}

"""
Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'.
"""
input e_match_status_bool_exp {
  _and: [e_match_status_bool_exp!]
  _not: e_match_status_bool_exp
  _or: [e_match_status_bool_exp!]
  description: String_comparison_exp
  matches: matches_bool_exp
  matches_aggregate: matches_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_match_status"
"""
enum e_match_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_match_status_pkey
}

enum e_match_status_enum {
  """Canceled"""
  Canceled

  """Finished"""
  Finished

  """Forfeit"""
  Forfeit

  """Live"""
  Live

  """Picking Players"""
  PickingPlayers

  """Scheduled"""
  Scheduled

  """Surrendered"""
  Surrendered

  """Tie"""
  Tie

  """Veto"""
  Veto

  """Waiting for Players to Check In"""
  WaitingForCheckIn

  """Waiting for a Server to Become Available."""
  WaitingForServer
}

"""
Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'.
"""
input e_match_status_enum_comparison_exp {
  _eq: e_match_status_enum
  _in: [e_match_status_enum!]
  _is_null: Boolean
  _neq: e_match_status_enum
  _nin: [e_match_status_enum!]
}

"""
input type for inserting data into table "e_match_status"
"""
input e_match_status_insert_input {
  description: String
  matches: matches_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_match_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_match_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_match_status"
"""
type e_match_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_match_status!]!
}

"""
input type for inserting object relation for remote table "e_match_status"
"""
input e_match_status_obj_rel_insert_input {
  data: e_match_status_insert_input!

  """upsert condition"""
  on_conflict: e_match_status_on_conflict
}

"""
on_conflict condition type for table "e_match_status"
"""
input e_match_status_on_conflict {
  constraint: e_match_status_constraint!
  update_columns: [e_match_status_update_column!]! = []
  where: e_match_status_bool_exp
}

"""Ordering options when selecting data from "e_match_status"."""
input e_match_status_order_by {
  description: order_by
  matches_aggregate: matches_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_match_status"""
input e_match_status_pk_columns_input {
  value: String!
}

"""
select columns of table "e_match_status"
"""
enum e_match_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_match_status"
"""
input e_match_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_match_status"
"""
input e_match_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_match_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_match_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_match_status"
"""
enum e_match_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_match_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_match_status_set_input

  """filter the rows which have to be updated"""
  where: e_match_status_bool_exp!
}

"""
columns and relationships of "e_match_types"
"""
type e_match_types {
  """An array relationship"""
  config(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): [match_type_cfgs!]!

  """An aggregate relationship"""
  config_aggregate(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): match_type_cfgs_aggregate!
  description: String!

  """An array relationship"""
  maps(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): [maps!]!

  """An aggregate relationship"""
  maps_aggregate(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): maps_aggregate!
  value: String!
}

"""
aggregated selection of "e_match_types"
"""
type e_match_types_aggregate {
  aggregate: e_match_types_aggregate_fields
  nodes: [e_match_types!]!
}

"""
aggregate fields of "e_match_types"
"""
type e_match_types_aggregate_fields {
  count(columns: [e_match_types_select_column!], distinct: Boolean): Int!
  max: e_match_types_max_fields
  min: e_match_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'.
"""
input e_match_types_bool_exp {
  _and: [e_match_types_bool_exp!]
  _not: e_match_types_bool_exp
  _or: [e_match_types_bool_exp!]
  config: match_type_cfgs_bool_exp
  config_aggregate: match_type_cfgs_aggregate_bool_exp
  description: String_comparison_exp
  maps: maps_bool_exp
  maps_aggregate: maps_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_match_types"
"""
enum e_match_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_match_types_pkey
}

enum e_match_types_enum {
  """The classic 5 vs 5 competitive experience with full team coordination"""
  Competitive

  """
  A competitive 1 vs 1 experience, perfect for practicing individual skill
  """
  Duel

  """Team up with a friend and compete in fast-paced 2v2 matches"""
  Wingman
}

"""
Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'.
"""
input e_match_types_enum_comparison_exp {
  _eq: e_match_types_enum
  _in: [e_match_types_enum!]
  _is_null: Boolean
  _neq: e_match_types_enum
  _nin: [e_match_types_enum!]
}

"""
input type for inserting data into table "e_match_types"
"""
input e_match_types_insert_input {
  config: match_type_cfgs_arr_rel_insert_input
  description: String
  maps: maps_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_match_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_match_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_match_types"
"""
type e_match_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_match_types!]!
}

"""
input type for inserting object relation for remote table "e_match_types"
"""
input e_match_types_obj_rel_insert_input {
  data: e_match_types_insert_input!

  """upsert condition"""
  on_conflict: e_match_types_on_conflict
}

"""
on_conflict condition type for table "e_match_types"
"""
input e_match_types_on_conflict {
  constraint: e_match_types_constraint!
  update_columns: [e_match_types_update_column!]! = []
  where: e_match_types_bool_exp
}

"""Ordering options when selecting data from "e_match_types"."""
input e_match_types_order_by {
  config_aggregate: match_type_cfgs_aggregate_order_by
  description: order_by
  maps_aggregate: maps_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_match_types"""
input e_match_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_match_types"
"""
enum e_match_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_match_types"
"""
input e_match_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_match_types"
"""
input e_match_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_match_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_match_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_match_types"
"""
enum e_match_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_match_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_match_types_set_input

  """filter the rows which have to be updated"""
  where: e_match_types_bool_exp!
}

"""
columns and relationships of "e_notification_types"
"""
type e_notification_types {
  description: String!
  value: String!
}

"""
aggregated selection of "e_notification_types"
"""
type e_notification_types_aggregate {
  aggregate: e_notification_types_aggregate_fields
  nodes: [e_notification_types!]!
}

"""
aggregate fields of "e_notification_types"
"""
type e_notification_types_aggregate_fields {
  count(columns: [e_notification_types_select_column!], distinct: Boolean): Int!
  max: e_notification_types_max_fields
  min: e_notification_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_notification_types". All fields are combined with a logical 'AND'.
"""
input e_notification_types_bool_exp {
  _and: [e_notification_types_bool_exp!]
  _not: e_notification_types_bool_exp
  _or: [e_notification_types_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_notification_types"
"""
enum e_notification_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_notification_types_pkey
}

enum e_notification_types_enum {
  """DedicatedServerRconStatus"""
  DedicatedServerRconStatus

  """DedicatedServerStatus"""
  DedicatedServerStatus

  """GameNodeStatus"""
  GameNodeStatus

  """GameUpdate"""
  GameUpdate

  """MatchSupport"""
  MatchSupport

  """NameChangeRequest"""
  NameChangeRequest
}

"""
Boolean expression to compare columns of type "e_notification_types_enum". All fields are combined with logical 'AND'.
"""
input e_notification_types_enum_comparison_exp {
  _eq: e_notification_types_enum
  _in: [e_notification_types_enum!]
  _is_null: Boolean
  _neq: e_notification_types_enum
  _nin: [e_notification_types_enum!]
}

"""
input type for inserting data into table "e_notification_types"
"""
input e_notification_types_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_notification_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_notification_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_notification_types"
"""
type e_notification_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_notification_types!]!
}

"""
on_conflict condition type for table "e_notification_types"
"""
input e_notification_types_on_conflict {
  constraint: e_notification_types_constraint!
  update_columns: [e_notification_types_update_column!]! = []
  where: e_notification_types_bool_exp
}

"""Ordering options when selecting data from "e_notification_types"."""
input e_notification_types_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_notification_types"""
input e_notification_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_notification_types"
"""
enum e_notification_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_notification_types"
"""
input e_notification_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_notification_types"
"""
input e_notification_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_notification_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_notification_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_notification_types"
"""
enum e_notification_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_notification_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_notification_types_set_input

  """filter the rows which have to be updated"""
  where: e_notification_types_bool_exp!
}

"""
columns and relationships of "e_objective_types"
"""
type e_objective_types {
  description: String!

  """An array relationship"""
  player_objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  player_objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!
  value: String!
}

"""
aggregated selection of "e_objective_types"
"""
type e_objective_types_aggregate {
  aggregate: e_objective_types_aggregate_fields
  nodes: [e_objective_types!]!
}

"""
aggregate fields of "e_objective_types"
"""
type e_objective_types_aggregate_fields {
  count(columns: [e_objective_types_select_column!], distinct: Boolean): Int!
  max: e_objective_types_max_fields
  min: e_objective_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'.
"""
input e_objective_types_bool_exp {
  _and: [e_objective_types_bool_exp!]
  _not: e_objective_types_bool_exp
  _or: [e_objective_types_bool_exp!]
  description: String_comparison_exp
  player_objectives: player_objectives_bool_exp
  player_objectives_aggregate: player_objectives_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_objective_types"
"""
enum e_objective_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_objective__pkey
}

enum e_objective_types_enum {
  """Defused"""
  Defused

  """Exploded"""
  Exploded

  """Planted"""
  Planted
}

"""
Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'.
"""
input e_objective_types_enum_comparison_exp {
  _eq: e_objective_types_enum
  _in: [e_objective_types_enum!]
  _is_null: Boolean
  _neq: e_objective_types_enum
  _nin: [e_objective_types_enum!]
}

"""
input type for inserting data into table "e_objective_types"
"""
input e_objective_types_insert_input {
  description: String
  player_objectives: player_objectives_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_objective_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_objective_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_objective_types"
"""
type e_objective_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_objective_types!]!
}

"""
on_conflict condition type for table "e_objective_types"
"""
input e_objective_types_on_conflict {
  constraint: e_objective_types_constraint!
  update_columns: [e_objective_types_update_column!]! = []
  where: e_objective_types_bool_exp
}

"""Ordering options when selecting data from "e_objective_types"."""
input e_objective_types_order_by {
  description: order_by
  player_objectives_aggregate: player_objectives_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_objective_types"""
input e_objective_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_objective_types"
"""
enum e_objective_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_objective_types"
"""
input e_objective_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_objective_types"
"""
input e_objective_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_objective_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_objective_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_objective_types"
"""
enum e_objective_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_objective_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_objective_types_set_input

  """filter the rows which have to be updated"""
  where: e_objective_types_bool_exp!
}

"""
columns and relationships of "e_player_roles"
"""
type e_player_roles {
  description: String!
  value: String!
}

"""
aggregated selection of "e_player_roles"
"""
type e_player_roles_aggregate {
  aggregate: e_player_roles_aggregate_fields
  nodes: [e_player_roles!]!
}

"""
aggregate fields of "e_player_roles"
"""
type e_player_roles_aggregate_fields {
  count(columns: [e_player_roles_select_column!], distinct: Boolean): Int!
  max: e_player_roles_max_fields
  min: e_player_roles_min_fields
}

"""
Boolean expression to filter rows from the table "e_player_roles". All fields are combined with a logical 'AND'.
"""
input e_player_roles_bool_exp {
  _and: [e_player_roles_bool_exp!]
  _not: e_player_roles_bool_exp
  _or: [e_player_roles_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_player_roles"
"""
enum e_player_roles_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_player_roles_pkey
}

enum e_player_roles_enum {
  """Administrator"""
  administrator

  """Ability Manage Matches and bypass restrictions"""
  match_organizer

  """Streamer"""
  streamer

  """Ability Create and Manage Tournaments"""
  tournament_organizer

  """Basic User"""
  user

  """Verified User"""
  verified_user
}

"""
Boolean expression to compare columns of type "e_player_roles_enum". All fields are combined with logical 'AND'.
"""
input e_player_roles_enum_comparison_exp {
  _eq: e_player_roles_enum
  _in: [e_player_roles_enum!]
  _is_null: Boolean
  _neq: e_player_roles_enum
  _nin: [e_player_roles_enum!]
}

"""
input type for inserting data into table "e_player_roles"
"""
input e_player_roles_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_player_roles_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_player_roles_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_player_roles"
"""
type e_player_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_player_roles!]!
}

"""
on_conflict condition type for table "e_player_roles"
"""
input e_player_roles_on_conflict {
  constraint: e_player_roles_constraint!
  update_columns: [e_player_roles_update_column!]! = []
  where: e_player_roles_bool_exp
}

"""Ordering options when selecting data from "e_player_roles"."""
input e_player_roles_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_player_roles"""
input e_player_roles_pk_columns_input {
  value: String!
}

"""
select columns of table "e_player_roles"
"""
enum e_player_roles_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_player_roles"
"""
input e_player_roles_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_player_roles"
"""
input e_player_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_player_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_player_roles_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_player_roles"
"""
enum e_player_roles_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_player_roles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_player_roles_set_input

  """filter the rows which have to be updated"""
  where: e_player_roles_bool_exp!
}

"""
columns and relationships of "e_ready_settings"
"""
type e_ready_settings {
  description: String!
  value: String!
}

"""
aggregated selection of "e_ready_settings"
"""
type e_ready_settings_aggregate {
  aggregate: e_ready_settings_aggregate_fields
  nodes: [e_ready_settings!]!
}

"""
aggregate fields of "e_ready_settings"
"""
type e_ready_settings_aggregate_fields {
  count(columns: [e_ready_settings_select_column!], distinct: Boolean): Int!
  max: e_ready_settings_max_fields
  min: e_ready_settings_min_fields
}

"""
Boolean expression to filter rows from the table "e_ready_settings". All fields are combined with a logical 'AND'.
"""
input e_ready_settings_bool_exp {
  _and: [e_ready_settings_bool_exp!]
  _not: e_ready_settings_bool_exp
  _or: [e_ready_settings_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_ready_settings"
"""
enum e_ready_settings_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_ready_settings_pkey
}

enum e_ready_settings_enum {
  """Admins Only"""
  Admin

  """Captains Only"""
  Captains

  """Coach Only"""
  Coach

  """All Players"""
  Players
}

"""
Boolean expression to compare columns of type "e_ready_settings_enum". All fields are combined with logical 'AND'.
"""
input e_ready_settings_enum_comparison_exp {
  _eq: e_ready_settings_enum
  _in: [e_ready_settings_enum!]
  _is_null: Boolean
  _neq: e_ready_settings_enum
  _nin: [e_ready_settings_enum!]
}

"""
input type for inserting data into table "e_ready_settings"
"""
input e_ready_settings_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_ready_settings_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_ready_settings_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_ready_settings"
"""
type e_ready_settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_ready_settings!]!
}

"""
on_conflict condition type for table "e_ready_settings"
"""
input e_ready_settings_on_conflict {
  constraint: e_ready_settings_constraint!
  update_columns: [e_ready_settings_update_column!]! = []
  where: e_ready_settings_bool_exp
}

"""Ordering options when selecting data from "e_ready_settings"."""
input e_ready_settings_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_ready_settings"""
input e_ready_settings_pk_columns_input {
  value: String!
}

"""
select columns of table "e_ready_settings"
"""
enum e_ready_settings_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_ready_settings"
"""
input e_ready_settings_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_ready_settings"
"""
input e_ready_settings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_ready_settings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_ready_settings_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_ready_settings"
"""
enum e_ready_settings_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_ready_settings_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_ready_settings_set_input

  """filter the rows which have to be updated"""
  where: e_ready_settings_bool_exp!
}

"""
columns and relationships of "e_sanction_types"
"""
type e_sanction_types {
  description: String!
  value: String!
}

"""
aggregated selection of "e_sanction_types"
"""
type e_sanction_types_aggregate {
  aggregate: e_sanction_types_aggregate_fields
  nodes: [e_sanction_types!]!
}

"""
aggregate fields of "e_sanction_types"
"""
type e_sanction_types_aggregate_fields {
  count(columns: [e_sanction_types_select_column!], distinct: Boolean): Int!
  max: e_sanction_types_max_fields
  min: e_sanction_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_sanction_types". All fields are combined with a logical 'AND'.
"""
input e_sanction_types_bool_exp {
  _and: [e_sanction_types_bool_exp!]
  _not: e_sanction_types_bool_exp
  _or: [e_sanction_types_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_sanction_types"
"""
enum e_sanction_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_sanction_types_pkey
}

enum e_sanction_types_enum {
  """Player is not able to participate in any activity"""
  ban

  """Player cannot use text chat in game"""
  gag

  """Player cannot use voice chat in game"""
  mute

  """Player muted and gagged"""
  silence
}

"""
Boolean expression to compare columns of type "e_sanction_types_enum". All fields are combined with logical 'AND'.
"""
input e_sanction_types_enum_comparison_exp {
  _eq: e_sanction_types_enum
  _in: [e_sanction_types_enum!]
  _is_null: Boolean
  _neq: e_sanction_types_enum
  _nin: [e_sanction_types_enum!]
}

"""
input type for inserting data into table "e_sanction_types"
"""
input e_sanction_types_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_sanction_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_sanction_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_sanction_types"
"""
type e_sanction_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_sanction_types!]!
}

"""
input type for inserting object relation for remote table "e_sanction_types"
"""
input e_sanction_types_obj_rel_insert_input {
  data: e_sanction_types_insert_input!

  """upsert condition"""
  on_conflict: e_sanction_types_on_conflict
}

"""
on_conflict condition type for table "e_sanction_types"
"""
input e_sanction_types_on_conflict {
  constraint: e_sanction_types_constraint!
  update_columns: [e_sanction_types_update_column!]! = []
  where: e_sanction_types_bool_exp
}

"""Ordering options when selecting data from "e_sanction_types"."""
input e_sanction_types_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_sanction_types"""
input e_sanction_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_sanction_types"
"""
enum e_sanction_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_sanction_types"
"""
input e_sanction_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_sanction_types"
"""
input e_sanction_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_sanction_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_sanction_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_sanction_types"
"""
enum e_sanction_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_sanction_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_sanction_types_set_input

  """filter the rows which have to be updated"""
  where: e_sanction_types_bool_exp!
}

"""
columns and relationships of "e_sides"
"""
type e_sides {
  description: String!

  """An array relationship"""
  match_map_lineup_1(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_map_lineup_1_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!

  """An array relationship"""
  match_map_lineup_2(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_map_lineup_2_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!
  value: String!
}

"""
aggregated selection of "e_sides"
"""
type e_sides_aggregate {
  aggregate: e_sides_aggregate_fields
  nodes: [e_sides!]!
}

"""
aggregate fields of "e_sides"
"""
type e_sides_aggregate_fields {
  count(columns: [e_sides_select_column!], distinct: Boolean): Int!
  max: e_sides_max_fields
  min: e_sides_min_fields
}

"""
Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'.
"""
input e_sides_bool_exp {
  _and: [e_sides_bool_exp!]
  _not: e_sides_bool_exp
  _or: [e_sides_bool_exp!]
  description: String_comparison_exp
  match_map_lineup_1: match_maps_bool_exp
  match_map_lineup_1_aggregate: match_maps_aggregate_bool_exp
  match_map_lineup_2: match_maps_bool_exp
  match_map_lineup_2_aggregate: match_maps_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_sides"
"""
enum e_sides_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_teams_pkey
}

enum e_sides_enum {
  """Counter Terrorist"""
  CT

  """None"""
  None

  """Spectator"""
  Spectator

  """Terrorist"""
  TERRORIST
}

"""
Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'.
"""
input e_sides_enum_comparison_exp {
  _eq: e_sides_enum
  _in: [e_sides_enum!]
  _is_null: Boolean
  _neq: e_sides_enum
  _nin: [e_sides_enum!]
}

"""
input type for inserting data into table "e_sides"
"""
input e_sides_insert_input {
  description: String
  match_map_lineup_1: match_maps_arr_rel_insert_input
  match_map_lineup_2: match_maps_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_sides_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_sides_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_sides"
"""
type e_sides_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_sides!]!
}

"""
on_conflict condition type for table "e_sides"
"""
input e_sides_on_conflict {
  constraint: e_sides_constraint!
  update_columns: [e_sides_update_column!]! = []
  where: e_sides_bool_exp
}

"""Ordering options when selecting data from "e_sides"."""
input e_sides_order_by {
  description: order_by
  match_map_lineup_1_aggregate: match_maps_aggregate_order_by
  match_map_lineup_2_aggregate: match_maps_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_sides"""
input e_sides_pk_columns_input {
  value: String!
}

"""
select columns of table "e_sides"
"""
enum e_sides_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_sides"
"""
input e_sides_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_sides"
"""
input e_sides_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_sides_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_sides_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_sides"
"""
enum e_sides_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_sides_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_sides_set_input

  """filter the rows which have to be updated"""
  where: e_sides_bool_exp!
}

"""
columns and relationships of "e_team_roles"
"""
type e_team_roles {
  description: String!

  """An array relationship"""
  team_rosters(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """An aggregate relationship"""
  team_rosters_aggregate(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): team_roster_aggregate!

  """An array relationship"""
  tournament_team_rosters(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """An aggregate relationship"""
  tournament_team_rosters_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!
  value: String!
}

"""
aggregated selection of "e_team_roles"
"""
type e_team_roles_aggregate {
  aggregate: e_team_roles_aggregate_fields
  nodes: [e_team_roles!]!
}

"""
aggregate fields of "e_team_roles"
"""
type e_team_roles_aggregate_fields {
  count(columns: [e_team_roles_select_column!], distinct: Boolean): Int!
  max: e_team_roles_max_fields
  min: e_team_roles_min_fields
}

"""
Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'.
"""
input e_team_roles_bool_exp {
  _and: [e_team_roles_bool_exp!]
  _not: e_team_roles_bool_exp
  _or: [e_team_roles_bool_exp!]
  description: String_comparison_exp
  team_rosters: team_roster_bool_exp
  team_rosters_aggregate: team_roster_aggregate_bool_exp
  tournament_team_rosters: tournament_team_roster_bool_exp
  tournament_team_rosters_aggregate: tournament_team_roster_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_team_roles"
"""
enum e_team_roles_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_team_roles_pkey
}

enum e_team_roles_enum {
  """Administrator"""
  Admin

  """Ability Invite / Add Players"""
  Invite

  """Basic Membership"""
  Member
}

"""
Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'.
"""
input e_team_roles_enum_comparison_exp {
  _eq: e_team_roles_enum
  _in: [e_team_roles_enum!]
  _is_null: Boolean
  _neq: e_team_roles_enum
  _nin: [e_team_roles_enum!]
}

"""
input type for inserting data into table "e_team_roles"
"""
input e_team_roles_insert_input {
  description: String
  team_rosters: team_roster_arr_rel_insert_input
  tournament_team_rosters: tournament_team_roster_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_team_roles_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_team_roles_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_team_roles"
"""
type e_team_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_team_roles!]!
}

"""
input type for inserting object relation for remote table "e_team_roles"
"""
input e_team_roles_obj_rel_insert_input {
  data: e_team_roles_insert_input!

  """upsert condition"""
  on_conflict: e_team_roles_on_conflict
}

"""
on_conflict condition type for table "e_team_roles"
"""
input e_team_roles_on_conflict {
  constraint: e_team_roles_constraint!
  update_columns: [e_team_roles_update_column!]! = []
  where: e_team_roles_bool_exp
}

"""Ordering options when selecting data from "e_team_roles"."""
input e_team_roles_order_by {
  description: order_by
  team_rosters_aggregate: team_roster_aggregate_order_by
  tournament_team_rosters_aggregate: tournament_team_roster_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_team_roles"""
input e_team_roles_pk_columns_input {
  value: String!
}

"""
select columns of table "e_team_roles"
"""
enum e_team_roles_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_team_roles"
"""
input e_team_roles_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_team_roles"
"""
input e_team_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_team_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_team_roles_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_team_roles"
"""
enum e_team_roles_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_team_roles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_team_roles_set_input

  """filter the rows which have to be updated"""
  where: e_team_roles_bool_exp!
}

"""
columns and relationships of "e_timeout_settings"
"""
type e_timeout_settings {
  description: String!
  value: String!
}

"""
aggregated selection of "e_timeout_settings"
"""
type e_timeout_settings_aggregate {
  aggregate: e_timeout_settings_aggregate_fields
  nodes: [e_timeout_settings!]!
}

"""
aggregate fields of "e_timeout_settings"
"""
type e_timeout_settings_aggregate_fields {
  count(columns: [e_timeout_settings_select_column!], distinct: Boolean): Int!
  max: e_timeout_settings_max_fields
  min: e_timeout_settings_min_fields
}

"""
Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'.
"""
input e_timeout_settings_bool_exp {
  _and: [e_timeout_settings_bool_exp!]
  _not: e_timeout_settings_bool_exp
  _or: [e_timeout_settings_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_timeout_settings"
"""
enum e_timeout_settings_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_timeout_settings_pkey
}

enum e_timeout_settings_enum {
  """Admins Only"""
  Admin

  """Coach Only"""
  Coach

  """Coach And Captains"""
  CoachAndCaptains

  """Coach And Players"""
  CoachAndPlayers
}

"""
Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'.
"""
input e_timeout_settings_enum_comparison_exp {
  _eq: e_timeout_settings_enum
  _in: [e_timeout_settings_enum!]
  _is_null: Boolean
  _neq: e_timeout_settings_enum
  _nin: [e_timeout_settings_enum!]
}

"""
input type for inserting data into table "e_timeout_settings"
"""
input e_timeout_settings_insert_input {
  description: String
  value: String
}

"""aggregate max on columns"""
type e_timeout_settings_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_timeout_settings_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_timeout_settings"
"""
type e_timeout_settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_timeout_settings!]!
}

"""
on_conflict condition type for table "e_timeout_settings"
"""
input e_timeout_settings_on_conflict {
  constraint: e_timeout_settings_constraint!
  update_columns: [e_timeout_settings_update_column!]! = []
  where: e_timeout_settings_bool_exp
}

"""Ordering options when selecting data from "e_timeout_settings"."""
input e_timeout_settings_order_by {
  description: order_by
  value: order_by
}

"""primary key columns input for table: e_timeout_settings"""
input e_timeout_settings_pk_columns_input {
  value: String!
}

"""
select columns of table "e_timeout_settings"
"""
enum e_timeout_settings_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_timeout_settings"
"""
input e_timeout_settings_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_timeout_settings"
"""
input e_timeout_settings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_timeout_settings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_timeout_settings_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_timeout_settings"
"""
enum e_timeout_settings_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_timeout_settings_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_timeout_settings_set_input

  """filter the rows which have to be updated"""
  where: e_timeout_settings_bool_exp!
}

"""
columns and relationships of "e_tournament_stage_types"
"""
type e_tournament_stage_types {
  description: String!

  """An array relationship"""
  tournament_stages(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): [tournament_stages!]!

  """An aggregate relationship"""
  tournament_stages_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): tournament_stages_aggregate!
  value: String!
}

"""
aggregated selection of "e_tournament_stage_types"
"""
type e_tournament_stage_types_aggregate {
  aggregate: e_tournament_stage_types_aggregate_fields
  nodes: [e_tournament_stage_types!]!
}

"""
aggregate fields of "e_tournament_stage_types"
"""
type e_tournament_stage_types_aggregate_fields {
  count(columns: [e_tournament_stage_types_select_column!], distinct: Boolean): Int!
  max: e_tournament_stage_types_max_fields
  min: e_tournament_stage_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_tournament_stage_types". All fields are combined with a logical 'AND'.
"""
input e_tournament_stage_types_bool_exp {
  _and: [e_tournament_stage_types_bool_exp!]
  _not: e_tournament_stage_types_bool_exp
  _or: [e_tournament_stage_types_bool_exp!]
  description: String_comparison_exp
  tournament_stages: tournament_stages_bool_exp
  tournament_stages_aggregate: tournament_stages_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_tournament_stage_types"
"""
enum e_tournament_stage_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_tournament_stage_types_pkey
}

enum e_tournament_stage_types_enum {
  """Single Elimination"""
  SingleElimination
}

"""
Boolean expression to compare columns of type "e_tournament_stage_types_enum". All fields are combined with logical 'AND'.
"""
input e_tournament_stage_types_enum_comparison_exp {
  _eq: e_tournament_stage_types_enum
  _in: [e_tournament_stage_types_enum!]
  _is_null: Boolean
  _neq: e_tournament_stage_types_enum
  _nin: [e_tournament_stage_types_enum!]
}

"""
input type for inserting data into table "e_tournament_stage_types"
"""
input e_tournament_stage_types_insert_input {
  description: String
  tournament_stages: tournament_stages_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_tournament_stage_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_tournament_stage_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_tournament_stage_types"
"""
type e_tournament_stage_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_tournament_stage_types!]!
}

"""
input type for inserting object relation for remote table "e_tournament_stage_types"
"""
input e_tournament_stage_types_obj_rel_insert_input {
  data: e_tournament_stage_types_insert_input!

  """upsert condition"""
  on_conflict: e_tournament_stage_types_on_conflict
}

"""
on_conflict condition type for table "e_tournament_stage_types"
"""
input e_tournament_stage_types_on_conflict {
  constraint: e_tournament_stage_types_constraint!
  update_columns: [e_tournament_stage_types_update_column!]! = []
  where: e_tournament_stage_types_bool_exp
}

"""Ordering options when selecting data from "e_tournament_stage_types"."""
input e_tournament_stage_types_order_by {
  description: order_by
  tournament_stages_aggregate: tournament_stages_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_tournament_stage_types"""
input e_tournament_stage_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_tournament_stage_types"
"""
enum e_tournament_stage_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_tournament_stage_types"
"""
input e_tournament_stage_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_tournament_stage_types"
"""
input e_tournament_stage_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_tournament_stage_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_tournament_stage_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_tournament_stage_types"
"""
enum e_tournament_stage_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_tournament_stage_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_tournament_stage_types_set_input

  """filter the rows which have to be updated"""
  where: e_tournament_stage_types_bool_exp!
}

"""
columns and relationships of "e_tournament_status"
"""
type e_tournament_status {
  description: String!

  """An array relationship"""
  tournaments(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): [tournaments!]!

  """An aggregate relationship"""
  tournaments_aggregate(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): tournaments_aggregate!
  value: String!
}

"""
aggregated selection of "e_tournament_status"
"""
type e_tournament_status_aggregate {
  aggregate: e_tournament_status_aggregate_fields
  nodes: [e_tournament_status!]!
}

"""
aggregate fields of "e_tournament_status"
"""
type e_tournament_status_aggregate_fields {
  count(columns: [e_tournament_status_select_column!], distinct: Boolean): Int!
  max: e_tournament_status_max_fields
  min: e_tournament_status_min_fields
}

"""
Boolean expression to filter rows from the table "e_tournament_status". All fields are combined with a logical 'AND'.
"""
input e_tournament_status_bool_exp {
  _and: [e_tournament_status_bool_exp!]
  _not: e_tournament_status_bool_exp
  _or: [e_tournament_status_bool_exp!]
  description: String_comparison_exp
  tournaments: tournaments_bool_exp
  tournaments_aggregate: tournaments_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_tournament_status"
"""
enum e_tournament_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_tournament_status_pkey
}

enum e_tournament_status_enum {
  """Cancelled"""
  Cancelled

  """Cancelled because it did not meet minimum number of teams"""
  CancelledMinTeams

  """Finished"""
  Finished

  """Live"""
  Live

  """Registration Closed"""
  RegistrationClosed

  """Registration Open"""
  RegistrationOpen

  """Setup"""
  Setup
}

"""
Boolean expression to compare columns of type "e_tournament_status_enum". All fields are combined with logical 'AND'.
"""
input e_tournament_status_enum_comparison_exp {
  _eq: e_tournament_status_enum
  _in: [e_tournament_status_enum!]
  _is_null: Boolean
  _neq: e_tournament_status_enum
  _nin: [e_tournament_status_enum!]
}

"""
input type for inserting data into table "e_tournament_status"
"""
input e_tournament_status_insert_input {
  description: String
  tournaments: tournaments_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_tournament_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_tournament_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_tournament_status"
"""
type e_tournament_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_tournament_status!]!
}

"""
input type for inserting object relation for remote table "e_tournament_status"
"""
input e_tournament_status_obj_rel_insert_input {
  data: e_tournament_status_insert_input!

  """upsert condition"""
  on_conflict: e_tournament_status_on_conflict
}

"""
on_conflict condition type for table "e_tournament_status"
"""
input e_tournament_status_on_conflict {
  constraint: e_tournament_status_constraint!
  update_columns: [e_tournament_status_update_column!]! = []
  where: e_tournament_status_bool_exp
}

"""Ordering options when selecting data from "e_tournament_status"."""
input e_tournament_status_order_by {
  description: order_by
  tournaments_aggregate: tournaments_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_tournament_status"""
input e_tournament_status_pk_columns_input {
  value: String!
}

"""
select columns of table "e_tournament_status"
"""
enum e_tournament_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_tournament_status"
"""
input e_tournament_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_tournament_status"
"""
input e_tournament_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_tournament_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_tournament_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_tournament_status"
"""
enum e_tournament_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_tournament_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_tournament_status_set_input

  """filter the rows which have to be updated"""
  where: e_tournament_status_bool_exp!
}

"""
columns and relationships of "e_utility_types"
"""
type e_utility_types {
  description: String!

  """An array relationship"""
  player_utilities(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  player_utilities_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!
  value: String!
}

"""
aggregated selection of "e_utility_types"
"""
type e_utility_types_aggregate {
  aggregate: e_utility_types_aggregate_fields
  nodes: [e_utility_types!]!
}

"""
aggregate fields of "e_utility_types"
"""
type e_utility_types_aggregate_fields {
  count(columns: [e_utility_types_select_column!], distinct: Boolean): Int!
  max: e_utility_types_max_fields
  min: e_utility_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'.
"""
input e_utility_types_bool_exp {
  _and: [e_utility_types_bool_exp!]
  _not: e_utility_types_bool_exp
  _or: [e_utility_types_bool_exp!]
  description: String_comparison_exp
  player_utilities: player_utility_bool_exp
  player_utilities_aggregate: player_utility_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_utility_types"
"""
enum e_utility_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_utility_types_pkey
}

enum e_utility_types_enum {
  """Decoy"""
  Decoy

  """Flash"""
  Flash

  """HighExplosive"""
  HighExplosive

  """Molotov"""
  Molotov

  """Smoke"""
  Smoke
}

"""
Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'.
"""
input e_utility_types_enum_comparison_exp {
  _eq: e_utility_types_enum
  _in: [e_utility_types_enum!]
  _is_null: Boolean
  _neq: e_utility_types_enum
  _nin: [e_utility_types_enum!]
}

"""
input type for inserting data into table "e_utility_types"
"""
input e_utility_types_insert_input {
  description: String
  player_utilities: player_utility_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_utility_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_utility_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_utility_types"
"""
type e_utility_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_utility_types!]!
}

"""
on_conflict condition type for table "e_utility_types"
"""
input e_utility_types_on_conflict {
  constraint: e_utility_types_constraint!
  update_columns: [e_utility_types_update_column!]! = []
  where: e_utility_types_bool_exp
}

"""Ordering options when selecting data from "e_utility_types"."""
input e_utility_types_order_by {
  description: order_by
  player_utilities_aggregate: player_utility_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_utility_types"""
input e_utility_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_utility_types"
"""
enum e_utility_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_utility_types"
"""
input e_utility_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_utility_types"
"""
input e_utility_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_utility_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_utility_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_utility_types"
"""
enum e_utility_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_utility_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_utility_types_set_input

  """filter the rows which have to be updated"""
  where: e_utility_types_bool_exp!
}

"""
columns and relationships of "e_veto_pick_types"
"""
type e_veto_pick_types {
  description: String!

  """An array relationship"""
  match_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An aggregate relationship"""
  match_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!
  value: String!
}

"""
aggregated selection of "e_veto_pick_types"
"""
type e_veto_pick_types_aggregate {
  aggregate: e_veto_pick_types_aggregate_fields
  nodes: [e_veto_pick_types!]!
}

"""
aggregate fields of "e_veto_pick_types"
"""
type e_veto_pick_types_aggregate_fields {
  count(columns: [e_veto_pick_types_select_column!], distinct: Boolean): Int!
  max: e_veto_pick_types_max_fields
  min: e_veto_pick_types_min_fields
}

"""
Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'.
"""
input e_veto_pick_types_bool_exp {
  _and: [e_veto_pick_types_bool_exp!]
  _not: e_veto_pick_types_bool_exp
  _or: [e_veto_pick_types_bool_exp!]
  description: String_comparison_exp
  match_veto_picks: match_map_veto_picks_bool_exp
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "e_veto_pick_types"
"""
enum e_veto_pick_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_veto_pick_type_pkey
}

enum e_veto_pick_types_enum {
  """Ban"""
  Ban

  """Decider"""
  Decider

  """Pick"""
  Pick

  """Side"""
  Side
}

"""
Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'.
"""
input e_veto_pick_types_enum_comparison_exp {
  _eq: e_veto_pick_types_enum
  _in: [e_veto_pick_types_enum!]
  _is_null: Boolean
  _neq: e_veto_pick_types_enum
  _nin: [e_veto_pick_types_enum!]
}

"""
input type for inserting data into table "e_veto_pick_types"
"""
input e_veto_pick_types_insert_input {
  description: String
  match_veto_picks: match_map_veto_picks_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type e_veto_pick_types_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type e_veto_pick_types_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "e_veto_pick_types"
"""
type e_veto_pick_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [e_veto_pick_types!]!
}

"""
on_conflict condition type for table "e_veto_pick_types"
"""
input e_veto_pick_types_on_conflict {
  constraint: e_veto_pick_types_constraint!
  update_columns: [e_veto_pick_types_update_column!]! = []
  where: e_veto_pick_types_bool_exp
}

"""Ordering options when selecting data from "e_veto_pick_types"."""
input e_veto_pick_types_order_by {
  description: order_by
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: e_veto_pick_types"""
input e_veto_pick_types_pk_columns_input {
  value: String!
}

"""
select columns of table "e_veto_pick_types"
"""
enum e_veto_pick_types_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "e_veto_pick_types"
"""
input e_veto_pick_types_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "e_veto_pick_types"
"""
input e_veto_pick_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: e_veto_pick_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input e_veto_pick_types_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "e_veto_pick_types"
"""
enum e_veto_pick_types_update_column {
  """column name"""
  description

  """column name"""
  value
}

input e_veto_pick_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: e_veto_pick_types_set_input

  """filter the rows which have to be updated"""
  where: e_veto_pick_types_bool_exp!
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "friends"
"""
type friends {
  """An object relationship"""
  e_status: e_friend_status!
  other_player_steam_id: bigint!
  player_steam_id: bigint!
  status: e_friend_status_enum!
}

"""
aggregated selection of "friends"
"""
type friends_aggregate {
  aggregate: friends_aggregate_fields
  nodes: [friends!]!
}

"""
aggregate fields of "friends"
"""
type friends_aggregate_fields {
  avg: friends_avg_fields
  count(columns: [friends_select_column!], distinct: Boolean): Int!
  max: friends_max_fields
  min: friends_min_fields
  stddev: friends_stddev_fields
  stddev_pop: friends_stddev_pop_fields
  stddev_samp: friends_stddev_samp_fields
  sum: friends_sum_fields
  var_pop: friends_var_pop_fields
  var_samp: friends_var_samp_fields
  variance: friends_variance_fields
}

"""aggregate avg on columns"""
type friends_avg_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""
Boolean expression to filter rows from the table "friends". All fields are combined with a logical 'AND'.
"""
input friends_bool_exp {
  _and: [friends_bool_exp!]
  _not: friends_bool_exp
  _or: [friends_bool_exp!]
  e_status: e_friend_status_bool_exp
  other_player_steam_id: bigint_comparison_exp
  player_steam_id: bigint_comparison_exp
  status: e_friend_status_enum_comparison_exp
}

"""
unique or primary key constraints on table "friends"
"""
enum friends_constraint {
  """
  unique or primary key constraint on columns "player_steam_id", "other_player_steam_id"
  """
  friends_pkey
}

"""
input type for incrementing numeric columns in table "friends"
"""
input friends_inc_input {
  other_player_steam_id: bigint
  player_steam_id: bigint
}

"""
input type for inserting data into table "friends"
"""
input friends_insert_input {
  e_status: e_friend_status_obj_rel_insert_input
  other_player_steam_id: bigint
  player_steam_id: bigint
  status: e_friend_status_enum
}

"""aggregate max on columns"""
type friends_max_fields {
  other_player_steam_id: bigint
  player_steam_id: bigint
}

"""aggregate min on columns"""
type friends_min_fields {
  other_player_steam_id: bigint
  player_steam_id: bigint
}

"""
response of any mutation on the table "friends"
"""
type friends_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [friends!]!
}

"""
on_conflict condition type for table "friends"
"""
input friends_on_conflict {
  constraint: friends_constraint!
  update_columns: [friends_update_column!]! = []
  where: friends_bool_exp
}

"""Ordering options when selecting data from "friends"."""
input friends_order_by {
  e_status: e_friend_status_order_by
  other_player_steam_id: order_by
  player_steam_id: order_by
  status: order_by
}

"""primary key columns input for table: friends"""
input friends_pk_columns_input {
  other_player_steam_id: bigint!
  player_steam_id: bigint!
}

"""
select columns of table "friends"
"""
enum friends_select_column {
  """column name"""
  other_player_steam_id

  """column name"""
  player_steam_id

  """column name"""
  status
}

"""
input type for updating data in table "friends"
"""
input friends_set_input {
  other_player_steam_id: bigint
  player_steam_id: bigint
  status: e_friend_status_enum
}

"""aggregate stddev on columns"""
type friends_stddev_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""aggregate stddev_pop on columns"""
type friends_stddev_pop_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""aggregate stddev_samp on columns"""
type friends_stddev_samp_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""
Streaming cursor of the table "friends"
"""
input friends_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: friends_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input friends_stream_cursor_value_input {
  other_player_steam_id: bigint
  player_steam_id: bigint
  status: e_friend_status_enum
}

"""aggregate sum on columns"""
type friends_sum_fields {
  other_player_steam_id: bigint
  player_steam_id: bigint
}

"""
update columns of table "friends"
"""
enum friends_update_column {
  """column name"""
  other_player_steam_id

  """column name"""
  player_steam_id

  """column name"""
  status
}

input friends_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: friends_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: friends_set_input

  """filter the rows which have to be updated"""
  where: friends_bool_exp!
}

"""aggregate var_pop on columns"""
type friends_var_pop_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""aggregate var_samp on columns"""
type friends_var_samp_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""aggregate variance on columns"""
type friends_variance_fields {
  other_player_steam_id: Float
  player_steam_id: Float
}

"""
columns and relationships of "game_server_nodes"
"""
type game_server_nodes {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Int

  """An object relationship"""
  e_region: server_regions

  """An object relationship"""
  e_status: e_game_server_node_statuses
  enabled: Boolean!
  end_port_range: Int
  id: String!
  label: String
  lan_ip: inet
  node_ip: inet
  public_ip: inet
  region: String

  """An array relationship"""
  servers(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): [servers!]!

  """An aggregate relationship"""
  servers_aggregate(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): servers_aggregate!
  start_port_range: Int
  status: e_game_server_node_statuses_enum
  supports_cpu_pinning: Boolean!
  supports_low_latency: Boolean!
  token: String

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
  update_status: String
}

"""
aggregated selection of "game_server_nodes"
"""
type game_server_nodes_aggregate {
  aggregate: game_server_nodes_aggregate_fields
  nodes: [game_server_nodes!]!
}

input game_server_nodes_aggregate_bool_exp {
  bool_and: game_server_nodes_aggregate_bool_exp_bool_and
  bool_or: game_server_nodes_aggregate_bool_exp_bool_or
  count: game_server_nodes_aggregate_bool_exp_count
}

input game_server_nodes_aggregate_bool_exp_bool_and {
  arguments: game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: game_server_nodes_bool_exp
  predicate: Boolean_comparison_exp!
}

input game_server_nodes_aggregate_bool_exp_bool_or {
  arguments: game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: game_server_nodes_bool_exp
  predicate: Boolean_comparison_exp!
}

input game_server_nodes_aggregate_bool_exp_count {
  arguments: [game_server_nodes_select_column!]
  distinct: Boolean
  filter: game_server_nodes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "game_server_nodes"
"""
type game_server_nodes_aggregate_fields {
  avg: game_server_nodes_avg_fields
  count(columns: [game_server_nodes_select_column!], distinct: Boolean): Int!
  max: game_server_nodes_max_fields
  min: game_server_nodes_min_fields
  stddev: game_server_nodes_stddev_fields
  stddev_pop: game_server_nodes_stddev_pop_fields
  stddev_samp: game_server_nodes_stddev_samp_fields
  sum: game_server_nodes_sum_fields
  var_pop: game_server_nodes_var_pop_fields
  var_samp: game_server_nodes_var_samp_fields
  variance: game_server_nodes_variance_fields
}

"""
order by aggregate values of table "game_server_nodes"
"""
input game_server_nodes_aggregate_order_by {
  avg: game_server_nodes_avg_order_by
  count: order_by
  max: game_server_nodes_max_order_by
  min: game_server_nodes_min_order_by
  stddev: game_server_nodes_stddev_order_by
  stddev_pop: game_server_nodes_stddev_pop_order_by
  stddev_samp: game_server_nodes_stddev_samp_order_by
  sum: game_server_nodes_sum_order_by
  var_pop: game_server_nodes_var_pop_order_by
  var_samp: game_server_nodes_var_samp_order_by
  variance: game_server_nodes_variance_order_by
}

"""
input type for inserting array relation for remote table "game_server_nodes"
"""
input game_server_nodes_arr_rel_insert_input {
  data: [game_server_nodes_insert_input!]!

  """upsert condition"""
  on_conflict: game_server_nodes_on_conflict
}

"""aggregate avg on columns"""
type game_server_nodes_avg_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by avg() on columns of table "game_server_nodes"
"""
input game_server_nodes_avg_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""
Boolean expression to filter rows from the table "game_server_nodes". All fields are combined with a logical 'AND'.
"""
input game_server_nodes_bool_exp {
  _and: [game_server_nodes_bool_exp!]
  _not: game_server_nodes_bool_exp
  _or: [game_server_nodes_bool_exp!]
  available_server_count: Int_comparison_exp
  build_id: Int_comparison_exp
  e_region: server_regions_bool_exp
  e_status: e_game_server_node_statuses_bool_exp
  enabled: Boolean_comparison_exp
  end_port_range: Int_comparison_exp
  id: String_comparison_exp
  label: String_comparison_exp
  lan_ip: inet_comparison_exp
  node_ip: inet_comparison_exp
  public_ip: inet_comparison_exp
  region: String_comparison_exp
  servers: servers_bool_exp
  servers_aggregate: servers_aggregate_bool_exp
  start_port_range: Int_comparison_exp
  status: e_game_server_node_statuses_enum_comparison_exp
  supports_cpu_pinning: Boolean_comparison_exp
  supports_low_latency: Boolean_comparison_exp
  token: String_comparison_exp
  total_server_count: Int_comparison_exp
  update_status: String_comparison_exp
}

"""
unique or primary key constraints on table "game_server_nodes"
"""
enum game_server_nodes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  game_server_nodes_pkey
}

"""
input type for incrementing numeric columns in table "game_server_nodes"
"""
input game_server_nodes_inc_input {
  build_id: Int
  end_port_range: Int
  start_port_range: Int
}

"""
input type for inserting data into table "game_server_nodes"
"""
input game_server_nodes_insert_input {
  build_id: Int
  e_region: server_regions_obj_rel_insert_input
  e_status: e_game_server_node_statuses_obj_rel_insert_input
  enabled: Boolean
  end_port_range: Int
  id: String
  label: String
  lan_ip: inet
  node_ip: inet
  public_ip: inet
  region: String
  servers: servers_arr_rel_insert_input
  start_port_range: Int
  status: e_game_server_node_statuses_enum
  supports_cpu_pinning: Boolean
  supports_low_latency: Boolean
  token: String
  update_status: String
}

"""aggregate max on columns"""
type game_server_nodes_max_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Int
  end_port_range: Int
  id: String
  label: String
  region: String
  start_port_range: Int
  token: String

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
  update_status: String
}

"""
order by max() on columns of table "game_server_nodes"
"""
input game_server_nodes_max_order_by {
  build_id: order_by
  end_port_range: order_by
  id: order_by
  label: order_by
  region: order_by
  start_port_range: order_by
  token: order_by
  update_status: order_by
}

"""aggregate min on columns"""
type game_server_nodes_min_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Int
  end_port_range: Int
  id: String
  label: String
  region: String
  start_port_range: Int
  token: String

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
  update_status: String
}

"""
order by min() on columns of table "game_server_nodes"
"""
input game_server_nodes_min_order_by {
  build_id: order_by
  end_port_range: order_by
  id: order_by
  label: order_by
  region: order_by
  start_port_range: order_by
  token: order_by
  update_status: order_by
}

"""
response of any mutation on the table "game_server_nodes"
"""
type game_server_nodes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [game_server_nodes!]!
}

"""
input type for inserting object relation for remote table "game_server_nodes"
"""
input game_server_nodes_obj_rel_insert_input {
  data: game_server_nodes_insert_input!

  """upsert condition"""
  on_conflict: game_server_nodes_on_conflict
}

"""
on_conflict condition type for table "game_server_nodes"
"""
input game_server_nodes_on_conflict {
  constraint: game_server_nodes_constraint!
  update_columns: [game_server_nodes_update_column!]! = []
  where: game_server_nodes_bool_exp
}

"""Ordering options when selecting data from "game_server_nodes"."""
input game_server_nodes_order_by {
  available_server_count: order_by
  build_id: order_by
  e_region: server_regions_order_by
  e_status: e_game_server_node_statuses_order_by
  enabled: order_by
  end_port_range: order_by
  id: order_by
  label: order_by
  lan_ip: order_by
  node_ip: order_by
  public_ip: order_by
  region: order_by
  servers_aggregate: servers_aggregate_order_by
  start_port_range: order_by
  status: order_by
  supports_cpu_pinning: order_by
  supports_low_latency: order_by
  token: order_by
  total_server_count: order_by
  update_status: order_by
}

"""primary key columns input for table: game_server_nodes"""
input game_server_nodes_pk_columns_input {
  id: String!
}

"""
select columns of table "game_server_nodes"
"""
enum game_server_nodes_select_column {
  """column name"""
  build_id

  """column name"""
  enabled

  """column name"""
  end_port_range

  """column name"""
  id

  """column name"""
  label

  """column name"""
  lan_ip

  """column name"""
  node_ip

  """column name"""
  public_ip

  """column name"""
  region

  """column name"""
  start_port_range

  """column name"""
  status

  """column name"""
  supports_cpu_pinning

  """column name"""
  supports_low_latency

  """column name"""
  token

  """column name"""
  update_status
}

"""
select "game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "game_server_nodes"
"""
enum game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  enabled

  """column name"""
  supports_cpu_pinning

  """column name"""
  supports_low_latency
}

"""
select "game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "game_server_nodes"
"""
enum game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  enabled

  """column name"""
  supports_cpu_pinning

  """column name"""
  supports_low_latency
}

"""
input type for updating data in table "game_server_nodes"
"""
input game_server_nodes_set_input {
  build_id: Int
  enabled: Boolean
  end_port_range: Int
  id: String
  label: String
  lan_ip: inet
  node_ip: inet
  public_ip: inet
  region: String
  start_port_range: Int
  status: e_game_server_node_statuses_enum
  supports_cpu_pinning: Boolean
  supports_low_latency: Boolean
  token: String
  update_status: String
}

"""aggregate stddev on columns"""
type game_server_nodes_stddev_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by stddev() on columns of table "game_server_nodes"
"""
input game_server_nodes_stddev_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""aggregate stddev_pop on columns"""
type game_server_nodes_stddev_pop_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by stddev_pop() on columns of table "game_server_nodes"
"""
input game_server_nodes_stddev_pop_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""aggregate stddev_samp on columns"""
type game_server_nodes_stddev_samp_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by stddev_samp() on columns of table "game_server_nodes"
"""
input game_server_nodes_stddev_samp_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""
Streaming cursor of the table "game_server_nodes"
"""
input game_server_nodes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: game_server_nodes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input game_server_nodes_stream_cursor_value_input {
  build_id: Int
  enabled: Boolean
  end_port_range: Int
  id: String
  label: String
  lan_ip: inet
  node_ip: inet
  public_ip: inet
  region: String
  start_port_range: Int
  status: e_game_server_node_statuses_enum
  supports_cpu_pinning: Boolean
  supports_low_latency: Boolean
  token: String
  update_status: String
}

"""aggregate sum on columns"""
type game_server_nodes_sum_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Int
  end_port_range: Int
  start_port_range: Int

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by sum() on columns of table "game_server_nodes"
"""
input game_server_nodes_sum_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""
update columns of table "game_server_nodes"
"""
enum game_server_nodes_update_column {
  """column name"""
  build_id

  """column name"""
  enabled

  """column name"""
  end_port_range

  """column name"""
  id

  """column name"""
  label

  """column name"""
  lan_ip

  """column name"""
  node_ip

  """column name"""
  public_ip

  """column name"""
  region

  """column name"""
  start_port_range

  """column name"""
  status

  """column name"""
  supports_cpu_pinning

  """column name"""
  supports_low_latency

  """column name"""
  token

  """column name"""
  update_status
}

input game_server_nodes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: game_server_nodes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: game_server_nodes_set_input

  """filter the rows which have to be updated"""
  where: game_server_nodes_bool_exp!
}

"""aggregate var_pop on columns"""
type game_server_nodes_var_pop_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by var_pop() on columns of table "game_server_nodes"
"""
input game_server_nodes_var_pop_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""aggregate var_samp on columns"""
type game_server_nodes_var_samp_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by var_samp() on columns of table "game_server_nodes"
"""
input game_server_nodes_var_samp_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

"""aggregate variance on columns"""
type game_server_nodes_variance_fields {
  """
  A computed field, executes function "available_node_server_count"
  """
  available_server_count: Int
  build_id: Float
  end_port_range: Float
  start_port_range: Float

  """
  A computed field, executes function "total_node_server_count"
  """
  total_server_count: Int
}

"""
order by variance() on columns of table "game_server_nodes"
"""
input game_server_nodes_variance_order_by {
  build_id: order_by
  end_port_range: order_by
  start_port_range: order_by
}

scalar inet

"""
Boolean expression to compare columns of type "inet". All fields are combined with logical 'AND'.
"""
input inet_comparison_exp {
  _eq: inet
  _gt: inet
  _gte: inet
  _in: [inet!]
  _is_null: Boolean
  _lt: inet
  _lte: inet
  _neq: inet
  _nin: [inet!]
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "lobbies"
"""
type lobbies {
  access: e_lobby_access_enum!
  created_at: timestamptz!

  """An object relationship"""
  e_lobby_access: e_lobby_access!
  id: uuid!

  """An array relationship"""
  players(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): [lobby_players!]!

  """An aggregate relationship"""
  players_aggregate(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): lobby_players_aggregate!
}

"""
aggregated selection of "lobbies"
"""
type lobbies_aggregate {
  aggregate: lobbies_aggregate_fields
  nodes: [lobbies!]!
}

"""
aggregate fields of "lobbies"
"""
type lobbies_aggregate_fields {
  count(columns: [lobbies_select_column!], distinct: Boolean): Int!
  max: lobbies_max_fields
  min: lobbies_min_fields
}

"""
Boolean expression to filter rows from the table "lobbies". All fields are combined with a logical 'AND'.
"""
input lobbies_bool_exp {
  _and: [lobbies_bool_exp!]
  _not: lobbies_bool_exp
  _or: [lobbies_bool_exp!]
  access: e_lobby_access_enum_comparison_exp
  created_at: timestamptz_comparison_exp
  e_lobby_access: e_lobby_access_bool_exp
  id: uuid_comparison_exp
  players: lobby_players_bool_exp
  players_aggregate: lobby_players_aggregate_bool_exp
}

"""
unique or primary key constraints on table "lobbies"
"""
enum lobbies_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  lobbies_pkey
}

"""
input type for inserting data into table "lobbies"
"""
input lobbies_insert_input {
  access: e_lobby_access_enum
  created_at: timestamptz
  e_lobby_access: e_lobby_access_obj_rel_insert_input
  id: uuid
  players: lobby_players_arr_rel_insert_input
}

"""aggregate max on columns"""
type lobbies_max_fields {
  created_at: timestamptz
  id: uuid
}

"""aggregate min on columns"""
type lobbies_min_fields {
  created_at: timestamptz
  id: uuid
}

"""
response of any mutation on the table "lobbies"
"""
type lobbies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lobbies!]!
}

"""
input type for inserting object relation for remote table "lobbies"
"""
input lobbies_obj_rel_insert_input {
  data: lobbies_insert_input!

  """upsert condition"""
  on_conflict: lobbies_on_conflict
}

"""
on_conflict condition type for table "lobbies"
"""
input lobbies_on_conflict {
  constraint: lobbies_constraint!
  update_columns: [lobbies_update_column!]! = []
  where: lobbies_bool_exp
}

"""Ordering options when selecting data from "lobbies"."""
input lobbies_order_by {
  access: order_by
  created_at: order_by
  e_lobby_access: e_lobby_access_order_by
  id: order_by
  players_aggregate: lobby_players_aggregate_order_by
}

"""primary key columns input for table: lobbies"""
input lobbies_pk_columns_input {
  id: uuid!
}

"""
select columns of table "lobbies"
"""
enum lobbies_select_column {
  """column name"""
  access

  """column name"""
  created_at

  """column name"""
  id
}

"""
input type for updating data in table "lobbies"
"""
input lobbies_set_input {
  access: e_lobby_access_enum
  created_at: timestamptz
  id: uuid
}

"""
Streaming cursor of the table "lobbies"
"""
input lobbies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lobbies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lobbies_stream_cursor_value_input {
  access: e_lobby_access_enum
  created_at: timestamptz
  id: uuid
}

"""
update columns of table "lobbies"
"""
enum lobbies_update_column {
  """column name"""
  access

  """column name"""
  created_at

  """column name"""
  id
}

input lobbies_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lobbies_set_input

  """filter the rows which have to be updated"""
  where: lobbies_bool_exp!
}

"""
columns and relationships of "lobby_players"
"""
type lobby_players {
  captain: Boolean!
  invited_by_steam_id: bigint

  """An object relationship"""
  lobby: lobbies!
  lobby_id: uuid!

  """An object relationship"""
  player: players!
  status: e_lobby_player_status_enum
  steam_id: bigint!
}

"""
aggregated selection of "lobby_players"
"""
type lobby_players_aggregate {
  aggregate: lobby_players_aggregate_fields
  nodes: [lobby_players!]!
}

input lobby_players_aggregate_bool_exp {
  bool_and: lobby_players_aggregate_bool_exp_bool_and
  bool_or: lobby_players_aggregate_bool_exp_bool_or
  count: lobby_players_aggregate_bool_exp_count
}

input lobby_players_aggregate_bool_exp_bool_and {
  arguments: lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: lobby_players_bool_exp
  predicate: Boolean_comparison_exp!
}

input lobby_players_aggregate_bool_exp_bool_or {
  arguments: lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: lobby_players_bool_exp
  predicate: Boolean_comparison_exp!
}

input lobby_players_aggregate_bool_exp_count {
  arguments: [lobby_players_select_column!]
  distinct: Boolean
  filter: lobby_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "lobby_players"
"""
type lobby_players_aggregate_fields {
  avg: lobby_players_avg_fields
  count(columns: [lobby_players_select_column!], distinct: Boolean): Int!
  max: lobby_players_max_fields
  min: lobby_players_min_fields
  stddev: lobby_players_stddev_fields
  stddev_pop: lobby_players_stddev_pop_fields
  stddev_samp: lobby_players_stddev_samp_fields
  sum: lobby_players_sum_fields
  var_pop: lobby_players_var_pop_fields
  var_samp: lobby_players_var_samp_fields
  variance: lobby_players_variance_fields
}

"""
order by aggregate values of table "lobby_players"
"""
input lobby_players_aggregate_order_by {
  avg: lobby_players_avg_order_by
  count: order_by
  max: lobby_players_max_order_by
  min: lobby_players_min_order_by
  stddev: lobby_players_stddev_order_by
  stddev_pop: lobby_players_stddev_pop_order_by
  stddev_samp: lobby_players_stddev_samp_order_by
  sum: lobby_players_sum_order_by
  var_pop: lobby_players_var_pop_order_by
  var_samp: lobby_players_var_samp_order_by
  variance: lobby_players_variance_order_by
}

"""
input type for inserting array relation for remote table "lobby_players"
"""
input lobby_players_arr_rel_insert_input {
  data: [lobby_players_insert_input!]!

  """upsert condition"""
  on_conflict: lobby_players_on_conflict
}

"""aggregate avg on columns"""
type lobby_players_avg_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by avg() on columns of table "lobby_players"
"""
input lobby_players_avg_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "lobby_players". All fields are combined with a logical 'AND'.
"""
input lobby_players_bool_exp {
  _and: [lobby_players_bool_exp!]
  _not: lobby_players_bool_exp
  _or: [lobby_players_bool_exp!]
  captain: Boolean_comparison_exp
  invited_by_steam_id: bigint_comparison_exp
  lobby: lobbies_bool_exp
  lobby_id: uuid_comparison_exp
  player: players_bool_exp
  status: e_lobby_player_status_enum_comparison_exp
  steam_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "lobby_players"
"""
enum lobby_players_constraint {
  """
  unique or primary key constraint on columns "lobby_id", "steam_id"
  """
  lobby_players_pkey
}

"""
input type for incrementing numeric columns in table "lobby_players"
"""
input lobby_players_inc_input {
  invited_by_steam_id: bigint
  steam_id: bigint
}

"""
input type for inserting data into table "lobby_players"
"""
input lobby_players_insert_input {
  captain: Boolean
  invited_by_steam_id: bigint
  lobby: lobbies_obj_rel_insert_input
  lobby_id: uuid
  player: players_obj_rel_insert_input
  status: e_lobby_player_status_enum
  steam_id: bigint
}

"""aggregate max on columns"""
type lobby_players_max_fields {
  invited_by_steam_id: bigint
  lobby_id: uuid
  steam_id: bigint
}

"""
order by max() on columns of table "lobby_players"
"""
input lobby_players_max_order_by {
  invited_by_steam_id: order_by
  lobby_id: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type lobby_players_min_fields {
  invited_by_steam_id: bigint
  lobby_id: uuid
  steam_id: bigint
}

"""
order by min() on columns of table "lobby_players"
"""
input lobby_players_min_order_by {
  invited_by_steam_id: order_by
  lobby_id: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "lobby_players"
"""
type lobby_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lobby_players!]!
}

"""
on_conflict condition type for table "lobby_players"
"""
input lobby_players_on_conflict {
  constraint: lobby_players_constraint!
  update_columns: [lobby_players_update_column!]! = []
  where: lobby_players_bool_exp
}

"""Ordering options when selecting data from "lobby_players"."""
input lobby_players_order_by {
  captain: order_by
  invited_by_steam_id: order_by
  lobby: lobbies_order_by
  lobby_id: order_by
  player: players_order_by
  status: order_by
  steam_id: order_by
}

"""primary key columns input for table: lobby_players"""
input lobby_players_pk_columns_input {
  lobby_id: uuid!
  steam_id: bigint!
}

"""
select columns of table "lobby_players"
"""
enum lobby_players_select_column {
  """column name"""
  captain

  """column name"""
  invited_by_steam_id

  """column name"""
  lobby_id

  """column name"""
  status

  """column name"""
  steam_id
}

"""
select "lobby_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "lobby_players"
"""
enum lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  captain
}

"""
select "lobby_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "lobby_players"
"""
enum lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  captain
}

"""
input type for updating data in table "lobby_players"
"""
input lobby_players_set_input {
  captain: Boolean
  invited_by_steam_id: bigint
  lobby_id: uuid
  status: e_lobby_player_status_enum
  steam_id: bigint
}

"""aggregate stddev on columns"""
type lobby_players_stddev_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "lobby_players"
"""
input lobby_players_stddev_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type lobby_players_stddev_pop_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "lobby_players"
"""
input lobby_players_stddev_pop_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type lobby_players_stddev_samp_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "lobby_players"
"""
input lobby_players_stddev_samp_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "lobby_players"
"""
input lobby_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lobby_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lobby_players_stream_cursor_value_input {
  captain: Boolean
  invited_by_steam_id: bigint
  lobby_id: uuid
  status: e_lobby_player_status_enum
  steam_id: bigint
}

"""aggregate sum on columns"""
type lobby_players_sum_fields {
  invited_by_steam_id: bigint
  steam_id: bigint
}

"""
order by sum() on columns of table "lobby_players"
"""
input lobby_players_sum_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
update columns of table "lobby_players"
"""
enum lobby_players_update_column {
  """column name"""
  captain

  """column name"""
  invited_by_steam_id

  """column name"""
  lobby_id

  """column name"""
  status

  """column name"""
  steam_id
}

input lobby_players_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: lobby_players_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: lobby_players_set_input

  """filter the rows which have to be updated"""
  where: lobby_players_bool_exp!
}

"""aggregate var_pop on columns"""
type lobby_players_var_pop_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "lobby_players"
"""
input lobby_players_var_pop_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type lobby_players_var_samp_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "lobby_players"
"""
input lobby_players_var_samp_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type lobby_players_variance_fields {
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by variance() on columns of table "lobby_players"
"""
input lobby_players_variance_order_by {
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
columns and relationships of "map_pools"
"""
type map_pools {
  """An object relationship"""
  e_type: e_map_pool_types!
  enabled: Boolean!
  id: uuid!

  """An array relationship"""
  maps(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): [v_pool_maps!]!

  """An aggregate relationship"""
  maps_aggregate(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): v_pool_maps_aggregate!
  seed: Boolean!
  type: e_map_pool_types_enum!
}

"""
aggregated selection of "map_pools"
"""
type map_pools_aggregate {
  aggregate: map_pools_aggregate_fields
  nodes: [map_pools!]!
}

"""
aggregate fields of "map_pools"
"""
type map_pools_aggregate_fields {
  count(columns: [map_pools_select_column!], distinct: Boolean): Int!
  max: map_pools_max_fields
  min: map_pools_min_fields
}

"""
Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'.
"""
input map_pools_bool_exp {
  _and: [map_pools_bool_exp!]
  _not: map_pools_bool_exp
  _or: [map_pools_bool_exp!]
  e_type: e_map_pool_types_bool_exp
  enabled: Boolean_comparison_exp
  id: uuid_comparison_exp
  maps: v_pool_maps_bool_exp
  maps_aggregate: v_pool_maps_aggregate_bool_exp
  seed: Boolean_comparison_exp
  type: e_map_pool_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "map_pools"
"""
enum map_pools_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  map_pools_pkey
}

"""
input type for inserting data into table "map_pools"
"""
input map_pools_insert_input {
  e_type: e_map_pool_types_obj_rel_insert_input
  enabled: Boolean
  id: uuid
  maps: v_pool_maps_arr_rel_insert_input
  seed: Boolean
  type: e_map_pool_types_enum
}

"""aggregate max on columns"""
type map_pools_max_fields {
  id: uuid
}

"""aggregate min on columns"""
type map_pools_min_fields {
  id: uuid
}

"""
response of any mutation on the table "map_pools"
"""
type map_pools_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [map_pools!]!
}

"""
input type for inserting object relation for remote table "map_pools"
"""
input map_pools_obj_rel_insert_input {
  data: map_pools_insert_input!

  """upsert condition"""
  on_conflict: map_pools_on_conflict
}

"""
on_conflict condition type for table "map_pools"
"""
input map_pools_on_conflict {
  constraint: map_pools_constraint!
  update_columns: [map_pools_update_column!]! = []
  where: map_pools_bool_exp
}

"""Ordering options when selecting data from "map_pools"."""
input map_pools_order_by {
  e_type: e_map_pool_types_order_by
  enabled: order_by
  id: order_by
  maps_aggregate: v_pool_maps_aggregate_order_by
  seed: order_by
  type: order_by
}

"""primary key columns input for table: map_pools"""
input map_pools_pk_columns_input {
  id: uuid!
}

"""
select columns of table "map_pools"
"""
enum map_pools_select_column {
  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  seed

  """column name"""
  type
}

"""
input type for updating data in table "map_pools"
"""
input map_pools_set_input {
  enabled: Boolean
  id: uuid
  seed: Boolean
  type: e_map_pool_types_enum
}

"""
Streaming cursor of the table "map_pools"
"""
input map_pools_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: map_pools_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input map_pools_stream_cursor_value_input {
  enabled: Boolean
  id: uuid
  seed: Boolean
  type: e_map_pool_types_enum
}

"""
update columns of table "map_pools"
"""
enum map_pools_update_column {
  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  seed

  """column name"""
  type
}

input map_pools_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: map_pools_set_input

  """filter the rows which have to be updated"""
  where: map_pools_bool_exp!
}

"""
columns and relationships of "maps"
"""
type maps {
  active_pool: Boolean!

  """An object relationship"""
  e_match_type: e_match_types!
  enabled: Boolean!
  id: uuid!
  label: String

  """An array relationship"""
  match_maps(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!

  """An array relationship"""
  match_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An aggregate relationship"""
  match_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!
  name: String!
  patch: String
  poster: String
  type: e_match_types_enum!
  workshop_map_id: String
}

"""
aggregated selection of "maps"
"""
type maps_aggregate {
  aggregate: maps_aggregate_fields
  nodes: [maps!]!
}

input maps_aggregate_bool_exp {
  bool_and: maps_aggregate_bool_exp_bool_and
  bool_or: maps_aggregate_bool_exp_bool_or
  count: maps_aggregate_bool_exp_count
}

input maps_aggregate_bool_exp_bool_and {
  arguments: maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input maps_aggregate_bool_exp_bool_or {
  arguments: maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input maps_aggregate_bool_exp_count {
  arguments: [maps_select_column!]
  distinct: Boolean
  filter: maps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "maps"
"""
type maps_aggregate_fields {
  count(columns: [maps_select_column!], distinct: Boolean): Int!
  max: maps_max_fields
  min: maps_min_fields
}

"""
order by aggregate values of table "maps"
"""
input maps_aggregate_order_by {
  count: order_by
  max: maps_max_order_by
  min: maps_min_order_by
}

"""
input type for inserting array relation for remote table "maps"
"""
input maps_arr_rel_insert_input {
  data: [maps_insert_input!]!

  """upsert condition"""
  on_conflict: maps_on_conflict
}

"""
Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'.
"""
input maps_bool_exp {
  _and: [maps_bool_exp!]
  _not: maps_bool_exp
  _or: [maps_bool_exp!]
  active_pool: Boolean_comparison_exp
  e_match_type: e_match_types_bool_exp
  enabled: Boolean_comparison_exp
  id: uuid_comparison_exp
  label: String_comparison_exp
  match_maps: match_maps_bool_exp
  match_maps_aggregate: match_maps_aggregate_bool_exp
  match_veto_picks: match_map_veto_picks_bool_exp
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_bool_exp
  name: String_comparison_exp
  patch: String_comparison_exp
  poster: String_comparison_exp
  type: e_match_types_enum_comparison_exp
  workshop_map_id: String_comparison_exp
}

"""
unique or primary key constraints on table "maps"
"""
enum maps_constraint {
  """
  unique or primary key constraint on columns "type", "name"
  """
  maps_name_type_key

  """
  unique or primary key constraint on columns "id"
  """
  maps_pkey
}

"""
input type for inserting data into table "maps"
"""
input maps_insert_input {
  active_pool: Boolean
  e_match_type: e_match_types_obj_rel_insert_input
  enabled: Boolean
  id: uuid
  label: String
  match_maps: match_maps_arr_rel_insert_input
  match_veto_picks: match_map_veto_picks_arr_rel_insert_input
  name: String
  patch: String
  poster: String
  type: e_match_types_enum
  workshop_map_id: String
}

"""aggregate max on columns"""
type maps_max_fields {
  id: uuid
  label: String
  name: String
  patch: String
  poster: String
  workshop_map_id: String
}

"""
order by max() on columns of table "maps"
"""
input maps_max_order_by {
  id: order_by
  label: order_by
  name: order_by
  patch: order_by
  poster: order_by
  workshop_map_id: order_by
}

"""aggregate min on columns"""
type maps_min_fields {
  id: uuid
  label: String
  name: String
  patch: String
  poster: String
  workshop_map_id: String
}

"""
order by min() on columns of table "maps"
"""
input maps_min_order_by {
  id: order_by
  label: order_by
  name: order_by
  patch: order_by
  poster: order_by
  workshop_map_id: order_by
}

"""
response of any mutation on the table "maps"
"""
type maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [maps!]!
}

"""
input type for inserting object relation for remote table "maps"
"""
input maps_obj_rel_insert_input {
  data: maps_insert_input!

  """upsert condition"""
  on_conflict: maps_on_conflict
}

"""
on_conflict condition type for table "maps"
"""
input maps_on_conflict {
  constraint: maps_constraint!
  update_columns: [maps_update_column!]! = []
  where: maps_bool_exp
}

"""Ordering options when selecting data from "maps"."""
input maps_order_by {
  active_pool: order_by
  e_match_type: e_match_types_order_by
  enabled: order_by
  id: order_by
  label: order_by
  match_maps_aggregate: match_maps_aggregate_order_by
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_order_by
  name: order_by
  patch: order_by
  poster: order_by
  type: order_by
  workshop_map_id: order_by
}

"""primary key columns input for table: maps"""
input maps_pk_columns_input {
  id: uuid!
}

"""
select columns of table "maps"
"""
enum maps_select_column {
  """column name"""
  active_pool

  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  label

  """column name"""
  name

  """column name"""
  patch

  """column name"""
  poster

  """column name"""
  type

  """column name"""
  workshop_map_id
}

"""
select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps"
"""
enum maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  active_pool

  """column name"""
  enabled
}

"""
select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps"
"""
enum maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  active_pool

  """column name"""
  enabled
}

"""
input type for updating data in table "maps"
"""
input maps_set_input {
  active_pool: Boolean
  enabled: Boolean
  id: uuid
  label: String
  name: String
  patch: String
  poster: String
  type: e_match_types_enum
  workshop_map_id: String
}

"""
Streaming cursor of the table "maps"
"""
input maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input maps_stream_cursor_value_input {
  active_pool: Boolean
  enabled: Boolean
  id: uuid
  label: String
  name: String
  patch: String
  poster: String
  type: e_match_types_enum
  workshop_map_id: String
}

"""
update columns of table "maps"
"""
enum maps_update_column {
  """column name"""
  active_pool

  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  label

  """column name"""
  name

  """column name"""
  patch

  """column name"""
  poster

  """column name"""
  type

  """column name"""
  workshop_map_id
}

input maps_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: maps_set_input

  """filter the rows which have to be updated"""
  where: maps_bool_exp!
}

"""
columns and relationships of "match_invites"
"""
type match_invites {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  invited_by: players!
  invited_by_player_steam_id: bigint!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  player: players!
  steam_id: bigint!
}

"""
aggregated selection of "match_invites"
"""
type match_invites_aggregate {
  aggregate: match_invites_aggregate_fields
  nodes: [match_invites!]!
}

input match_invites_aggregate_bool_exp {
  count: match_invites_aggregate_bool_exp_count
}

input match_invites_aggregate_bool_exp_count {
  arguments: [match_invites_select_column!]
  distinct: Boolean
  filter: match_invites_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_invites"
"""
type match_invites_aggregate_fields {
  avg: match_invites_avg_fields
  count(columns: [match_invites_select_column!], distinct: Boolean): Int!
  max: match_invites_max_fields
  min: match_invites_min_fields
  stddev: match_invites_stddev_fields
  stddev_pop: match_invites_stddev_pop_fields
  stddev_samp: match_invites_stddev_samp_fields
  sum: match_invites_sum_fields
  var_pop: match_invites_var_pop_fields
  var_samp: match_invites_var_samp_fields
  variance: match_invites_variance_fields
}

"""
order by aggregate values of table "match_invites"
"""
input match_invites_aggregate_order_by {
  avg: match_invites_avg_order_by
  count: order_by
  max: match_invites_max_order_by
  min: match_invites_min_order_by
  stddev: match_invites_stddev_order_by
  stddev_pop: match_invites_stddev_pop_order_by
  stddev_samp: match_invites_stddev_samp_order_by
  sum: match_invites_sum_order_by
  var_pop: match_invites_var_pop_order_by
  var_samp: match_invites_var_samp_order_by
  variance: match_invites_variance_order_by
}

"""
input type for inserting array relation for remote table "match_invites"
"""
input match_invites_arr_rel_insert_input {
  data: [match_invites_insert_input!]!

  """upsert condition"""
  on_conflict: match_invites_on_conflict
}

"""aggregate avg on columns"""
type match_invites_avg_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by avg() on columns of table "match_invites"
"""
input match_invites_avg_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "match_invites". All fields are combined with a logical 'AND'.
"""
input match_invites_bool_exp {
  _and: [match_invites_bool_exp!]
  _not: match_invites_bool_exp
  _or: [match_invites_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  invited_by: players_bool_exp
  invited_by_player_steam_id: bigint_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "match_invites"
"""
enum match_invites_constraint {
  """
  unique or primary key constraint on columns "steam_id", "invited_by_player_steam_id", "match_id"
  """
  match_invites_match_id_invited_by_player_steam_id_steam_id_key

  """
  unique or primary key constraint on columns "id"
  """
  match_invites_pkey
}

"""
input type for incrementing numeric columns in table "match_invites"
"""
input match_invites_inc_input {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
input type for inserting data into table "match_invites"
"""
input match_invites_insert_input {
  created_at: timestamptz
  id: uuid
  invited_by: players_obj_rel_insert_input
  invited_by_player_steam_id: bigint
  match: matches_obj_rel_insert_input
  match_id: uuid
  player: players_obj_rel_insert_input
  steam_id: bigint
}

"""aggregate max on columns"""
type match_invites_max_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  match_id: uuid
  steam_id: bigint
}

"""
order by max() on columns of table "match_invites"
"""
input match_invites_max_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  match_id: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type match_invites_min_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  match_id: uuid
  steam_id: bigint
}

"""
order by min() on columns of table "match_invites"
"""
input match_invites_min_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  match_id: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "match_invites"
"""
type match_invites_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_invites!]!
}

"""
on_conflict condition type for table "match_invites"
"""
input match_invites_on_conflict {
  constraint: match_invites_constraint!
  update_columns: [match_invites_update_column!]! = []
  where: match_invites_bool_exp
}

"""Ordering options when selecting data from "match_invites"."""
input match_invites_order_by {
  created_at: order_by
  id: order_by
  invited_by: players_order_by
  invited_by_player_steam_id: order_by
  match: matches_order_by
  match_id: order_by
  player: players_order_by
  steam_id: order_by
}

"""primary key columns input for table: match_invites"""
input match_invites_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_invites"
"""
enum match_invites_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  match_id

  """column name"""
  steam_id
}

"""
input type for updating data in table "match_invites"
"""
input match_invites_set_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  match_id: uuid
  steam_id: bigint
}

"""aggregate stddev on columns"""
type match_invites_stddev_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "match_invites"
"""
input match_invites_stddev_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type match_invites_stddev_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "match_invites"
"""
input match_invites_stddev_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type match_invites_stddev_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "match_invites"
"""
input match_invites_stddev_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "match_invites"
"""
input match_invites_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_invites_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_invites_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  match_id: uuid
  steam_id: bigint
}

"""aggregate sum on columns"""
type match_invites_sum_fields {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
order by sum() on columns of table "match_invites"
"""
input match_invites_sum_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
update columns of table "match_invites"
"""
enum match_invites_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  match_id

  """column name"""
  steam_id
}

input match_invites_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_invites_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_invites_set_input

  """filter the rows which have to be updated"""
  where: match_invites_bool_exp!
}

"""aggregate var_pop on columns"""
type match_invites_var_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "match_invites"
"""
input match_invites_var_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type match_invites_var_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "match_invites"
"""
input match_invites_var_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type match_invites_variance_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by variance() on columns of table "match_invites"
"""
input match_invites_variance_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""relational table for assigning a players to a match and lineup"""
type match_lineup_players {
  captain: Boolean!
  checked_in: Boolean!
  discord_id: String
  id: uuid!

  """An object relationship"""
  lineup: match_lineups!
  match_lineup_id: uuid!
  placeholder_name: String

  """An object relationship"""
  player: players
  steam_id: bigint
}

"""
aggregated selection of "match_lineup_players"
"""
type match_lineup_players_aggregate {
  aggregate: match_lineup_players_aggregate_fields
  nodes: [match_lineup_players!]!
}

input match_lineup_players_aggregate_bool_exp {
  bool_and: match_lineup_players_aggregate_bool_exp_bool_and
  bool_or: match_lineup_players_aggregate_bool_exp_bool_or
  count: match_lineup_players_aggregate_bool_exp_count
}

input match_lineup_players_aggregate_bool_exp_bool_and {
  arguments: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: match_lineup_players_bool_exp
  predicate: Boolean_comparison_exp!
}

input match_lineup_players_aggregate_bool_exp_bool_or {
  arguments: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: match_lineup_players_bool_exp
  predicate: Boolean_comparison_exp!
}

input match_lineup_players_aggregate_bool_exp_count {
  arguments: [match_lineup_players_select_column!]
  distinct: Boolean
  filter: match_lineup_players_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_lineup_players"
"""
type match_lineup_players_aggregate_fields {
  avg: match_lineup_players_avg_fields
  count(columns: [match_lineup_players_select_column!], distinct: Boolean): Int!
  max: match_lineup_players_max_fields
  min: match_lineup_players_min_fields
  stddev: match_lineup_players_stddev_fields
  stddev_pop: match_lineup_players_stddev_pop_fields
  stddev_samp: match_lineup_players_stddev_samp_fields
  sum: match_lineup_players_sum_fields
  var_pop: match_lineup_players_var_pop_fields
  var_samp: match_lineup_players_var_samp_fields
  variance: match_lineup_players_variance_fields
}

"""
order by aggregate values of table "match_lineup_players"
"""
input match_lineup_players_aggregate_order_by {
  avg: match_lineup_players_avg_order_by
  count: order_by
  max: match_lineup_players_max_order_by
  min: match_lineup_players_min_order_by
  stddev: match_lineup_players_stddev_order_by
  stddev_pop: match_lineup_players_stddev_pop_order_by
  stddev_samp: match_lineup_players_stddev_samp_order_by
  sum: match_lineup_players_sum_order_by
  var_pop: match_lineup_players_var_pop_order_by
  var_samp: match_lineup_players_var_samp_order_by
  variance: match_lineup_players_variance_order_by
}

"""
input type for inserting array relation for remote table "match_lineup_players"
"""
input match_lineup_players_arr_rel_insert_input {
  data: [match_lineup_players_insert_input!]!

  """upsert condition"""
  on_conflict: match_lineup_players_on_conflict
}

"""aggregate avg on columns"""
type match_lineup_players_avg_fields {
  steam_id: Float
}

"""
order by avg() on columns of table "match_lineup_players"
"""
input match_lineup_players_avg_order_by {
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'.
"""
input match_lineup_players_bool_exp {
  _and: [match_lineup_players_bool_exp!]
  _not: match_lineup_players_bool_exp
  _or: [match_lineup_players_bool_exp!]
  captain: Boolean_comparison_exp
  checked_in: Boolean_comparison_exp
  discord_id: String_comparison_exp
  id: uuid_comparison_exp
  lineup: match_lineups_bool_exp
  match_lineup_id: uuid_comparison_exp
  placeholder_name: String_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "match_lineup_players"
"""
enum match_lineup_players_constraint {
  """
  unique or primary key constraint on columns "placeholder_name", "match_lineup_id"
  """
  match_lineup_players_match_lineup_id_placeholder_name_key

  """
  unique or primary key constraint on columns "steam_id", "match_lineup_id"
  """
  match_lineup_players_match_lineup_id_steam_id_key

  """
  unique or primary key constraint on columns "id"
  """
  match_members_pkey
}

"""
input type for incrementing numeric columns in table "match_lineup_players"
"""
input match_lineup_players_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "match_lineup_players"
"""
input match_lineup_players_insert_input {
  captain: Boolean
  checked_in: Boolean
  discord_id: String
  id: uuid
  lineup: match_lineups_obj_rel_insert_input
  match_lineup_id: uuid
  placeholder_name: String
  player: players_obj_rel_insert_input
  steam_id: bigint
}

"""aggregate max on columns"""
type match_lineup_players_max_fields {
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""
order by max() on columns of table "match_lineup_players"
"""
input match_lineup_players_max_order_by {
  discord_id: order_by
  id: order_by
  match_lineup_id: order_by
  placeholder_name: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type match_lineup_players_min_fields {
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""
order by min() on columns of table "match_lineup_players"
"""
input match_lineup_players_min_order_by {
  discord_id: order_by
  id: order_by
  match_lineup_id: order_by
  placeholder_name: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "match_lineup_players"
"""
type match_lineup_players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_lineup_players!]!
}

"""
on_conflict condition type for table "match_lineup_players"
"""
input match_lineup_players_on_conflict {
  constraint: match_lineup_players_constraint!
  update_columns: [match_lineup_players_update_column!]! = []
  where: match_lineup_players_bool_exp
}

"""Ordering options when selecting data from "match_lineup_players"."""
input match_lineup_players_order_by {
  captain: order_by
  checked_in: order_by
  discord_id: order_by
  id: order_by
  lineup: match_lineups_order_by
  match_lineup_id: order_by
  placeholder_name: order_by
  player: players_order_by
  steam_id: order_by
}

"""primary key columns input for table: match_lineup_players"""
input match_lineup_players_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_lineup_players"
"""
enum match_lineup_players_select_column {
  """column name"""
  captain

  """column name"""
  checked_in

  """column name"""
  discord_id

  """column name"""
  id

  """column name"""
  match_lineup_id

  """column name"""
  placeholder_name

  """column name"""
  steam_id
}

"""
select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players"
"""
enum match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  captain

  """column name"""
  checked_in
}

"""
select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players"
"""
enum match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  captain

  """column name"""
  checked_in
}

"""
input type for updating data in table "match_lineup_players"
"""
input match_lineup_players_set_input {
  captain: Boolean
  checked_in: Boolean
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""aggregate stddev on columns"""
type match_lineup_players_stddev_fields {
  steam_id: Float
}

"""
order by stddev() on columns of table "match_lineup_players"
"""
input match_lineup_players_stddev_order_by {
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type match_lineup_players_stddev_pop_fields {
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "match_lineup_players"
"""
input match_lineup_players_stddev_pop_order_by {
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type match_lineup_players_stddev_samp_fields {
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "match_lineup_players"
"""
input match_lineup_players_stddev_samp_order_by {
  steam_id: order_by
}

"""
Streaming cursor of the table "match_lineup_players"
"""
input match_lineup_players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_lineup_players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_lineup_players_stream_cursor_value_input {
  captain: Boolean
  checked_in: Boolean
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""aggregate sum on columns"""
type match_lineup_players_sum_fields {
  steam_id: bigint
}

"""
order by sum() on columns of table "match_lineup_players"
"""
input match_lineup_players_sum_order_by {
  steam_id: order_by
}

"""
update columns of table "match_lineup_players"
"""
enum match_lineup_players_update_column {
  """column name"""
  captain

  """column name"""
  checked_in

  """column name"""
  discord_id

  """column name"""
  id

  """column name"""
  match_lineup_id

  """column name"""
  placeholder_name

  """column name"""
  steam_id
}

input match_lineup_players_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_lineup_players_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_lineup_players_set_input

  """filter the rows which have to be updated"""
  where: match_lineup_players_bool_exp!
}

"""aggregate var_pop on columns"""
type match_lineup_players_var_pop_fields {
  steam_id: Float
}

"""
order by var_pop() on columns of table "match_lineup_players"
"""
input match_lineup_players_var_pop_order_by {
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type match_lineup_players_var_samp_fields {
  steam_id: Float
}

"""
order by var_samp() on columns of table "match_lineup_players"
"""
input match_lineup_players_var_samp_order_by {
  steam_id: order_by
}

"""aggregate variance on columns"""
type match_lineup_players_variance_fields {
  steam_id: Float
}

"""
order by variance() on columns of table "match_lineup_players"
"""
input match_lineup_players_variance_order_by {
  steam_id: order_by
}

"""relational table for assigning a team to a match and lineup"""
type match_lineups {
  """
  A computed field, executes function "can_pick_map_veto"
  """
  can_pick_map_veto: Boolean

  """
  A computed field, executes function "can_pick_region_veto"
  """
  can_pick_region_veto: Boolean

  """
  A computed field, executes function "can_update_lineup"
  """
  can_update_lineup: Boolean

  """An object relationship"""
  captain: v_match_captains

  """An object relationship"""
  coach: players
  coach_steam_id: bigint
  id: uuid!

  """
  A computed field, executes function "is_on_lineup"
  """
  is_on_lineup: Boolean

  """
  A computed field, executes function "lineup_is_picking_map_veto"
  """
  is_picking_map_veto: Boolean

  """
  A computed field, executes function "lineup_is_picking_region_veto"
  """
  is_picking_region_veto: Boolean

  """
  A computed field, executes function "is_match_lineup_ready"
  """
  is_ready: Boolean

  """An array relationship"""
  lineup_players(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): [match_lineup_players!]!

  """An aggregate relationship"""
  lineup_players_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): match_lineup_players_aggregate!

  """An array relationship"""
  match_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An aggregate relationship"""
  match_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!

  """
  A computed field, executes function "get_team_name"
  """
  name: String

  """An object relationship"""
  team: teams
  team_id: uuid

  """An object relationship"""
  v_match_lineup: v_match_lineups
}

"""
aggregated selection of "match_lineups"
"""
type match_lineups_aggregate {
  aggregate: match_lineups_aggregate_fields
  nodes: [match_lineups!]!
}

input match_lineups_aggregate_bool_exp {
  count: match_lineups_aggregate_bool_exp_count
}

input match_lineups_aggregate_bool_exp_count {
  arguments: [match_lineups_select_column!]
  distinct: Boolean
  filter: match_lineups_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_lineups"
"""
type match_lineups_aggregate_fields {
  avg: match_lineups_avg_fields
  count(columns: [match_lineups_select_column!], distinct: Boolean): Int!
  max: match_lineups_max_fields
  min: match_lineups_min_fields
  stddev: match_lineups_stddev_fields
  stddev_pop: match_lineups_stddev_pop_fields
  stddev_samp: match_lineups_stddev_samp_fields
  sum: match_lineups_sum_fields
  var_pop: match_lineups_var_pop_fields
  var_samp: match_lineups_var_samp_fields
  variance: match_lineups_variance_fields
}

"""
order by aggregate values of table "match_lineups"
"""
input match_lineups_aggregate_order_by {
  avg: match_lineups_avg_order_by
  count: order_by
  max: match_lineups_max_order_by
  min: match_lineups_min_order_by
  stddev: match_lineups_stddev_order_by
  stddev_pop: match_lineups_stddev_pop_order_by
  stddev_samp: match_lineups_stddev_samp_order_by
  sum: match_lineups_sum_order_by
  var_pop: match_lineups_var_pop_order_by
  var_samp: match_lineups_var_samp_order_by
  variance: match_lineups_variance_order_by
}

"""
input type for inserting array relation for remote table "match_lineups"
"""
input match_lineups_arr_rel_insert_input {
  data: [match_lineups_insert_input!]!

  """upsert condition"""
  on_conflict: match_lineups_on_conflict
}

"""aggregate avg on columns"""
type match_lineups_avg_fields {
  coach_steam_id: Float
}

"""
order by avg() on columns of table "match_lineups"
"""
input match_lineups_avg_order_by {
  coach_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'.
"""
input match_lineups_bool_exp {
  _and: [match_lineups_bool_exp!]
  _not: match_lineups_bool_exp
  _or: [match_lineups_bool_exp!]
  can_pick_map_veto: Boolean_comparison_exp
  can_pick_region_veto: Boolean_comparison_exp
  can_update_lineup: Boolean_comparison_exp
  captain: v_match_captains_bool_exp
  coach: players_bool_exp
  coach_steam_id: bigint_comparison_exp
  id: uuid_comparison_exp
  is_on_lineup: Boolean_comparison_exp
  is_picking_map_veto: Boolean_comparison_exp
  is_picking_region_veto: Boolean_comparison_exp
  is_ready: Boolean_comparison_exp
  lineup_players: match_lineup_players_bool_exp
  lineup_players_aggregate: match_lineup_players_aggregate_bool_exp
  match_veto_picks: match_map_veto_picks_bool_exp
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_bool_exp
  name: String_comparison_exp
  team: teams_bool_exp
  team_id: uuid_comparison_exp
  v_match_lineup: v_match_lineups_bool_exp
}

"""
unique or primary key constraints on table "match_lineups"
"""
enum match_lineups_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_teams_pkey
}

"""
input type for incrementing numeric columns in table "match_lineups"
"""
input match_lineups_inc_input {
  coach_steam_id: bigint
}

"""
input type for inserting data into table "match_lineups"
"""
input match_lineups_insert_input {
  captain: v_match_captains_obj_rel_insert_input
  coach: players_obj_rel_insert_input
  coach_steam_id: bigint
  id: uuid
  lineup_players: match_lineup_players_arr_rel_insert_input
  match_veto_picks: match_map_veto_picks_arr_rel_insert_input
  team: teams_obj_rel_insert_input
  team_id: uuid
  v_match_lineup: v_match_lineups_obj_rel_insert_input
}

"""aggregate max on columns"""
type match_lineups_max_fields {
  coach_steam_id: bigint
  id: uuid

  """
  A computed field, executes function "get_team_name"
  """
  name: String
  team_id: uuid
}

"""
order by max() on columns of table "match_lineups"
"""
input match_lineups_max_order_by {
  coach_steam_id: order_by
  id: order_by
  team_id: order_by
}

"""aggregate min on columns"""
type match_lineups_min_fields {
  coach_steam_id: bigint
  id: uuid

  """
  A computed field, executes function "get_team_name"
  """
  name: String
  team_id: uuid
}

"""
order by min() on columns of table "match_lineups"
"""
input match_lineups_min_order_by {
  coach_steam_id: order_by
  id: order_by
  team_id: order_by
}

"""
response of any mutation on the table "match_lineups"
"""
type match_lineups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_lineups!]!
}

"""
input type for inserting object relation for remote table "match_lineups"
"""
input match_lineups_obj_rel_insert_input {
  data: match_lineups_insert_input!

  """upsert condition"""
  on_conflict: match_lineups_on_conflict
}

"""
on_conflict condition type for table "match_lineups"
"""
input match_lineups_on_conflict {
  constraint: match_lineups_constraint!
  update_columns: [match_lineups_update_column!]! = []
  where: match_lineups_bool_exp
}

"""Ordering options when selecting data from "match_lineups"."""
input match_lineups_order_by {
  can_pick_map_veto: order_by
  can_pick_region_veto: order_by
  can_update_lineup: order_by
  captain: v_match_captains_order_by
  coach: players_order_by
  coach_steam_id: order_by
  id: order_by
  is_on_lineup: order_by
  is_picking_map_veto: order_by
  is_picking_region_veto: order_by
  is_ready: order_by
  lineup_players_aggregate: match_lineup_players_aggregate_order_by
  match_veto_picks_aggregate: match_map_veto_picks_aggregate_order_by
  name: order_by
  team: teams_order_by
  team_id: order_by
  v_match_lineup: v_match_lineups_order_by
}

"""primary key columns input for table: match_lineups"""
input match_lineups_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_lineups"
"""
enum match_lineups_select_column {
  """column name"""
  coach_steam_id

  """column name"""
  id

  """column name"""
  team_id
}

"""
input type for updating data in table "match_lineups"
"""
input match_lineups_set_input {
  coach_steam_id: bigint
  id: uuid
  team_id: uuid
}

"""aggregate stddev on columns"""
type match_lineups_stddev_fields {
  coach_steam_id: Float
}

"""
order by stddev() on columns of table "match_lineups"
"""
input match_lineups_stddev_order_by {
  coach_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type match_lineups_stddev_pop_fields {
  coach_steam_id: Float
}

"""
order by stddev_pop() on columns of table "match_lineups"
"""
input match_lineups_stddev_pop_order_by {
  coach_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type match_lineups_stddev_samp_fields {
  coach_steam_id: Float
}

"""
order by stddev_samp() on columns of table "match_lineups"
"""
input match_lineups_stddev_samp_order_by {
  coach_steam_id: order_by
}

"""
Streaming cursor of the table "match_lineups"
"""
input match_lineups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_lineups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_lineups_stream_cursor_value_input {
  coach_steam_id: bigint
  id: uuid
  team_id: uuid
}

"""aggregate sum on columns"""
type match_lineups_sum_fields {
  coach_steam_id: bigint
}

"""
order by sum() on columns of table "match_lineups"
"""
input match_lineups_sum_order_by {
  coach_steam_id: order_by
}

"""
update columns of table "match_lineups"
"""
enum match_lineups_update_column {
  """column name"""
  coach_steam_id

  """column name"""
  id

  """column name"""
  team_id
}

input match_lineups_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_lineups_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_lineups_set_input

  """filter the rows which have to be updated"""
  where: match_lineups_bool_exp!
}

"""aggregate var_pop on columns"""
type match_lineups_var_pop_fields {
  coach_steam_id: Float
}

"""
order by var_pop() on columns of table "match_lineups"
"""
input match_lineups_var_pop_order_by {
  coach_steam_id: order_by
}

"""aggregate var_samp on columns"""
type match_lineups_var_samp_fields {
  coach_steam_id: Float
}

"""
order by var_samp() on columns of table "match_lineups"
"""
input match_lineups_var_samp_order_by {
  coach_steam_id: order_by
}

"""aggregate variance on columns"""
type match_lineups_variance_fields {
  coach_steam_id: Float
}

"""
order by variance() on columns of table "match_lineups"
"""
input match_lineups_variance_order_by {
  coach_steam_id: order_by
}

"""
columns and relationships of "match_map_demos"
"""
type match_map_demos {
  """
  A computed field, executes function "demo_download_url"
  """
  download_url: String
  file: String!
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!
  size: Int!
}

"""
aggregated selection of "match_map_demos"
"""
type match_map_demos_aggregate {
  aggregate: match_map_demos_aggregate_fields
  nodes: [match_map_demos!]!
}

input match_map_demos_aggregate_bool_exp {
  count: match_map_demos_aggregate_bool_exp_count
}

input match_map_demos_aggregate_bool_exp_count {
  arguments: [match_map_demos_select_column!]
  distinct: Boolean
  filter: match_map_demos_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_map_demos"
"""
type match_map_demos_aggregate_fields {
  avg: match_map_demos_avg_fields
  count(columns: [match_map_demos_select_column!], distinct: Boolean): Int!
  max: match_map_demos_max_fields
  min: match_map_demos_min_fields
  stddev: match_map_demos_stddev_fields
  stddev_pop: match_map_demos_stddev_pop_fields
  stddev_samp: match_map_demos_stddev_samp_fields
  sum: match_map_demos_sum_fields
  var_pop: match_map_demos_var_pop_fields
  var_samp: match_map_demos_var_samp_fields
  variance: match_map_demos_variance_fields
}

"""
order by aggregate values of table "match_map_demos"
"""
input match_map_demos_aggregate_order_by {
  avg: match_map_demos_avg_order_by
  count: order_by
  max: match_map_demos_max_order_by
  min: match_map_demos_min_order_by
  stddev: match_map_demos_stddev_order_by
  stddev_pop: match_map_demos_stddev_pop_order_by
  stddev_samp: match_map_demos_stddev_samp_order_by
  sum: match_map_demos_sum_order_by
  var_pop: match_map_demos_var_pop_order_by
  var_samp: match_map_demos_var_samp_order_by
  variance: match_map_demos_variance_order_by
}

"""
input type for inserting array relation for remote table "match_map_demos"
"""
input match_map_demos_arr_rel_insert_input {
  data: [match_map_demos_insert_input!]!

  """upsert condition"""
  on_conflict: match_map_demos_on_conflict
}

"""aggregate avg on columns"""
type match_map_demos_avg_fields {
  size: Float
}

"""
order by avg() on columns of table "match_map_demos"
"""
input match_map_demos_avg_order_by {
  size: order_by
}

"""
Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'.
"""
input match_map_demos_bool_exp {
  _and: [match_map_demos_bool_exp!]
  _not: match_map_demos_bool_exp
  _or: [match_map_demos_bool_exp!]
  download_url: String_comparison_exp
  file: String_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  size: Int_comparison_exp
}

"""
unique or primary key constraints on table "match_map_demos"
"""
enum match_map_demos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_demos_pkey
}

"""
input type for incrementing numeric columns in table "match_map_demos"
"""
input match_map_demos_inc_input {
  size: Int
}

"""
input type for inserting data into table "match_map_demos"
"""
input match_map_demos_insert_input {
  file: String
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  size: Int
}

"""aggregate max on columns"""
type match_map_demos_max_fields {
  """
  A computed field, executes function "demo_download_url"
  """
  download_url: String
  file: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  size: Int
}

"""
order by max() on columns of table "match_map_demos"
"""
input match_map_demos_max_order_by {
  file: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  size: order_by
}

"""aggregate min on columns"""
type match_map_demos_min_fields {
  """
  A computed field, executes function "demo_download_url"
  """
  download_url: String
  file: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  size: Int
}

"""
order by min() on columns of table "match_map_demos"
"""
input match_map_demos_min_order_by {
  file: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  size: order_by
}

"""
response of any mutation on the table "match_map_demos"
"""
type match_map_demos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_map_demos!]!
}

"""
on_conflict condition type for table "match_map_demos"
"""
input match_map_demos_on_conflict {
  constraint: match_map_demos_constraint!
  update_columns: [match_map_demos_update_column!]! = []
  where: match_map_demos_bool_exp
}

"""Ordering options when selecting data from "match_map_demos"."""
input match_map_demos_order_by {
  download_url: order_by
  file: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  size: order_by
}

"""primary key columns input for table: match_map_demos"""
input match_map_demos_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_map_demos"
"""
enum match_map_demos_select_column {
  """column name"""
  file

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  size
}

"""
input type for updating data in table "match_map_demos"
"""
input match_map_demos_set_input {
  file: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  size: Int
}

"""aggregate stddev on columns"""
type match_map_demos_stddev_fields {
  size: Float
}

"""
order by stddev() on columns of table "match_map_demos"
"""
input match_map_demos_stddev_order_by {
  size: order_by
}

"""aggregate stddev_pop on columns"""
type match_map_demos_stddev_pop_fields {
  size: Float
}

"""
order by stddev_pop() on columns of table "match_map_demos"
"""
input match_map_demos_stddev_pop_order_by {
  size: order_by
}

"""aggregate stddev_samp on columns"""
type match_map_demos_stddev_samp_fields {
  size: Float
}

"""
order by stddev_samp() on columns of table "match_map_demos"
"""
input match_map_demos_stddev_samp_order_by {
  size: order_by
}

"""
Streaming cursor of the table "match_map_demos"
"""
input match_map_demos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_map_demos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_map_demos_stream_cursor_value_input {
  file: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  size: Int
}

"""aggregate sum on columns"""
type match_map_demos_sum_fields {
  size: Int
}

"""
order by sum() on columns of table "match_map_demos"
"""
input match_map_demos_sum_order_by {
  size: order_by
}

"""
update columns of table "match_map_demos"
"""
enum match_map_demos_update_column {
  """column name"""
  file

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  size
}

input match_map_demos_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_map_demos_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_map_demos_set_input

  """filter the rows which have to be updated"""
  where: match_map_demos_bool_exp!
}

"""aggregate var_pop on columns"""
type match_map_demos_var_pop_fields {
  size: Float
}

"""
order by var_pop() on columns of table "match_map_demos"
"""
input match_map_demos_var_pop_order_by {
  size: order_by
}

"""aggregate var_samp on columns"""
type match_map_demos_var_samp_fields {
  size: Float
}

"""
order by var_samp() on columns of table "match_map_demos"
"""
input match_map_demos_var_samp_order_by {
  size: order_by
}

"""aggregate variance on columns"""
type match_map_demos_variance_fields {
  size: Float
}

"""
order by variance() on columns of table "match_map_demos"
"""
input match_map_demos_variance_order_by {
  size: order_by
}

"""
columns and relationships of "match_map_rounds"
"""
type match_map_rounds {
  backup_file: String
  id: uuid!

  """An array relationship"""
  kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!
  lineup_1_money: Int!
  lineup_1_score: Int!
  lineup_1_side: e_sides_enum!
  lineup_1_timeouts_available: Int!
  lineup_2_money: Int!
  lineup_2_score: Int!
  lineup_2_side: e_sides_enum!
  lineup_2_timeouts_available: Int!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!
  round: Int!
  time: timestamptz!
  winning_side: String!
}

"""
aggregated selection of "match_map_rounds"
"""
type match_map_rounds_aggregate {
  aggregate: match_map_rounds_aggregate_fields
  nodes: [match_map_rounds!]!
}

input match_map_rounds_aggregate_bool_exp {
  count: match_map_rounds_aggregate_bool_exp_count
}

input match_map_rounds_aggregate_bool_exp_count {
  arguments: [match_map_rounds_select_column!]
  distinct: Boolean
  filter: match_map_rounds_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_map_rounds"
"""
type match_map_rounds_aggregate_fields {
  avg: match_map_rounds_avg_fields
  count(columns: [match_map_rounds_select_column!], distinct: Boolean): Int!
  max: match_map_rounds_max_fields
  min: match_map_rounds_min_fields
  stddev: match_map_rounds_stddev_fields
  stddev_pop: match_map_rounds_stddev_pop_fields
  stddev_samp: match_map_rounds_stddev_samp_fields
  sum: match_map_rounds_sum_fields
  var_pop: match_map_rounds_var_pop_fields
  var_samp: match_map_rounds_var_samp_fields
  variance: match_map_rounds_variance_fields
}

"""
order by aggregate values of table "match_map_rounds"
"""
input match_map_rounds_aggregate_order_by {
  avg: match_map_rounds_avg_order_by
  count: order_by
  max: match_map_rounds_max_order_by
  min: match_map_rounds_min_order_by
  stddev: match_map_rounds_stddev_order_by
  stddev_pop: match_map_rounds_stddev_pop_order_by
  stddev_samp: match_map_rounds_stddev_samp_order_by
  sum: match_map_rounds_sum_order_by
  var_pop: match_map_rounds_var_pop_order_by
  var_samp: match_map_rounds_var_samp_order_by
  variance: match_map_rounds_variance_order_by
}

"""
input type for inserting array relation for remote table "match_map_rounds"
"""
input match_map_rounds_arr_rel_insert_input {
  data: [match_map_rounds_insert_input!]!

  """upsert condition"""
  on_conflict: match_map_rounds_on_conflict
}

"""aggregate avg on columns"""
type match_map_rounds_avg_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by avg() on columns of table "match_map_rounds"
"""
input match_map_rounds_avg_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'.
"""
input match_map_rounds_bool_exp {
  _and: [match_map_rounds_bool_exp!]
  _not: match_map_rounds_bool_exp
  _or: [match_map_rounds_bool_exp!]
  backup_file: String_comparison_exp
  id: uuid_comparison_exp
  kills: player_kills_bool_exp
  kills_aggregate: player_kills_aggregate_bool_exp
  lineup_1_money: Int_comparison_exp
  lineup_1_score: Int_comparison_exp
  lineup_1_side: e_sides_enum_comparison_exp
  lineup_1_timeouts_available: Int_comparison_exp
  lineup_2_money: Int_comparison_exp
  lineup_2_score: Int_comparison_exp
  lineup_2_side: e_sides_enum_comparison_exp
  lineup_2_timeouts_available: Int_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  round: Int_comparison_exp
  time: timestamptz_comparison_exp
  winning_side: String_comparison_exp
}

"""
unique or primary key constraints on table "match_map_rounds"
"""
enum match_map_rounds_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_rounds__id_key

  """
  unique or primary key constraint on columns "match_map_id", "round"
  """
  match_rounds_match_id_round_key

  """
  unique or primary key constraint on columns "id"
  """
  match_rounds_pkey
}

"""
input type for incrementing numeric columns in table "match_map_rounds"
"""
input match_map_rounds_inc_input {
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  round: Int
}

"""
input type for inserting data into table "match_map_rounds"
"""
input match_map_rounds_insert_input {
  backup_file: String
  id: uuid
  kills: player_kills_arr_rel_insert_input
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  round: Int
  time: timestamptz
  winning_side: String
}

"""aggregate max on columns"""
type match_map_rounds_max_fields {
  backup_file: String
  id: uuid
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  match_map_id: uuid
  round: Int
  time: timestamptz
  winning_side: String
}

"""
order by max() on columns of table "match_map_rounds"
"""
input match_map_rounds_max_order_by {
  backup_file: order_by
  id: order_by
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  winning_side: order_by
}

"""aggregate min on columns"""
type match_map_rounds_min_fields {
  backup_file: String
  id: uuid
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  match_map_id: uuid
  round: Int
  time: timestamptz
  winning_side: String
}

"""
order by min() on columns of table "match_map_rounds"
"""
input match_map_rounds_min_order_by {
  backup_file: order_by
  id: order_by
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  winning_side: order_by
}

"""
response of any mutation on the table "match_map_rounds"
"""
type match_map_rounds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_map_rounds!]!
}

"""
on_conflict condition type for table "match_map_rounds"
"""
input match_map_rounds_on_conflict {
  constraint: match_map_rounds_constraint!
  update_columns: [match_map_rounds_update_column!]! = []
  where: match_map_rounds_bool_exp
}

"""Ordering options when selecting data from "match_map_rounds"."""
input match_map_rounds_order_by {
  backup_file: order_by
  id: order_by
  kills_aggregate: player_kills_aggregate_order_by
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_side: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_side: order_by
  lineup_2_timeouts_available: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  winning_side: order_by
}

"""primary key columns input for table: match_map_rounds"""
input match_map_rounds_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_map_rounds"
"""
enum match_map_rounds_select_column {
  """column name"""
  backup_file

  """column name"""
  id

  """column name"""
  lineup_1_money

  """column name"""
  lineup_1_score

  """column name"""
  lineup_1_side

  """column name"""
  lineup_1_timeouts_available

  """column name"""
  lineup_2_money

  """column name"""
  lineup_2_score

  """column name"""
  lineup_2_side

  """column name"""
  lineup_2_timeouts_available

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  time

  """column name"""
  winning_side
}

"""
input type for updating data in table "match_map_rounds"
"""
input match_map_rounds_set_input {
  backup_file: String
  id: uuid
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  match_map_id: uuid
  round: Int
  time: timestamptz
  winning_side: String
}

"""aggregate stddev on columns"""
type match_map_rounds_stddev_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by stddev() on columns of table "match_map_rounds"
"""
input match_map_rounds_stddev_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type match_map_rounds_stddev_pop_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "match_map_rounds"
"""
input match_map_rounds_stddev_pop_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type match_map_rounds_stddev_samp_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "match_map_rounds"
"""
input match_map_rounds_stddev_samp_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""
Streaming cursor of the table "match_map_rounds"
"""
input match_map_rounds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_map_rounds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_map_rounds_stream_cursor_value_input {
  backup_file: String
  id: uuid
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  match_map_id: uuid
  round: Int
  time: timestamptz
  winning_side: String
}

"""aggregate sum on columns"""
type match_map_rounds_sum_fields {
  lineup_1_money: Int
  lineup_1_score: Int
  lineup_1_timeouts_available: Int
  lineup_2_money: Int
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  round: Int
}

"""
order by sum() on columns of table "match_map_rounds"
"""
input match_map_rounds_sum_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""
update columns of table "match_map_rounds"
"""
enum match_map_rounds_update_column {
  """column name"""
  backup_file

  """column name"""
  id

  """column name"""
  lineup_1_money

  """column name"""
  lineup_1_score

  """column name"""
  lineup_1_side

  """column name"""
  lineup_1_timeouts_available

  """column name"""
  lineup_2_money

  """column name"""
  lineup_2_score

  """column name"""
  lineup_2_side

  """column name"""
  lineup_2_timeouts_available

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  time

  """column name"""
  winning_side
}

input match_map_rounds_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_map_rounds_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_map_rounds_set_input

  """filter the rows which have to be updated"""
  where: match_map_rounds_bool_exp!
}

"""aggregate var_pop on columns"""
type match_map_rounds_var_pop_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by var_pop() on columns of table "match_map_rounds"
"""
input match_map_rounds_var_pop_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type match_map_rounds_var_samp_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by var_samp() on columns of table "match_map_rounds"
"""
input match_map_rounds_var_samp_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""aggregate variance on columns"""
type match_map_rounds_variance_fields {
  lineup_1_money: Float
  lineup_1_score: Float
  lineup_1_timeouts_available: Float
  lineup_2_money: Float
  lineup_2_score: Float
  lineup_2_timeouts_available: Float
  round: Float
}

"""
order by variance() on columns of table "match_map_rounds"
"""
input match_map_rounds_variance_order_by {
  lineup_1_money: order_by
  lineup_1_score: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_money: order_by
  lineup_2_score: order_by
  lineup_2_timeouts_available: order_by
  round: order_by
}

"""
columns and relationships of "match_map_veto_picks"
"""
type match_map_veto_picks {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  map: maps!
  map_id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_lineup: match_lineups!
  match_lineup_id: uuid!
  side: String
  type: e_veto_pick_types_enum!
}

"""
aggregated selection of "match_map_veto_picks"
"""
type match_map_veto_picks_aggregate {
  aggregate: match_map_veto_picks_aggregate_fields
  nodes: [match_map_veto_picks!]!
}

input match_map_veto_picks_aggregate_bool_exp {
  count: match_map_veto_picks_aggregate_bool_exp_count
}

input match_map_veto_picks_aggregate_bool_exp_count {
  arguments: [match_map_veto_picks_select_column!]
  distinct: Boolean
  filter: match_map_veto_picks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_map_veto_picks"
"""
type match_map_veto_picks_aggregate_fields {
  count(columns: [match_map_veto_picks_select_column!], distinct: Boolean): Int!
  max: match_map_veto_picks_max_fields
  min: match_map_veto_picks_min_fields
}

"""
order by aggregate values of table "match_map_veto_picks"
"""
input match_map_veto_picks_aggregate_order_by {
  count: order_by
  max: match_map_veto_picks_max_order_by
  min: match_map_veto_picks_min_order_by
}

"""
input type for inserting array relation for remote table "match_map_veto_picks"
"""
input match_map_veto_picks_arr_rel_insert_input {
  data: [match_map_veto_picks_insert_input!]!

  """upsert condition"""
  on_conflict: match_map_veto_picks_on_conflict
}

"""
Boolean expression to filter rows from the table "match_map_veto_picks". All fields are combined with a logical 'AND'.
"""
input match_map_veto_picks_bool_exp {
  _and: [match_map_veto_picks_bool_exp!]
  _not: match_map_veto_picks_bool_exp
  _or: [match_map_veto_picks_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  map: maps_bool_exp
  map_id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_lineup: match_lineups_bool_exp
  match_lineup_id: uuid_comparison_exp
  side: String_comparison_exp
  type: e_veto_pick_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "match_map_veto_picks"
"""
enum match_map_veto_picks_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_map_veto_picks_pkey
}

"""
input type for inserting data into table "match_map_veto_picks"
"""
input match_map_veto_picks_insert_input {
  created_at: timestamptz
  id: uuid
  map: maps_obj_rel_insert_input
  map_id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_lineup: match_lineups_obj_rel_insert_input
  match_lineup_id: uuid
  side: String
  type: e_veto_pick_types_enum
}

"""aggregate max on columns"""
type match_map_veto_picks_max_fields {
  created_at: timestamptz
  id: uuid
  map_id: uuid
  match_id: uuid
  match_lineup_id: uuid
  side: String
}

"""
order by max() on columns of table "match_map_veto_picks"
"""
input match_map_veto_picks_max_order_by {
  created_at: order_by
  id: order_by
  map_id: order_by
  match_id: order_by
  match_lineup_id: order_by
  side: order_by
}

"""aggregate min on columns"""
type match_map_veto_picks_min_fields {
  created_at: timestamptz
  id: uuid
  map_id: uuid
  match_id: uuid
  match_lineup_id: uuid
  side: String
}

"""
order by min() on columns of table "match_map_veto_picks"
"""
input match_map_veto_picks_min_order_by {
  created_at: order_by
  id: order_by
  map_id: order_by
  match_id: order_by
  match_lineup_id: order_by
  side: order_by
}

"""
response of any mutation on the table "match_map_veto_picks"
"""
type match_map_veto_picks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_map_veto_picks!]!
}

"""
on_conflict condition type for table "match_map_veto_picks"
"""
input match_map_veto_picks_on_conflict {
  constraint: match_map_veto_picks_constraint!
  update_columns: [match_map_veto_picks_update_column!]! = []
  where: match_map_veto_picks_bool_exp
}

"""Ordering options when selecting data from "match_map_veto_picks"."""
input match_map_veto_picks_order_by {
  created_at: order_by
  id: order_by
  map: maps_order_by
  map_id: order_by
  match: matches_order_by
  match_id: order_by
  match_lineup: match_lineups_order_by
  match_lineup_id: order_by
  side: order_by
  type: order_by
}

"""primary key columns input for table: match_map_veto_picks"""
input match_map_veto_picks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_map_veto_picks"
"""
enum match_map_veto_picks_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  match_lineup_id

  """column name"""
  side

  """column name"""
  type
}

"""
input type for updating data in table "match_map_veto_picks"
"""
input match_map_veto_picks_set_input {
  created_at: timestamptz
  id: uuid
  map_id: uuid
  match_id: uuid
  match_lineup_id: uuid
  side: String
  type: e_veto_pick_types_enum
}

"""
Streaming cursor of the table "match_map_veto_picks"
"""
input match_map_veto_picks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_map_veto_picks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_map_veto_picks_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  map_id: uuid
  match_id: uuid
  match_lineup_id: uuid
  side: String
  type: e_veto_pick_types_enum
}

"""
update columns of table "match_map_veto_picks"
"""
enum match_map_veto_picks_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  match_lineup_id

  """column name"""
  side

  """column name"""
  type
}

input match_map_veto_picks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: match_map_veto_picks_set_input

  """filter the rows which have to be updated"""
  where: match_map_veto_picks_bool_exp!
}

"""
columns and relationships of "match_maps"
"""
type match_maps {
  created_at: timestamptz!

  """An array relationship"""
  demos(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): [match_map_demos!]!

  """An aggregate relationship"""
  demos_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): match_map_demos_aggregate!

  """
  A computed field, executes function "match_map_demo_download_url"
  """
  demos_download_url: String

  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """An object relationship"""
  e_match_map_status: e_match_map_status!
  ended_at: timestamptz

  """An array relationship"""
  flashes(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  flashes_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!
  id: uuid!

  """
  A computed field, executes function "is_current_match_map"
  """
  is_current_map: Boolean

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_side: e_sides_enum!
  lineup_1_timeouts_available: Int!

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int!

  """An object relationship"""
  map: maps!
  map_id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An array relationship"""
  objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!
  order: Int!

  """An array relationship"""
  player_assists(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  player_assists_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!

  """An array relationship"""
  player_damages(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  player_damages_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """An array relationship"""
  player_kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  player_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!

  """An array relationship"""
  player_unused_utilities(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """An aggregate relationship"""
  player_unused_utilities_aggregate(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): player_unused_utility_aggregate!

  """An array relationship"""
  rounds(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): [match_map_rounds!]!

  """An aggregate relationship"""
  rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): match_map_rounds_aggregate!
  started_at: timestamptz
  status: e_match_map_status_enum!

  """An array relationship"""
  utility(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!

  """An array relationship"""
  vetos(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An aggregate relationship"""
  vetos_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!
  winning_lineup_id: uuid
}

"""
aggregated selection of "match_maps"
"""
type match_maps_aggregate {
  aggregate: match_maps_aggregate_fields
  nodes: [match_maps!]!
}

input match_maps_aggregate_bool_exp {
  count: match_maps_aggregate_bool_exp_count
}

input match_maps_aggregate_bool_exp_count {
  arguments: [match_maps_select_column!]
  distinct: Boolean
  filter: match_maps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_maps"
"""
type match_maps_aggregate_fields {
  avg: match_maps_avg_fields
  count(columns: [match_maps_select_column!], distinct: Boolean): Int!
  max: match_maps_max_fields
  min: match_maps_min_fields
  stddev: match_maps_stddev_fields
  stddev_pop: match_maps_stddev_pop_fields
  stddev_samp: match_maps_stddev_samp_fields
  sum: match_maps_sum_fields
  var_pop: match_maps_var_pop_fields
  var_samp: match_maps_var_samp_fields
  variance: match_maps_variance_fields
}

"""
order by aggregate values of table "match_maps"
"""
input match_maps_aggregate_order_by {
  avg: match_maps_avg_order_by
  count: order_by
  max: match_maps_max_order_by
  min: match_maps_min_order_by
  stddev: match_maps_stddev_order_by
  stddev_pop: match_maps_stddev_pop_order_by
  stddev_samp: match_maps_stddev_samp_order_by
  sum: match_maps_sum_order_by
  var_pop: match_maps_var_pop_order_by
  var_samp: match_maps_var_samp_order_by
  variance: match_maps_variance_order_by
}

"""
input type for inserting array relation for remote table "match_maps"
"""
input match_maps_arr_rel_insert_input {
  data: [match_maps_insert_input!]!

  """upsert condition"""
  on_conflict: match_maps_on_conflict
}

"""aggregate avg on columns"""
type match_maps_avg_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by avg() on columns of table "match_maps"
"""
input match_maps_avg_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""
Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'.
"""
input match_maps_bool_exp {
  _and: [match_maps_bool_exp!]
  _not: match_maps_bool_exp
  _or: [match_maps_bool_exp!]
  created_at: timestamptz_comparison_exp
  demos: match_map_demos_bool_exp
  demos_aggregate: match_map_demos_aggregate_bool_exp
  demos_download_url: String_comparison_exp
  demos_total_size: Int_comparison_exp
  e_match_map_status: e_match_map_status_bool_exp
  ended_at: timestamptz_comparison_exp
  flashes: player_flashes_bool_exp
  flashes_aggregate: player_flashes_aggregate_bool_exp
  id: uuid_comparison_exp
  is_current_map: Boolean_comparison_exp
  lineup_1_score: Int_comparison_exp
  lineup_1_side: e_sides_enum_comparison_exp
  lineup_1_timeouts_available: Int_comparison_exp
  lineup_2_score: Int_comparison_exp
  lineup_2_side: e_sides_enum_comparison_exp
  lineup_2_timeouts_available: Int_comparison_exp
  map: maps_bool_exp
  map_id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  objectives: player_objectives_bool_exp
  objectives_aggregate: player_objectives_aggregate_bool_exp
  order: Int_comparison_exp
  player_assists: player_assists_bool_exp
  player_assists_aggregate: player_assists_aggregate_bool_exp
  player_damages: player_damages_bool_exp
  player_damages_aggregate: player_damages_aggregate_bool_exp
  player_kills: player_kills_bool_exp
  player_kills_aggregate: player_kills_aggregate_bool_exp
  player_unused_utilities: player_unused_utility_bool_exp
  player_unused_utilities_aggregate: player_unused_utility_aggregate_bool_exp
  rounds: match_map_rounds_bool_exp
  rounds_aggregate: match_map_rounds_aggregate_bool_exp
  started_at: timestamptz_comparison_exp
  status: e_match_map_status_enum_comparison_exp
  utility: player_utility_bool_exp
  utility_aggregate: player_utility_aggregate_bool_exp
  vetos: match_map_veto_picks_bool_exp
  vetos_aggregate: match_map_veto_picks_aggregate_bool_exp
  winning_lineup_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "match_maps"
"""
enum match_maps_constraint {
  """
  unique or primary key constraint on columns "order", "match_id"
  """
  match_maps_match_id_order_key

  """
  unique or primary key constraint on columns "id"
  """
  match_maps_pkey
}

"""
input type for incrementing numeric columns in table "match_maps"
"""
input match_maps_inc_input {
  lineup_1_timeouts_available: Int
  lineup_2_timeouts_available: Int
  order: Int
}

"""
input type for inserting data into table "match_maps"
"""
input match_maps_insert_input {
  created_at: timestamptz
  demos: match_map_demos_arr_rel_insert_input
  e_match_map_status: e_match_map_status_obj_rel_insert_input
  ended_at: timestamptz
  flashes: player_flashes_arr_rel_insert_input
  id: uuid
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  map: maps_obj_rel_insert_input
  map_id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  objectives: player_objectives_arr_rel_insert_input
  order: Int
  player_assists: player_assists_arr_rel_insert_input
  player_damages: player_damages_arr_rel_insert_input
  player_kills: player_kills_arr_rel_insert_input
  player_unused_utilities: player_unused_utility_arr_rel_insert_input
  rounds: match_map_rounds_arr_rel_insert_input
  started_at: timestamptz
  status: e_match_map_status_enum
  utility: player_utility_arr_rel_insert_input
  vetos: match_map_veto_picks_arr_rel_insert_input
  winning_lineup_id: uuid
}

"""aggregate max on columns"""
type match_maps_max_fields {
  created_at: timestamptz

  """
  A computed field, executes function "match_map_demo_download_url"
  """
  demos_download_url: String

  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int
  ended_at: timestamptz
  id: uuid

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Int

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  map_id: uuid
  match_id: uuid
  order: Int
  started_at: timestamptz
  winning_lineup_id: uuid
}

"""
order by max() on columns of table "match_maps"
"""
input match_maps_max_order_by {
  created_at: order_by
  ended_at: order_by
  id: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  map_id: order_by
  match_id: order_by
  order: order_by
  started_at: order_by
  winning_lineup_id: order_by
}

"""aggregate min on columns"""
type match_maps_min_fields {
  created_at: timestamptz

  """
  A computed field, executes function "match_map_demo_download_url"
  """
  demos_download_url: String

  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int
  ended_at: timestamptz
  id: uuid

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Int

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  map_id: uuid
  match_id: uuid
  order: Int
  started_at: timestamptz
  winning_lineup_id: uuid
}

"""
order by min() on columns of table "match_maps"
"""
input match_maps_min_order_by {
  created_at: order_by
  ended_at: order_by
  id: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  map_id: order_by
  match_id: order_by
  order: order_by
  started_at: order_by
  winning_lineup_id: order_by
}

"""
response of any mutation on the table "match_maps"
"""
type match_maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_maps!]!
}

"""
input type for inserting object relation for remote table "match_maps"
"""
input match_maps_obj_rel_insert_input {
  data: match_maps_insert_input!

  """upsert condition"""
  on_conflict: match_maps_on_conflict
}

"""
on_conflict condition type for table "match_maps"
"""
input match_maps_on_conflict {
  constraint: match_maps_constraint!
  update_columns: [match_maps_update_column!]! = []
  where: match_maps_bool_exp
}

"""Ordering options when selecting data from "match_maps"."""
input match_maps_order_by {
  created_at: order_by
  demos_aggregate: match_map_demos_aggregate_order_by
  demos_download_url: order_by
  demos_total_size: order_by
  e_match_map_status: e_match_map_status_order_by
  ended_at: order_by
  flashes_aggregate: player_flashes_aggregate_order_by
  id: order_by
  is_current_map: order_by
  lineup_1_score: order_by
  lineup_1_side: order_by
  lineup_1_timeouts_available: order_by
  lineup_2_score: order_by
  lineup_2_side: order_by
  lineup_2_timeouts_available: order_by
  map: maps_order_by
  map_id: order_by
  match: matches_order_by
  match_id: order_by
  objectives_aggregate: player_objectives_aggregate_order_by
  order: order_by
  player_assists_aggregate: player_assists_aggregate_order_by
  player_damages_aggregate: player_damages_aggregate_order_by
  player_kills_aggregate: player_kills_aggregate_order_by
  player_unused_utilities_aggregate: player_unused_utility_aggregate_order_by
  rounds_aggregate: match_map_rounds_aggregate_order_by
  started_at: order_by
  status: order_by
  utility_aggregate: player_utility_aggregate_order_by
  vetos_aggregate: match_map_veto_picks_aggregate_order_by
  winning_lineup_id: order_by
}

"""primary key columns input for table: match_maps"""
input match_maps_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_maps"
"""
enum match_maps_select_column {
  """column name"""
  created_at

  """column name"""
  ended_at

  """column name"""
  id

  """column name"""
  lineup_1_side

  """column name"""
  lineup_1_timeouts_available

  """column name"""
  lineup_2_side

  """column name"""
  lineup_2_timeouts_available

  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  order

  """column name"""
  started_at

  """column name"""
  status

  """column name"""
  winning_lineup_id
}

"""
input type for updating data in table "match_maps"
"""
input match_maps_set_input {
  created_at: timestamptz
  ended_at: timestamptz
  id: uuid
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  map_id: uuid
  match_id: uuid
  order: Int
  started_at: timestamptz
  status: e_match_map_status_enum
  winning_lineup_id: uuid
}

"""aggregate stddev on columns"""
type match_maps_stddev_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by stddev() on columns of table "match_maps"
"""
input match_maps_stddev_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""aggregate stddev_pop on columns"""
type match_maps_stddev_pop_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by stddev_pop() on columns of table "match_maps"
"""
input match_maps_stddev_pop_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""aggregate stddev_samp on columns"""
type match_maps_stddev_samp_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by stddev_samp() on columns of table "match_maps"
"""
input match_maps_stddev_samp_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""
Streaming cursor of the table "match_maps"
"""
input match_maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_maps_stream_cursor_value_input {
  created_at: timestamptz
  ended_at: timestamptz
  id: uuid
  lineup_1_side: e_sides_enum
  lineup_1_timeouts_available: Int
  lineup_2_side: e_sides_enum
  lineup_2_timeouts_available: Int
  map_id: uuid
  match_id: uuid
  order: Int
  started_at: timestamptz
  status: e_match_map_status_enum
  winning_lineup_id: uuid
}

"""aggregate sum on columns"""
type match_maps_sum_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Int

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Int
  order: Int
}

"""
order by sum() on columns of table "match_maps"
"""
input match_maps_sum_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""
update columns of table "match_maps"
"""
enum match_maps_update_column {
  """column name"""
  created_at

  """column name"""
  ended_at

  """column name"""
  id

  """column name"""
  lineup_1_side

  """column name"""
  lineup_1_timeouts_available

  """column name"""
  lineup_2_side

  """column name"""
  lineup_2_timeouts_available

  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  order

  """column name"""
  started_at

  """column name"""
  status

  """column name"""
  winning_lineup_id
}

input match_maps_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_maps_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_maps_set_input

  """filter the rows which have to be updated"""
  where: match_maps_bool_exp!
}

"""aggregate var_pop on columns"""
type match_maps_var_pop_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by var_pop() on columns of table "match_maps"
"""
input match_maps_var_pop_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""aggregate var_samp on columns"""
type match_maps_var_samp_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by var_samp() on columns of table "match_maps"
"""
input match_maps_var_samp_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""aggregate variance on columns"""
type match_maps_variance_fields {
  """
  A computed field, executes function "match_map_demo_total_size"
  """
  demos_total_size: Int

  """
  A computed field, executes function "lineup_1_score"
  """
  lineup_1_score: Int
  lineup_1_timeouts_available: Float

  """
  A computed field, executes function "lineup_2_score"
  """
  lineup_2_score: Int
  lineup_2_timeouts_available: Float
  order: Float
}

"""
order by variance() on columns of table "match_maps"
"""
input match_maps_variance_order_by {
  lineup_1_timeouts_available: order_by
  lineup_2_timeouts_available: order_by
  order: order_by
}

"""
columns and relationships of "match_options"
"""
type match_options {
  best_of: Int!
  coaches: Boolean!

  """
  A computed field, executes function "has_active_matches"
  """
  has_active_matches: Boolean
  id: uuid!
  invite_code: String
  knife_round: Boolean!
  lobby_access: e_lobby_access_enum

  """An object relationship"""
  map_pool: map_pools!
  map_pool_id: uuid!
  map_veto: Boolean!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): matches_aggregate!
  mr: Int!
  number_of_substitutes: Int!
  overtime: Boolean!
  prefer_dedicated_server: Boolean!
  ready_setting: e_ready_settings_enum!
  region_veto: Boolean!
  regions: [String!]
  tech_timeout_setting: e_timeout_settings_enum!
  timeout_setting: e_timeout_settings_enum!

  """An object relationship"""
  tournament: tournaments
  tv_delay: Int!
  type: e_match_types_enum!
}

"""
aggregated selection of "match_options"
"""
type match_options_aggregate {
  aggregate: match_options_aggregate_fields
  nodes: [match_options!]!
}

"""
aggregate fields of "match_options"
"""
type match_options_aggregate_fields {
  avg: match_options_avg_fields
  count(columns: [match_options_select_column!], distinct: Boolean): Int!
  max: match_options_max_fields
  min: match_options_min_fields
  stddev: match_options_stddev_fields
  stddev_pop: match_options_stddev_pop_fields
  stddev_samp: match_options_stddev_samp_fields
  sum: match_options_sum_fields
  var_pop: match_options_var_pop_fields
  var_samp: match_options_var_samp_fields
  variance: match_options_variance_fields
}

"""aggregate avg on columns"""
type match_options_avg_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""
Boolean expression to filter rows from the table "match_options". All fields are combined with a logical 'AND'.
"""
input match_options_bool_exp {
  _and: [match_options_bool_exp!]
  _not: match_options_bool_exp
  _or: [match_options_bool_exp!]
  best_of: Int_comparison_exp
  coaches: Boolean_comparison_exp
  has_active_matches: Boolean_comparison_exp
  id: uuid_comparison_exp
  invite_code: String_comparison_exp
  knife_round: Boolean_comparison_exp
  lobby_access: e_lobby_access_enum_comparison_exp
  map_pool: map_pools_bool_exp
  map_pool_id: uuid_comparison_exp
  map_veto: Boolean_comparison_exp
  matches: matches_bool_exp
  matches_aggregate: matches_aggregate_bool_exp
  mr: Int_comparison_exp
  number_of_substitutes: Int_comparison_exp
  overtime: Boolean_comparison_exp
  prefer_dedicated_server: Boolean_comparison_exp
  ready_setting: e_ready_settings_enum_comparison_exp
  region_veto: Boolean_comparison_exp
  regions: String_array_comparison_exp
  tech_timeout_setting: e_timeout_settings_enum_comparison_exp
  timeout_setting: e_timeout_settings_enum_comparison_exp
  tournament: tournaments_bool_exp
  tv_delay: Int_comparison_exp
  type: e_match_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "match_options"
"""
enum match_options_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_options_pkey
}

"""
input type for incrementing numeric columns in table "match_options"
"""
input match_options_inc_input {
  best_of: Int
  mr: Int
  number_of_substitutes: Int
  tv_delay: Int
}

"""
input type for inserting data into table "match_options"
"""
input match_options_insert_input {
  best_of: Int
  coaches: Boolean
  id: uuid
  invite_code: String
  knife_round: Boolean
  lobby_access: e_lobby_access_enum
  map_pool: map_pools_obj_rel_insert_input
  map_pool_id: uuid
  map_veto: Boolean
  matches: matches_arr_rel_insert_input
  mr: Int
  number_of_substitutes: Int
  overtime: Boolean
  prefer_dedicated_server: Boolean
  ready_setting: e_ready_settings_enum
  region_veto: Boolean
  regions: [String!]
  tech_timeout_setting: e_timeout_settings_enum
  timeout_setting: e_timeout_settings_enum
  tournament: tournaments_obj_rel_insert_input
  tv_delay: Int
  type: e_match_types_enum
}

"""aggregate max on columns"""
type match_options_max_fields {
  best_of: Int
  id: uuid
  invite_code: String
  map_pool_id: uuid
  mr: Int
  number_of_substitutes: Int
  regions: [String!]
  tv_delay: Int
}

"""aggregate min on columns"""
type match_options_min_fields {
  best_of: Int
  id: uuid
  invite_code: String
  map_pool_id: uuid
  mr: Int
  number_of_substitutes: Int
  regions: [String!]
  tv_delay: Int
}

"""
response of any mutation on the table "match_options"
"""
type match_options_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_options!]!
}

"""
input type for inserting object relation for remote table "match_options"
"""
input match_options_obj_rel_insert_input {
  data: match_options_insert_input!

  """upsert condition"""
  on_conflict: match_options_on_conflict
}

"""
on_conflict condition type for table "match_options"
"""
input match_options_on_conflict {
  constraint: match_options_constraint!
  update_columns: [match_options_update_column!]! = []
  where: match_options_bool_exp
}

"""Ordering options when selecting data from "match_options"."""
input match_options_order_by {
  best_of: order_by
  coaches: order_by
  has_active_matches: order_by
  id: order_by
  invite_code: order_by
  knife_round: order_by
  lobby_access: order_by
  map_pool: map_pools_order_by
  map_pool_id: order_by
  map_veto: order_by
  matches_aggregate: matches_aggregate_order_by
  mr: order_by
  number_of_substitutes: order_by
  overtime: order_by
  prefer_dedicated_server: order_by
  ready_setting: order_by
  region_veto: order_by
  regions: order_by
  tech_timeout_setting: order_by
  timeout_setting: order_by
  tournament: tournaments_order_by
  tv_delay: order_by
  type: order_by
}

"""primary key columns input for table: match_options"""
input match_options_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_options"
"""
enum match_options_select_column {
  """column name"""
  best_of

  """column name"""
  coaches

  """column name"""
  id

  """column name"""
  invite_code

  """column name"""
  knife_round

  """column name"""
  lobby_access

  """column name"""
  map_pool_id

  """column name"""
  map_veto

  """column name"""
  mr

  """column name"""
  number_of_substitutes

  """column name"""
  overtime

  """column name"""
  prefer_dedicated_server

  """column name"""
  ready_setting

  """column name"""
  region_veto

  """column name"""
  regions

  """column name"""
  tech_timeout_setting

  """column name"""
  timeout_setting

  """column name"""
  tv_delay

  """column name"""
  type
}

"""
input type for updating data in table "match_options"
"""
input match_options_set_input {
  best_of: Int
  coaches: Boolean
  id: uuid
  invite_code: String
  knife_round: Boolean
  lobby_access: e_lobby_access_enum
  map_pool_id: uuid
  map_veto: Boolean
  mr: Int
  number_of_substitutes: Int
  overtime: Boolean
  prefer_dedicated_server: Boolean
  ready_setting: e_ready_settings_enum
  region_veto: Boolean
  regions: [String!]
  tech_timeout_setting: e_timeout_settings_enum
  timeout_setting: e_timeout_settings_enum
  tv_delay: Int
  type: e_match_types_enum
}

"""aggregate stddev on columns"""
type match_options_stddev_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""aggregate stddev_pop on columns"""
type match_options_stddev_pop_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""aggregate stddev_samp on columns"""
type match_options_stddev_samp_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""
Streaming cursor of the table "match_options"
"""
input match_options_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_options_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_options_stream_cursor_value_input {
  best_of: Int
  coaches: Boolean
  id: uuid
  invite_code: String
  knife_round: Boolean
  lobby_access: e_lobby_access_enum
  map_pool_id: uuid
  map_veto: Boolean
  mr: Int
  number_of_substitutes: Int
  overtime: Boolean
  prefer_dedicated_server: Boolean
  ready_setting: e_ready_settings_enum
  region_veto: Boolean
  regions: [String!]
  tech_timeout_setting: e_timeout_settings_enum
  timeout_setting: e_timeout_settings_enum
  tv_delay: Int
  type: e_match_types_enum
}

"""aggregate sum on columns"""
type match_options_sum_fields {
  best_of: Int
  mr: Int
  number_of_substitutes: Int
  tv_delay: Int
}

"""
update columns of table "match_options"
"""
enum match_options_update_column {
  """column name"""
  best_of

  """column name"""
  coaches

  """column name"""
  id

  """column name"""
  invite_code

  """column name"""
  knife_round

  """column name"""
  lobby_access

  """column name"""
  map_pool_id

  """column name"""
  map_veto

  """column name"""
  mr

  """column name"""
  number_of_substitutes

  """column name"""
  overtime

  """column name"""
  prefer_dedicated_server

  """column name"""
  ready_setting

  """column name"""
  region_veto

  """column name"""
  regions

  """column name"""
  tech_timeout_setting

  """column name"""
  timeout_setting

  """column name"""
  tv_delay

  """column name"""
  type
}

input match_options_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: match_options_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: match_options_set_input

  """filter the rows which have to be updated"""
  where: match_options_bool_exp!
}

"""aggregate var_pop on columns"""
type match_options_var_pop_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""aggregate var_samp on columns"""
type match_options_var_samp_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""aggregate variance on columns"""
type match_options_variance_fields {
  best_of: Float
  mr: Float
  number_of_substitutes: Float
  tv_delay: Float
}

"""
columns and relationships of "match_region_veto_picks"
"""
type match_region_veto_picks {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_lineup: match_lineups!
  match_lineup_id: uuid!
  region: String!
  type: e_veto_pick_types_enum!
}

"""
aggregated selection of "match_region_veto_picks"
"""
type match_region_veto_picks_aggregate {
  aggregate: match_region_veto_picks_aggregate_fields
  nodes: [match_region_veto_picks!]!
}

input match_region_veto_picks_aggregate_bool_exp {
  count: match_region_veto_picks_aggregate_bool_exp_count
}

input match_region_veto_picks_aggregate_bool_exp_count {
  arguments: [match_region_veto_picks_select_column!]
  distinct: Boolean
  filter: match_region_veto_picks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_region_veto_picks"
"""
type match_region_veto_picks_aggregate_fields {
  count(columns: [match_region_veto_picks_select_column!], distinct: Boolean): Int!
  max: match_region_veto_picks_max_fields
  min: match_region_veto_picks_min_fields
}

"""
order by aggregate values of table "match_region_veto_picks"
"""
input match_region_veto_picks_aggregate_order_by {
  count: order_by
  max: match_region_veto_picks_max_order_by
  min: match_region_veto_picks_min_order_by
}

"""
input type for inserting array relation for remote table "match_region_veto_picks"
"""
input match_region_veto_picks_arr_rel_insert_input {
  data: [match_region_veto_picks_insert_input!]!

  """upsert condition"""
  on_conflict: match_region_veto_picks_on_conflict
}

"""
Boolean expression to filter rows from the table "match_region_veto_picks". All fields are combined with a logical 'AND'.
"""
input match_region_veto_picks_bool_exp {
  _and: [match_region_veto_picks_bool_exp!]
  _not: match_region_veto_picks_bool_exp
  _or: [match_region_veto_picks_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_lineup: match_lineups_bool_exp
  match_lineup_id: uuid_comparison_exp
  region: String_comparison_exp
  type: e_veto_pick_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "match_region_veto_picks"
"""
enum match_region_veto_picks_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_region_veto_picks_pkey
}

"""
input type for inserting data into table "match_region_veto_picks"
"""
input match_region_veto_picks_insert_input {
  created_at: timestamptz
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_lineup: match_lineups_obj_rel_insert_input
  match_lineup_id: uuid
  region: String
  type: e_veto_pick_types_enum
}

"""aggregate max on columns"""
type match_region_veto_picks_max_fields {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_lineup_id: uuid
  region: String
}

"""
order by max() on columns of table "match_region_veto_picks"
"""
input match_region_veto_picks_max_order_by {
  created_at: order_by
  id: order_by
  match_id: order_by
  match_lineup_id: order_by
  region: order_by
}

"""aggregate min on columns"""
type match_region_veto_picks_min_fields {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_lineup_id: uuid
  region: String
}

"""
order by min() on columns of table "match_region_veto_picks"
"""
input match_region_veto_picks_min_order_by {
  created_at: order_by
  id: order_by
  match_id: order_by
  match_lineup_id: order_by
  region: order_by
}

"""
response of any mutation on the table "match_region_veto_picks"
"""
type match_region_veto_picks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_region_veto_picks!]!
}

"""
on_conflict condition type for table "match_region_veto_picks"
"""
input match_region_veto_picks_on_conflict {
  constraint: match_region_veto_picks_constraint!
  update_columns: [match_region_veto_picks_update_column!]! = []
  where: match_region_veto_picks_bool_exp
}

"""Ordering options when selecting data from "match_region_veto_picks"."""
input match_region_veto_picks_order_by {
  created_at: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_lineup: match_lineups_order_by
  match_lineup_id: order_by
  region: order_by
  type: order_by
}

"""primary key columns input for table: match_region_veto_picks"""
input match_region_veto_picks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "match_region_veto_picks"
"""
enum match_region_veto_picks_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_lineup_id

  """column name"""
  region

  """column name"""
  type
}

"""
input type for updating data in table "match_region_veto_picks"
"""
input match_region_veto_picks_set_input {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_lineup_id: uuid
  region: String
  type: e_veto_pick_types_enum
}

"""
Streaming cursor of the table "match_region_veto_picks"
"""
input match_region_veto_picks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_region_veto_picks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_region_veto_picks_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_lineup_id: uuid
  region: String
  type: e_veto_pick_types_enum
}

"""
update columns of table "match_region_veto_picks"
"""
enum match_region_veto_picks_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_lineup_id

  """column name"""
  region

  """column name"""
  type
}

input match_region_veto_picks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: match_region_veto_picks_set_input

  """filter the rows which have to be updated"""
  where: match_region_veto_picks_bool_exp!
}

"""
columns and relationships of "match_type_cfgs"
"""
type match_type_cfgs {
  cfg: String!

  """An object relationship"""
  e_match_type: e_match_types!
  type: e_match_types_enum!
}

"""
aggregated selection of "match_type_cfgs"
"""
type match_type_cfgs_aggregate {
  aggregate: match_type_cfgs_aggregate_fields
  nodes: [match_type_cfgs!]!
}

input match_type_cfgs_aggregate_bool_exp {
  count: match_type_cfgs_aggregate_bool_exp_count
}

input match_type_cfgs_aggregate_bool_exp_count {
  arguments: [match_type_cfgs_select_column!]
  distinct: Boolean
  filter: match_type_cfgs_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match_type_cfgs"
"""
type match_type_cfgs_aggregate_fields {
  count(columns: [match_type_cfgs_select_column!], distinct: Boolean): Int!
  max: match_type_cfgs_max_fields
  min: match_type_cfgs_min_fields
}

"""
order by aggregate values of table "match_type_cfgs"
"""
input match_type_cfgs_aggregate_order_by {
  count: order_by
  max: match_type_cfgs_max_order_by
  min: match_type_cfgs_min_order_by
}

"""
input type for inserting array relation for remote table "match_type_cfgs"
"""
input match_type_cfgs_arr_rel_insert_input {
  data: [match_type_cfgs_insert_input!]!

  """upsert condition"""
  on_conflict: match_type_cfgs_on_conflict
}

"""
Boolean expression to filter rows from the table "match_type_cfgs". All fields are combined with a logical 'AND'.
"""
input match_type_cfgs_bool_exp {
  _and: [match_type_cfgs_bool_exp!]
  _not: match_type_cfgs_bool_exp
  _or: [match_type_cfgs_bool_exp!]
  cfg: String_comparison_exp
  e_match_type: e_match_types_bool_exp
  type: e_match_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "match_type_cfgs"
"""
enum match_type_cfgs_constraint {
  """
  unique or primary key constraint on columns "type"
  """
  match_type_cfgs_pkey
}

"""
input type for inserting data into table "match_type_cfgs"
"""
input match_type_cfgs_insert_input {
  cfg: String
  e_match_type: e_match_types_obj_rel_insert_input
  type: e_match_types_enum
}

"""aggregate max on columns"""
type match_type_cfgs_max_fields {
  cfg: String
}

"""
order by max() on columns of table "match_type_cfgs"
"""
input match_type_cfgs_max_order_by {
  cfg: order_by
}

"""aggregate min on columns"""
type match_type_cfgs_min_fields {
  cfg: String
}

"""
order by min() on columns of table "match_type_cfgs"
"""
input match_type_cfgs_min_order_by {
  cfg: order_by
}

"""
response of any mutation on the table "match_type_cfgs"
"""
type match_type_cfgs_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match_type_cfgs!]!
}

"""
on_conflict condition type for table "match_type_cfgs"
"""
input match_type_cfgs_on_conflict {
  constraint: match_type_cfgs_constraint!
  update_columns: [match_type_cfgs_update_column!]! = []
  where: match_type_cfgs_bool_exp
}

"""Ordering options when selecting data from "match_type_cfgs"."""
input match_type_cfgs_order_by {
  cfg: order_by
  e_match_type: e_match_types_order_by
  type: order_by
}

"""primary key columns input for table: match_type_cfgs"""
input match_type_cfgs_pk_columns_input {
  type: e_match_types_enum!
}

"""
select columns of table "match_type_cfgs"
"""
enum match_type_cfgs_select_column {
  """column name"""
  cfg

  """column name"""
  type
}

"""
input type for updating data in table "match_type_cfgs"
"""
input match_type_cfgs_set_input {
  cfg: String
  type: e_match_types_enum
}

"""
Streaming cursor of the table "match_type_cfgs"
"""
input match_type_cfgs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_type_cfgs_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_type_cfgs_stream_cursor_value_input {
  cfg: String
  type: e_match_types_enum
}

"""
update columns of table "match_type_cfgs"
"""
enum match_type_cfgs_update_column {
  """column name"""
  cfg

  """column name"""
  type
}

input match_type_cfgs_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: match_type_cfgs_set_input

  """filter the rows which have to be updated"""
  where: match_type_cfgs_bool_exp!
}

"""
columns and relationships of "matches"
"""
type matches {
  """
  A computed field, executes function "can_assign_server_to_match"
  """
  can_assign_server: Boolean

  """
  A computed field, executes function "can_cancel_match"
  """
  can_cancel: Boolean

  """
  A computed field, executes function "can_check_in"
  """
  can_check_in: Boolean

  """
  A computed field, executes function "can_schedule_match"
  """
  can_schedule: Boolean

  """
  A computed field, executes function "can_start_match"
  """
  can_start: Boolean
  cancels_at: timestamptz

  """
  A computed field, executes function "get_match_connection_link"
  """
  connection_link: String

  """
  A computed field, executes function "get_match_connection_string"
  """
  connection_string: String
  created_at: timestamptz!

  """
  A computed field, executes function "get_current_match_map"
  """
  current_match_map_id: uuid

  """An array relationship"""
  demos(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): [match_map_demos!]!

  """An aggregate relationship"""
  demos_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): match_map_demos_aggregate!

  """An object relationship"""
  e_match_status: e_match_status!

  """An object relationship"""
  e_region: server_regions
  ended_at: timestamptz
  id: uuid!

  """
  A computed field, executes function "match_invite_code"
  """
  invite_code: String

  """An array relationship"""
  invites(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): [match_invites!]!

  """An aggregate relationship"""
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): match_invites_aggregate!

  """
  A computed field, executes function "is_captain"
  """
  is_captain: Boolean

  """
  A computed field, executes function "is_coach"
  """
  is_coach: Boolean

  """
  A computed field, executes function "is_in_lineup"
  """
  is_in_lineup: Boolean

  """
  A computed field, executes function "is_match_server_available"
  """
  is_match_server_available: Boolean

  """
  A computed field, executes function "is_match_organizer"
  """
  is_organizer: Boolean

  """
  A computed field, executes function "is_server_online"
  """
  is_server_online: Boolean

  """
  A computed field, executes function "is_tournament_match"
  """
  is_tournament_match: Boolean
  label: String

  """An object relationship"""
  lineup_1: match_lineups!
  lineup_1_id: uuid!

  """An object relationship"""
  lineup_2: match_lineups!
  lineup_2_id: uuid!

  """
  A computed field, executes function "get_lineup_counts"
  """
  lineup_counts(
    """JSON select path"""
    path: String
  ): json

  """
  A computed field, executes function "get_map_veto_picking_lineup_id"
  """
  map_veto_picking_lineup_id: uuid

  """An array relationship"""
  map_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An aggregate relationship"""
  map_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!

  """
  A computed field, executes function "get_map_veto_type"
  """
  map_veto_type: String

  """An array relationship"""
  match_maps(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!
  match_options_id: uuid

  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int

  """An object relationship"""
  options: match_options

  """An object relationship"""
  organizer: players
  organizer_steam_id: bigint
  password: String!

  """An array relationship"""
  player_assists(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  player_assists_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!

  """An array relationship"""
  player_damages(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  player_damages_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """An array relationship"""
  player_flashes(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  player_flashes_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!

  """An array relationship"""
  player_kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  player_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!

  """An array relationship"""
  player_objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  player_objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!

  """An array relationship"""
  player_unused_utilities(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """An aggregate relationship"""
  player_unused_utilities_aggregate(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): player_unused_utility_aggregate!

  """An array relationship"""
  player_utility(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  player_utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!
  region: String

  """
  A computed field, executes function "get_region_veto_picking_lineup_id"
  """
  region_veto_picking_lineup_id: uuid

  """An array relationship"""
  region_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): [match_region_veto_picks!]!

  """An aggregate relationship"""
  region_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): match_region_veto_picks_aggregate!

  """
  A computed field, executes function "match_requested_organizer"
  """
  requested_organizer: Boolean
  scheduled_at: timestamptz

  """An object relationship"""
  server: servers
  server_id: uuid

  """
  A computed field, executes function "get_match_server_region"
  """
  server_region: String

  """
  A computed field, executes function "get_match_server_type"
  """
  server_type: String
  started_at: timestamptz
  status: e_match_status_enum!

  """
  A computed field, executes function "get_match_teams"
  """
  teams(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]

  """An array relationship"""
  tournament_brackets(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): [tournament_brackets!]!

  """An aggregate relationship"""
  tournament_brackets_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): tournament_brackets_aggregate!

  """
  A computed field, executes function "get_match_tv_connection_string"
  """
  tv_connection_string: String

  """An object relationship"""
  winner: match_lineups
  winning_lineup_id: uuid
}

"""
aggregated selection of "matches"
"""
type matches_aggregate {
  aggregate: matches_aggregate_fields
  nodes: [matches!]!
}

input matches_aggregate_bool_exp {
  count: matches_aggregate_bool_exp_count
}

input matches_aggregate_bool_exp_count {
  arguments: [matches_select_column!]
  distinct: Boolean
  filter: matches_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "matches"
"""
type matches_aggregate_fields {
  avg: matches_avg_fields
  count(columns: [matches_select_column!], distinct: Boolean): Int!
  max: matches_max_fields
  min: matches_min_fields
  stddev: matches_stddev_fields
  stddev_pop: matches_stddev_pop_fields
  stddev_samp: matches_stddev_samp_fields
  sum: matches_sum_fields
  var_pop: matches_var_pop_fields
  var_samp: matches_var_samp_fields
  variance: matches_variance_fields
}

"""
order by aggregate values of table "matches"
"""
input matches_aggregate_order_by {
  avg: matches_avg_order_by
  count: order_by
  max: matches_max_order_by
  min: matches_min_order_by
  stddev: matches_stddev_order_by
  stddev_pop: matches_stddev_pop_order_by
  stddev_samp: matches_stddev_samp_order_by
  sum: matches_sum_order_by
  var_pop: matches_var_pop_order_by
  var_samp: matches_var_samp_order_by
  variance: matches_variance_order_by
}

"""
input type for inserting array relation for remote table "matches"
"""
input matches_arr_rel_insert_input {
  data: [matches_insert_input!]!

  """upsert condition"""
  on_conflict: matches_on_conflict
}

"""aggregate avg on columns"""
type matches_avg_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by avg() on columns of table "matches"
"""
input matches_avg_order_by {
  organizer_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'.
"""
input matches_bool_exp {
  _and: [matches_bool_exp!]
  _not: matches_bool_exp
  _or: [matches_bool_exp!]
  can_assign_server: Boolean_comparison_exp
  can_cancel: Boolean_comparison_exp
  can_check_in: Boolean_comparison_exp
  can_schedule: Boolean_comparison_exp
  can_start: Boolean_comparison_exp
  cancels_at: timestamptz_comparison_exp
  connection_link: String_comparison_exp
  connection_string: String_comparison_exp
  created_at: timestamptz_comparison_exp
  current_match_map_id: uuid_comparison_exp
  demos: match_map_demos_bool_exp
  demos_aggregate: match_map_demos_aggregate_bool_exp
  e_match_status: e_match_status_bool_exp
  e_region: server_regions_bool_exp
  ended_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  invite_code: String_comparison_exp
  invites: match_invites_bool_exp
  invites_aggregate: match_invites_aggregate_bool_exp
  is_captain: Boolean_comparison_exp
  is_coach: Boolean_comparison_exp
  is_in_lineup: Boolean_comparison_exp
  is_match_server_available: Boolean_comparison_exp
  is_organizer: Boolean_comparison_exp
  is_server_online: Boolean_comparison_exp
  is_tournament_match: Boolean_comparison_exp
  label: String_comparison_exp
  lineup_1: match_lineups_bool_exp
  lineup_1_id: uuid_comparison_exp
  lineup_2: match_lineups_bool_exp
  lineup_2_id: uuid_comparison_exp
  lineup_counts: json_comparison_exp
  map_veto_picking_lineup_id: uuid_comparison_exp
  map_veto_picks: match_map_veto_picks_bool_exp
  map_veto_picks_aggregate: match_map_veto_picks_aggregate_bool_exp
  map_veto_type: String_comparison_exp
  match_maps: match_maps_bool_exp
  match_maps_aggregate: match_maps_aggregate_bool_exp
  match_options_id: uuid_comparison_exp
  max_players_per_lineup: Int_comparison_exp
  min_players_per_lineup: Int_comparison_exp
  options: match_options_bool_exp
  organizer: players_bool_exp
  organizer_steam_id: bigint_comparison_exp
  password: String_comparison_exp
  player_assists: player_assists_bool_exp
  player_assists_aggregate: player_assists_aggregate_bool_exp
  player_damages: player_damages_bool_exp
  player_damages_aggregate: player_damages_aggregate_bool_exp
  player_flashes: player_flashes_bool_exp
  player_flashes_aggregate: player_flashes_aggregate_bool_exp
  player_kills: player_kills_bool_exp
  player_kills_aggregate: player_kills_aggregate_bool_exp
  player_objectives: player_objectives_bool_exp
  player_objectives_aggregate: player_objectives_aggregate_bool_exp
  player_unused_utilities: player_unused_utility_bool_exp
  player_unused_utilities_aggregate: player_unused_utility_aggregate_bool_exp
  player_utility: player_utility_bool_exp
  player_utility_aggregate: player_utility_aggregate_bool_exp
  region: String_comparison_exp
  region_veto_picking_lineup_id: uuid_comparison_exp
  region_veto_picks: match_region_veto_picks_bool_exp
  region_veto_picks_aggregate: match_region_veto_picks_aggregate_bool_exp
  requested_organizer: Boolean_comparison_exp
  scheduled_at: timestamptz_comparison_exp
  server: servers_bool_exp
  server_id: uuid_comparison_exp
  server_region: String_comparison_exp
  server_type: String_comparison_exp
  started_at: timestamptz_comparison_exp
  status: e_match_status_enum_comparison_exp
  teams: teams_bool_exp
  tournament_brackets: tournament_brackets_bool_exp
  tournament_brackets_aggregate: tournament_brackets_aggregate_bool_exp
  tv_connection_string: String_comparison_exp
  winner: match_lineups_bool_exp
  winning_lineup_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "matches"
"""
enum matches_constraint {
  """
  unique or primary key constraint on columns "lineup_1_id"
  """
  matches_lineup_1_id_key

  """
  unique or primary key constraint on columns "lineup_2_id", "lineup_1_id"
  """
  matches_lineup_1_id_lineup_2_id_key

  """
  unique or primary key constraint on columns "lineup_2_id"
  """
  matches_lineup_2_id_key

  """
  unique or primary key constraint on columns "id"
  """
  matches_pkey
}

"""
input type for incrementing numeric columns in table "matches"
"""
input matches_inc_input {
  organizer_steam_id: bigint
}

"""
input type for inserting data into table "matches"
"""
input matches_insert_input {
  cancels_at: timestamptz
  created_at: timestamptz
  demos: match_map_demos_arr_rel_insert_input
  e_match_status: e_match_status_obj_rel_insert_input
  e_region: server_regions_obj_rel_insert_input
  ended_at: timestamptz
  id: uuid
  invites: match_invites_arr_rel_insert_input
  label: String
  lineup_1: match_lineups_obj_rel_insert_input
  lineup_1_id: uuid
  lineup_2: match_lineups_obj_rel_insert_input
  lineup_2_id: uuid
  map_veto_picks: match_map_veto_picks_arr_rel_insert_input
  match_maps: match_maps_arr_rel_insert_input
  match_options_id: uuid
  options: match_options_obj_rel_insert_input
  organizer: players_obj_rel_insert_input
  organizer_steam_id: bigint
  password: String
  player_assists: player_assists_arr_rel_insert_input
  player_damages: player_damages_arr_rel_insert_input
  player_flashes: player_flashes_arr_rel_insert_input
  player_kills: player_kills_arr_rel_insert_input
  player_objectives: player_objectives_arr_rel_insert_input
  player_unused_utilities: player_unused_utility_arr_rel_insert_input
  player_utility: player_utility_arr_rel_insert_input
  region: String
  region_veto_picks: match_region_veto_picks_arr_rel_insert_input
  scheduled_at: timestamptz
  server: servers_obj_rel_insert_input
  server_id: uuid
  started_at: timestamptz
  status: e_match_status_enum
  tournament_brackets: tournament_brackets_arr_rel_insert_input
  winner: match_lineups_obj_rel_insert_input
  winning_lineup_id: uuid
}

"""aggregate max on columns"""
type matches_max_fields {
  cancels_at: timestamptz

  """
  A computed field, executes function "get_match_connection_link"
  """
  connection_link: String

  """
  A computed field, executes function "get_match_connection_string"
  """
  connection_string: String
  created_at: timestamptz

  """
  A computed field, executes function "get_current_match_map"
  """
  current_match_map_id: uuid
  ended_at: timestamptz
  id: uuid

  """
  A computed field, executes function "match_invite_code"
  """
  invite_code: String
  label: String
  lineup_1_id: uuid
  lineup_2_id: uuid

  """
  A computed field, executes function "get_map_veto_picking_lineup_id"
  """
  map_veto_picking_lineup_id: uuid

  """
  A computed field, executes function "get_map_veto_type"
  """
  map_veto_type: String
  match_options_id: uuid

  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: bigint
  password: String
  region: String

  """
  A computed field, executes function "get_region_veto_picking_lineup_id"
  """
  region_veto_picking_lineup_id: uuid
  scheduled_at: timestamptz
  server_id: uuid

  """
  A computed field, executes function "get_match_server_region"
  """
  server_region: String

  """
  A computed field, executes function "get_match_server_type"
  """
  server_type: String
  started_at: timestamptz

  """
  A computed field, executes function "get_match_tv_connection_string"
  """
  tv_connection_string: String
  winning_lineup_id: uuid
}

"""
order by max() on columns of table "matches"
"""
input matches_max_order_by {
  cancels_at: order_by
  created_at: order_by
  ended_at: order_by
  id: order_by
  label: order_by
  lineup_1_id: order_by
  lineup_2_id: order_by
  match_options_id: order_by
  organizer_steam_id: order_by
  password: order_by
  region: order_by
  scheduled_at: order_by
  server_id: order_by
  started_at: order_by
  winning_lineup_id: order_by
}

"""aggregate min on columns"""
type matches_min_fields {
  cancels_at: timestamptz

  """
  A computed field, executes function "get_match_connection_link"
  """
  connection_link: String

  """
  A computed field, executes function "get_match_connection_string"
  """
  connection_string: String
  created_at: timestamptz

  """
  A computed field, executes function "get_current_match_map"
  """
  current_match_map_id: uuid
  ended_at: timestamptz
  id: uuid

  """
  A computed field, executes function "match_invite_code"
  """
  invite_code: String
  label: String
  lineup_1_id: uuid
  lineup_2_id: uuid

  """
  A computed field, executes function "get_map_veto_picking_lineup_id"
  """
  map_veto_picking_lineup_id: uuid

  """
  A computed field, executes function "get_map_veto_type"
  """
  map_veto_type: String
  match_options_id: uuid

  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: bigint
  password: String
  region: String

  """
  A computed field, executes function "get_region_veto_picking_lineup_id"
  """
  region_veto_picking_lineup_id: uuid
  scheduled_at: timestamptz
  server_id: uuid

  """
  A computed field, executes function "get_match_server_region"
  """
  server_region: String

  """
  A computed field, executes function "get_match_server_type"
  """
  server_type: String
  started_at: timestamptz

  """
  A computed field, executes function "get_match_tv_connection_string"
  """
  tv_connection_string: String
  winning_lineup_id: uuid
}

"""
order by min() on columns of table "matches"
"""
input matches_min_order_by {
  cancels_at: order_by
  created_at: order_by
  ended_at: order_by
  id: order_by
  label: order_by
  lineup_1_id: order_by
  lineup_2_id: order_by
  match_options_id: order_by
  organizer_steam_id: order_by
  password: order_by
  region: order_by
  scheduled_at: order_by
  server_id: order_by
  started_at: order_by
  winning_lineup_id: order_by
}

"""
response of any mutation on the table "matches"
"""
type matches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [matches!]!
}

"""
input type for inserting object relation for remote table "matches"
"""
input matches_obj_rel_insert_input {
  data: matches_insert_input!

  """upsert condition"""
  on_conflict: matches_on_conflict
}

"""
on_conflict condition type for table "matches"
"""
input matches_on_conflict {
  constraint: matches_constraint!
  update_columns: [matches_update_column!]! = []
  where: matches_bool_exp
}

"""Ordering options when selecting data from "matches"."""
input matches_order_by {
  can_assign_server: order_by
  can_cancel: order_by
  can_check_in: order_by
  can_schedule: order_by
  can_start: order_by
  cancels_at: order_by
  connection_link: order_by
  connection_string: order_by
  created_at: order_by
  current_match_map_id: order_by
  demos_aggregate: match_map_demos_aggregate_order_by
  e_match_status: e_match_status_order_by
  e_region: server_regions_order_by
  ended_at: order_by
  id: order_by
  invite_code: order_by
  invites_aggregate: match_invites_aggregate_order_by
  is_captain: order_by
  is_coach: order_by
  is_in_lineup: order_by
  is_match_server_available: order_by
  is_organizer: order_by
  is_server_online: order_by
  is_tournament_match: order_by
  label: order_by
  lineup_1: match_lineups_order_by
  lineup_1_id: order_by
  lineup_2: match_lineups_order_by
  lineup_2_id: order_by
  lineup_counts: order_by
  map_veto_picking_lineup_id: order_by
  map_veto_picks_aggregate: match_map_veto_picks_aggregate_order_by
  map_veto_type: order_by
  match_maps_aggregate: match_maps_aggregate_order_by
  match_options_id: order_by
  max_players_per_lineup: order_by
  min_players_per_lineup: order_by
  options: match_options_order_by
  organizer: players_order_by
  organizer_steam_id: order_by
  password: order_by
  player_assists_aggregate: player_assists_aggregate_order_by
  player_damages_aggregate: player_damages_aggregate_order_by
  player_flashes_aggregate: player_flashes_aggregate_order_by
  player_kills_aggregate: player_kills_aggregate_order_by
  player_objectives_aggregate: player_objectives_aggregate_order_by
  player_unused_utilities_aggregate: player_unused_utility_aggregate_order_by
  player_utility_aggregate: player_utility_aggregate_order_by
  region: order_by
  region_veto_picking_lineup_id: order_by
  region_veto_picks_aggregate: match_region_veto_picks_aggregate_order_by
  requested_organizer: order_by
  scheduled_at: order_by
  server: servers_order_by
  server_id: order_by
  server_region: order_by
  server_type: order_by
  started_at: order_by
  status: order_by
  teams_aggregate: teams_aggregate_order_by
  tournament_brackets_aggregate: tournament_brackets_aggregate_order_by
  tv_connection_string: order_by
  winner: match_lineups_order_by
  winning_lineup_id: order_by
}

"""primary key columns input for table: matches"""
input matches_pk_columns_input {
  id: uuid!
}

"""
select columns of table "matches"
"""
enum matches_select_column {
  """column name"""
  cancels_at

  """column name"""
  created_at

  """column name"""
  ended_at

  """column name"""
  id

  """column name"""
  label

  """column name"""
  lineup_1_id

  """column name"""
  lineup_2_id

  """column name"""
  match_options_id

  """column name"""
  organizer_steam_id

  """column name"""
  password

  """column name"""
  region

  """column name"""
  scheduled_at

  """column name"""
  server_id

  """column name"""
  started_at

  """column name"""
  status

  """column name"""
  winning_lineup_id
}

"""
input type for updating data in table "matches"
"""
input matches_set_input {
  cancels_at: timestamptz
  created_at: timestamptz
  ended_at: timestamptz
  id: uuid
  label: String
  lineup_1_id: uuid
  lineup_2_id: uuid
  match_options_id: uuid
  organizer_steam_id: bigint
  password: String
  region: String
  scheduled_at: timestamptz
  server_id: uuid
  started_at: timestamptz
  status: e_match_status_enum
  winning_lineup_id: uuid
}

"""aggregate stddev on columns"""
type matches_stddev_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev() on columns of table "matches"
"""
input matches_stddev_order_by {
  organizer_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type matches_stddev_pop_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev_pop() on columns of table "matches"
"""
input matches_stddev_pop_order_by {
  organizer_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type matches_stddev_samp_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev_samp() on columns of table "matches"
"""
input matches_stddev_samp_order_by {
  organizer_steam_id: order_by
}

"""
Streaming cursor of the table "matches"
"""
input matches_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: matches_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input matches_stream_cursor_value_input {
  cancels_at: timestamptz
  created_at: timestamptz
  ended_at: timestamptz
  id: uuid
  label: String
  lineup_1_id: uuid
  lineup_2_id: uuid
  match_options_id: uuid
  organizer_steam_id: bigint
  password: String
  region: String
  scheduled_at: timestamptz
  server_id: uuid
  started_at: timestamptz
  status: e_match_status_enum
  winning_lineup_id: uuid
}

"""aggregate sum on columns"""
type matches_sum_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: bigint
}

"""
order by sum() on columns of table "matches"
"""
input matches_sum_order_by {
  organizer_steam_id: order_by
}

"""
update columns of table "matches"
"""
enum matches_update_column {
  """column name"""
  cancels_at

  """column name"""
  created_at

  """column name"""
  ended_at

  """column name"""
  id

  """column name"""
  label

  """column name"""
  lineup_1_id

  """column name"""
  lineup_2_id

  """column name"""
  match_options_id

  """column name"""
  organizer_steam_id

  """column name"""
  password

  """column name"""
  region

  """column name"""
  scheduled_at

  """column name"""
  server_id

  """column name"""
  started_at

  """column name"""
  status

  """column name"""
  winning_lineup_id
}

input matches_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: matches_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: matches_set_input

  """filter the rows which have to be updated"""
  where: matches_bool_exp!
}

"""aggregate var_pop on columns"""
type matches_var_pop_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by var_pop() on columns of table "matches"
"""
input matches_var_pop_order_by {
  organizer_steam_id: order_by
}

"""aggregate var_samp on columns"""
type matches_var_samp_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by var_samp() on columns of table "matches"
"""
input matches_var_samp_order_by {
  organizer_steam_id: order_by
}

"""aggregate variance on columns"""
type matches_variance_fields {
  """
  A computed field, executes function "match_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "match_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by variance() on columns of table "matches"
"""
input matches_variance_order_by {
  organizer_steam_id: order_by
}

"""
columns and relationships of "migration_hashes.hashes"
"""
type migration_hashes_hashes {
  hash: String!
  name: String!
}

"""
aggregated selection of "migration_hashes.hashes"
"""
type migration_hashes_hashes_aggregate {
  aggregate: migration_hashes_hashes_aggregate_fields
  nodes: [migration_hashes_hashes!]!
}

"""
aggregate fields of "migration_hashes.hashes"
"""
type migration_hashes_hashes_aggregate_fields {
  count(columns: [migration_hashes_hashes_select_column!], distinct: Boolean): Int!
  max: migration_hashes_hashes_max_fields
  min: migration_hashes_hashes_min_fields
}

"""
Boolean expression to filter rows from the table "migration_hashes.hashes". All fields are combined with a logical 'AND'.
"""
input migration_hashes_hashes_bool_exp {
  _and: [migration_hashes_hashes_bool_exp!]
  _not: migration_hashes_hashes_bool_exp
  _or: [migration_hashes_hashes_bool_exp!]
  hash: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "migration_hashes.hashes"
"""
enum migration_hashes_hashes_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  hashes_pkey
}

"""
input type for inserting data into table "migration_hashes.hashes"
"""
input migration_hashes_hashes_insert_input {
  hash: String
  name: String
}

"""aggregate max on columns"""
type migration_hashes_hashes_max_fields {
  hash: String
  name: String
}

"""aggregate min on columns"""
type migration_hashes_hashes_min_fields {
  hash: String
  name: String
}

"""
response of any mutation on the table "migration_hashes.hashes"
"""
type migration_hashes_hashes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [migration_hashes_hashes!]!
}

"""
on_conflict condition type for table "migration_hashes.hashes"
"""
input migration_hashes_hashes_on_conflict {
  constraint: migration_hashes_hashes_constraint!
  update_columns: [migration_hashes_hashes_update_column!]! = []
  where: migration_hashes_hashes_bool_exp
}

"""Ordering options when selecting data from "migration_hashes.hashes"."""
input migration_hashes_hashes_order_by {
  hash: order_by
  name: order_by
}

"""primary key columns input for table: migration_hashes.hashes"""
input migration_hashes_hashes_pk_columns_input {
  name: String!
}

"""
select columns of table "migration_hashes.hashes"
"""
enum migration_hashes_hashes_select_column {
  """column name"""
  hash

  """column name"""
  name
}

"""
input type for updating data in table "migration_hashes.hashes"
"""
input migration_hashes_hashes_set_input {
  hash: String
  name: String
}

"""
Streaming cursor of the table "migration_hashes_hashes"
"""
input migration_hashes_hashes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: migration_hashes_hashes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input migration_hashes_hashes_stream_cursor_value_input {
  hash: String
  name: String
}

"""
update columns of table "migration_hashes.hashes"
"""
enum migration_hashes_hashes_update_column {
  """column name"""
  hash

  """column name"""
  name
}

input migration_hashes_hashes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: migration_hashes_hashes_set_input

  """filter the rows which have to be updated"""
  where: migration_hashes_hashes_bool_exp!
}

"""mutation root"""
type mutation_root {
  """accept team invite"""
  acceptInvite(invite_id: uuid!, type: String!): SuccessOutput
  approveNameChange(name: String!, steam_id: bigint!): SuccessOutput

  """callForOrganizer"""
  callForOrganizer(match_id: String!): SuccessOutput

  """cancelMatch"""
  cancelMatch(match_id: uuid!): SuccessOutput

  """checkIntoMatch"""
  checkIntoMatch(match_id: uuid!): SuccessOutput

  """
  delete data from the table: "_map_pool"
  """
  delete__map_pool(
    """filter the rows which have to be deleted"""
    where: _map_pool_bool_exp!
  ): _map_pool_mutation_response

  """
  delete single row from the table: "_map_pool"
  """
  delete__map_pool_by_pk(map_id: uuid!, map_pool_id: uuid!): _map_pool

  """
  delete data from the table: "abandoned_matches"
  """
  delete_abandoned_matches(
    """filter the rows which have to be deleted"""
    where: abandoned_matches_bool_exp!
  ): abandoned_matches_mutation_response

  """
  delete single row from the table: "abandoned_matches"
  """
  delete_abandoned_matches_by_pk(id: uuid!): abandoned_matches

  """
  delete data from the table: "e_friend_status"
  """
  delete_e_friend_status(
    """filter the rows which have to be deleted"""
    where: e_friend_status_bool_exp!
  ): e_friend_status_mutation_response

  """
  delete single row from the table: "e_friend_status"
  """
  delete_e_friend_status_by_pk(value: String!): e_friend_status

  """
  delete data from the table: "e_game_server_node_statuses"
  """
  delete_e_game_server_node_statuses(
    """filter the rows which have to be deleted"""
    where: e_game_server_node_statuses_bool_exp!
  ): e_game_server_node_statuses_mutation_response

  """
  delete single row from the table: "e_game_server_node_statuses"
  """
  delete_e_game_server_node_statuses_by_pk(value: String!): e_game_server_node_statuses

  """
  delete data from the table: "e_lobby_access"
  """
  delete_e_lobby_access(
    """filter the rows which have to be deleted"""
    where: e_lobby_access_bool_exp!
  ): e_lobby_access_mutation_response

  """
  delete single row from the table: "e_lobby_access"
  """
  delete_e_lobby_access_by_pk(value: String!): e_lobby_access

  """
  delete data from the table: "e_lobby_player_status"
  """
  delete_e_lobby_player_status(
    """filter the rows which have to be deleted"""
    where: e_lobby_player_status_bool_exp!
  ): e_lobby_player_status_mutation_response

  """
  delete single row from the table: "e_lobby_player_status"
  """
  delete_e_lobby_player_status_by_pk(value: String!): e_lobby_player_status

  """
  delete data from the table: "e_map_pool_types"
  """
  delete_e_map_pool_types(
    """filter the rows which have to be deleted"""
    where: e_map_pool_types_bool_exp!
  ): e_map_pool_types_mutation_response

  """
  delete single row from the table: "e_map_pool_types"
  """
  delete_e_map_pool_types_by_pk(value: String!): e_map_pool_types

  """
  delete data from the table: "e_match_map_status"
  """
  delete_e_match_map_status(
    """filter the rows which have to be deleted"""
    where: e_match_map_status_bool_exp!
  ): e_match_map_status_mutation_response

  """
  delete single row from the table: "e_match_map_status"
  """
  delete_e_match_map_status_by_pk(value: String!): e_match_map_status

  """
  delete data from the table: "e_match_status"
  """
  delete_e_match_status(
    """filter the rows which have to be deleted"""
    where: e_match_status_bool_exp!
  ): e_match_status_mutation_response

  """
  delete single row from the table: "e_match_status"
  """
  delete_e_match_status_by_pk(value: String!): e_match_status

  """
  delete data from the table: "e_match_types"
  """
  delete_e_match_types(
    """filter the rows which have to be deleted"""
    where: e_match_types_bool_exp!
  ): e_match_types_mutation_response

  """
  delete single row from the table: "e_match_types"
  """
  delete_e_match_types_by_pk(value: String!): e_match_types

  """
  delete data from the table: "e_notification_types"
  """
  delete_e_notification_types(
    """filter the rows which have to be deleted"""
    where: e_notification_types_bool_exp!
  ): e_notification_types_mutation_response

  """
  delete single row from the table: "e_notification_types"
  """
  delete_e_notification_types_by_pk(value: String!): e_notification_types

  """
  delete data from the table: "e_objective_types"
  """
  delete_e_objective_types(
    """filter the rows which have to be deleted"""
    where: e_objective_types_bool_exp!
  ): e_objective_types_mutation_response

  """
  delete single row from the table: "e_objective_types"
  """
  delete_e_objective_types_by_pk(value: String!): e_objective_types

  """
  delete data from the table: "e_player_roles"
  """
  delete_e_player_roles(
    """filter the rows which have to be deleted"""
    where: e_player_roles_bool_exp!
  ): e_player_roles_mutation_response

  """
  delete single row from the table: "e_player_roles"
  """
  delete_e_player_roles_by_pk(value: String!): e_player_roles

  """
  delete data from the table: "e_ready_settings"
  """
  delete_e_ready_settings(
    """filter the rows which have to be deleted"""
    where: e_ready_settings_bool_exp!
  ): e_ready_settings_mutation_response

  """
  delete single row from the table: "e_ready_settings"
  """
  delete_e_ready_settings_by_pk(value: String!): e_ready_settings

  """
  delete data from the table: "e_sanction_types"
  """
  delete_e_sanction_types(
    """filter the rows which have to be deleted"""
    where: e_sanction_types_bool_exp!
  ): e_sanction_types_mutation_response

  """
  delete single row from the table: "e_sanction_types"
  """
  delete_e_sanction_types_by_pk(value: String!): e_sanction_types

  """
  delete data from the table: "e_sides"
  """
  delete_e_sides(
    """filter the rows which have to be deleted"""
    where: e_sides_bool_exp!
  ): e_sides_mutation_response

  """
  delete single row from the table: "e_sides"
  """
  delete_e_sides_by_pk(value: String!): e_sides

  """
  delete data from the table: "e_team_roles"
  """
  delete_e_team_roles(
    """filter the rows which have to be deleted"""
    where: e_team_roles_bool_exp!
  ): e_team_roles_mutation_response

  """
  delete single row from the table: "e_team_roles"
  """
  delete_e_team_roles_by_pk(value: String!): e_team_roles

  """
  delete data from the table: "e_timeout_settings"
  """
  delete_e_timeout_settings(
    """filter the rows which have to be deleted"""
    where: e_timeout_settings_bool_exp!
  ): e_timeout_settings_mutation_response

  """
  delete single row from the table: "e_timeout_settings"
  """
  delete_e_timeout_settings_by_pk(value: String!): e_timeout_settings

  """
  delete data from the table: "e_tournament_stage_types"
  """
  delete_e_tournament_stage_types(
    """filter the rows which have to be deleted"""
    where: e_tournament_stage_types_bool_exp!
  ): e_tournament_stage_types_mutation_response

  """
  delete single row from the table: "e_tournament_stage_types"
  """
  delete_e_tournament_stage_types_by_pk(value: String!): e_tournament_stage_types

  """
  delete data from the table: "e_tournament_status"
  """
  delete_e_tournament_status(
    """filter the rows which have to be deleted"""
    where: e_tournament_status_bool_exp!
  ): e_tournament_status_mutation_response

  """
  delete single row from the table: "e_tournament_status"
  """
  delete_e_tournament_status_by_pk(value: String!): e_tournament_status

  """
  delete data from the table: "e_utility_types"
  """
  delete_e_utility_types(
    """filter the rows which have to be deleted"""
    where: e_utility_types_bool_exp!
  ): e_utility_types_mutation_response

  """
  delete single row from the table: "e_utility_types"
  """
  delete_e_utility_types_by_pk(value: String!): e_utility_types

  """
  delete data from the table: "e_veto_pick_types"
  """
  delete_e_veto_pick_types(
    """filter the rows which have to be deleted"""
    where: e_veto_pick_types_bool_exp!
  ): e_veto_pick_types_mutation_response

  """
  delete single row from the table: "e_veto_pick_types"
  """
  delete_e_veto_pick_types_by_pk(value: String!): e_veto_pick_types

  """
  delete data from the table: "friends"
  """
  delete_friends(
    """filter the rows which have to be deleted"""
    where: friends_bool_exp!
  ): friends_mutation_response

  """
  delete single row from the table: "friends"
  """
  delete_friends_by_pk(other_player_steam_id: bigint!, player_steam_id: bigint!): friends

  """
  delete data from the table: "game_server_nodes"
  """
  delete_game_server_nodes(
    """filter the rows which have to be deleted"""
    where: game_server_nodes_bool_exp!
  ): game_server_nodes_mutation_response

  """
  delete single row from the table: "game_server_nodes"
  """
  delete_game_server_nodes_by_pk(id: String!): game_server_nodes

  """
  delete data from the table: "lobbies"
  """
  delete_lobbies(
    """filter the rows which have to be deleted"""
    where: lobbies_bool_exp!
  ): lobbies_mutation_response

  """
  delete single row from the table: "lobbies"
  """
  delete_lobbies_by_pk(id: uuid!): lobbies

  """
  delete data from the table: "lobby_players"
  """
  delete_lobby_players(
    """filter the rows which have to be deleted"""
    where: lobby_players_bool_exp!
  ): lobby_players_mutation_response

  """
  delete single row from the table: "lobby_players"
  """
  delete_lobby_players_by_pk(lobby_id: uuid!, steam_id: bigint!): lobby_players

  """
  delete data from the table: "map_pools"
  """
  delete_map_pools(
    """filter the rows which have to be deleted"""
    where: map_pools_bool_exp!
  ): map_pools_mutation_response

  """
  delete single row from the table: "map_pools"
  """
  delete_map_pools_by_pk(id: uuid!): map_pools

  """
  delete data from the table: "maps"
  """
  delete_maps(
    """filter the rows which have to be deleted"""
    where: maps_bool_exp!
  ): maps_mutation_response

  """
  delete single row from the table: "maps"
  """
  delete_maps_by_pk(id: uuid!): maps

  """
  delete data from the table: "match_invites"
  """
  delete_match_invites(
    """filter the rows which have to be deleted"""
    where: match_invites_bool_exp!
  ): match_invites_mutation_response

  """
  delete single row from the table: "match_invites"
  """
  delete_match_invites_by_pk(id: uuid!): match_invites

  """
  delete data from the table: "match_lineup_players"
  """
  delete_match_lineup_players(
    """filter the rows which have to be deleted"""
    where: match_lineup_players_bool_exp!
  ): match_lineup_players_mutation_response

  """
  delete single row from the table: "match_lineup_players"
  """
  delete_match_lineup_players_by_pk(id: uuid!): match_lineup_players

  """
  delete data from the table: "match_lineups"
  """
  delete_match_lineups(
    """filter the rows which have to be deleted"""
    where: match_lineups_bool_exp!
  ): match_lineups_mutation_response

  """
  delete single row from the table: "match_lineups"
  """
  delete_match_lineups_by_pk(id: uuid!): match_lineups

  """
  delete data from the table: "match_map_demos"
  """
  delete_match_map_demos(
    """filter the rows which have to be deleted"""
    where: match_map_demos_bool_exp!
  ): match_map_demos_mutation_response

  """
  delete single row from the table: "match_map_demos"
  """
  delete_match_map_demos_by_pk(id: uuid!): match_map_demos

  """
  delete data from the table: "match_map_rounds"
  """
  delete_match_map_rounds(
    """filter the rows which have to be deleted"""
    where: match_map_rounds_bool_exp!
  ): match_map_rounds_mutation_response

  """
  delete single row from the table: "match_map_rounds"
  """
  delete_match_map_rounds_by_pk(id: uuid!): match_map_rounds

  """
  delete data from the table: "match_map_veto_picks"
  """
  delete_match_map_veto_picks(
    """filter the rows which have to be deleted"""
    where: match_map_veto_picks_bool_exp!
  ): match_map_veto_picks_mutation_response

  """
  delete single row from the table: "match_map_veto_picks"
  """
  delete_match_map_veto_picks_by_pk(id: uuid!): match_map_veto_picks

  """
  delete data from the table: "match_maps"
  """
  delete_match_maps(
    """filter the rows which have to be deleted"""
    where: match_maps_bool_exp!
  ): match_maps_mutation_response

  """
  delete single row from the table: "match_maps"
  """
  delete_match_maps_by_pk(id: uuid!): match_maps

  """
  delete data from the table: "match_options"
  """
  delete_match_options(
    """filter the rows which have to be deleted"""
    where: match_options_bool_exp!
  ): match_options_mutation_response

  """
  delete single row from the table: "match_options"
  """
  delete_match_options_by_pk(id: uuid!): match_options

  """
  delete data from the table: "match_region_veto_picks"
  """
  delete_match_region_veto_picks(
    """filter the rows which have to be deleted"""
    where: match_region_veto_picks_bool_exp!
  ): match_region_veto_picks_mutation_response

  """
  delete single row from the table: "match_region_veto_picks"
  """
  delete_match_region_veto_picks_by_pk(id: uuid!): match_region_veto_picks

  """
  delete data from the table: "match_type_cfgs"
  """
  delete_match_type_cfgs(
    """filter the rows which have to be deleted"""
    where: match_type_cfgs_bool_exp!
  ): match_type_cfgs_mutation_response

  """
  delete single row from the table: "match_type_cfgs"
  """
  delete_match_type_cfgs_by_pk(type: e_match_types_enum!): match_type_cfgs

  """
  delete data from the table: "matches"
  """
  delete_matches(
    """filter the rows which have to be deleted"""
    where: matches_bool_exp!
  ): matches_mutation_response

  """
  delete single row from the table: "matches"
  """
  delete_matches_by_pk(id: uuid!): matches

  """
  delete data from the table: "migration_hashes.hashes"
  """
  delete_migration_hashes_hashes(
    """filter the rows which have to be deleted"""
    where: migration_hashes_hashes_bool_exp!
  ): migration_hashes_hashes_mutation_response

  """
  delete single row from the table: "migration_hashes.hashes"
  """
  delete_migration_hashes_hashes_by_pk(name: String!): migration_hashes_hashes

  """
  delete data from the table: "v_my_friends"
  """
  delete_my_friends(
    """filter the rows which have to be deleted"""
    where: my_friends_bool_exp!
  ): my_friends_mutation_response

  """
  delete data from the table: "notifications"
  """
  delete_notifications(
    """filter the rows which have to be deleted"""
    where: notifications_bool_exp!
  ): notifications_mutation_response

  """
  delete single row from the table: "notifications"
  """
  delete_notifications_by_pk(id: uuid!): notifications

  """
  delete data from the table: "player_assists"
  """
  delete_player_assists(
    """filter the rows which have to be deleted"""
    where: player_assists_bool_exp!
  ): player_assists_mutation_response

  """
  delete data from the table: "player_damages"
  """
  delete_player_damages(
    """filter the rows which have to be deleted"""
    where: player_damages_bool_exp!
  ): player_damages_mutation_response

  """
  delete data from the table: "player_elo"
  """
  delete_player_elo(
    """filter the rows which have to be deleted"""
    where: player_elo_bool_exp!
  ): player_elo_mutation_response

  """
  delete single row from the table: "player_elo"
  """
  delete_player_elo_by_pk(match_id: uuid!, steam_id: bigint!): player_elo

  """
  delete data from the table: "player_flashes"
  """
  delete_player_flashes(
    """filter the rows which have to be deleted"""
    where: player_flashes_bool_exp!
  ): player_flashes_mutation_response

  """
  delete data from the table: "player_kills"
  """
  delete_player_kills(
    """filter the rows which have to be deleted"""
    where: player_kills_bool_exp!
  ): player_kills_mutation_response

  """
  delete single row from the table: "player_kills"
  """
  delete_player_kills_by_pk(id: uuid!, match_id: uuid!, match_map_id: uuid!, time: timestamptz!): player_kills

  """
  delete data from the table: "player_objectives"
  """
  delete_player_objectives(
    """filter the rows which have to be deleted"""
    where: player_objectives_bool_exp!
  ): player_objectives_mutation_response

  """
  delete data from the table: "player_sanctions"
  """
  delete_player_sanctions(
    """filter the rows which have to be deleted"""
    where: player_sanctions_bool_exp!
  ): player_sanctions_mutation_response

  """
  delete data from the table: "player_unused_utility"
  """
  delete_player_unused_utility(
    """filter the rows which have to be deleted"""
    where: player_unused_utility_bool_exp!
  ): player_unused_utility_mutation_response

  """
  delete single row from the table: "player_unused_utility"
  """
  delete_player_unused_utility_by_pk(id: uuid!): player_unused_utility

  """
  delete data from the table: "player_utility"
  """
  delete_player_utility(
    """filter the rows which have to be deleted"""
    where: player_utility_bool_exp!
  ): player_utility_mutation_response

  """
  delete data from the table: "players"
  """
  delete_players(
    """filter the rows which have to be deleted"""
    where: players_bool_exp!
  ): players_mutation_response

  """
  delete single row from the table: "players"
  """
  delete_players_by_pk(steam_id: bigint!): players

  """
  delete data from the table: "server_regions"
  """
  delete_server_regions(
    """filter the rows which have to be deleted"""
    where: server_regions_bool_exp!
  ): server_regions_mutation_response

  """
  delete single row from the table: "server_regions"
  """
  delete_server_regions_by_pk(value: String!): server_regions

  """
  delete data from the table: "servers"
  """
  delete_servers(
    """filter the rows which have to be deleted"""
    where: servers_bool_exp!
  ): servers_mutation_response

  """
  delete single row from the table: "servers"
  """
  delete_servers_by_pk(id: uuid!): servers

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(name: String!): settings

  """
  delete data from the table: "team_invites"
  """
  delete_team_invites(
    """filter the rows which have to be deleted"""
    where: team_invites_bool_exp!
  ): team_invites_mutation_response

  """
  delete single row from the table: "team_invites"
  """
  delete_team_invites_by_pk(id: uuid!): team_invites

  """
  delete data from the table: "team_roster"
  """
  delete_team_roster(
    """filter the rows which have to be deleted"""
    where: team_roster_bool_exp!
  ): team_roster_mutation_response

  """
  delete single row from the table: "team_roster"
  """
  delete_team_roster_by_pk(player_steam_id: bigint!, team_id: uuid!): team_roster

  """
  delete data from the table: "teams"
  """
  delete_teams(
    """filter the rows which have to be deleted"""
    where: teams_bool_exp!
  ): teams_mutation_response

  """
  delete single row from the table: "teams"
  """
  delete_teams_by_pk(id: uuid!): teams

  """
  delete data from the table: "tournament_brackets"
  """
  delete_tournament_brackets(
    """filter the rows which have to be deleted"""
    where: tournament_brackets_bool_exp!
  ): tournament_brackets_mutation_response

  """
  delete single row from the table: "tournament_brackets"
  """
  delete_tournament_brackets_by_pk(id: uuid!): tournament_brackets

  """
  delete data from the table: "tournament_organizers"
  """
  delete_tournament_organizers(
    """filter the rows which have to be deleted"""
    where: tournament_organizers_bool_exp!
  ): tournament_organizers_mutation_response

  """
  delete single row from the table: "tournament_organizers"
  """
  delete_tournament_organizers_by_pk(steam_id: bigint!, tournament_id: uuid!): tournament_organizers

  """
  delete data from the table: "tournament_stages"
  """
  delete_tournament_stages(
    """filter the rows which have to be deleted"""
    where: tournament_stages_bool_exp!
  ): tournament_stages_mutation_response

  """
  delete single row from the table: "tournament_stages"
  """
  delete_tournament_stages_by_pk(id: uuid!): tournament_stages

  """
  delete data from the table: "tournament_team_invites"
  """
  delete_tournament_team_invites(
    """filter the rows which have to be deleted"""
    where: tournament_team_invites_bool_exp!
  ): tournament_team_invites_mutation_response

  """
  delete single row from the table: "tournament_team_invites"
  """
  delete_tournament_team_invites_by_pk(id: uuid!): tournament_team_invites

  """
  delete data from the table: "tournament_team_roster"
  """
  delete_tournament_team_roster(
    """filter the rows which have to be deleted"""
    where: tournament_team_roster_bool_exp!
  ): tournament_team_roster_mutation_response

  """
  delete single row from the table: "tournament_team_roster"
  """
  delete_tournament_team_roster_by_pk(player_steam_id: bigint!, tournament_id: uuid!): tournament_team_roster

  """
  delete data from the table: "tournament_teams"
  """
  delete_tournament_teams(
    """filter the rows which have to be deleted"""
    where: tournament_teams_bool_exp!
  ): tournament_teams_mutation_response

  """
  delete single row from the table: "tournament_teams"
  """
  delete_tournament_teams_by_pk(id: uuid!): tournament_teams

  """
  delete data from the table: "tournaments"
  """
  delete_tournaments(
    """filter the rows which have to be deleted"""
    where: tournaments_bool_exp!
  ): tournaments_mutation_response

  """
  delete single row from the table: "tournaments"
  """
  delete_tournaments_by_pk(id: uuid!): tournaments

  """
  delete data from the table: "v_match_captains"
  """
  delete_v_match_captains(
    """filter the rows which have to be deleted"""
    where: v_match_captains_bool_exp!
  ): v_match_captains_mutation_response

  """
  delete data from the table: "v_pool_maps"
  """
  delete_v_pool_maps(
    """filter the rows which have to be deleted"""
    where: v_pool_maps_bool_exp!
  ): v_pool_maps_mutation_response
  denyInvite(invite_id: uuid!, type: String!): SuccessOutput
  forfeitMatch(match_id: uuid!, winning_lineup_id: uuid!): SuccessOutput

  """
  insert data into the table: "_map_pool"
  """
  insert__map_pool(
    """the rows to be inserted"""
    objects: [_map_pool_insert_input!]!

    """upsert condition"""
    on_conflict: _map_pool_on_conflict
  ): _map_pool_mutation_response

  """
  insert a single row into the table: "_map_pool"
  """
  insert__map_pool_one(
    """the row to be inserted"""
    object: _map_pool_insert_input!

    """upsert condition"""
    on_conflict: _map_pool_on_conflict
  ): _map_pool

  """
  insert data into the table: "abandoned_matches"
  """
  insert_abandoned_matches(
    """the rows to be inserted"""
    objects: [abandoned_matches_insert_input!]!

    """upsert condition"""
    on_conflict: abandoned_matches_on_conflict
  ): abandoned_matches_mutation_response

  """
  insert a single row into the table: "abandoned_matches"
  """
  insert_abandoned_matches_one(
    """the row to be inserted"""
    object: abandoned_matches_insert_input!

    """upsert condition"""
    on_conflict: abandoned_matches_on_conflict
  ): abandoned_matches

  """
  insert data into the table: "e_friend_status"
  """
  insert_e_friend_status(
    """the rows to be inserted"""
    objects: [e_friend_status_insert_input!]!

    """upsert condition"""
    on_conflict: e_friend_status_on_conflict
  ): e_friend_status_mutation_response

  """
  insert a single row into the table: "e_friend_status"
  """
  insert_e_friend_status_one(
    """the row to be inserted"""
    object: e_friend_status_insert_input!

    """upsert condition"""
    on_conflict: e_friend_status_on_conflict
  ): e_friend_status

  """
  insert data into the table: "e_game_server_node_statuses"
  """
  insert_e_game_server_node_statuses(
    """the rows to be inserted"""
    objects: [e_game_server_node_statuses_insert_input!]!

    """upsert condition"""
    on_conflict: e_game_server_node_statuses_on_conflict
  ): e_game_server_node_statuses_mutation_response

  """
  insert a single row into the table: "e_game_server_node_statuses"
  """
  insert_e_game_server_node_statuses_one(
    """the row to be inserted"""
    object: e_game_server_node_statuses_insert_input!

    """upsert condition"""
    on_conflict: e_game_server_node_statuses_on_conflict
  ): e_game_server_node_statuses

  """
  insert data into the table: "e_lobby_access"
  """
  insert_e_lobby_access(
    """the rows to be inserted"""
    objects: [e_lobby_access_insert_input!]!

    """upsert condition"""
    on_conflict: e_lobby_access_on_conflict
  ): e_lobby_access_mutation_response

  """
  insert a single row into the table: "e_lobby_access"
  """
  insert_e_lobby_access_one(
    """the row to be inserted"""
    object: e_lobby_access_insert_input!

    """upsert condition"""
    on_conflict: e_lobby_access_on_conflict
  ): e_lobby_access

  """
  insert data into the table: "e_lobby_player_status"
  """
  insert_e_lobby_player_status(
    """the rows to be inserted"""
    objects: [e_lobby_player_status_insert_input!]!

    """upsert condition"""
    on_conflict: e_lobby_player_status_on_conflict
  ): e_lobby_player_status_mutation_response

  """
  insert a single row into the table: "e_lobby_player_status"
  """
  insert_e_lobby_player_status_one(
    """the row to be inserted"""
    object: e_lobby_player_status_insert_input!

    """upsert condition"""
    on_conflict: e_lobby_player_status_on_conflict
  ): e_lobby_player_status

  """
  insert data into the table: "e_map_pool_types"
  """
  insert_e_map_pool_types(
    """the rows to be inserted"""
    objects: [e_map_pool_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_map_pool_types_on_conflict
  ): e_map_pool_types_mutation_response

  """
  insert a single row into the table: "e_map_pool_types"
  """
  insert_e_map_pool_types_one(
    """the row to be inserted"""
    object: e_map_pool_types_insert_input!

    """upsert condition"""
    on_conflict: e_map_pool_types_on_conflict
  ): e_map_pool_types

  """
  insert data into the table: "e_match_map_status"
  """
  insert_e_match_map_status(
    """the rows to be inserted"""
    objects: [e_match_map_status_insert_input!]!

    """upsert condition"""
    on_conflict: e_match_map_status_on_conflict
  ): e_match_map_status_mutation_response

  """
  insert a single row into the table: "e_match_map_status"
  """
  insert_e_match_map_status_one(
    """the row to be inserted"""
    object: e_match_map_status_insert_input!

    """upsert condition"""
    on_conflict: e_match_map_status_on_conflict
  ): e_match_map_status

  """
  insert data into the table: "e_match_status"
  """
  insert_e_match_status(
    """the rows to be inserted"""
    objects: [e_match_status_insert_input!]!

    """upsert condition"""
    on_conflict: e_match_status_on_conflict
  ): e_match_status_mutation_response

  """
  insert a single row into the table: "e_match_status"
  """
  insert_e_match_status_one(
    """the row to be inserted"""
    object: e_match_status_insert_input!

    """upsert condition"""
    on_conflict: e_match_status_on_conflict
  ): e_match_status

  """
  insert data into the table: "e_match_types"
  """
  insert_e_match_types(
    """the rows to be inserted"""
    objects: [e_match_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_match_types_on_conflict
  ): e_match_types_mutation_response

  """
  insert a single row into the table: "e_match_types"
  """
  insert_e_match_types_one(
    """the row to be inserted"""
    object: e_match_types_insert_input!

    """upsert condition"""
    on_conflict: e_match_types_on_conflict
  ): e_match_types

  """
  insert data into the table: "e_notification_types"
  """
  insert_e_notification_types(
    """the rows to be inserted"""
    objects: [e_notification_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_notification_types_on_conflict
  ): e_notification_types_mutation_response

  """
  insert a single row into the table: "e_notification_types"
  """
  insert_e_notification_types_one(
    """the row to be inserted"""
    object: e_notification_types_insert_input!

    """upsert condition"""
    on_conflict: e_notification_types_on_conflict
  ): e_notification_types

  """
  insert data into the table: "e_objective_types"
  """
  insert_e_objective_types(
    """the rows to be inserted"""
    objects: [e_objective_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_objective_types_on_conflict
  ): e_objective_types_mutation_response

  """
  insert a single row into the table: "e_objective_types"
  """
  insert_e_objective_types_one(
    """the row to be inserted"""
    object: e_objective_types_insert_input!

    """upsert condition"""
    on_conflict: e_objective_types_on_conflict
  ): e_objective_types

  """
  insert data into the table: "e_player_roles"
  """
  insert_e_player_roles(
    """the rows to be inserted"""
    objects: [e_player_roles_insert_input!]!

    """upsert condition"""
    on_conflict: e_player_roles_on_conflict
  ): e_player_roles_mutation_response

  """
  insert a single row into the table: "e_player_roles"
  """
  insert_e_player_roles_one(
    """the row to be inserted"""
    object: e_player_roles_insert_input!

    """upsert condition"""
    on_conflict: e_player_roles_on_conflict
  ): e_player_roles

  """
  insert data into the table: "e_ready_settings"
  """
  insert_e_ready_settings(
    """the rows to be inserted"""
    objects: [e_ready_settings_insert_input!]!

    """upsert condition"""
    on_conflict: e_ready_settings_on_conflict
  ): e_ready_settings_mutation_response

  """
  insert a single row into the table: "e_ready_settings"
  """
  insert_e_ready_settings_one(
    """the row to be inserted"""
    object: e_ready_settings_insert_input!

    """upsert condition"""
    on_conflict: e_ready_settings_on_conflict
  ): e_ready_settings

  """
  insert data into the table: "e_sanction_types"
  """
  insert_e_sanction_types(
    """the rows to be inserted"""
    objects: [e_sanction_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_sanction_types_on_conflict
  ): e_sanction_types_mutation_response

  """
  insert a single row into the table: "e_sanction_types"
  """
  insert_e_sanction_types_one(
    """the row to be inserted"""
    object: e_sanction_types_insert_input!

    """upsert condition"""
    on_conflict: e_sanction_types_on_conflict
  ): e_sanction_types

  """
  insert data into the table: "e_sides"
  """
  insert_e_sides(
    """the rows to be inserted"""
    objects: [e_sides_insert_input!]!

    """upsert condition"""
    on_conflict: e_sides_on_conflict
  ): e_sides_mutation_response

  """
  insert a single row into the table: "e_sides"
  """
  insert_e_sides_one(
    """the row to be inserted"""
    object: e_sides_insert_input!

    """upsert condition"""
    on_conflict: e_sides_on_conflict
  ): e_sides

  """
  insert data into the table: "e_team_roles"
  """
  insert_e_team_roles(
    """the rows to be inserted"""
    objects: [e_team_roles_insert_input!]!

    """upsert condition"""
    on_conflict: e_team_roles_on_conflict
  ): e_team_roles_mutation_response

  """
  insert a single row into the table: "e_team_roles"
  """
  insert_e_team_roles_one(
    """the row to be inserted"""
    object: e_team_roles_insert_input!

    """upsert condition"""
    on_conflict: e_team_roles_on_conflict
  ): e_team_roles

  """
  insert data into the table: "e_timeout_settings"
  """
  insert_e_timeout_settings(
    """the rows to be inserted"""
    objects: [e_timeout_settings_insert_input!]!

    """upsert condition"""
    on_conflict: e_timeout_settings_on_conflict
  ): e_timeout_settings_mutation_response

  """
  insert a single row into the table: "e_timeout_settings"
  """
  insert_e_timeout_settings_one(
    """the row to be inserted"""
    object: e_timeout_settings_insert_input!

    """upsert condition"""
    on_conflict: e_timeout_settings_on_conflict
  ): e_timeout_settings

  """
  insert data into the table: "e_tournament_stage_types"
  """
  insert_e_tournament_stage_types(
    """the rows to be inserted"""
    objects: [e_tournament_stage_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_tournament_stage_types_on_conflict
  ): e_tournament_stage_types_mutation_response

  """
  insert a single row into the table: "e_tournament_stage_types"
  """
  insert_e_tournament_stage_types_one(
    """the row to be inserted"""
    object: e_tournament_stage_types_insert_input!

    """upsert condition"""
    on_conflict: e_tournament_stage_types_on_conflict
  ): e_tournament_stage_types

  """
  insert data into the table: "e_tournament_status"
  """
  insert_e_tournament_status(
    """the rows to be inserted"""
    objects: [e_tournament_status_insert_input!]!

    """upsert condition"""
    on_conflict: e_tournament_status_on_conflict
  ): e_tournament_status_mutation_response

  """
  insert a single row into the table: "e_tournament_status"
  """
  insert_e_tournament_status_one(
    """the row to be inserted"""
    object: e_tournament_status_insert_input!

    """upsert condition"""
    on_conflict: e_tournament_status_on_conflict
  ): e_tournament_status

  """
  insert data into the table: "e_utility_types"
  """
  insert_e_utility_types(
    """the rows to be inserted"""
    objects: [e_utility_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_utility_types_on_conflict
  ): e_utility_types_mutation_response

  """
  insert a single row into the table: "e_utility_types"
  """
  insert_e_utility_types_one(
    """the row to be inserted"""
    object: e_utility_types_insert_input!

    """upsert condition"""
    on_conflict: e_utility_types_on_conflict
  ): e_utility_types

  """
  insert data into the table: "e_veto_pick_types"
  """
  insert_e_veto_pick_types(
    """the rows to be inserted"""
    objects: [e_veto_pick_types_insert_input!]!

    """upsert condition"""
    on_conflict: e_veto_pick_types_on_conflict
  ): e_veto_pick_types_mutation_response

  """
  insert a single row into the table: "e_veto_pick_types"
  """
  insert_e_veto_pick_types_one(
    """the row to be inserted"""
    object: e_veto_pick_types_insert_input!

    """upsert condition"""
    on_conflict: e_veto_pick_types_on_conflict
  ): e_veto_pick_types

  """
  insert data into the table: "friends"
  """
  insert_friends(
    """the rows to be inserted"""
    objects: [friends_insert_input!]!

    """upsert condition"""
    on_conflict: friends_on_conflict
  ): friends_mutation_response

  """
  insert a single row into the table: "friends"
  """
  insert_friends_one(
    """the row to be inserted"""
    object: friends_insert_input!

    """upsert condition"""
    on_conflict: friends_on_conflict
  ): friends

  """
  insert data into the table: "game_server_nodes"
  """
  insert_game_server_nodes(
    """the rows to be inserted"""
    objects: [game_server_nodes_insert_input!]!

    """upsert condition"""
    on_conflict: game_server_nodes_on_conflict
  ): game_server_nodes_mutation_response

  """
  insert a single row into the table: "game_server_nodes"
  """
  insert_game_server_nodes_one(
    """the row to be inserted"""
    object: game_server_nodes_insert_input!

    """upsert condition"""
    on_conflict: game_server_nodes_on_conflict
  ): game_server_nodes

  """
  insert data into the table: "lobbies"
  """
  insert_lobbies(
    """the rows to be inserted"""
    objects: [lobbies_insert_input!]!

    """upsert condition"""
    on_conflict: lobbies_on_conflict
  ): lobbies_mutation_response

  """
  insert a single row into the table: "lobbies"
  """
  insert_lobbies_one(
    """the row to be inserted"""
    object: lobbies_insert_input!

    """upsert condition"""
    on_conflict: lobbies_on_conflict
  ): lobbies

  """
  insert data into the table: "lobby_players"
  """
  insert_lobby_players(
    """the rows to be inserted"""
    objects: [lobby_players_insert_input!]!

    """upsert condition"""
    on_conflict: lobby_players_on_conflict
  ): lobby_players_mutation_response

  """
  insert a single row into the table: "lobby_players"
  """
  insert_lobby_players_one(
    """the row to be inserted"""
    object: lobby_players_insert_input!

    """upsert condition"""
    on_conflict: lobby_players_on_conflict
  ): lobby_players

  """
  insert data into the table: "map_pools"
  """
  insert_map_pools(
    """the rows to be inserted"""
    objects: [map_pools_insert_input!]!

    """upsert condition"""
    on_conflict: map_pools_on_conflict
  ): map_pools_mutation_response

  """
  insert a single row into the table: "map_pools"
  """
  insert_map_pools_one(
    """the row to be inserted"""
    object: map_pools_insert_input!

    """upsert condition"""
    on_conflict: map_pools_on_conflict
  ): map_pools

  """
  insert data into the table: "maps"
  """
  insert_maps(
    """the rows to be inserted"""
    objects: [maps_insert_input!]!

    """upsert condition"""
    on_conflict: maps_on_conflict
  ): maps_mutation_response

  """
  insert a single row into the table: "maps"
  """
  insert_maps_one(
    """the row to be inserted"""
    object: maps_insert_input!

    """upsert condition"""
    on_conflict: maps_on_conflict
  ): maps

  """
  insert data into the table: "match_invites"
  """
  insert_match_invites(
    """the rows to be inserted"""
    objects: [match_invites_insert_input!]!

    """upsert condition"""
    on_conflict: match_invites_on_conflict
  ): match_invites_mutation_response

  """
  insert a single row into the table: "match_invites"
  """
  insert_match_invites_one(
    """the row to be inserted"""
    object: match_invites_insert_input!

    """upsert condition"""
    on_conflict: match_invites_on_conflict
  ): match_invites

  """
  insert data into the table: "match_lineup_players"
  """
  insert_match_lineup_players(
    """the rows to be inserted"""
    objects: [match_lineup_players_insert_input!]!

    """upsert condition"""
    on_conflict: match_lineup_players_on_conflict
  ): match_lineup_players_mutation_response

  """
  insert a single row into the table: "match_lineup_players"
  """
  insert_match_lineup_players_one(
    """the row to be inserted"""
    object: match_lineup_players_insert_input!

    """upsert condition"""
    on_conflict: match_lineup_players_on_conflict
  ): match_lineup_players

  """
  insert data into the table: "match_lineups"
  """
  insert_match_lineups(
    """the rows to be inserted"""
    objects: [match_lineups_insert_input!]!

    """upsert condition"""
    on_conflict: match_lineups_on_conflict
  ): match_lineups_mutation_response

  """
  insert a single row into the table: "match_lineups"
  """
  insert_match_lineups_one(
    """the row to be inserted"""
    object: match_lineups_insert_input!

    """upsert condition"""
    on_conflict: match_lineups_on_conflict
  ): match_lineups

  """
  insert data into the table: "match_map_demos"
  """
  insert_match_map_demos(
    """the rows to be inserted"""
    objects: [match_map_demos_insert_input!]!

    """upsert condition"""
    on_conflict: match_map_demos_on_conflict
  ): match_map_demos_mutation_response

  """
  insert a single row into the table: "match_map_demos"
  """
  insert_match_map_demos_one(
    """the row to be inserted"""
    object: match_map_demos_insert_input!

    """upsert condition"""
    on_conflict: match_map_demos_on_conflict
  ): match_map_demos

  """
  insert data into the table: "match_map_rounds"
  """
  insert_match_map_rounds(
    """the rows to be inserted"""
    objects: [match_map_rounds_insert_input!]!

    """upsert condition"""
    on_conflict: match_map_rounds_on_conflict
  ): match_map_rounds_mutation_response

  """
  insert a single row into the table: "match_map_rounds"
  """
  insert_match_map_rounds_one(
    """the row to be inserted"""
    object: match_map_rounds_insert_input!

    """upsert condition"""
    on_conflict: match_map_rounds_on_conflict
  ): match_map_rounds

  """
  insert data into the table: "match_map_veto_picks"
  """
  insert_match_map_veto_picks(
    """the rows to be inserted"""
    objects: [match_map_veto_picks_insert_input!]!

    """upsert condition"""
    on_conflict: match_map_veto_picks_on_conflict
  ): match_map_veto_picks_mutation_response

  """
  insert a single row into the table: "match_map_veto_picks"
  """
  insert_match_map_veto_picks_one(
    """the row to be inserted"""
    object: match_map_veto_picks_insert_input!

    """upsert condition"""
    on_conflict: match_map_veto_picks_on_conflict
  ): match_map_veto_picks

  """
  insert data into the table: "match_maps"
  """
  insert_match_maps(
    """the rows to be inserted"""
    objects: [match_maps_insert_input!]!

    """upsert condition"""
    on_conflict: match_maps_on_conflict
  ): match_maps_mutation_response

  """
  insert a single row into the table: "match_maps"
  """
  insert_match_maps_one(
    """the row to be inserted"""
    object: match_maps_insert_input!

    """upsert condition"""
    on_conflict: match_maps_on_conflict
  ): match_maps

  """
  insert data into the table: "match_options"
  """
  insert_match_options(
    """the rows to be inserted"""
    objects: [match_options_insert_input!]!

    """upsert condition"""
    on_conflict: match_options_on_conflict
  ): match_options_mutation_response

  """
  insert a single row into the table: "match_options"
  """
  insert_match_options_one(
    """the row to be inserted"""
    object: match_options_insert_input!

    """upsert condition"""
    on_conflict: match_options_on_conflict
  ): match_options

  """
  insert data into the table: "match_region_veto_picks"
  """
  insert_match_region_veto_picks(
    """the rows to be inserted"""
    objects: [match_region_veto_picks_insert_input!]!

    """upsert condition"""
    on_conflict: match_region_veto_picks_on_conflict
  ): match_region_veto_picks_mutation_response

  """
  insert a single row into the table: "match_region_veto_picks"
  """
  insert_match_region_veto_picks_one(
    """the row to be inserted"""
    object: match_region_veto_picks_insert_input!

    """upsert condition"""
    on_conflict: match_region_veto_picks_on_conflict
  ): match_region_veto_picks

  """
  insert data into the table: "match_type_cfgs"
  """
  insert_match_type_cfgs(
    """the rows to be inserted"""
    objects: [match_type_cfgs_insert_input!]!

    """upsert condition"""
    on_conflict: match_type_cfgs_on_conflict
  ): match_type_cfgs_mutation_response

  """
  insert a single row into the table: "match_type_cfgs"
  """
  insert_match_type_cfgs_one(
    """the row to be inserted"""
    object: match_type_cfgs_insert_input!

    """upsert condition"""
    on_conflict: match_type_cfgs_on_conflict
  ): match_type_cfgs

  """
  insert data into the table: "matches"
  """
  insert_matches(
    """the rows to be inserted"""
    objects: [matches_insert_input!]!

    """upsert condition"""
    on_conflict: matches_on_conflict
  ): matches_mutation_response

  """
  insert a single row into the table: "matches"
  """
  insert_matches_one(
    """the row to be inserted"""
    object: matches_insert_input!

    """upsert condition"""
    on_conflict: matches_on_conflict
  ): matches

  """
  insert data into the table: "migration_hashes.hashes"
  """
  insert_migration_hashes_hashes(
    """the rows to be inserted"""
    objects: [migration_hashes_hashes_insert_input!]!

    """upsert condition"""
    on_conflict: migration_hashes_hashes_on_conflict
  ): migration_hashes_hashes_mutation_response

  """
  insert a single row into the table: "migration_hashes.hashes"
  """
  insert_migration_hashes_hashes_one(
    """the row to be inserted"""
    object: migration_hashes_hashes_insert_input!

    """upsert condition"""
    on_conflict: migration_hashes_hashes_on_conflict
  ): migration_hashes_hashes

  """
  insert data into the table: "v_my_friends"
  """
  insert_my_friends(
    """the rows to be inserted"""
    objects: [my_friends_insert_input!]!
  ): my_friends_mutation_response

  """
  insert a single row into the table: "v_my_friends"
  """
  insert_my_friends_one(
    """the row to be inserted"""
    object: my_friends_insert_input!
  ): my_friends

  """
  insert data into the table: "notifications"
  """
  insert_notifications(
    """the rows to be inserted"""
    objects: [notifications_insert_input!]!

    """upsert condition"""
    on_conflict: notifications_on_conflict
  ): notifications_mutation_response

  """
  insert a single row into the table: "notifications"
  """
  insert_notifications_one(
    """the row to be inserted"""
    object: notifications_insert_input!

    """upsert condition"""
    on_conflict: notifications_on_conflict
  ): notifications

  """
  insert data into the table: "player_assists"
  """
  insert_player_assists(
    """the rows to be inserted"""
    objects: [player_assists_insert_input!]!
  ): player_assists_mutation_response

  """
  insert a single row into the table: "player_assists"
  """
  insert_player_assists_one(
    """the row to be inserted"""
    object: player_assists_insert_input!
  ): player_assists

  """
  insert data into the table: "player_damages"
  """
  insert_player_damages(
    """the rows to be inserted"""
    objects: [player_damages_insert_input!]!
  ): player_damages_mutation_response

  """
  insert a single row into the table: "player_damages"
  """
  insert_player_damages_one(
    """the row to be inserted"""
    object: player_damages_insert_input!
  ): player_damages

  """
  insert data into the table: "player_elo"
  """
  insert_player_elo(
    """the rows to be inserted"""
    objects: [player_elo_insert_input!]!

    """upsert condition"""
    on_conflict: player_elo_on_conflict
  ): player_elo_mutation_response

  """
  insert a single row into the table: "player_elo"
  """
  insert_player_elo_one(
    """the row to be inserted"""
    object: player_elo_insert_input!

    """upsert condition"""
    on_conflict: player_elo_on_conflict
  ): player_elo

  """
  insert data into the table: "player_flashes"
  """
  insert_player_flashes(
    """the rows to be inserted"""
    objects: [player_flashes_insert_input!]!
  ): player_flashes_mutation_response

  """
  insert a single row into the table: "player_flashes"
  """
  insert_player_flashes_one(
    """the row to be inserted"""
    object: player_flashes_insert_input!
  ): player_flashes

  """
  insert data into the table: "player_kills"
  """
  insert_player_kills(
    """the rows to be inserted"""
    objects: [player_kills_insert_input!]!

    """upsert condition"""
    on_conflict: player_kills_on_conflict
  ): player_kills_mutation_response

  """
  insert a single row into the table: "player_kills"
  """
  insert_player_kills_one(
    """the row to be inserted"""
    object: player_kills_insert_input!

    """upsert condition"""
    on_conflict: player_kills_on_conflict
  ): player_kills

  """
  insert data into the table: "player_objectives"
  """
  insert_player_objectives(
    """the rows to be inserted"""
    objects: [player_objectives_insert_input!]!
  ): player_objectives_mutation_response

  """
  insert a single row into the table: "player_objectives"
  """
  insert_player_objectives_one(
    """the row to be inserted"""
    object: player_objectives_insert_input!
  ): player_objectives

  """
  insert data into the table: "player_sanctions"
  """
  insert_player_sanctions(
    """the rows to be inserted"""
    objects: [player_sanctions_insert_input!]!
  ): player_sanctions_mutation_response

  """
  insert a single row into the table: "player_sanctions"
  """
  insert_player_sanctions_one(
    """the row to be inserted"""
    object: player_sanctions_insert_input!
  ): player_sanctions

  """
  insert data into the table: "player_unused_utility"
  """
  insert_player_unused_utility(
    """the rows to be inserted"""
    objects: [player_unused_utility_insert_input!]!

    """upsert condition"""
    on_conflict: player_unused_utility_on_conflict
  ): player_unused_utility_mutation_response

  """
  insert a single row into the table: "player_unused_utility"
  """
  insert_player_unused_utility_one(
    """the row to be inserted"""
    object: player_unused_utility_insert_input!

    """upsert condition"""
    on_conflict: player_unused_utility_on_conflict
  ): player_unused_utility

  """
  insert data into the table: "player_utility"
  """
  insert_player_utility(
    """the rows to be inserted"""
    objects: [player_utility_insert_input!]!
  ): player_utility_mutation_response

  """
  insert a single row into the table: "player_utility"
  """
  insert_player_utility_one(
    """the row to be inserted"""
    object: player_utility_insert_input!
  ): player_utility

  """
  insert data into the table: "players"
  """
  insert_players(
    """the rows to be inserted"""
    objects: [players_insert_input!]!

    """upsert condition"""
    on_conflict: players_on_conflict
  ): players_mutation_response

  """
  insert a single row into the table: "players"
  """
  insert_players_one(
    """the row to be inserted"""
    object: players_insert_input!

    """upsert condition"""
    on_conflict: players_on_conflict
  ): players

  """
  insert data into the table: "server_regions"
  """
  insert_server_regions(
    """the rows to be inserted"""
    objects: [server_regions_insert_input!]!

    """upsert condition"""
    on_conflict: server_regions_on_conflict
  ): server_regions_mutation_response

  """
  insert a single row into the table: "server_regions"
  """
  insert_server_regions_one(
    """the row to be inserted"""
    object: server_regions_insert_input!

    """upsert condition"""
    on_conflict: server_regions_on_conflict
  ): server_regions

  """
  insert data into the table: "servers"
  """
  insert_servers(
    """the rows to be inserted"""
    objects: [servers_insert_input!]!

    """upsert condition"""
    on_conflict: servers_on_conflict
  ): servers_mutation_response

  """
  insert a single row into the table: "servers"
  """
  insert_servers_one(
    """the row to be inserted"""
    object: servers_insert_input!

    """upsert condition"""
    on_conflict: servers_on_conflict
  ): servers

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "team_invites"
  """
  insert_team_invites(
    """the rows to be inserted"""
    objects: [team_invites_insert_input!]!

    """upsert condition"""
    on_conflict: team_invites_on_conflict
  ): team_invites_mutation_response

  """
  insert a single row into the table: "team_invites"
  """
  insert_team_invites_one(
    """the row to be inserted"""
    object: team_invites_insert_input!

    """upsert condition"""
    on_conflict: team_invites_on_conflict
  ): team_invites

  """
  insert data into the table: "team_roster"
  """
  insert_team_roster(
    """the rows to be inserted"""
    objects: [team_roster_insert_input!]!

    """upsert condition"""
    on_conflict: team_roster_on_conflict
  ): team_roster_mutation_response

  """
  insert a single row into the table: "team_roster"
  """
  insert_team_roster_one(
    """the row to be inserted"""
    object: team_roster_insert_input!

    """upsert condition"""
    on_conflict: team_roster_on_conflict
  ): team_roster

  """
  insert data into the table: "teams"
  """
  insert_teams(
    """the rows to be inserted"""
    objects: [teams_insert_input!]!

    """upsert condition"""
    on_conflict: teams_on_conflict
  ): teams_mutation_response

  """
  insert a single row into the table: "teams"
  """
  insert_teams_one(
    """the row to be inserted"""
    object: teams_insert_input!

    """upsert condition"""
    on_conflict: teams_on_conflict
  ): teams

  """
  insert data into the table: "tournament_brackets"
  """
  insert_tournament_brackets(
    """the rows to be inserted"""
    objects: [tournament_brackets_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_brackets_on_conflict
  ): tournament_brackets_mutation_response

  """
  insert a single row into the table: "tournament_brackets"
  """
  insert_tournament_brackets_one(
    """the row to be inserted"""
    object: tournament_brackets_insert_input!

    """upsert condition"""
    on_conflict: tournament_brackets_on_conflict
  ): tournament_brackets

  """
  insert data into the table: "tournament_organizers"
  """
  insert_tournament_organizers(
    """the rows to be inserted"""
    objects: [tournament_organizers_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_organizers_on_conflict
  ): tournament_organizers_mutation_response

  """
  insert a single row into the table: "tournament_organizers"
  """
  insert_tournament_organizers_one(
    """the row to be inserted"""
    object: tournament_organizers_insert_input!

    """upsert condition"""
    on_conflict: tournament_organizers_on_conflict
  ): tournament_organizers

  """
  insert data into the table: "tournament_stages"
  """
  insert_tournament_stages(
    """the rows to be inserted"""
    objects: [tournament_stages_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_stages_on_conflict
  ): tournament_stages_mutation_response

  """
  insert a single row into the table: "tournament_stages"
  """
  insert_tournament_stages_one(
    """the row to be inserted"""
    object: tournament_stages_insert_input!

    """upsert condition"""
    on_conflict: tournament_stages_on_conflict
  ): tournament_stages

  """
  insert data into the table: "tournament_team_invites"
  """
  insert_tournament_team_invites(
    """the rows to be inserted"""
    objects: [tournament_team_invites_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_team_invites_on_conflict
  ): tournament_team_invites_mutation_response

  """
  insert a single row into the table: "tournament_team_invites"
  """
  insert_tournament_team_invites_one(
    """the row to be inserted"""
    object: tournament_team_invites_insert_input!

    """upsert condition"""
    on_conflict: tournament_team_invites_on_conflict
  ): tournament_team_invites

  """
  insert data into the table: "tournament_team_roster"
  """
  insert_tournament_team_roster(
    """the rows to be inserted"""
    objects: [tournament_team_roster_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_team_roster_on_conflict
  ): tournament_team_roster_mutation_response

  """
  insert a single row into the table: "tournament_team_roster"
  """
  insert_tournament_team_roster_one(
    """the row to be inserted"""
    object: tournament_team_roster_insert_input!

    """upsert condition"""
    on_conflict: tournament_team_roster_on_conflict
  ): tournament_team_roster

  """
  insert data into the table: "tournament_teams"
  """
  insert_tournament_teams(
    """the rows to be inserted"""
    objects: [tournament_teams_insert_input!]!

    """upsert condition"""
    on_conflict: tournament_teams_on_conflict
  ): tournament_teams_mutation_response

  """
  insert a single row into the table: "tournament_teams"
  """
  insert_tournament_teams_one(
    """the row to be inserted"""
    object: tournament_teams_insert_input!

    """upsert condition"""
    on_conflict: tournament_teams_on_conflict
  ): tournament_teams

  """
  insert data into the table: "tournaments"
  """
  insert_tournaments(
    """the rows to be inserted"""
    objects: [tournaments_insert_input!]!

    """upsert condition"""
    on_conflict: tournaments_on_conflict
  ): tournaments_mutation_response

  """
  insert a single row into the table: "tournaments"
  """
  insert_tournaments_one(
    """the row to be inserted"""
    object: tournaments_insert_input!

    """upsert condition"""
    on_conflict: tournaments_on_conflict
  ): tournaments

  """
  insert data into the table: "v_match_captains"
  """
  insert_v_match_captains(
    """the rows to be inserted"""
    objects: [v_match_captains_insert_input!]!
  ): v_match_captains_mutation_response

  """
  insert a single row into the table: "v_match_captains"
  """
  insert_v_match_captains_one(
    """the row to be inserted"""
    object: v_match_captains_insert_input!
  ): v_match_captains

  """
  insert data into the table: "v_pool_maps"
  """
  insert_v_pool_maps(
    """the rows to be inserted"""
    objects: [v_pool_maps_insert_input!]!
  ): v_pool_maps_mutation_response

  """
  insert a single row into the table: "v_pool_maps"
  """
  insert_v_pool_maps_one(
    """the row to be inserted"""
    object: v_pool_maps_insert_input!
  ): v_pool_maps
  joinLineup(code: String, lineup_id: String!, match_id: String!): SuccessOutput
  leaveLineup(match_id: String!): SuccessOutput

  """logout"""
  logout: SuccessOutput
  randomizeTeams(match_id: uuid!): SuccessOutput
  registerName(name: String!): SuccessOutput
  requestNameChange(name: String!, steam_id: bigint!): SuccessOutput

  """scheduleMatch"""
  scheduleMatch(match_id: uuid!, time: timestamptz): SuccessOutput

  """setMatchWinner"""
  setMatchWinner(match_id: uuid!, winning_lineup_id: uuid!): SuccessOutput
  setupGameServer: SetupGameServeOutput

  """startMatch"""
  startMatch(match_id: uuid!, server_id: uuid): SuccessOutput
  switchLineup(match_id: String!): SuccessOutput
  syncSteamFriends: SuccessOutput
  unlinkDiscord: SuccessOutput
  updateCs(game_server_node_id: uuid): SuccessOutput
  updateServices: SuccessOutput

  """
  update data of the table: "_map_pool"
  """
  update__map_pool(
    """sets the columns of the filtered rows to the given values"""
    _set: _map_pool_set_input

    """filter the rows which have to be updated"""
    where: _map_pool_bool_exp!
  ): _map_pool_mutation_response

  """
  update single row of the table: "_map_pool"
  """
  update__map_pool_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: _map_pool_set_input
    pk_columns: _map_pool_pk_columns_input!
  ): _map_pool

  """
  update multiples rows of table: "_map_pool"
  """
  update__map_pool_many(
    """updates to execute, in order"""
    updates: [_map_pool_updates!]!
  ): [_map_pool_mutation_response]

  """
  update data of the table: "abandoned_matches"
  """
  update_abandoned_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: abandoned_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: abandoned_matches_set_input

    """filter the rows which have to be updated"""
    where: abandoned_matches_bool_exp!
  ): abandoned_matches_mutation_response

  """
  update single row of the table: "abandoned_matches"
  """
  update_abandoned_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: abandoned_matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: abandoned_matches_set_input
    pk_columns: abandoned_matches_pk_columns_input!
  ): abandoned_matches

  """
  update multiples rows of table: "abandoned_matches"
  """
  update_abandoned_matches_many(
    """updates to execute, in order"""
    updates: [abandoned_matches_updates!]!
  ): [abandoned_matches_mutation_response]

  """
  update data of the table: "e_friend_status"
  """
  update_e_friend_status(
    """sets the columns of the filtered rows to the given values"""
    _set: e_friend_status_set_input

    """filter the rows which have to be updated"""
    where: e_friend_status_bool_exp!
  ): e_friend_status_mutation_response

  """
  update single row of the table: "e_friend_status"
  """
  update_e_friend_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_friend_status_set_input
    pk_columns: e_friend_status_pk_columns_input!
  ): e_friend_status

  """
  update multiples rows of table: "e_friend_status"
  """
  update_e_friend_status_many(
    """updates to execute, in order"""
    updates: [e_friend_status_updates!]!
  ): [e_friend_status_mutation_response]

  """
  update data of the table: "e_game_server_node_statuses"
  """
  update_e_game_server_node_statuses(
    """sets the columns of the filtered rows to the given values"""
    _set: e_game_server_node_statuses_set_input

    """filter the rows which have to be updated"""
    where: e_game_server_node_statuses_bool_exp!
  ): e_game_server_node_statuses_mutation_response

  """
  update single row of the table: "e_game_server_node_statuses"
  """
  update_e_game_server_node_statuses_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_game_server_node_statuses_set_input
    pk_columns: e_game_server_node_statuses_pk_columns_input!
  ): e_game_server_node_statuses

  """
  update multiples rows of table: "e_game_server_node_statuses"
  """
  update_e_game_server_node_statuses_many(
    """updates to execute, in order"""
    updates: [e_game_server_node_statuses_updates!]!
  ): [e_game_server_node_statuses_mutation_response]

  """
  update data of the table: "e_lobby_access"
  """
  update_e_lobby_access(
    """sets the columns of the filtered rows to the given values"""
    _set: e_lobby_access_set_input

    """filter the rows which have to be updated"""
    where: e_lobby_access_bool_exp!
  ): e_lobby_access_mutation_response

  """
  update single row of the table: "e_lobby_access"
  """
  update_e_lobby_access_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_lobby_access_set_input
    pk_columns: e_lobby_access_pk_columns_input!
  ): e_lobby_access

  """
  update multiples rows of table: "e_lobby_access"
  """
  update_e_lobby_access_many(
    """updates to execute, in order"""
    updates: [e_lobby_access_updates!]!
  ): [e_lobby_access_mutation_response]

  """
  update data of the table: "e_lobby_player_status"
  """
  update_e_lobby_player_status(
    """sets the columns of the filtered rows to the given values"""
    _set: e_lobby_player_status_set_input

    """filter the rows which have to be updated"""
    where: e_lobby_player_status_bool_exp!
  ): e_lobby_player_status_mutation_response

  """
  update single row of the table: "e_lobby_player_status"
  """
  update_e_lobby_player_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_lobby_player_status_set_input
    pk_columns: e_lobby_player_status_pk_columns_input!
  ): e_lobby_player_status

  """
  update multiples rows of table: "e_lobby_player_status"
  """
  update_e_lobby_player_status_many(
    """updates to execute, in order"""
    updates: [e_lobby_player_status_updates!]!
  ): [e_lobby_player_status_mutation_response]

  """
  update data of the table: "e_map_pool_types"
  """
  update_e_map_pool_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_map_pool_types_set_input

    """filter the rows which have to be updated"""
    where: e_map_pool_types_bool_exp!
  ): e_map_pool_types_mutation_response

  """
  update single row of the table: "e_map_pool_types"
  """
  update_e_map_pool_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_map_pool_types_set_input
    pk_columns: e_map_pool_types_pk_columns_input!
  ): e_map_pool_types

  """
  update multiples rows of table: "e_map_pool_types"
  """
  update_e_map_pool_types_many(
    """updates to execute, in order"""
    updates: [e_map_pool_types_updates!]!
  ): [e_map_pool_types_mutation_response]

  """
  update data of the table: "e_match_map_status"
  """
  update_e_match_map_status(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_map_status_set_input

    """filter the rows which have to be updated"""
    where: e_match_map_status_bool_exp!
  ): e_match_map_status_mutation_response

  """
  update single row of the table: "e_match_map_status"
  """
  update_e_match_map_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_map_status_set_input
    pk_columns: e_match_map_status_pk_columns_input!
  ): e_match_map_status

  """
  update multiples rows of table: "e_match_map_status"
  """
  update_e_match_map_status_many(
    """updates to execute, in order"""
    updates: [e_match_map_status_updates!]!
  ): [e_match_map_status_mutation_response]

  """
  update data of the table: "e_match_status"
  """
  update_e_match_status(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_status_set_input

    """filter the rows which have to be updated"""
    where: e_match_status_bool_exp!
  ): e_match_status_mutation_response

  """
  update single row of the table: "e_match_status"
  """
  update_e_match_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_status_set_input
    pk_columns: e_match_status_pk_columns_input!
  ): e_match_status

  """
  update multiples rows of table: "e_match_status"
  """
  update_e_match_status_many(
    """updates to execute, in order"""
    updates: [e_match_status_updates!]!
  ): [e_match_status_mutation_response]

  """
  update data of the table: "e_match_types"
  """
  update_e_match_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_types_set_input

    """filter the rows which have to be updated"""
    where: e_match_types_bool_exp!
  ): e_match_types_mutation_response

  """
  update single row of the table: "e_match_types"
  """
  update_e_match_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_match_types_set_input
    pk_columns: e_match_types_pk_columns_input!
  ): e_match_types

  """
  update multiples rows of table: "e_match_types"
  """
  update_e_match_types_many(
    """updates to execute, in order"""
    updates: [e_match_types_updates!]!
  ): [e_match_types_mutation_response]

  """
  update data of the table: "e_notification_types"
  """
  update_e_notification_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_notification_types_set_input

    """filter the rows which have to be updated"""
    where: e_notification_types_bool_exp!
  ): e_notification_types_mutation_response

  """
  update single row of the table: "e_notification_types"
  """
  update_e_notification_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_notification_types_set_input
    pk_columns: e_notification_types_pk_columns_input!
  ): e_notification_types

  """
  update multiples rows of table: "e_notification_types"
  """
  update_e_notification_types_many(
    """updates to execute, in order"""
    updates: [e_notification_types_updates!]!
  ): [e_notification_types_mutation_response]

  """
  update data of the table: "e_objective_types"
  """
  update_e_objective_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_objective_types_set_input

    """filter the rows which have to be updated"""
    where: e_objective_types_bool_exp!
  ): e_objective_types_mutation_response

  """
  update single row of the table: "e_objective_types"
  """
  update_e_objective_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_objective_types_set_input
    pk_columns: e_objective_types_pk_columns_input!
  ): e_objective_types

  """
  update multiples rows of table: "e_objective_types"
  """
  update_e_objective_types_many(
    """updates to execute, in order"""
    updates: [e_objective_types_updates!]!
  ): [e_objective_types_mutation_response]

  """
  update data of the table: "e_player_roles"
  """
  update_e_player_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: e_player_roles_set_input

    """filter the rows which have to be updated"""
    where: e_player_roles_bool_exp!
  ): e_player_roles_mutation_response

  """
  update single row of the table: "e_player_roles"
  """
  update_e_player_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_player_roles_set_input
    pk_columns: e_player_roles_pk_columns_input!
  ): e_player_roles

  """
  update multiples rows of table: "e_player_roles"
  """
  update_e_player_roles_many(
    """updates to execute, in order"""
    updates: [e_player_roles_updates!]!
  ): [e_player_roles_mutation_response]

  """
  update data of the table: "e_ready_settings"
  """
  update_e_ready_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: e_ready_settings_set_input

    """filter the rows which have to be updated"""
    where: e_ready_settings_bool_exp!
  ): e_ready_settings_mutation_response

  """
  update single row of the table: "e_ready_settings"
  """
  update_e_ready_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_ready_settings_set_input
    pk_columns: e_ready_settings_pk_columns_input!
  ): e_ready_settings

  """
  update multiples rows of table: "e_ready_settings"
  """
  update_e_ready_settings_many(
    """updates to execute, in order"""
    updates: [e_ready_settings_updates!]!
  ): [e_ready_settings_mutation_response]

  """
  update data of the table: "e_sanction_types"
  """
  update_e_sanction_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_sanction_types_set_input

    """filter the rows which have to be updated"""
    where: e_sanction_types_bool_exp!
  ): e_sanction_types_mutation_response

  """
  update single row of the table: "e_sanction_types"
  """
  update_e_sanction_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_sanction_types_set_input
    pk_columns: e_sanction_types_pk_columns_input!
  ): e_sanction_types

  """
  update multiples rows of table: "e_sanction_types"
  """
  update_e_sanction_types_many(
    """updates to execute, in order"""
    updates: [e_sanction_types_updates!]!
  ): [e_sanction_types_mutation_response]

  """
  update data of the table: "e_sides"
  """
  update_e_sides(
    """sets the columns of the filtered rows to the given values"""
    _set: e_sides_set_input

    """filter the rows which have to be updated"""
    where: e_sides_bool_exp!
  ): e_sides_mutation_response

  """
  update single row of the table: "e_sides"
  """
  update_e_sides_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_sides_set_input
    pk_columns: e_sides_pk_columns_input!
  ): e_sides

  """
  update multiples rows of table: "e_sides"
  """
  update_e_sides_many(
    """updates to execute, in order"""
    updates: [e_sides_updates!]!
  ): [e_sides_mutation_response]

  """
  update data of the table: "e_team_roles"
  """
  update_e_team_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: e_team_roles_set_input

    """filter the rows which have to be updated"""
    where: e_team_roles_bool_exp!
  ): e_team_roles_mutation_response

  """
  update single row of the table: "e_team_roles"
  """
  update_e_team_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_team_roles_set_input
    pk_columns: e_team_roles_pk_columns_input!
  ): e_team_roles

  """
  update multiples rows of table: "e_team_roles"
  """
  update_e_team_roles_many(
    """updates to execute, in order"""
    updates: [e_team_roles_updates!]!
  ): [e_team_roles_mutation_response]

  """
  update data of the table: "e_timeout_settings"
  """
  update_e_timeout_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: e_timeout_settings_set_input

    """filter the rows which have to be updated"""
    where: e_timeout_settings_bool_exp!
  ): e_timeout_settings_mutation_response

  """
  update single row of the table: "e_timeout_settings"
  """
  update_e_timeout_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_timeout_settings_set_input
    pk_columns: e_timeout_settings_pk_columns_input!
  ): e_timeout_settings

  """
  update multiples rows of table: "e_timeout_settings"
  """
  update_e_timeout_settings_many(
    """updates to execute, in order"""
    updates: [e_timeout_settings_updates!]!
  ): [e_timeout_settings_mutation_response]

  """
  update data of the table: "e_tournament_stage_types"
  """
  update_e_tournament_stage_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_tournament_stage_types_set_input

    """filter the rows which have to be updated"""
    where: e_tournament_stage_types_bool_exp!
  ): e_tournament_stage_types_mutation_response

  """
  update single row of the table: "e_tournament_stage_types"
  """
  update_e_tournament_stage_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_tournament_stage_types_set_input
    pk_columns: e_tournament_stage_types_pk_columns_input!
  ): e_tournament_stage_types

  """
  update multiples rows of table: "e_tournament_stage_types"
  """
  update_e_tournament_stage_types_many(
    """updates to execute, in order"""
    updates: [e_tournament_stage_types_updates!]!
  ): [e_tournament_stage_types_mutation_response]

  """
  update data of the table: "e_tournament_status"
  """
  update_e_tournament_status(
    """sets the columns of the filtered rows to the given values"""
    _set: e_tournament_status_set_input

    """filter the rows which have to be updated"""
    where: e_tournament_status_bool_exp!
  ): e_tournament_status_mutation_response

  """
  update single row of the table: "e_tournament_status"
  """
  update_e_tournament_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_tournament_status_set_input
    pk_columns: e_tournament_status_pk_columns_input!
  ): e_tournament_status

  """
  update multiples rows of table: "e_tournament_status"
  """
  update_e_tournament_status_many(
    """updates to execute, in order"""
    updates: [e_tournament_status_updates!]!
  ): [e_tournament_status_mutation_response]

  """
  update data of the table: "e_utility_types"
  """
  update_e_utility_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_utility_types_set_input

    """filter the rows which have to be updated"""
    where: e_utility_types_bool_exp!
  ): e_utility_types_mutation_response

  """
  update single row of the table: "e_utility_types"
  """
  update_e_utility_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_utility_types_set_input
    pk_columns: e_utility_types_pk_columns_input!
  ): e_utility_types

  """
  update multiples rows of table: "e_utility_types"
  """
  update_e_utility_types_many(
    """updates to execute, in order"""
    updates: [e_utility_types_updates!]!
  ): [e_utility_types_mutation_response]

  """
  update data of the table: "e_veto_pick_types"
  """
  update_e_veto_pick_types(
    """sets the columns of the filtered rows to the given values"""
    _set: e_veto_pick_types_set_input

    """filter the rows which have to be updated"""
    where: e_veto_pick_types_bool_exp!
  ): e_veto_pick_types_mutation_response

  """
  update single row of the table: "e_veto_pick_types"
  """
  update_e_veto_pick_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: e_veto_pick_types_set_input
    pk_columns: e_veto_pick_types_pk_columns_input!
  ): e_veto_pick_types

  """
  update multiples rows of table: "e_veto_pick_types"
  """
  update_e_veto_pick_types_many(
    """updates to execute, in order"""
    updates: [e_veto_pick_types_updates!]!
  ): [e_veto_pick_types_mutation_response]

  """
  update data of the table: "friends"
  """
  update_friends(
    """increments the numeric columns with given value of the filtered values"""
    _inc: friends_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: friends_set_input

    """filter the rows which have to be updated"""
    where: friends_bool_exp!
  ): friends_mutation_response

  """
  update single row of the table: "friends"
  """
  update_friends_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: friends_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: friends_set_input
    pk_columns: friends_pk_columns_input!
  ): friends

  """
  update multiples rows of table: "friends"
  """
  update_friends_many(
    """updates to execute, in order"""
    updates: [friends_updates!]!
  ): [friends_mutation_response]

  """
  update data of the table: "game_server_nodes"
  """
  update_game_server_nodes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: game_server_nodes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: game_server_nodes_set_input

    """filter the rows which have to be updated"""
    where: game_server_nodes_bool_exp!
  ): game_server_nodes_mutation_response

  """
  update single row of the table: "game_server_nodes"
  """
  update_game_server_nodes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: game_server_nodes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: game_server_nodes_set_input
    pk_columns: game_server_nodes_pk_columns_input!
  ): game_server_nodes

  """
  update multiples rows of table: "game_server_nodes"
  """
  update_game_server_nodes_many(
    """updates to execute, in order"""
    updates: [game_server_nodes_updates!]!
  ): [game_server_nodes_mutation_response]

  """
  update data of the table: "lobbies"
  """
  update_lobbies(
    """sets the columns of the filtered rows to the given values"""
    _set: lobbies_set_input

    """filter the rows which have to be updated"""
    where: lobbies_bool_exp!
  ): lobbies_mutation_response

  """
  update single row of the table: "lobbies"
  """
  update_lobbies_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lobbies_set_input
    pk_columns: lobbies_pk_columns_input!
  ): lobbies

  """
  update multiples rows of table: "lobbies"
  """
  update_lobbies_many(
    """updates to execute, in order"""
    updates: [lobbies_updates!]!
  ): [lobbies_mutation_response]

  """
  update data of the table: "lobby_players"
  """
  update_lobby_players(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lobby_players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lobby_players_set_input

    """filter the rows which have to be updated"""
    where: lobby_players_bool_exp!
  ): lobby_players_mutation_response

  """
  update single row of the table: "lobby_players"
  """
  update_lobby_players_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lobby_players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lobby_players_set_input
    pk_columns: lobby_players_pk_columns_input!
  ): lobby_players

  """
  update multiples rows of table: "lobby_players"
  """
  update_lobby_players_many(
    """updates to execute, in order"""
    updates: [lobby_players_updates!]!
  ): [lobby_players_mutation_response]

  """
  update data of the table: "map_pools"
  """
  update_map_pools(
    """sets the columns of the filtered rows to the given values"""
    _set: map_pools_set_input

    """filter the rows which have to be updated"""
    where: map_pools_bool_exp!
  ): map_pools_mutation_response

  """
  update single row of the table: "map_pools"
  """
  update_map_pools_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: map_pools_set_input
    pk_columns: map_pools_pk_columns_input!
  ): map_pools

  """
  update multiples rows of table: "map_pools"
  """
  update_map_pools_many(
    """updates to execute, in order"""
    updates: [map_pools_updates!]!
  ): [map_pools_mutation_response]

  """
  update data of the table: "maps"
  """
  update_maps(
    """sets the columns of the filtered rows to the given values"""
    _set: maps_set_input

    """filter the rows which have to be updated"""
    where: maps_bool_exp!
  ): maps_mutation_response

  """
  update single row of the table: "maps"
  """
  update_maps_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: maps_set_input
    pk_columns: maps_pk_columns_input!
  ): maps

  """
  update multiples rows of table: "maps"
  """
  update_maps_many(
    """updates to execute, in order"""
    updates: [maps_updates!]!
  ): [maps_mutation_response]

  """
  update data of the table: "match_invites"
  """
  update_match_invites(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_invites_set_input

    """filter the rows which have to be updated"""
    where: match_invites_bool_exp!
  ): match_invites_mutation_response

  """
  update single row of the table: "match_invites"
  """
  update_match_invites_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_invites_set_input
    pk_columns: match_invites_pk_columns_input!
  ): match_invites

  """
  update multiples rows of table: "match_invites"
  """
  update_match_invites_many(
    """updates to execute, in order"""
    updates: [match_invites_updates!]!
  ): [match_invites_mutation_response]

  """
  update data of the table: "match_lineup_players"
  """
  update_match_lineup_players(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_lineup_players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_lineup_players_set_input

    """filter the rows which have to be updated"""
    where: match_lineup_players_bool_exp!
  ): match_lineup_players_mutation_response

  """
  update single row of the table: "match_lineup_players"
  """
  update_match_lineup_players_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_lineup_players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_lineup_players_set_input
    pk_columns: match_lineup_players_pk_columns_input!
  ): match_lineup_players

  """
  update multiples rows of table: "match_lineup_players"
  """
  update_match_lineup_players_many(
    """updates to execute, in order"""
    updates: [match_lineup_players_updates!]!
  ): [match_lineup_players_mutation_response]

  """
  update data of the table: "match_lineups"
  """
  update_match_lineups(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_lineups_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_lineups_set_input

    """filter the rows which have to be updated"""
    where: match_lineups_bool_exp!
  ): match_lineups_mutation_response

  """
  update single row of the table: "match_lineups"
  """
  update_match_lineups_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_lineups_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_lineups_set_input
    pk_columns: match_lineups_pk_columns_input!
  ): match_lineups

  """
  update multiples rows of table: "match_lineups"
  """
  update_match_lineups_many(
    """updates to execute, in order"""
    updates: [match_lineups_updates!]!
  ): [match_lineups_mutation_response]

  """
  update data of the table: "match_map_demos"
  """
  update_match_map_demos(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_map_demos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_map_demos_set_input

    """filter the rows which have to be updated"""
    where: match_map_demos_bool_exp!
  ): match_map_demos_mutation_response

  """
  update single row of the table: "match_map_demos"
  """
  update_match_map_demos_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_map_demos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_map_demos_set_input
    pk_columns: match_map_demos_pk_columns_input!
  ): match_map_demos

  """
  update multiples rows of table: "match_map_demos"
  """
  update_match_map_demos_many(
    """updates to execute, in order"""
    updates: [match_map_demos_updates!]!
  ): [match_map_demos_mutation_response]

  """
  update data of the table: "match_map_rounds"
  """
  update_match_map_rounds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_map_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_map_rounds_set_input

    """filter the rows which have to be updated"""
    where: match_map_rounds_bool_exp!
  ): match_map_rounds_mutation_response

  """
  update single row of the table: "match_map_rounds"
  """
  update_match_map_rounds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_map_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_map_rounds_set_input
    pk_columns: match_map_rounds_pk_columns_input!
  ): match_map_rounds

  """
  update multiples rows of table: "match_map_rounds"
  """
  update_match_map_rounds_many(
    """updates to execute, in order"""
    updates: [match_map_rounds_updates!]!
  ): [match_map_rounds_mutation_response]

  """
  update data of the table: "match_map_veto_picks"
  """
  update_match_map_veto_picks(
    """sets the columns of the filtered rows to the given values"""
    _set: match_map_veto_picks_set_input

    """filter the rows which have to be updated"""
    where: match_map_veto_picks_bool_exp!
  ): match_map_veto_picks_mutation_response

  """
  update single row of the table: "match_map_veto_picks"
  """
  update_match_map_veto_picks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: match_map_veto_picks_set_input
    pk_columns: match_map_veto_picks_pk_columns_input!
  ): match_map_veto_picks

  """
  update multiples rows of table: "match_map_veto_picks"
  """
  update_match_map_veto_picks_many(
    """updates to execute, in order"""
    updates: [match_map_veto_picks_updates!]!
  ): [match_map_veto_picks_mutation_response]

  """
  update data of the table: "match_maps"
  """
  update_match_maps(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_maps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_maps_set_input

    """filter the rows which have to be updated"""
    where: match_maps_bool_exp!
  ): match_maps_mutation_response

  """
  update single row of the table: "match_maps"
  """
  update_match_maps_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_maps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_maps_set_input
    pk_columns: match_maps_pk_columns_input!
  ): match_maps

  """
  update multiples rows of table: "match_maps"
  """
  update_match_maps_many(
    """updates to execute, in order"""
    updates: [match_maps_updates!]!
  ): [match_maps_mutation_response]

  """
  update data of the table: "match_options"
  """
  update_match_options(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_options_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_options_set_input

    """filter the rows which have to be updated"""
    where: match_options_bool_exp!
  ): match_options_mutation_response

  """
  update single row of the table: "match_options"
  """
  update_match_options_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: match_options_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_options_set_input
    pk_columns: match_options_pk_columns_input!
  ): match_options

  """
  update multiples rows of table: "match_options"
  """
  update_match_options_many(
    """updates to execute, in order"""
    updates: [match_options_updates!]!
  ): [match_options_mutation_response]

  """
  update data of the table: "match_region_veto_picks"
  """
  update_match_region_veto_picks(
    """sets the columns of the filtered rows to the given values"""
    _set: match_region_veto_picks_set_input

    """filter the rows which have to be updated"""
    where: match_region_veto_picks_bool_exp!
  ): match_region_veto_picks_mutation_response

  """
  update single row of the table: "match_region_veto_picks"
  """
  update_match_region_veto_picks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: match_region_veto_picks_set_input
    pk_columns: match_region_veto_picks_pk_columns_input!
  ): match_region_veto_picks

  """
  update multiples rows of table: "match_region_veto_picks"
  """
  update_match_region_veto_picks_many(
    """updates to execute, in order"""
    updates: [match_region_veto_picks_updates!]!
  ): [match_region_veto_picks_mutation_response]

  """
  update data of the table: "match_type_cfgs"
  """
  update_match_type_cfgs(
    """sets the columns of the filtered rows to the given values"""
    _set: match_type_cfgs_set_input

    """filter the rows which have to be updated"""
    where: match_type_cfgs_bool_exp!
  ): match_type_cfgs_mutation_response

  """
  update single row of the table: "match_type_cfgs"
  """
  update_match_type_cfgs_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: match_type_cfgs_set_input
    pk_columns: match_type_cfgs_pk_columns_input!
  ): match_type_cfgs

  """
  update multiples rows of table: "match_type_cfgs"
  """
  update_match_type_cfgs_many(
    """updates to execute, in order"""
    updates: [match_type_cfgs_updates!]!
  ): [match_type_cfgs_mutation_response]

  """
  update data of the table: "matches"
  """
  update_matches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: matches_set_input

    """filter the rows which have to be updated"""
    where: matches_bool_exp!
  ): matches_mutation_response

  """
  update single row of the table: "matches"
  """
  update_matches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: matches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: matches_set_input
    pk_columns: matches_pk_columns_input!
  ): matches

  """
  update multiples rows of table: "matches"
  """
  update_matches_many(
    """updates to execute, in order"""
    updates: [matches_updates!]!
  ): [matches_mutation_response]

  """
  update data of the table: "migration_hashes.hashes"
  """
  update_migration_hashes_hashes(
    """sets the columns of the filtered rows to the given values"""
    _set: migration_hashes_hashes_set_input

    """filter the rows which have to be updated"""
    where: migration_hashes_hashes_bool_exp!
  ): migration_hashes_hashes_mutation_response

  """
  update single row of the table: "migration_hashes.hashes"
  """
  update_migration_hashes_hashes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: migration_hashes_hashes_set_input
    pk_columns: migration_hashes_hashes_pk_columns_input!
  ): migration_hashes_hashes

  """
  update multiples rows of table: "migration_hashes.hashes"
  """
  update_migration_hashes_hashes_many(
    """updates to execute, in order"""
    updates: [migration_hashes_hashes_updates!]!
  ): [migration_hashes_hashes_mutation_response]

  """
  update data of the table: "v_my_friends"
  """
  update_my_friends(
    """increments the numeric columns with given value of the filtered values"""
    _inc: my_friends_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: my_friends_set_input

    """filter the rows which have to be updated"""
    where: my_friends_bool_exp!
  ): my_friends_mutation_response

  """
  update multiples rows of table: "v_my_friends"
  """
  update_my_friends_many(
    """updates to execute, in order"""
    updates: [my_friends_updates!]!
  ): [my_friends_mutation_response]

  """
  update data of the table: "notifications"
  """
  update_notifications(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: notifications_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: notifications_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: notifications_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: notifications_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: notifications_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: notifications_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: notifications_set_input

    """filter the rows which have to be updated"""
    where: notifications_bool_exp!
  ): notifications_mutation_response

  """
  update single row of the table: "notifications"
  """
  update_notifications_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: notifications_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: notifications_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: notifications_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: notifications_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: notifications_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: notifications_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: notifications_set_input
    pk_columns: notifications_pk_columns_input!
  ): notifications

  """
  update multiples rows of table: "notifications"
  """
  update_notifications_many(
    """updates to execute, in order"""
    updates: [notifications_updates!]!
  ): [notifications_mutation_response]

  """
  update data of the table: "player_assists"
  """
  update_player_assists(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_assists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_assists_set_input

    """filter the rows which have to be updated"""
    where: player_assists_bool_exp!
  ): player_assists_mutation_response

  """
  update multiples rows of table: "player_assists"
  """
  update_player_assists_many(
    """updates to execute, in order"""
    updates: [player_assists_updates!]!
  ): [player_assists_mutation_response]

  """
  update data of the table: "player_damages"
  """
  update_player_damages(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_damages_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_damages_set_input

    """filter the rows which have to be updated"""
    where: player_damages_bool_exp!
  ): player_damages_mutation_response

  """
  update multiples rows of table: "player_damages"
  """
  update_player_damages_many(
    """updates to execute, in order"""
    updates: [player_damages_updates!]!
  ): [player_damages_mutation_response]

  """
  update data of the table: "player_elo"
  """
  update_player_elo(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_elo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_elo_set_input

    """filter the rows which have to be updated"""
    where: player_elo_bool_exp!
  ): player_elo_mutation_response

  """
  update single row of the table: "player_elo"
  """
  update_player_elo_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_elo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_elo_set_input
    pk_columns: player_elo_pk_columns_input!
  ): player_elo

  """
  update multiples rows of table: "player_elo"
  """
  update_player_elo_many(
    """updates to execute, in order"""
    updates: [player_elo_updates!]!
  ): [player_elo_mutation_response]

  """
  update data of the table: "player_flashes"
  """
  update_player_flashes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_flashes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_flashes_set_input

    """filter the rows which have to be updated"""
    where: player_flashes_bool_exp!
  ): player_flashes_mutation_response

  """
  update multiples rows of table: "player_flashes"
  """
  update_player_flashes_many(
    """updates to execute, in order"""
    updates: [player_flashes_updates!]!
  ): [player_flashes_mutation_response]

  """
  update data of the table: "player_kills"
  """
  update_player_kills(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_kills_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_kills_set_input

    """filter the rows which have to be updated"""
    where: player_kills_bool_exp!
  ): player_kills_mutation_response

  """
  update single row of the table: "player_kills"
  """
  update_player_kills_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_kills_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_kills_set_input
    pk_columns: player_kills_pk_columns_input!
  ): player_kills

  """
  update multiples rows of table: "player_kills"
  """
  update_player_kills_many(
    """updates to execute, in order"""
    updates: [player_kills_updates!]!
  ): [player_kills_mutation_response]

  """
  update data of the table: "player_objectives"
  """
  update_player_objectives(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_objectives_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_objectives_set_input

    """filter the rows which have to be updated"""
    where: player_objectives_bool_exp!
  ): player_objectives_mutation_response

  """
  update multiples rows of table: "player_objectives"
  """
  update_player_objectives_many(
    """updates to execute, in order"""
    updates: [player_objectives_updates!]!
  ): [player_objectives_mutation_response]

  """
  update data of the table: "player_sanctions"
  """
  update_player_sanctions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_sanctions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_sanctions_set_input

    """filter the rows which have to be updated"""
    where: player_sanctions_bool_exp!
  ): player_sanctions_mutation_response

  """
  update multiples rows of table: "player_sanctions"
  """
  update_player_sanctions_many(
    """updates to execute, in order"""
    updates: [player_sanctions_updates!]!
  ): [player_sanctions_mutation_response]

  """
  update data of the table: "player_unused_utility"
  """
  update_player_unused_utility(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_unused_utility_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_unused_utility_set_input

    """filter the rows which have to be updated"""
    where: player_unused_utility_bool_exp!
  ): player_unused_utility_mutation_response

  """
  update single row of the table: "player_unused_utility"
  """
  update_player_unused_utility_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_unused_utility_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_unused_utility_set_input
    pk_columns: player_unused_utility_pk_columns_input!
  ): player_unused_utility

  """
  update multiples rows of table: "player_unused_utility"
  """
  update_player_unused_utility_many(
    """updates to execute, in order"""
    updates: [player_unused_utility_updates!]!
  ): [player_unused_utility_mutation_response]

  """
  update data of the table: "player_utility"
  """
  update_player_utility(
    """increments the numeric columns with given value of the filtered values"""
    _inc: player_utility_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_utility_set_input

    """filter the rows which have to be updated"""
    where: player_utility_bool_exp!
  ): player_utility_mutation_response

  """
  update multiples rows of table: "player_utility"
  """
  update_player_utility_many(
    """updates to execute, in order"""
    updates: [player_utility_updates!]!
  ): [player_utility_mutation_response]

  """
  update data of the table: "players"
  """
  update_players(
    """increments the numeric columns with given value of the filtered values"""
    _inc: players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: players_set_input

    """filter the rows which have to be updated"""
    where: players_bool_exp!
  ): players_mutation_response

  """
  update single row of the table: "players"
  """
  update_players_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: players_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: players_set_input
    pk_columns: players_pk_columns_input!
  ): players

  """
  update multiples rows of table: "players"
  """
  update_players_many(
    """updates to execute, in order"""
    updates: [players_updates!]!
  ): [players_mutation_response]

  """
  update data of the table: "server_regions"
  """
  update_server_regions(
    """sets the columns of the filtered rows to the given values"""
    _set: server_regions_set_input

    """filter the rows which have to be updated"""
    where: server_regions_bool_exp!
  ): server_regions_mutation_response

  """
  update single row of the table: "server_regions"
  """
  update_server_regions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: server_regions_set_input
    pk_columns: server_regions_pk_columns_input!
  ): server_regions

  """
  update multiples rows of table: "server_regions"
  """
  update_server_regions_many(
    """updates to execute, in order"""
    updates: [server_regions_updates!]!
  ): [server_regions_mutation_response]

  """
  update data of the table: "servers"
  """
  update_servers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: servers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: servers_set_input

    """filter the rows which have to be updated"""
    where: servers_bool_exp!
  ): servers_mutation_response

  """
  update single row of the table: "servers"
  """
  update_servers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: servers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: servers_set_input
    pk_columns: servers_pk_columns_input!
  ): servers

  """
  update multiples rows of table: "servers"
  """
  update_servers_many(
    """updates to execute, in order"""
    updates: [servers_updates!]!
  ): [servers_mutation_response]

  """
  update data of the table: "settings"
  """
  update_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update multiples rows of table: "settings"
  """
  update_settings_many(
    """updates to execute, in order"""
    updates: [settings_updates!]!
  ): [settings_mutation_response]

  """
  update data of the table: "team_invites"
  """
  update_team_invites(
    """increments the numeric columns with given value of the filtered values"""
    _inc: team_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_invites_set_input

    """filter the rows which have to be updated"""
    where: team_invites_bool_exp!
  ): team_invites_mutation_response

  """
  update single row of the table: "team_invites"
  """
  update_team_invites_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: team_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_invites_set_input
    pk_columns: team_invites_pk_columns_input!
  ): team_invites

  """
  update multiples rows of table: "team_invites"
  """
  update_team_invites_many(
    """updates to execute, in order"""
    updates: [team_invites_updates!]!
  ): [team_invites_mutation_response]

  """
  update data of the table: "team_roster"
  """
  update_team_roster(
    """increments the numeric columns with given value of the filtered values"""
    _inc: team_roster_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_roster_set_input

    """filter the rows which have to be updated"""
    where: team_roster_bool_exp!
  ): team_roster_mutation_response

  """
  update single row of the table: "team_roster"
  """
  update_team_roster_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: team_roster_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_roster_set_input
    pk_columns: team_roster_pk_columns_input!
  ): team_roster

  """
  update multiples rows of table: "team_roster"
  """
  update_team_roster_many(
    """updates to execute, in order"""
    updates: [team_roster_updates!]!
  ): [team_roster_mutation_response]

  """
  update data of the table: "teams"
  """
  update_teams(
    """increments the numeric columns with given value of the filtered values"""
    _inc: teams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: teams_set_input

    """filter the rows which have to be updated"""
    where: teams_bool_exp!
  ): teams_mutation_response

  """
  update single row of the table: "teams"
  """
  update_teams_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: teams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: teams_set_input
    pk_columns: teams_pk_columns_input!
  ): teams

  """
  update multiples rows of table: "teams"
  """
  update_teams_many(
    """updates to execute, in order"""
    updates: [teams_updates!]!
  ): [teams_mutation_response]

  """
  update data of the table: "tournament_brackets"
  """
  update_tournament_brackets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_brackets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_brackets_set_input

    """filter the rows which have to be updated"""
    where: tournament_brackets_bool_exp!
  ): tournament_brackets_mutation_response

  """
  update single row of the table: "tournament_brackets"
  """
  update_tournament_brackets_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_brackets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_brackets_set_input
    pk_columns: tournament_brackets_pk_columns_input!
  ): tournament_brackets

  """
  update multiples rows of table: "tournament_brackets"
  """
  update_tournament_brackets_many(
    """updates to execute, in order"""
    updates: [tournament_brackets_updates!]!
  ): [tournament_brackets_mutation_response]

  """
  update data of the table: "tournament_organizers"
  """
  update_tournament_organizers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_organizers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_organizers_set_input

    """filter the rows which have to be updated"""
    where: tournament_organizers_bool_exp!
  ): tournament_organizers_mutation_response

  """
  update single row of the table: "tournament_organizers"
  """
  update_tournament_organizers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_organizers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_organizers_set_input
    pk_columns: tournament_organizers_pk_columns_input!
  ): tournament_organizers

  """
  update multiples rows of table: "tournament_organizers"
  """
  update_tournament_organizers_many(
    """updates to execute, in order"""
    updates: [tournament_organizers_updates!]!
  ): [tournament_organizers_mutation_response]

  """
  update data of the table: "tournament_stages"
  """
  update_tournament_stages(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tournament_stages_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tournament_stages_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tournament_stages_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tournament_stages_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_stages_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tournament_stages_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_stages_set_input

    """filter the rows which have to be updated"""
    where: tournament_stages_bool_exp!
  ): tournament_stages_mutation_response

  """
  update single row of the table: "tournament_stages"
  """
  update_tournament_stages_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tournament_stages_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tournament_stages_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tournament_stages_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tournament_stages_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_stages_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tournament_stages_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_stages_set_input
    pk_columns: tournament_stages_pk_columns_input!
  ): tournament_stages

  """
  update multiples rows of table: "tournament_stages"
  """
  update_tournament_stages_many(
    """updates to execute, in order"""
    updates: [tournament_stages_updates!]!
  ): [tournament_stages_mutation_response]

  """
  update data of the table: "tournament_team_invites"
  """
  update_tournament_team_invites(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_team_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_team_invites_set_input

    """filter the rows which have to be updated"""
    where: tournament_team_invites_bool_exp!
  ): tournament_team_invites_mutation_response

  """
  update single row of the table: "tournament_team_invites"
  """
  update_tournament_team_invites_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_team_invites_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_team_invites_set_input
    pk_columns: tournament_team_invites_pk_columns_input!
  ): tournament_team_invites

  """
  update multiples rows of table: "tournament_team_invites"
  """
  update_tournament_team_invites_many(
    """updates to execute, in order"""
    updates: [tournament_team_invites_updates!]!
  ): [tournament_team_invites_mutation_response]

  """
  update data of the table: "tournament_team_roster"
  """
  update_tournament_team_roster(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_team_roster_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_team_roster_set_input

    """filter the rows which have to be updated"""
    where: tournament_team_roster_bool_exp!
  ): tournament_team_roster_mutation_response

  """
  update single row of the table: "tournament_team_roster"
  """
  update_tournament_team_roster_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_team_roster_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_team_roster_set_input
    pk_columns: tournament_team_roster_pk_columns_input!
  ): tournament_team_roster

  """
  update multiples rows of table: "tournament_team_roster"
  """
  update_tournament_team_roster_many(
    """updates to execute, in order"""
    updates: [tournament_team_roster_updates!]!
  ): [tournament_team_roster_mutation_response]

  """
  update data of the table: "tournament_teams"
  """
  update_tournament_teams(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_teams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_teams_set_input

    """filter the rows which have to be updated"""
    where: tournament_teams_bool_exp!
  ): tournament_teams_mutation_response

  """
  update single row of the table: "tournament_teams"
  """
  update_tournament_teams_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournament_teams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournament_teams_set_input
    pk_columns: tournament_teams_pk_columns_input!
  ): tournament_teams

  """
  update multiples rows of table: "tournament_teams"
  """
  update_tournament_teams_many(
    """updates to execute, in order"""
    updates: [tournament_teams_updates!]!
  ): [tournament_teams_mutation_response]

  """
  update data of the table: "tournaments"
  """
  update_tournaments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournaments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournaments_set_input

    """filter the rows which have to be updated"""
    where: tournaments_bool_exp!
  ): tournaments_mutation_response

  """
  update single row of the table: "tournaments"
  """
  update_tournaments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tournaments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tournaments_set_input
    pk_columns: tournaments_pk_columns_input!
  ): tournaments

  """
  update multiples rows of table: "tournaments"
  """
  update_tournaments_many(
    """updates to execute, in order"""
    updates: [tournaments_updates!]!
  ): [tournaments_mutation_response]

  """
  update data of the table: "v_match_captains"
  """
  update_v_match_captains(
    """increments the numeric columns with given value of the filtered values"""
    _inc: v_match_captains_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: v_match_captains_set_input

    """filter the rows which have to be updated"""
    where: v_match_captains_bool_exp!
  ): v_match_captains_mutation_response

  """
  update multiples rows of table: "v_match_captains"
  """
  update_v_match_captains_many(
    """updates to execute, in order"""
    updates: [v_match_captains_updates!]!
  ): [v_match_captains_mutation_response]

  """
  update data of the table: "v_pool_maps"
  """
  update_v_pool_maps(
    """sets the columns of the filtered rows to the given values"""
    _set: v_pool_maps_set_input

    """filter the rows which have to be updated"""
    where: v_pool_maps_bool_exp!
  ): v_pool_maps_mutation_response

  """
  update multiples rows of table: "v_pool_maps"
  """
  update_v_pool_maps_many(
    """updates to execute, in order"""
    updates: [v_pool_maps_updates!]!
  ): [v_pool_maps_mutation_response]
}

"""
columns and relationships of "v_my_friends"
"""
type my_friends {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  name_registered: Boolean

  """An object relationship"""
  player: players
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""
aggregated selection of "v_my_friends"
"""
type my_friends_aggregate {
  aggregate: my_friends_aggregate_fields
  nodes: [my_friends!]!
}

input my_friends_aggregate_bool_exp {
  bool_and: my_friends_aggregate_bool_exp_bool_and
  bool_or: my_friends_aggregate_bool_exp_bool_or
  count: my_friends_aggregate_bool_exp_count
}

input my_friends_aggregate_bool_exp_bool_and {
  arguments: my_friends_select_column_my_friends_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: my_friends_bool_exp
  predicate: Boolean_comparison_exp!
}

input my_friends_aggregate_bool_exp_bool_or {
  arguments: my_friends_select_column_my_friends_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: my_friends_bool_exp
  predicate: Boolean_comparison_exp!
}

input my_friends_aggregate_bool_exp_count {
  arguments: [my_friends_select_column!]
  distinct: Boolean
  filter: my_friends_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "v_my_friends"
"""
type my_friends_aggregate_fields {
  avg: my_friends_avg_fields
  count(columns: [my_friends_select_column!], distinct: Boolean): Int!
  max: my_friends_max_fields
  min: my_friends_min_fields
  stddev: my_friends_stddev_fields
  stddev_pop: my_friends_stddev_pop_fields
  stddev_samp: my_friends_stddev_samp_fields
  sum: my_friends_sum_fields
  var_pop: my_friends_var_pop_fields
  var_samp: my_friends_var_samp_fields
  variance: my_friends_variance_fields
}

"""
order by aggregate values of table "v_my_friends"
"""
input my_friends_aggregate_order_by {
  avg: my_friends_avg_order_by
  count: order_by
  max: my_friends_max_order_by
  min: my_friends_min_order_by
  stddev: my_friends_stddev_order_by
  stddev_pop: my_friends_stddev_pop_order_by
  stddev_samp: my_friends_stddev_samp_order_by
  sum: my_friends_sum_order_by
  var_pop: my_friends_var_pop_order_by
  var_samp: my_friends_var_samp_order_by
  variance: my_friends_variance_order_by
}

"""
input type for inserting array relation for remote table "v_my_friends"
"""
input my_friends_arr_rel_insert_input {
  data: [my_friends_insert_input!]!
}

"""aggregate avg on columns"""
type my_friends_avg_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by avg() on columns of table "v_my_friends"
"""
input my_friends_avg_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "v_my_friends". All fields are combined with a logical 'AND'.
"""
input my_friends_bool_exp {
  _and: [my_friends_bool_exp!]
  _not: my_friends_bool_exp
  _or: [my_friends_bool_exp!]
  avatar_url: String_comparison_exp
  country: String_comparison_exp
  created_at: timestamptz_comparison_exp
  discord_id: String_comparison_exp
  elo: numeric_comparison_exp
  friend_steam_id: bigint_comparison_exp
  invited_by_steam_id: bigint_comparison_exp
  name: String_comparison_exp
  name_registered: Boolean_comparison_exp
  player: players_bool_exp
  profile_url: String_comparison_exp
  role: String_comparison_exp
  status: String_comparison_exp
  steam_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "v_my_friends"
"""
input my_friends_inc_input {
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  steam_id: bigint
}

"""
input type for inserting data into table "v_my_friends"
"""
input my_friends_insert_input {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  name_registered: Boolean
  player: players_obj_rel_insert_input
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""aggregate max on columns"""
type my_friends_max_fields {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""
order by max() on columns of table "v_my_friends"
"""
input my_friends_max_order_by {
  avatar_url: order_by
  country: order_by
  created_at: order_by
  discord_id: order_by
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  name: order_by
  profile_url: order_by
  role: order_by
  status: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type my_friends_min_fields {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""
order by min() on columns of table "v_my_friends"
"""
input my_friends_min_order_by {
  avatar_url: order_by
  country: order_by
  created_at: order_by
  discord_id: order_by
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  name: order_by
  profile_url: order_by
  role: order_by
  status: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "v_my_friends"
"""
type my_friends_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [my_friends!]!
}

"""Ordering options when selecting data from "v_my_friends"."""
input my_friends_order_by {
  avatar_url: order_by
  country: order_by
  created_at: order_by
  discord_id: order_by
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  name: order_by
  name_registered: order_by
  player: players_order_by
  profile_url: order_by
  role: order_by
  status: order_by
  steam_id: order_by
}

"""
select columns of table "v_my_friends"
"""
enum my_friends_select_column {
  """column name"""
  avatar_url

  """column name"""
  country

  """column name"""
  created_at

  """column name"""
  discord_id

  """column name"""
  elo

  """column name"""
  friend_steam_id

  """column name"""
  invited_by_steam_id

  """column name"""
  name

  """column name"""
  name_registered

  """column name"""
  profile_url

  """column name"""
  role

  """column name"""
  status

  """column name"""
  steam_id
}

"""
select "my_friends_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_my_friends"
"""
enum my_friends_select_column_my_friends_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  name_registered
}

"""
select "my_friends_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_my_friends"
"""
enum my_friends_select_column_my_friends_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  name_registered
}

"""
input type for updating data in table "v_my_friends"
"""
input my_friends_set_input {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  name_registered: Boolean
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""aggregate stddev on columns"""
type my_friends_stddev_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "v_my_friends"
"""
input my_friends_stddev_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type my_friends_stddev_pop_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "v_my_friends"
"""
input my_friends_stddev_pop_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type my_friends_stddev_samp_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "v_my_friends"
"""
input my_friends_stddev_samp_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "my_friends"
"""
input my_friends_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: my_friends_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input my_friends_stream_cursor_value_input {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  name: String
  name_registered: Boolean
  profile_url: String
  role: String
  status: String
  steam_id: bigint
}

"""aggregate sum on columns"""
type my_friends_sum_fields {
  elo: numeric
  friend_steam_id: bigint
  invited_by_steam_id: bigint
  steam_id: bigint
}

"""
order by sum() on columns of table "v_my_friends"
"""
input my_friends_sum_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

input my_friends_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: my_friends_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: my_friends_set_input

  """filter the rows which have to be updated"""
  where: my_friends_bool_exp!
}

"""aggregate var_pop on columns"""
type my_friends_var_pop_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "v_my_friends"
"""
input my_friends_var_pop_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type my_friends_var_samp_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "v_my_friends"
"""
input my_friends_var_samp_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type my_friends_variance_fields {
  elo: Float
  friend_steam_id: Float
  invited_by_steam_id: Float
  steam_id: Float
}

"""
order by variance() on columns of table "v_my_friends"
"""
input my_friends_variance_order_by {
  elo: order_by
  friend_steam_id: order_by
  invited_by_steam_id: order_by
  steam_id: order_by
}

"""
columns and relationships of "notifications"
"""
type notifications {
  actions(
    """JSON select path"""
    path: String
  ): jsonb
  created_at: timestamptz!
  deleted_at: timestamptz
  entity_id: String
  id: uuid!
  is_read: Boolean!
  message: String!

  """An object relationship"""
  player: players
  role: e_player_roles_enum!
  steam_id: bigint
  title: String!
  type: e_notification_types_enum!
}

"""
aggregated selection of "notifications"
"""
type notifications_aggregate {
  aggregate: notifications_aggregate_fields
  nodes: [notifications!]!
}

input notifications_aggregate_bool_exp {
  bool_and: notifications_aggregate_bool_exp_bool_and
  bool_or: notifications_aggregate_bool_exp_bool_or
  count: notifications_aggregate_bool_exp_count
}

input notifications_aggregate_bool_exp_bool_and {
  arguments: notifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: notifications_bool_exp
  predicate: Boolean_comparison_exp!
}

input notifications_aggregate_bool_exp_bool_or {
  arguments: notifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: notifications_bool_exp
  predicate: Boolean_comparison_exp!
}

input notifications_aggregate_bool_exp_count {
  arguments: [notifications_select_column!]
  distinct: Boolean
  filter: notifications_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "notifications"
"""
type notifications_aggregate_fields {
  avg: notifications_avg_fields
  count(columns: [notifications_select_column!], distinct: Boolean): Int!
  max: notifications_max_fields
  min: notifications_min_fields
  stddev: notifications_stddev_fields
  stddev_pop: notifications_stddev_pop_fields
  stddev_samp: notifications_stddev_samp_fields
  sum: notifications_sum_fields
  var_pop: notifications_var_pop_fields
  var_samp: notifications_var_samp_fields
  variance: notifications_variance_fields
}

"""
order by aggregate values of table "notifications"
"""
input notifications_aggregate_order_by {
  avg: notifications_avg_order_by
  count: order_by
  max: notifications_max_order_by
  min: notifications_min_order_by
  stddev: notifications_stddev_order_by
  stddev_pop: notifications_stddev_pop_order_by
  stddev_samp: notifications_stddev_samp_order_by
  sum: notifications_sum_order_by
  var_pop: notifications_var_pop_order_by
  var_samp: notifications_var_samp_order_by
  variance: notifications_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input notifications_append_input {
  actions: jsonb
}

"""
input type for inserting array relation for remote table "notifications"
"""
input notifications_arr_rel_insert_input {
  data: [notifications_insert_input!]!

  """upsert condition"""
  on_conflict: notifications_on_conflict
}

"""aggregate avg on columns"""
type notifications_avg_fields {
  steam_id: Float
}

"""
order by avg() on columns of table "notifications"
"""
input notifications_avg_order_by {
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'.
"""
input notifications_bool_exp {
  _and: [notifications_bool_exp!]
  _not: notifications_bool_exp
  _or: [notifications_bool_exp!]
  actions: jsonb_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  entity_id: String_comparison_exp
  id: uuid_comparison_exp
  is_read: Boolean_comparison_exp
  message: String_comparison_exp
  player: players_bool_exp
  role: e_player_roles_enum_comparison_exp
  steam_id: bigint_comparison_exp
  title: String_comparison_exp
  type: e_notification_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "notifications"
"""
enum notifications_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  notifications_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input notifications_delete_at_path_input {
  actions: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input notifications_delete_elem_input {
  actions: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input notifications_delete_key_input {
  actions: String
}

"""
input type for incrementing numeric columns in table "notifications"
"""
input notifications_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "notifications"
"""
input notifications_insert_input {
  actions: jsonb
  created_at: timestamptz
  deleted_at: timestamptz
  entity_id: String
  id: uuid
  is_read: Boolean
  message: String
  player: players_obj_rel_insert_input
  role: e_player_roles_enum
  steam_id: bigint
  title: String
  type: e_notification_types_enum
}

"""aggregate max on columns"""
type notifications_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  entity_id: String
  id: uuid
  message: String
  steam_id: bigint
  title: String
}

"""
order by max() on columns of table "notifications"
"""
input notifications_max_order_by {
  created_at: order_by
  deleted_at: order_by
  entity_id: order_by
  id: order_by
  message: order_by
  steam_id: order_by
  title: order_by
}

"""aggregate min on columns"""
type notifications_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  entity_id: String
  id: uuid
  message: String
  steam_id: bigint
  title: String
}

"""
order by min() on columns of table "notifications"
"""
input notifications_min_order_by {
  created_at: order_by
  deleted_at: order_by
  entity_id: order_by
  id: order_by
  message: order_by
  steam_id: order_by
  title: order_by
}

"""
response of any mutation on the table "notifications"
"""
type notifications_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notifications!]!
}

"""
on_conflict condition type for table "notifications"
"""
input notifications_on_conflict {
  constraint: notifications_constraint!
  update_columns: [notifications_update_column!]! = []
  where: notifications_bool_exp
}

"""Ordering options when selecting data from "notifications"."""
input notifications_order_by {
  actions: order_by
  created_at: order_by
  deleted_at: order_by
  entity_id: order_by
  id: order_by
  is_read: order_by
  message: order_by
  player: players_order_by
  role: order_by
  steam_id: order_by
  title: order_by
  type: order_by
}

"""primary key columns input for table: notifications"""
input notifications_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input notifications_prepend_input {
  actions: jsonb
}

"""
select columns of table "notifications"
"""
enum notifications_select_column {
  """column name"""
  actions

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  entity_id

  """column name"""
  id

  """column name"""
  is_read

  """column name"""
  message

  """column name"""
  role

  """column name"""
  steam_id

  """column name"""
  title

  """column name"""
  type
}

"""
select "notifications_aggregate_bool_exp_bool_and_arguments_columns" columns of table "notifications"
"""
enum notifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_read
}

"""
select "notifications_aggregate_bool_exp_bool_or_arguments_columns" columns of table "notifications"
"""
enum notifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_read
}

"""
input type for updating data in table "notifications"
"""
input notifications_set_input {
  actions: jsonb
  created_at: timestamptz
  deleted_at: timestamptz
  entity_id: String
  id: uuid
  is_read: Boolean
  message: String
  role: e_player_roles_enum
  steam_id: bigint
  title: String
  type: e_notification_types_enum
}

"""aggregate stddev on columns"""
type notifications_stddev_fields {
  steam_id: Float
}

"""
order by stddev() on columns of table "notifications"
"""
input notifications_stddev_order_by {
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type notifications_stddev_pop_fields {
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "notifications"
"""
input notifications_stddev_pop_order_by {
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type notifications_stddev_samp_fields {
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "notifications"
"""
input notifications_stddev_samp_order_by {
  steam_id: order_by
}

"""
Streaming cursor of the table "notifications"
"""
input notifications_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: notifications_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input notifications_stream_cursor_value_input {
  actions: jsonb
  created_at: timestamptz
  deleted_at: timestamptz
  entity_id: String
  id: uuid
  is_read: Boolean
  message: String
  role: e_player_roles_enum
  steam_id: bigint
  title: String
  type: e_notification_types_enum
}

"""aggregate sum on columns"""
type notifications_sum_fields {
  steam_id: bigint
}

"""
order by sum() on columns of table "notifications"
"""
input notifications_sum_order_by {
  steam_id: order_by
}

"""
update columns of table "notifications"
"""
enum notifications_update_column {
  """column name"""
  actions

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  entity_id

  """column name"""
  id

  """column name"""
  is_read

  """column name"""
  message

  """column name"""
  role

  """column name"""
  steam_id

  """column name"""
  title

  """column name"""
  type
}

input notifications_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: notifications_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: notifications_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: notifications_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: notifications_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: notifications_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: notifications_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: notifications_set_input

  """filter the rows which have to be updated"""
  where: notifications_bool_exp!
}

"""aggregate var_pop on columns"""
type notifications_var_pop_fields {
  steam_id: Float
}

"""
order by var_pop() on columns of table "notifications"
"""
input notifications_var_pop_order_by {
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type notifications_var_samp_fields {
  steam_id: Float
}

"""
order by var_samp() on columns of table "notifications"
"""
input notifications_var_samp_order_by {
  steam_id: order_by
}

"""aggregate variance on columns"""
type notifications_variance_fields {
  steam_id: Float
}

"""
order by variance() on columns of table "notifications"
"""
input notifications_variance_order_by {
  steam_id: order_by
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "player_assists"
"""
type player_assists {
  """An object relationship"""
  attacked_player: players!
  attacked_steam_id: bigint!
  attacked_team: String!
  attacker_steam_id: bigint!
  attacker_team: String!
  flash: Boolean!
  id: uuid!

  """
  A computed field, executes function "is_team_assist"
  """
  is_team_assist: Boolean

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!

  """An object relationship"""
  player: players!
  round: Int!
  time: timestamptz!
}

"""
aggregated selection of "player_assists"
"""
type player_assists_aggregate {
  aggregate: player_assists_aggregate_fields
  nodes: [player_assists!]!
}

input player_assists_aggregate_bool_exp {
  bool_and: player_assists_aggregate_bool_exp_bool_and
  bool_or: player_assists_aggregate_bool_exp_bool_or
  count: player_assists_aggregate_bool_exp_count
}

input player_assists_aggregate_bool_exp_bool_and {
  arguments: player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: player_assists_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_assists_aggregate_bool_exp_bool_or {
  arguments: player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: player_assists_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_assists_aggregate_bool_exp_count {
  arguments: [player_assists_select_column!]
  distinct: Boolean
  filter: player_assists_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_assists"
"""
type player_assists_aggregate_fields {
  avg: player_assists_avg_fields
  count(columns: [player_assists_select_column!], distinct: Boolean): Int!
  max: player_assists_max_fields
  min: player_assists_min_fields
  stddev: player_assists_stddev_fields
  stddev_pop: player_assists_stddev_pop_fields
  stddev_samp: player_assists_stddev_samp_fields
  sum: player_assists_sum_fields
  var_pop: player_assists_var_pop_fields
  var_samp: player_assists_var_samp_fields
  variance: player_assists_variance_fields
}

"""
order by aggregate values of table "player_assists"
"""
input player_assists_aggregate_order_by {
  avg: player_assists_avg_order_by
  count: order_by
  max: player_assists_max_order_by
  min: player_assists_min_order_by
  stddev: player_assists_stddev_order_by
  stddev_pop: player_assists_stddev_pop_order_by
  stddev_samp: player_assists_stddev_samp_order_by
  sum: player_assists_sum_order_by
  var_pop: player_assists_var_pop_order_by
  var_samp: player_assists_var_samp_order_by
  variance: player_assists_variance_order_by
}

"""
input type for inserting array relation for remote table "player_assists"
"""
input player_assists_arr_rel_insert_input {
  data: [player_assists_insert_input!]!
}

"""aggregate avg on columns"""
type player_assists_avg_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by avg() on columns of table "player_assists"
"""
input player_assists_avg_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'.
"""
input player_assists_bool_exp {
  _and: [player_assists_bool_exp!]
  _not: player_assists_bool_exp
  _or: [player_assists_bool_exp!]
  attacked_player: players_bool_exp
  attacked_steam_id: bigint_comparison_exp
  attacked_team: String_comparison_exp
  attacker_steam_id: bigint_comparison_exp
  attacker_team: String_comparison_exp
  flash: Boolean_comparison_exp
  id: uuid_comparison_exp
  is_team_assist: Boolean_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  player: players_bool_exp
  round: Int_comparison_exp
  time: timestamptz_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_assists"
"""
input player_assists_inc_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  round: Int
}

"""
input type for inserting data into table "player_assists"
"""
input player_assists_insert_input {
  attacked_player: players_obj_rel_insert_input
  attacked_steam_id: bigint
  attacked_team: String
  attacker_steam_id: bigint
  attacker_team: String
  flash: Boolean
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  player: players_obj_rel_insert_input
  round: Int
  time: timestamptz
}

"""aggregate max on columns"""
type player_assists_max_fields {
  attacked_steam_id: bigint
  attacked_team: String
  attacker_steam_id: bigint
  attacker_team: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by max() on columns of table "player_assists"
"""
input player_assists_max_order_by {
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""aggregate min on columns"""
type player_assists_min_fields {
  attacked_steam_id: bigint
  attacked_team: String
  attacker_steam_id: bigint
  attacker_team: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by min() on columns of table "player_assists"
"""
input player_assists_min_order_by {
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""
response of any mutation on the table "player_assists"
"""
type player_assists_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_assists!]!
}

"""Ordering options when selecting data from "player_assists"."""
input player_assists_order_by {
  attacked_player: players_order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  flash: order_by
  id: order_by
  is_team_assist: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  player: players_order_by
  round: order_by
  time: order_by
}

"""
select columns of table "player_assists"
"""
enum player_assists_select_column {
  """column name"""
  attacked_steam_id

  """column name"""
  attacked_team

  """column name"""
  attacker_steam_id

  """column name"""
  attacker_team

  """column name"""
  flash

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  time
}

"""
select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists"
"""
enum player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  flash
}

"""
select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists"
"""
enum player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  flash
}

"""
input type for updating data in table "player_assists"
"""
input player_assists_set_input {
  attacked_steam_id: bigint
  attacked_team: String
  attacker_steam_id: bigint
  attacker_team: String
  flash: Boolean
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""aggregate stddev on columns"""
type player_assists_stddev_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev() on columns of table "player_assists"
"""
input player_assists_stddev_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_assists_stddev_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_assists"
"""
input player_assists_stddev_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_assists_stddev_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_assists"
"""
input player_assists_stddev_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_assists"
"""
input player_assists_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_assists_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_assists_stream_cursor_value_input {
  attacked_steam_id: bigint
  attacked_team: String
  attacker_steam_id: bigint
  attacker_team: String
  flash: Boolean
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""aggregate sum on columns"""
type player_assists_sum_fields {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  round: Int
}

"""
order by sum() on columns of table "player_assists"
"""
input player_assists_sum_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

input player_assists_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_assists_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_assists_set_input

  """filter the rows which have to be updated"""
  where: player_assists_bool_exp!
}

"""aggregate var_pop on columns"""
type player_assists_var_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_assists"
"""
input player_assists_var_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_assists_var_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_assists"
"""
input player_assists_var_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_assists_variance_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by variance() on columns of table "player_assists"
"""
input player_assists_variance_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
columns and relationships of "player_damages"
"""
type player_damages {
  armor: Int!
  attacked_location: String!
  attacked_location_coordinates: String

  """An object relationship"""
  attacked_player: players!
  attacked_steam_id: bigint!
  attacked_team: String!
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int!
  damage_armor: Int!
  health: Int!
  hitgroup: String!
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!

  """An object relationship"""
  player: players
  round: numeric!

  """
  A computed field, executes function "is_team_damage"
  """
  team_damage: Boolean
  time: timestamptz!
  with: String
}

"""
aggregated selection of "player_damages"
"""
type player_damages_aggregate {
  aggregate: player_damages_aggregate_fields
  nodes: [player_damages!]!
}

input player_damages_aggregate_bool_exp {
  count: player_damages_aggregate_bool_exp_count
}

input player_damages_aggregate_bool_exp_count {
  arguments: [player_damages_select_column!]
  distinct: Boolean
  filter: player_damages_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_damages"
"""
type player_damages_aggregate_fields {
  avg: player_damages_avg_fields
  count(columns: [player_damages_select_column!], distinct: Boolean): Int!
  max: player_damages_max_fields
  min: player_damages_min_fields
  stddev: player_damages_stddev_fields
  stddev_pop: player_damages_stddev_pop_fields
  stddev_samp: player_damages_stddev_samp_fields
  sum: player_damages_sum_fields
  var_pop: player_damages_var_pop_fields
  var_samp: player_damages_var_samp_fields
  variance: player_damages_variance_fields
}

"""
order by aggregate values of table "player_damages"
"""
input player_damages_aggregate_order_by {
  avg: player_damages_avg_order_by
  count: order_by
  max: player_damages_max_order_by
  min: player_damages_min_order_by
  stddev: player_damages_stddev_order_by
  stddev_pop: player_damages_stddev_pop_order_by
  stddev_samp: player_damages_stddev_samp_order_by
  sum: player_damages_sum_order_by
  var_pop: player_damages_var_pop_order_by
  var_samp: player_damages_var_samp_order_by
  variance: player_damages_variance_order_by
}

"""
input type for inserting array relation for remote table "player_damages"
"""
input player_damages_arr_rel_insert_input {
  data: [player_damages_insert_input!]!
}

"""aggregate avg on columns"""
type player_damages_avg_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by avg() on columns of table "player_damages"
"""
input player_damages_avg_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'.
"""
input player_damages_bool_exp {
  _and: [player_damages_bool_exp!]
  _not: player_damages_bool_exp
  _or: [player_damages_bool_exp!]
  armor: Int_comparison_exp
  attacked_location: String_comparison_exp
  attacked_location_coordinates: String_comparison_exp
  attacked_player: players_bool_exp
  attacked_steam_id: bigint_comparison_exp
  attacked_team: String_comparison_exp
  attacker_location: String_comparison_exp
  attacker_location_coordinates: String_comparison_exp
  attacker_steam_id: bigint_comparison_exp
  attacker_team: String_comparison_exp
  damage: Int_comparison_exp
  damage_armor: Int_comparison_exp
  health: Int_comparison_exp
  hitgroup: String_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  player: players_bool_exp
  round: numeric_comparison_exp
  team_damage: Boolean_comparison_exp
  time: timestamptz_comparison_exp
  with: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_damages"
"""
input player_damages_inc_input {
  armor: Int
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  damage: Int
  damage_armor: Int
  health: Int
  round: numeric
}

"""
input type for inserting data into table "player_damages"
"""
input player_damages_insert_input {
  armor: Int
  attacked_location: String
  attacked_location_coordinates: String
  attacked_player: players_obj_rel_insert_input
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int
  damage_armor: Int
  health: Int
  hitgroup: String
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  player: players_obj_rel_insert_input
  round: numeric
  time: timestamptz
  with: String
}

"""aggregate max on columns"""
type player_damages_max_fields {
  armor: Int
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int
  damage_armor: Int
  health: Int
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: numeric
  time: timestamptz
  with: String
}

"""
order by max() on columns of table "player_damages"
"""
input player_damages_max_order_by {
  armor: order_by
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  hitgroup: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  with: order_by
}

"""aggregate min on columns"""
type player_damages_min_fields {
  armor: Int
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int
  damage_armor: Int
  health: Int
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: numeric
  time: timestamptz
  with: String
}

"""
order by min() on columns of table "player_damages"
"""
input player_damages_min_order_by {
  armor: order_by
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  hitgroup: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  with: order_by
}

"""
response of any mutation on the table "player_damages"
"""
type player_damages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_damages!]!
}

"""Ordering options when selecting data from "player_damages"."""
input player_damages_order_by {
  armor: order_by
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_player: players_order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  hitgroup: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  player: players_order_by
  round: order_by
  team_damage: order_by
  time: order_by
  with: order_by
}

"""
select columns of table "player_damages"
"""
enum player_damages_select_column {
  """column name"""
  armor

  """column name"""
  attacked_location

  """column name"""
  attacked_location_coordinates

  """column name"""
  attacked_steam_id

  """column name"""
  attacked_team

  """column name"""
  attacker_location

  """column name"""
  attacker_location_coordinates

  """column name"""
  attacker_steam_id

  """column name"""
  attacker_team

  """column name"""
  damage

  """column name"""
  damage_armor

  """column name"""
  health

  """column name"""
  hitgroup

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  time

  """column name"""
  with
}

"""
input type for updating data in table "player_damages"
"""
input player_damages_set_input {
  armor: Int
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int
  damage_armor: Int
  health: Int
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: numeric
  time: timestamptz
  with: String
}

"""aggregate stddev on columns"""
type player_damages_stddev_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by stddev() on columns of table "player_damages"
"""
input player_damages_stddev_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_damages_stddev_pop_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_damages"
"""
input player_damages_stddev_pop_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_damages_stddev_samp_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_damages"
"""
input player_damages_stddev_samp_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_damages"
"""
input player_damages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_damages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_damages_stream_cursor_value_input {
  armor: Int
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  damage: Int
  damage_armor: Int
  health: Int
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: numeric
  time: timestamptz
  with: String
}

"""aggregate sum on columns"""
type player_damages_sum_fields {
  armor: Int
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  damage: Int
  damage_armor: Int
  health: Int
  round: numeric
}

"""
order by sum() on columns of table "player_damages"
"""
input player_damages_sum_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

input player_damages_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_damages_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_damages_set_input

  """filter the rows which have to be updated"""
  where: player_damages_bool_exp!
}

"""aggregate var_pop on columns"""
type player_damages_var_pop_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_damages"
"""
input player_damages_var_pop_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_damages_var_samp_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_damages"
"""
input player_damages_var_samp_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_damages_variance_fields {
  armor: Float
  attacked_steam_id: Float
  attacker_steam_id: Float
  damage: Float
  damage_armor: Float
  health: Float
  round: Float
}

"""
order by variance() on columns of table "player_damages"
"""
input player_damages_variance_order_by {
  armor: order_by
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  damage: order_by
  damage_armor: order_by
  health: order_by
  round: order_by
}

"""
columns and relationships of "player_elo"
"""
type player_elo {
  change: numeric!
  created_at: timestamptz!
  current: numeric!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  player: players!
  steam_id: bigint!
}

"""
aggregated selection of "player_elo"
"""
type player_elo_aggregate {
  aggregate: player_elo_aggregate_fields
  nodes: [player_elo!]!
}

input player_elo_aggregate_bool_exp {
  count: player_elo_aggregate_bool_exp_count
}

input player_elo_aggregate_bool_exp_count {
  arguments: [player_elo_select_column!]
  distinct: Boolean
  filter: player_elo_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_elo"
"""
type player_elo_aggregate_fields {
  avg: player_elo_avg_fields
  count(columns: [player_elo_select_column!], distinct: Boolean): Int!
  max: player_elo_max_fields
  min: player_elo_min_fields
  stddev: player_elo_stddev_fields
  stddev_pop: player_elo_stddev_pop_fields
  stddev_samp: player_elo_stddev_samp_fields
  sum: player_elo_sum_fields
  var_pop: player_elo_var_pop_fields
  var_samp: player_elo_var_samp_fields
  variance: player_elo_variance_fields
}

"""
order by aggregate values of table "player_elo"
"""
input player_elo_aggregate_order_by {
  avg: player_elo_avg_order_by
  count: order_by
  max: player_elo_max_order_by
  min: player_elo_min_order_by
  stddev: player_elo_stddev_order_by
  stddev_pop: player_elo_stddev_pop_order_by
  stddev_samp: player_elo_stddev_samp_order_by
  sum: player_elo_sum_order_by
  var_pop: player_elo_var_pop_order_by
  var_samp: player_elo_var_samp_order_by
  variance: player_elo_variance_order_by
}

"""
input type for inserting array relation for remote table "player_elo"
"""
input player_elo_arr_rel_insert_input {
  data: [player_elo_insert_input!]!

  """upsert condition"""
  on_conflict: player_elo_on_conflict
}

"""aggregate avg on columns"""
type player_elo_avg_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by avg() on columns of table "player_elo"
"""
input player_elo_avg_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "player_elo". All fields are combined with a logical 'AND'.
"""
input player_elo_bool_exp {
  _and: [player_elo_bool_exp!]
  _not: player_elo_bool_exp
  _or: [player_elo_bool_exp!]
  change: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  current: numeric_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "player_elo"
"""
enum player_elo_constraint {
  """
  unique or primary key constraint on columns "steam_id", "match_id"
  """
  player_elo_pkey
}

"""
input type for incrementing numeric columns in table "player_elo"
"""
input player_elo_inc_input {
  change: numeric
  current: numeric
  steam_id: bigint
}

"""
input type for inserting data into table "player_elo"
"""
input player_elo_insert_input {
  change: numeric
  created_at: timestamptz
  current: numeric
  match: matches_obj_rel_insert_input
  match_id: uuid
  player: players_obj_rel_insert_input
  steam_id: bigint
}

"""aggregate max on columns"""
type player_elo_max_fields {
  change: numeric
  created_at: timestamptz
  current: numeric
  match_id: uuid
  steam_id: bigint
}

"""
order by max() on columns of table "player_elo"
"""
input player_elo_max_order_by {
  change: order_by
  created_at: order_by
  current: order_by
  match_id: order_by
  steam_id: order_by
}

"""aggregate min on columns"""
type player_elo_min_fields {
  change: numeric
  created_at: timestamptz
  current: numeric
  match_id: uuid
  steam_id: bigint
}

"""
order by min() on columns of table "player_elo"
"""
input player_elo_min_order_by {
  change: order_by
  created_at: order_by
  current: order_by
  match_id: order_by
  steam_id: order_by
}

"""
response of any mutation on the table "player_elo"
"""
type player_elo_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_elo!]!
}

"""
on_conflict condition type for table "player_elo"
"""
input player_elo_on_conflict {
  constraint: player_elo_constraint!
  update_columns: [player_elo_update_column!]! = []
  where: player_elo_bool_exp
}

"""Ordering options when selecting data from "player_elo"."""
input player_elo_order_by {
  change: order_by
  created_at: order_by
  current: order_by
  match: matches_order_by
  match_id: order_by
  player: players_order_by
  steam_id: order_by
}

"""primary key columns input for table: player_elo"""
input player_elo_pk_columns_input {
  match_id: uuid!
  steam_id: bigint!
}

"""
select columns of table "player_elo"
"""
enum player_elo_select_column {
  """column name"""
  change

  """column name"""
  created_at

  """column name"""
  current

  """column name"""
  match_id

  """column name"""
  steam_id
}

"""
input type for updating data in table "player_elo"
"""
input player_elo_set_input {
  change: numeric
  created_at: timestamptz
  current: numeric
  match_id: uuid
  steam_id: bigint
}

"""aggregate stddev on columns"""
type player_elo_stddev_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "player_elo"
"""
input player_elo_stddev_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type player_elo_stddev_pop_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "player_elo"
"""
input player_elo_stddev_pop_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type player_elo_stddev_samp_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "player_elo"
"""
input player_elo_stddev_samp_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "player_elo"
"""
input player_elo_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_elo_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_elo_stream_cursor_value_input {
  change: numeric
  created_at: timestamptz
  current: numeric
  match_id: uuid
  steam_id: bigint
}

"""aggregate sum on columns"""
type player_elo_sum_fields {
  change: numeric
  current: numeric
  steam_id: bigint
}

"""
order by sum() on columns of table "player_elo"
"""
input player_elo_sum_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""
update columns of table "player_elo"
"""
enum player_elo_update_column {
  """column name"""
  change

  """column name"""
  created_at

  """column name"""
  current

  """column name"""
  match_id

  """column name"""
  steam_id
}

input player_elo_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_elo_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_elo_set_input

  """filter the rows which have to be updated"""
  where: player_elo_bool_exp!
}

"""aggregate var_pop on columns"""
type player_elo_var_pop_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "player_elo"
"""
input player_elo_var_pop_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type player_elo_var_samp_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "player_elo"
"""
input player_elo_var_samp_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type player_elo_variance_fields {
  change: Float
  current: Float
  steam_id: Float
}

"""
order by variance() on columns of table "player_elo"
"""
input player_elo_variance_order_by {
  change: order_by
  current: order_by
  steam_id: order_by
}

"""
columns and relationships of "player_flashes"
"""
type player_flashes {
  attacked_steam_id: bigint!
  attacker_steam_id: bigint!

  """An object relationship"""
  blinded: players!
  duration: numeric!
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!
  round: Int!
  team_flash: Boolean!

  """An object relationship"""
  thrown_by: players!
  time: timestamptz!
}

"""
aggregated selection of "player_flashes"
"""
type player_flashes_aggregate {
  aggregate: player_flashes_aggregate_fields
  nodes: [player_flashes!]!
}

input player_flashes_aggregate_bool_exp {
  bool_and: player_flashes_aggregate_bool_exp_bool_and
  bool_or: player_flashes_aggregate_bool_exp_bool_or
  count: player_flashes_aggregate_bool_exp_count
}

input player_flashes_aggregate_bool_exp_bool_and {
  arguments: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: player_flashes_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_flashes_aggregate_bool_exp_bool_or {
  arguments: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: player_flashes_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_flashes_aggregate_bool_exp_count {
  arguments: [player_flashes_select_column!]
  distinct: Boolean
  filter: player_flashes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_flashes"
"""
type player_flashes_aggregate_fields {
  avg: player_flashes_avg_fields
  count(columns: [player_flashes_select_column!], distinct: Boolean): Int!
  max: player_flashes_max_fields
  min: player_flashes_min_fields
  stddev: player_flashes_stddev_fields
  stddev_pop: player_flashes_stddev_pop_fields
  stddev_samp: player_flashes_stddev_samp_fields
  sum: player_flashes_sum_fields
  var_pop: player_flashes_var_pop_fields
  var_samp: player_flashes_var_samp_fields
  variance: player_flashes_variance_fields
}

"""
order by aggregate values of table "player_flashes"
"""
input player_flashes_aggregate_order_by {
  avg: player_flashes_avg_order_by
  count: order_by
  max: player_flashes_max_order_by
  min: player_flashes_min_order_by
  stddev: player_flashes_stddev_order_by
  stddev_pop: player_flashes_stddev_pop_order_by
  stddev_samp: player_flashes_stddev_samp_order_by
  sum: player_flashes_sum_order_by
  var_pop: player_flashes_var_pop_order_by
  var_samp: player_flashes_var_samp_order_by
  variance: player_flashes_variance_order_by
}

"""
input type for inserting array relation for remote table "player_flashes"
"""
input player_flashes_arr_rel_insert_input {
  data: [player_flashes_insert_input!]!
}

"""aggregate avg on columns"""
type player_flashes_avg_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by avg() on columns of table "player_flashes"
"""
input player_flashes_avg_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'.
"""
input player_flashes_bool_exp {
  _and: [player_flashes_bool_exp!]
  _not: player_flashes_bool_exp
  _or: [player_flashes_bool_exp!]
  attacked_steam_id: bigint_comparison_exp
  attacker_steam_id: bigint_comparison_exp
  blinded: players_bool_exp
  duration: numeric_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  round: Int_comparison_exp
  team_flash: Boolean_comparison_exp
  thrown_by: players_bool_exp
  time: timestamptz_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_flashes"
"""
input player_flashes_inc_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  round: Int
}

"""
input type for inserting data into table "player_flashes"
"""
input player_flashes_insert_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  blinded: players_obj_rel_insert_input
  duration: numeric
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  round: Int
  team_flash: Boolean
  thrown_by: players_obj_rel_insert_input
  time: timestamptz
}

"""aggregate max on columns"""
type player_flashes_max_fields {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by max() on columns of table "player_flashes"
"""
input player_flashes_max_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""aggregate min on columns"""
type player_flashes_min_fields {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by min() on columns of table "player_flashes"
"""
input player_flashes_min_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""
response of any mutation on the table "player_flashes"
"""
type player_flashes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_flashes!]!
}

"""Ordering options when selecting data from "player_flashes"."""
input player_flashes_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  blinded: players_order_by
  duration: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  round: order_by
  team_flash: order_by
  thrown_by: players_order_by
  time: order_by
}

"""
select columns of table "player_flashes"
"""
enum player_flashes_select_column {
  """column name"""
  attacked_steam_id

  """column name"""
  attacker_steam_id

  """column name"""
  duration

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  team_flash

  """column name"""
  time
}

"""
select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes"
"""
enum player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  team_flash
}

"""
select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes"
"""
enum player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  team_flash
}

"""
input type for updating data in table "player_flashes"
"""
input player_flashes_set_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  team_flash: Boolean
  time: timestamptz
}

"""aggregate stddev on columns"""
type player_flashes_stddev_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by stddev() on columns of table "player_flashes"
"""
input player_flashes_stddev_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_flashes_stddev_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_flashes"
"""
input player_flashes_stddev_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_flashes_stddev_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_flashes"
"""
input player_flashes_stddev_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_flashes"
"""
input player_flashes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_flashes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_flashes_stream_cursor_value_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  team_flash: Boolean
  time: timestamptz
}

"""aggregate sum on columns"""
type player_flashes_sum_fields {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  duration: numeric
  round: Int
}

"""
order by sum() on columns of table "player_flashes"
"""
input player_flashes_sum_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

input player_flashes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_flashes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_flashes_set_input

  """filter the rows which have to be updated"""
  where: player_flashes_bool_exp!
}

"""aggregate var_pop on columns"""
type player_flashes_var_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_flashes"
"""
input player_flashes_var_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_flashes_var_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_flashes"
"""
input player_flashes_var_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_flashes_variance_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  duration: Float
  round: Float
}

"""
order by variance() on columns of table "player_flashes"
"""
input player_flashes_variance_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  duration: order_by
  round: order_by
}

"""
columns and relationships of "player_kills"
"""
type player_kills {
  assisted: Boolean!
  attacked_location: String!
  attacked_location_coordinates: String

  """An object relationship"""
  attacked_player: players!
  attacked_steam_id: bigint!
  attacked_team: String!
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  blinded: Boolean!
  headshot: Boolean!
  hitgroup: String!
  id: uuid!
  in_air: Boolean!

  """
  A computed field, executes function "is_suicide"
  """
  is_suicide: Boolean

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!
  no_scope: Boolean!

  """An object relationship"""
  player: players
  round: Int!

  """
  A computed field, executes function "is_team_kill"
  """
  team_kill: Boolean
  thru_smoke: Boolean!
  thru_wall: Boolean!
  time: timestamptz!
  with: String
}

"""
aggregated selection of "player_kills"
"""
type player_kills_aggregate {
  aggregate: player_kills_aggregate_fields
  nodes: [player_kills!]!
}

input player_kills_aggregate_bool_exp {
  bool_and: player_kills_aggregate_bool_exp_bool_and
  bool_or: player_kills_aggregate_bool_exp_bool_or
  count: player_kills_aggregate_bool_exp_count
}

input player_kills_aggregate_bool_exp_bool_and {
  arguments: player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: player_kills_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_kills_aggregate_bool_exp_bool_or {
  arguments: player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: player_kills_bool_exp
  predicate: Boolean_comparison_exp!
}

input player_kills_aggregate_bool_exp_count {
  arguments: [player_kills_select_column!]
  distinct: Boolean
  filter: player_kills_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_kills"
"""
type player_kills_aggregate_fields {
  avg: player_kills_avg_fields
  count(columns: [player_kills_select_column!], distinct: Boolean): Int!
  max: player_kills_max_fields
  min: player_kills_min_fields
  stddev: player_kills_stddev_fields
  stddev_pop: player_kills_stddev_pop_fields
  stddev_samp: player_kills_stddev_samp_fields
  sum: player_kills_sum_fields
  var_pop: player_kills_var_pop_fields
  var_samp: player_kills_var_samp_fields
  variance: player_kills_variance_fields
}

"""
order by aggregate values of table "player_kills"
"""
input player_kills_aggregate_order_by {
  avg: player_kills_avg_order_by
  count: order_by
  max: player_kills_max_order_by
  min: player_kills_min_order_by
  stddev: player_kills_stddev_order_by
  stddev_pop: player_kills_stddev_pop_order_by
  stddev_samp: player_kills_stddev_samp_order_by
  sum: player_kills_sum_order_by
  var_pop: player_kills_var_pop_order_by
  var_samp: player_kills_var_samp_order_by
  variance: player_kills_variance_order_by
}

"""
input type for inserting array relation for remote table "player_kills"
"""
input player_kills_arr_rel_insert_input {
  data: [player_kills_insert_input!]!

  """upsert condition"""
  on_conflict: player_kills_on_conflict
}

"""aggregate avg on columns"""
type player_kills_avg_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by avg() on columns of table "player_kills"
"""
input player_kills_avg_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'.
"""
input player_kills_bool_exp {
  _and: [player_kills_bool_exp!]
  _not: player_kills_bool_exp
  _or: [player_kills_bool_exp!]
  assisted: Boolean_comparison_exp
  attacked_location: String_comparison_exp
  attacked_location_coordinates: String_comparison_exp
  attacked_player: players_bool_exp
  attacked_steam_id: bigint_comparison_exp
  attacked_team: String_comparison_exp
  attacker_location: String_comparison_exp
  attacker_location_coordinates: String_comparison_exp
  attacker_steam_id: bigint_comparison_exp
  attacker_team: String_comparison_exp
  blinded: Boolean_comparison_exp
  headshot: Boolean_comparison_exp
  hitgroup: String_comparison_exp
  id: uuid_comparison_exp
  in_air: Boolean_comparison_exp
  is_suicide: Boolean_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  no_scope: Boolean_comparison_exp
  player: players_bool_exp
  round: Int_comparison_exp
  team_kill: Boolean_comparison_exp
  thru_smoke: Boolean_comparison_exp
  thru_wall: Boolean_comparison_exp
  time: timestamptz_comparison_exp
  with: String_comparison_exp
}

"""
unique or primary key constraints on table "player_kills"
"""
enum player_kills_constraint {
  """
  unique or primary key constraint on columns "id", "time", "match_map_id", "match_id"
  """
  player_kills_pkey
}

"""
input type for incrementing numeric columns in table "player_kills"
"""
input player_kills_inc_input {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  round: Int
}

"""
input type for inserting data into table "player_kills"
"""
input player_kills_insert_input {
  assisted: Boolean
  attacked_location: String
  attacked_location_coordinates: String
  attacked_player: players_obj_rel_insert_input
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  blinded: Boolean
  headshot: Boolean
  hitgroup: String
  id: uuid
  in_air: Boolean
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  no_scope: Boolean
  player: players_obj_rel_insert_input
  round: Int
  thru_smoke: Boolean
  thru_wall: Boolean
  time: timestamptz
  with: String
}

"""aggregate max on columns"""
type player_kills_max_fields {
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
  with: String
}

"""
order by max() on columns of table "player_kills"
"""
input player_kills_max_order_by {
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  hitgroup: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  with: order_by
}

"""aggregate min on columns"""
type player_kills_min_fields {
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  hitgroup: String
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
  with: String
}

"""
order by min() on columns of table "player_kills"
"""
input player_kills_min_order_by {
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  hitgroup: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
  with: order_by
}

"""
response of any mutation on the table "player_kills"
"""
type player_kills_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_kills!]!
}

"""
on_conflict condition type for table "player_kills"
"""
input player_kills_on_conflict {
  constraint: player_kills_constraint!
  update_columns: [player_kills_update_column!]! = []
  where: player_kills_bool_exp
}

"""Ordering options when selecting data from "player_kills"."""
input player_kills_order_by {
  assisted: order_by
  attacked_location: order_by
  attacked_location_coordinates: order_by
  attacked_player: players_order_by
  attacked_steam_id: order_by
  attacked_team: order_by
  attacker_location: order_by
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  attacker_team: order_by
  blinded: order_by
  headshot: order_by
  hitgroup: order_by
  id: order_by
  in_air: order_by
  is_suicide: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  no_scope: order_by
  player: players_order_by
  round: order_by
  team_kill: order_by
  thru_smoke: order_by
  thru_wall: order_by
  time: order_by
  with: order_by
}

"""primary key columns input for table: player_kills"""
input player_kills_pk_columns_input {
  id: uuid!
  match_id: uuid!
  match_map_id: uuid!
  time: timestamptz!
}

"""
select columns of table "player_kills"
"""
enum player_kills_select_column {
  """column name"""
  assisted

  """column name"""
  attacked_location

  """column name"""
  attacked_location_coordinates

  """column name"""
  attacked_steam_id

  """column name"""
  attacked_team

  """column name"""
  attacker_location

  """column name"""
  attacker_location_coordinates

  """column name"""
  attacker_steam_id

  """column name"""
  attacker_team

  """column name"""
  blinded

  """column name"""
  headshot

  """column name"""
  hitgroup

  """column name"""
  id

  """column name"""
  in_air

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  no_scope

  """column name"""
  round

  """column name"""
  thru_smoke

  """column name"""
  thru_wall

  """column name"""
  time

  """column name"""
  with
}

"""
select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills"
"""
enum player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  assisted

  """column name"""
  blinded

  """column name"""
  headshot

  """column name"""
  in_air

  """column name"""
  no_scope

  """column name"""
  thru_smoke

  """column name"""
  thru_wall
}

"""
select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills"
"""
enum player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  assisted

  """column name"""
  blinded

  """column name"""
  headshot

  """column name"""
  in_air

  """column name"""
  no_scope

  """column name"""
  thru_smoke

  """column name"""
  thru_wall
}

"""
input type for updating data in table "player_kills"
"""
input player_kills_set_input {
  assisted: Boolean
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  blinded: Boolean
  headshot: Boolean
  hitgroup: String
  id: uuid
  in_air: Boolean
  match_id: uuid
  match_map_id: uuid
  no_scope: Boolean
  round: Int
  thru_smoke: Boolean
  thru_wall: Boolean
  time: timestamptz
  with: String
}

"""aggregate stddev on columns"""
type player_kills_stddev_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev() on columns of table "player_kills"
"""
input player_kills_stddev_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_kills_stddev_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_kills"
"""
input player_kills_stddev_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_kills_stddev_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_kills"
"""
input player_kills_stddev_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_kills"
"""
input player_kills_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_kills_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_kills_stream_cursor_value_input {
  assisted: Boolean
  attacked_location: String
  attacked_location_coordinates: String
  attacked_steam_id: bigint
  attacked_team: String
  attacker_location: String
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  attacker_team: String
  blinded: Boolean
  headshot: Boolean
  hitgroup: String
  id: uuid
  in_air: Boolean
  match_id: uuid
  match_map_id: uuid
  no_scope: Boolean
  round: Int
  thru_smoke: Boolean
  thru_wall: Boolean
  time: timestamptz
  with: String
}

"""aggregate sum on columns"""
type player_kills_sum_fields {
  attacked_steam_id: bigint
  attacker_steam_id: bigint
  round: Int
}

"""
order by sum() on columns of table "player_kills"
"""
input player_kills_sum_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
update columns of table "player_kills"
"""
enum player_kills_update_column {
  """column name"""
  assisted

  """column name"""
  attacked_location

  """column name"""
  attacked_location_coordinates

  """column name"""
  attacked_steam_id

  """column name"""
  attacked_team

  """column name"""
  attacker_location

  """column name"""
  attacker_location_coordinates

  """column name"""
  attacker_steam_id

  """column name"""
  attacker_team

  """column name"""
  blinded

  """column name"""
  headshot

  """column name"""
  hitgroup

  """column name"""
  id

  """column name"""
  in_air

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  no_scope

  """column name"""
  round

  """column name"""
  thru_smoke

  """column name"""
  thru_wall

  """column name"""
  time

  """column name"""
  with
}

input player_kills_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_kills_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_kills_set_input

  """filter the rows which have to be updated"""
  where: player_kills_bool_exp!
}

"""aggregate var_pop on columns"""
type player_kills_var_pop_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_kills"
"""
input player_kills_var_pop_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_kills_var_samp_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_kills"
"""
input player_kills_var_samp_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_kills_variance_fields {
  attacked_steam_id: Float
  attacker_steam_id: Float
  round: Float
}

"""
order by variance() on columns of table "player_kills"
"""
input player_kills_variance_order_by {
  attacked_steam_id: order_by
  attacker_steam_id: order_by
  round: order_by
}

"""
columns and relationships of "player_objectives"
"""
type player_objectives {
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!

  """An object relationship"""
  player: players!
  player_steam_id: bigint!
  round: Int!
  time: timestamptz!
  type: e_objective_types_enum!
}

"""
aggregated selection of "player_objectives"
"""
type player_objectives_aggregate {
  aggregate: player_objectives_aggregate_fields
  nodes: [player_objectives!]!
}

input player_objectives_aggregate_bool_exp {
  count: player_objectives_aggregate_bool_exp_count
}

input player_objectives_aggregate_bool_exp_count {
  arguments: [player_objectives_select_column!]
  distinct: Boolean
  filter: player_objectives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_objectives"
"""
type player_objectives_aggregate_fields {
  avg: player_objectives_avg_fields
  count(columns: [player_objectives_select_column!], distinct: Boolean): Int!
  max: player_objectives_max_fields
  min: player_objectives_min_fields
  stddev: player_objectives_stddev_fields
  stddev_pop: player_objectives_stddev_pop_fields
  stddev_samp: player_objectives_stddev_samp_fields
  sum: player_objectives_sum_fields
  var_pop: player_objectives_var_pop_fields
  var_samp: player_objectives_var_samp_fields
  variance: player_objectives_variance_fields
}

"""
order by aggregate values of table "player_objectives"
"""
input player_objectives_aggregate_order_by {
  avg: player_objectives_avg_order_by
  count: order_by
  max: player_objectives_max_order_by
  min: player_objectives_min_order_by
  stddev: player_objectives_stddev_order_by
  stddev_pop: player_objectives_stddev_pop_order_by
  stddev_samp: player_objectives_stddev_samp_order_by
  sum: player_objectives_sum_order_by
  var_pop: player_objectives_var_pop_order_by
  var_samp: player_objectives_var_samp_order_by
  variance: player_objectives_variance_order_by
}

"""
input type for inserting array relation for remote table "player_objectives"
"""
input player_objectives_arr_rel_insert_input {
  data: [player_objectives_insert_input!]!
}

"""aggregate avg on columns"""
type player_objectives_avg_fields {
  player_steam_id: Float
  round: Float
}

"""
order by avg() on columns of table "player_objectives"
"""
input player_objectives_avg_order_by {
  player_steam_id: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'.
"""
input player_objectives_bool_exp {
  _and: [player_objectives_bool_exp!]
  _not: player_objectives_bool_exp
  _or: [player_objectives_bool_exp!]
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  round: Int_comparison_exp
  time: timestamptz_comparison_exp
  type: e_objective_types_enum_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_objectives"
"""
input player_objectives_inc_input {
  player_steam_id: bigint
  round: Int
}

"""
input type for inserting data into table "player_objectives"
"""
input player_objectives_insert_input {
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  player: players_obj_rel_insert_input
  player_steam_id: bigint
  round: Int
  time: timestamptz
  type: e_objective_types_enum
}

"""aggregate max on columns"""
type player_objectives_max_fields {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  time: timestamptz
}

"""
order by max() on columns of table "player_objectives"
"""
input player_objectives_max_order_by {
  id: order_by
  match_id: order_by
  match_map_id: order_by
  player_steam_id: order_by
  round: order_by
  time: order_by
}

"""aggregate min on columns"""
type player_objectives_min_fields {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  time: timestamptz
}

"""
order by min() on columns of table "player_objectives"
"""
input player_objectives_min_order_by {
  id: order_by
  match_id: order_by
  match_map_id: order_by
  player_steam_id: order_by
  round: order_by
  time: order_by
}

"""
response of any mutation on the table "player_objectives"
"""
type player_objectives_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_objectives!]!
}

"""Ordering options when selecting data from "player_objectives"."""
input player_objectives_order_by {
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  player: players_order_by
  player_steam_id: order_by
  round: order_by
  time: order_by
  type: order_by
}

"""
select columns of table "player_objectives"
"""
enum player_objectives_select_column {
  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  player_steam_id

  """column name"""
  round

  """column name"""
  time

  """column name"""
  type
}

"""
input type for updating data in table "player_objectives"
"""
input player_objectives_set_input {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  time: timestamptz
  type: e_objective_types_enum
}

"""aggregate stddev on columns"""
type player_objectives_stddev_fields {
  player_steam_id: Float
  round: Float
}

"""
order by stddev() on columns of table "player_objectives"
"""
input player_objectives_stddev_order_by {
  player_steam_id: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_objectives_stddev_pop_fields {
  player_steam_id: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_objectives"
"""
input player_objectives_stddev_pop_order_by {
  player_steam_id: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_objectives_stddev_samp_fields {
  player_steam_id: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_objectives"
"""
input player_objectives_stddev_samp_order_by {
  player_steam_id: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_objectives"
"""
input player_objectives_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_objectives_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_objectives_stream_cursor_value_input {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  time: timestamptz
  type: e_objective_types_enum
}

"""aggregate sum on columns"""
type player_objectives_sum_fields {
  player_steam_id: bigint
  round: Int
}

"""
order by sum() on columns of table "player_objectives"
"""
input player_objectives_sum_order_by {
  player_steam_id: order_by
  round: order_by
}

input player_objectives_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_objectives_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_objectives_set_input

  """filter the rows which have to be updated"""
  where: player_objectives_bool_exp!
}

"""aggregate var_pop on columns"""
type player_objectives_var_pop_fields {
  player_steam_id: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_objectives"
"""
input player_objectives_var_pop_order_by {
  player_steam_id: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_objectives_var_samp_fields {
  player_steam_id: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_objectives"
"""
input player_objectives_var_samp_order_by {
  player_steam_id: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_objectives_variance_fields {
  player_steam_id: Float
  round: Float
}

"""
order by variance() on columns of table "player_objectives"
"""
input player_objectives_variance_order_by {
  player_steam_id: order_by
  round: order_by
}

"""
columns and relationships of "player_sanctions"
"""
type player_sanctions {
  created_at: timestamptz!

  """An object relationship"""
  e_sanction_type: e_sanction_types!
  id: uuid!

  """An object relationship"""
  player: players!
  player_steam_id: bigint!
  reason: String
  remove_sanction_date: timestamptz

  """An object relationship"""
  sanctioned_by: players!
  sanctioned_by_steam_id: bigint!
  type: e_sanction_types_enum!
}

"""
aggregated selection of "player_sanctions"
"""
type player_sanctions_aggregate {
  aggregate: player_sanctions_aggregate_fields
  nodes: [player_sanctions!]!
}

"""
aggregate fields of "player_sanctions"
"""
type player_sanctions_aggregate_fields {
  avg: player_sanctions_avg_fields
  count(columns: [player_sanctions_select_column!], distinct: Boolean): Int!
  max: player_sanctions_max_fields
  min: player_sanctions_min_fields
  stddev: player_sanctions_stddev_fields
  stddev_pop: player_sanctions_stddev_pop_fields
  stddev_samp: player_sanctions_stddev_samp_fields
  sum: player_sanctions_sum_fields
  var_pop: player_sanctions_var_pop_fields
  var_samp: player_sanctions_var_samp_fields
  variance: player_sanctions_variance_fields
}

"""aggregate avg on columns"""
type player_sanctions_avg_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""
Boolean expression to filter rows from the table "player_sanctions". All fields are combined with a logical 'AND'.
"""
input player_sanctions_bool_exp {
  _and: [player_sanctions_bool_exp!]
  _not: player_sanctions_bool_exp
  _or: [player_sanctions_bool_exp!]
  created_at: timestamptz_comparison_exp
  e_sanction_type: e_sanction_types_bool_exp
  id: uuid_comparison_exp
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  reason: String_comparison_exp
  remove_sanction_date: timestamptz_comparison_exp
  sanctioned_by: players_bool_exp
  sanctioned_by_steam_id: bigint_comparison_exp
  type: e_sanction_types_enum_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_sanctions"
"""
input player_sanctions_inc_input {
  player_steam_id: bigint
  sanctioned_by_steam_id: bigint
}

"""
input type for inserting data into table "player_sanctions"
"""
input player_sanctions_insert_input {
  created_at: timestamptz
  e_sanction_type: e_sanction_types_obj_rel_insert_input
  id: uuid
  player: players_obj_rel_insert_input
  player_steam_id: bigint
  reason: String
  remove_sanction_date: timestamptz
  sanctioned_by: players_obj_rel_insert_input
  sanctioned_by_steam_id: bigint
  type: e_sanction_types_enum
}

"""aggregate max on columns"""
type player_sanctions_max_fields {
  created_at: timestamptz
  id: uuid
  player_steam_id: bigint
  reason: String
  remove_sanction_date: timestamptz
  sanctioned_by_steam_id: bigint
}

"""aggregate min on columns"""
type player_sanctions_min_fields {
  created_at: timestamptz
  id: uuid
  player_steam_id: bigint
  reason: String
  remove_sanction_date: timestamptz
  sanctioned_by_steam_id: bigint
}

"""
response of any mutation on the table "player_sanctions"
"""
type player_sanctions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_sanctions!]!
}

"""Ordering options when selecting data from "player_sanctions"."""
input player_sanctions_order_by {
  created_at: order_by
  e_sanction_type: e_sanction_types_order_by
  id: order_by
  player: players_order_by
  player_steam_id: order_by
  reason: order_by
  remove_sanction_date: order_by
  sanctioned_by: players_order_by
  sanctioned_by_steam_id: order_by
  type: order_by
}

"""
select columns of table "player_sanctions"
"""
enum player_sanctions_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  player_steam_id

  """column name"""
  reason

  """column name"""
  remove_sanction_date

  """column name"""
  sanctioned_by_steam_id

  """column name"""
  type
}

"""
input type for updating data in table "player_sanctions"
"""
input player_sanctions_set_input {
  created_at: timestamptz
  id: uuid
  player_steam_id: bigint
  reason: String
  remove_sanction_date: timestamptz
  sanctioned_by_steam_id: bigint
  type: e_sanction_types_enum
}

"""aggregate stddev on columns"""
type player_sanctions_stddev_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""aggregate stddev_pop on columns"""
type player_sanctions_stddev_pop_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""aggregate stddev_samp on columns"""
type player_sanctions_stddev_samp_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""
Streaming cursor of the table "player_sanctions"
"""
input player_sanctions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_sanctions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_sanctions_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  player_steam_id: bigint
  reason: String
  remove_sanction_date: timestamptz
  sanctioned_by_steam_id: bigint
  type: e_sanction_types_enum
}

"""aggregate sum on columns"""
type player_sanctions_sum_fields {
  player_steam_id: bigint
  sanctioned_by_steam_id: bigint
}

input player_sanctions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_sanctions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_sanctions_set_input

  """filter the rows which have to be updated"""
  where: player_sanctions_bool_exp!
}

"""aggregate var_pop on columns"""
type player_sanctions_var_pop_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""aggregate var_samp on columns"""
type player_sanctions_var_samp_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""aggregate variance on columns"""
type player_sanctions_variance_fields {
  player_steam_id: Float
  sanctioned_by_steam_id: Float
}

"""
columns and relationships of "player_unused_utility"
"""
type player_unused_utility {
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!

  """An object relationship"""
  player: players!
  player_steam_id: bigint!
  round: Int!
  unused: Int!
}

"""
aggregated selection of "player_unused_utility"
"""
type player_unused_utility_aggregate {
  aggregate: player_unused_utility_aggregate_fields
  nodes: [player_unused_utility!]!
}

input player_unused_utility_aggregate_bool_exp {
  count: player_unused_utility_aggregate_bool_exp_count
}

input player_unused_utility_aggregate_bool_exp_count {
  arguments: [player_unused_utility_select_column!]
  distinct: Boolean
  filter: player_unused_utility_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_unused_utility"
"""
type player_unused_utility_aggregate_fields {
  avg: player_unused_utility_avg_fields
  count(columns: [player_unused_utility_select_column!], distinct: Boolean): Int!
  max: player_unused_utility_max_fields
  min: player_unused_utility_min_fields
  stddev: player_unused_utility_stddev_fields
  stddev_pop: player_unused_utility_stddev_pop_fields
  stddev_samp: player_unused_utility_stddev_samp_fields
  sum: player_unused_utility_sum_fields
  var_pop: player_unused_utility_var_pop_fields
  var_samp: player_unused_utility_var_samp_fields
  variance: player_unused_utility_variance_fields
}

"""
order by aggregate values of table "player_unused_utility"
"""
input player_unused_utility_aggregate_order_by {
  avg: player_unused_utility_avg_order_by
  count: order_by
  max: player_unused_utility_max_order_by
  min: player_unused_utility_min_order_by
  stddev: player_unused_utility_stddev_order_by
  stddev_pop: player_unused_utility_stddev_pop_order_by
  stddev_samp: player_unused_utility_stddev_samp_order_by
  sum: player_unused_utility_sum_order_by
  var_pop: player_unused_utility_var_pop_order_by
  var_samp: player_unused_utility_var_samp_order_by
  variance: player_unused_utility_variance_order_by
}

"""
input type for inserting array relation for remote table "player_unused_utility"
"""
input player_unused_utility_arr_rel_insert_input {
  data: [player_unused_utility_insert_input!]!

  """upsert condition"""
  on_conflict: player_unused_utility_on_conflict
}

"""aggregate avg on columns"""
type player_unused_utility_avg_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by avg() on columns of table "player_unused_utility"
"""
input player_unused_utility_avg_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""
Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'.
"""
input player_unused_utility_bool_exp {
  _and: [player_unused_utility_bool_exp!]
  _not: player_unused_utility_bool_exp
  _or: [player_unused_utility_bool_exp!]
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  round: Int_comparison_exp
  unused: Int_comparison_exp
}

"""
unique or primary key constraints on table "player_unused_utility"
"""
enum player_unused_utility_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  player_unused_utility_pkey
}

"""
input type for incrementing numeric columns in table "player_unused_utility"
"""
input player_unused_utility_inc_input {
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""
input type for inserting data into table "player_unused_utility"
"""
input player_unused_utility_insert_input {
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  player: players_obj_rel_insert_input
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""aggregate max on columns"""
type player_unused_utility_max_fields {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""
order by max() on columns of table "player_unused_utility"
"""
input player_unused_utility_max_order_by {
  id: order_by
  match_id: order_by
  match_map_id: order_by
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""aggregate min on columns"""
type player_unused_utility_min_fields {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""
order by min() on columns of table "player_unused_utility"
"""
input player_unused_utility_min_order_by {
  id: order_by
  match_id: order_by
  match_map_id: order_by
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""
response of any mutation on the table "player_unused_utility"
"""
type player_unused_utility_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_unused_utility!]!
}

"""
on_conflict condition type for table "player_unused_utility"
"""
input player_unused_utility_on_conflict {
  constraint: player_unused_utility_constraint!
  update_columns: [player_unused_utility_update_column!]! = []
  where: player_unused_utility_bool_exp
}

"""Ordering options when selecting data from "player_unused_utility"."""
input player_unused_utility_order_by {
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  player: players_order_by
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""primary key columns input for table: player_unused_utility"""
input player_unused_utility_pk_columns_input {
  id: uuid!
}

"""
select columns of table "player_unused_utility"
"""
enum player_unused_utility_select_column {
  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  player_steam_id

  """column name"""
  round

  """column name"""
  unused
}

"""
input type for updating data in table "player_unused_utility"
"""
input player_unused_utility_set_input {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""aggregate stddev on columns"""
type player_unused_utility_stddev_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by stddev() on columns of table "player_unused_utility"
"""
input player_unused_utility_stddev_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""aggregate stddev_pop on columns"""
type player_unused_utility_stddev_pop_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by stddev_pop() on columns of table "player_unused_utility"
"""
input player_unused_utility_stddev_pop_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""aggregate stddev_samp on columns"""
type player_unused_utility_stddev_samp_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by stddev_samp() on columns of table "player_unused_utility"
"""
input player_unused_utility_stddev_samp_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""
Streaming cursor of the table "player_unused_utility"
"""
input player_unused_utility_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_unused_utility_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_unused_utility_stream_cursor_value_input {
  id: uuid
  match_id: uuid
  match_map_id: uuid
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""aggregate sum on columns"""
type player_unused_utility_sum_fields {
  player_steam_id: bigint
  round: Int
  unused: Int
}

"""
order by sum() on columns of table "player_unused_utility"
"""
input player_unused_utility_sum_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""
update columns of table "player_unused_utility"
"""
enum player_unused_utility_update_column {
  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  player_steam_id

  """column name"""
  round

  """column name"""
  unused
}

input player_unused_utility_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_unused_utility_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_unused_utility_set_input

  """filter the rows which have to be updated"""
  where: player_unused_utility_bool_exp!
}

"""aggregate var_pop on columns"""
type player_unused_utility_var_pop_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by var_pop() on columns of table "player_unused_utility"
"""
input player_unused_utility_var_pop_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""aggregate var_samp on columns"""
type player_unused_utility_var_samp_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by var_samp() on columns of table "player_unused_utility"
"""
input player_unused_utility_var_samp_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""aggregate variance on columns"""
type player_unused_utility_variance_fields {
  player_steam_id: Float
  round: Float
  unused: Float
}

"""
order by variance() on columns of table "player_unused_utility"
"""
input player_unused_utility_variance_order_by {
  player_steam_id: order_by
  round: order_by
  unused: order_by
}

"""
columns and relationships of "player_utility"
"""
type player_utility {
  attacker_location_coordinates: String
  attacker_steam_id: bigint!
  id: uuid!

  """An object relationship"""
  match: matches!
  match_id: uuid!

  """An object relationship"""
  match_map: match_maps!
  match_map_id: uuid!

  """An object relationship"""
  player: players!
  round: Int!
  time: timestamptz!
  type: e_utility_types_enum!
}

"""
aggregated selection of "player_utility"
"""
type player_utility_aggregate {
  aggregate: player_utility_aggregate_fields
  nodes: [player_utility!]!
}

input player_utility_aggregate_bool_exp {
  count: player_utility_aggregate_bool_exp_count
}

input player_utility_aggregate_bool_exp_count {
  arguments: [player_utility_select_column!]
  distinct: Boolean
  filter: player_utility_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "player_utility"
"""
type player_utility_aggregate_fields {
  avg: player_utility_avg_fields
  count(columns: [player_utility_select_column!], distinct: Boolean): Int!
  max: player_utility_max_fields
  min: player_utility_min_fields
  stddev: player_utility_stddev_fields
  stddev_pop: player_utility_stddev_pop_fields
  stddev_samp: player_utility_stddev_samp_fields
  sum: player_utility_sum_fields
  var_pop: player_utility_var_pop_fields
  var_samp: player_utility_var_samp_fields
  variance: player_utility_variance_fields
}

"""
order by aggregate values of table "player_utility"
"""
input player_utility_aggregate_order_by {
  avg: player_utility_avg_order_by
  count: order_by
  max: player_utility_max_order_by
  min: player_utility_min_order_by
  stddev: player_utility_stddev_order_by
  stddev_pop: player_utility_stddev_pop_order_by
  stddev_samp: player_utility_stddev_samp_order_by
  sum: player_utility_sum_order_by
  var_pop: player_utility_var_pop_order_by
  var_samp: player_utility_var_samp_order_by
  variance: player_utility_variance_order_by
}

"""
input type for inserting array relation for remote table "player_utility"
"""
input player_utility_arr_rel_insert_input {
  data: [player_utility_insert_input!]!
}

"""aggregate avg on columns"""
type player_utility_avg_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by avg() on columns of table "player_utility"
"""
input player_utility_avg_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'.
"""
input player_utility_bool_exp {
  _and: [player_utility_bool_exp!]
  _not: player_utility_bool_exp
  _or: [player_utility_bool_exp!]
  attacker_location_coordinates: String_comparison_exp
  attacker_steam_id: bigint_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_map: match_maps_bool_exp
  match_map_id: uuid_comparison_exp
  player: players_bool_exp
  round: Int_comparison_exp
  time: timestamptz_comparison_exp
  type: e_utility_types_enum_comparison_exp
}

"""
input type for incrementing numeric columns in table "player_utility"
"""
input player_utility_inc_input {
  attacker_steam_id: bigint
  round: Int
}

"""
input type for inserting data into table "player_utility"
"""
input player_utility_insert_input {
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_map: match_maps_obj_rel_insert_input
  match_map_id: uuid
  player: players_obj_rel_insert_input
  round: Int
  time: timestamptz
  type: e_utility_types_enum
}

"""aggregate max on columns"""
type player_utility_max_fields {
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by max() on columns of table "player_utility"
"""
input player_utility_max_order_by {
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""aggregate min on columns"""
type player_utility_min_fields {
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
}

"""
order by min() on columns of table "player_utility"
"""
input player_utility_min_order_by {
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  id: order_by
  match_id: order_by
  match_map_id: order_by
  round: order_by
  time: order_by
}

"""
response of any mutation on the table "player_utility"
"""
type player_utility_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [player_utility!]!
}

"""Ordering options when selecting data from "player_utility"."""
input player_utility_order_by {
  attacker_location_coordinates: order_by
  attacker_steam_id: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_map: match_maps_order_by
  match_map_id: order_by
  player: players_order_by
  round: order_by
  time: order_by
  type: order_by
}

"""
select columns of table "player_utility"
"""
enum player_utility_select_column {
  """column name"""
  attacker_location_coordinates

  """column name"""
  attacker_steam_id

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_map_id

  """column name"""
  round

  """column name"""
  time

  """column name"""
  type
}

"""
input type for updating data in table "player_utility"
"""
input player_utility_set_input {
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
  type: e_utility_types_enum
}

"""aggregate stddev on columns"""
type player_utility_stddev_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev() on columns of table "player_utility"
"""
input player_utility_stddev_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type player_utility_stddev_pop_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "player_utility"
"""
input player_utility_stddev_pop_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type player_utility_stddev_samp_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "player_utility"
"""
input player_utility_stddev_samp_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""
Streaming cursor of the table "player_utility"
"""
input player_utility_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: player_utility_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input player_utility_stream_cursor_value_input {
  attacker_location_coordinates: String
  attacker_steam_id: bigint
  id: uuid
  match_id: uuid
  match_map_id: uuid
  round: Int
  time: timestamptz
  type: e_utility_types_enum
}

"""aggregate sum on columns"""
type player_utility_sum_fields {
  attacker_steam_id: bigint
  round: Int
}

"""
order by sum() on columns of table "player_utility"
"""
input player_utility_sum_order_by {
  attacker_steam_id: order_by
  round: order_by
}

input player_utility_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: player_utility_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: player_utility_set_input

  """filter the rows which have to be updated"""
  where: player_utility_bool_exp!
}

"""aggregate var_pop on columns"""
type player_utility_var_pop_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by var_pop() on columns of table "player_utility"
"""
input player_utility_var_pop_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type player_utility_var_samp_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by var_samp() on columns of table "player_utility"
"""
input player_utility_var_samp_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""aggregate variance on columns"""
type player_utility_variance_fields {
  attacker_steam_id: Float
  round: Float
}

"""
order by variance() on columns of table "player_utility"
"""
input player_utility_variance_order_by {
  attacker_steam_id: order_by
  round: order_by
}

"""
columns and relationships of "players"
"""
type players {
  """An array relationship"""
  abandoned_matches(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): [abandoned_matches!]!

  """An aggregate relationship"""
  abandoned_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): abandoned_matches_aggregate!

  """An array relationship"""
  assists(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  assists_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!

  """An array relationship"""
  assited_by_players(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  assited_by_players_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!
  avatar_url: String

  """An array relationship"""
  coach_lineups(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): [match_lineups!]!

  """An aggregate relationship"""
  coach_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): match_lineups_aggregate!
  country: String
  created_at: timestamptz

  """
  A computed field, executes function "get_player_current_lobby_id"
  """
  current_lobby_id: uuid

  """An array relationship"""
  damage_dealt(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  damage_dealt_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """An array relationship"""
  damage_taken(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  damage_taken_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """An array relationship"""
  deaths(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  deaths_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!
  discord_id: String

  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric

  """An array relationship"""
  elo_history(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): [player_elo!]!

  """An aggregate relationship"""
  elo_history_aggregate(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): player_elo_aggregate!

  """An array relationship"""
  flashed_by_players(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  flashed_by_players_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!

  """An array relationship"""
  flashed_players(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  flashed_players_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!

  """An array relationship"""
  friends(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): [my_friends!]!

  """An aggregate relationship"""
  friends_aggregate(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): my_friends_aggregate!

  """An array relationship"""
  invited_players(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """An aggregate relationship"""
  invited_players_aggregate(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): team_invites_aggregate!

  """
  A computed field, executes function "is_banned"
  """
  is_banned: Boolean

  """
  A computed field, executes function "is_gagged"
  """
  is_gagged: Boolean

  """
  A computed field, executes function "is_in_another_match"
  """
  is_in_another_match: Boolean

  """
  A computed field, executes function "is_muted"
  """
  is_muted: Boolean

  """An array relationship"""
  kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!
  language: String

  """An array relationship"""
  lobby_players(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): [lobby_players!]!

  """An aggregate relationship"""
  lobby_players_aggregate(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): lobby_players_aggregate!

  """
  A computed field, executes function "get_player_matches"
  """
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]

  """
  A computed field, executes function "get_player_matchmaking_cooldown"
  """
  matchmaking_cooldown: timestamptz

  """An array relationship"""
  multi_kills(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): [v_player_multi_kills!]!

  """An aggregate relationship"""
  multi_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): v_player_multi_kills_aggregate!
  name: String!
  name_registered: Boolean!

  """An array relationship"""
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!

  """An array relationship"""
  objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!

  """An array relationship"""
  owned_teams(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]!

  """An aggregate relationship"""
  owned_teams_aggregate(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): teams_aggregate!

  """An array relationship"""
  player_lineup(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): [match_lineup_players!]!

  """An aggregate relationship"""
  player_lineup_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): match_lineup_players_aggregate!

  """An array relationship"""
  player_unused_utilities(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """An aggregate relationship"""
  player_unused_utilities_aggregate(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): player_unused_utility_aggregate!
  profile_url: String
  role: e_player_roles_enum!
  steam_id: bigint!

  """An array relationship"""
  team_invites(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """An aggregate relationship"""
  team_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): team_invites_aggregate!

  """An array relationship"""
  team_members(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """An aggregate relationship"""
  team_members_aggregate(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): team_roster_aggregate!

  """
  A computed field, executes function "get_player_teams"
  """
  teams(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int

  """An array relationship"""
  tournament_organizers(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): [tournament_organizers!]!

  """An aggregate relationship"""
  tournament_organizers_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): tournament_organizers_aggregate!

  """An array relationship"""
  tournament_rosters(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """An aggregate relationship"""
  tournament_rosters_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!

  """An array relationship"""
  tournaments(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): [tournaments!]!

  """An aggregate relationship"""
  tournaments_aggregate(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): tournaments_aggregate!

  """An array relationship"""
  utility_thrown(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  utility_thrown_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!
}

"""
aggregated selection of "players"
"""
type players_aggregate {
  aggregate: players_aggregate_fields
  nodes: [players!]!
}

"""
aggregate fields of "players"
"""
type players_aggregate_fields {
  avg: players_avg_fields
  count(columns: [players_select_column!], distinct: Boolean): Int!
  max: players_max_fields
  min: players_min_fields
  stddev: players_stddev_fields
  stddev_pop: players_stddev_pop_fields
  stddev_samp: players_stddev_samp_fields
  sum: players_sum_fields
  var_pop: players_var_pop_fields
  var_samp: players_var_samp_fields
  variance: players_variance_fields
}

"""aggregate avg on columns"""
type players_avg_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""
Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'.
"""
input players_bool_exp {
  _and: [players_bool_exp!]
  _not: players_bool_exp
  _or: [players_bool_exp!]
  abandoned_matches: abandoned_matches_bool_exp
  abandoned_matches_aggregate: abandoned_matches_aggregate_bool_exp
  assists: player_assists_bool_exp
  assists_aggregate: player_assists_aggregate_bool_exp
  assited_by_players: player_assists_bool_exp
  assited_by_players_aggregate: player_assists_aggregate_bool_exp
  avatar_url: String_comparison_exp
  coach_lineups: match_lineups_bool_exp
  coach_lineups_aggregate: match_lineups_aggregate_bool_exp
  country: String_comparison_exp
  created_at: timestamptz_comparison_exp
  current_lobby_id: uuid_comparison_exp
  damage_dealt: player_damages_bool_exp
  damage_dealt_aggregate: player_damages_aggregate_bool_exp
  damage_taken: player_damages_bool_exp
  damage_taken_aggregate: player_damages_aggregate_bool_exp
  deaths: player_kills_bool_exp
  deaths_aggregate: player_kills_aggregate_bool_exp
  discord_id: String_comparison_exp
  elo: numeric_comparison_exp
  elo_history: player_elo_bool_exp
  elo_history_aggregate: player_elo_aggregate_bool_exp
  flashed_by_players: player_flashes_bool_exp
  flashed_by_players_aggregate: player_flashes_aggregate_bool_exp
  flashed_players: player_flashes_bool_exp
  flashed_players_aggregate: player_flashes_aggregate_bool_exp
  friends: my_friends_bool_exp
  friends_aggregate: my_friends_aggregate_bool_exp
  invited_players: team_invites_bool_exp
  invited_players_aggregate: team_invites_aggregate_bool_exp
  is_banned: Boolean_comparison_exp
  is_gagged: Boolean_comparison_exp
  is_in_another_match: Boolean_comparison_exp
  is_muted: Boolean_comparison_exp
  kills: player_kills_bool_exp
  kills_aggregate: player_kills_aggregate_bool_exp
  language: String_comparison_exp
  lobby_players: lobby_players_bool_exp
  lobby_players_aggregate: lobby_players_aggregate_bool_exp
  matches: matches_bool_exp
  matchmaking_cooldown: timestamptz_comparison_exp
  multi_kills: v_player_multi_kills_bool_exp
  multi_kills_aggregate: v_player_multi_kills_aggregate_bool_exp
  name: String_comparison_exp
  name_registered: Boolean_comparison_exp
  notifications: notifications_bool_exp
  notifications_aggregate: notifications_aggregate_bool_exp
  objectives: player_objectives_bool_exp
  objectives_aggregate: player_objectives_aggregate_bool_exp
  owned_teams: teams_bool_exp
  owned_teams_aggregate: teams_aggregate_bool_exp
  player_lineup: match_lineup_players_bool_exp
  player_lineup_aggregate: match_lineup_players_aggregate_bool_exp
  player_unused_utilities: player_unused_utility_bool_exp
  player_unused_utilities_aggregate: player_unused_utility_aggregate_bool_exp
  profile_url: String_comparison_exp
  role: e_player_roles_enum_comparison_exp
  steam_id: bigint_comparison_exp
  team_invites: team_invites_bool_exp
  team_invites_aggregate: team_invites_aggregate_bool_exp
  team_members: team_roster_bool_exp
  team_members_aggregate: team_roster_aggregate_bool_exp
  teams: teams_bool_exp
  total_matches: Int_comparison_exp
  tournament_organizers: tournament_organizers_bool_exp
  tournament_organizers_aggregate: tournament_organizers_aggregate_bool_exp
  tournament_rosters: tournament_team_roster_bool_exp
  tournament_rosters_aggregate: tournament_team_roster_aggregate_bool_exp
  tournaments: tournaments_bool_exp
  tournaments_aggregate: tournaments_aggregate_bool_exp
  utility_thrown: player_utility_bool_exp
  utility_thrown_aggregate: player_utility_aggregate_bool_exp
}

"""
unique or primary key constraints on table "players"
"""
enum players_constraint {
  """
  unique or primary key constraint on columns "discord_id"
  """
  players_discord_id_key

  """
  unique or primary key constraint on columns "steam_id"
  """
  players_pkey

  """
  unique or primary key constraint on columns "steam_id"
  """
  players_steam_id_key
}

"""
input type for incrementing numeric columns in table "players"
"""
input players_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "players"
"""
input players_insert_input {
  abandoned_matches: abandoned_matches_arr_rel_insert_input
  assists: player_assists_arr_rel_insert_input
  assited_by_players: player_assists_arr_rel_insert_input
  avatar_url: String
  coach_lineups: match_lineups_arr_rel_insert_input
  country: String
  created_at: timestamptz
  damage_dealt: player_damages_arr_rel_insert_input
  damage_taken: player_damages_arr_rel_insert_input
  deaths: player_kills_arr_rel_insert_input
  discord_id: String
  elo_history: player_elo_arr_rel_insert_input
  flashed_by_players: player_flashes_arr_rel_insert_input
  flashed_players: player_flashes_arr_rel_insert_input
  friends: my_friends_arr_rel_insert_input
  invited_players: team_invites_arr_rel_insert_input
  kills: player_kills_arr_rel_insert_input
  language: String
  lobby_players: lobby_players_arr_rel_insert_input
  multi_kills: v_player_multi_kills_arr_rel_insert_input
  name: String
  name_registered: Boolean
  notifications: notifications_arr_rel_insert_input
  objectives: player_objectives_arr_rel_insert_input
  owned_teams: teams_arr_rel_insert_input
  player_lineup: match_lineup_players_arr_rel_insert_input
  player_unused_utilities: player_unused_utility_arr_rel_insert_input
  profile_url: String
  role: e_player_roles_enum
  steam_id: bigint
  team_invites: team_invites_arr_rel_insert_input
  team_members: team_roster_arr_rel_insert_input
  tournament_organizers: tournament_organizers_arr_rel_insert_input
  tournament_rosters: tournament_team_roster_arr_rel_insert_input
  tournaments: tournaments_arr_rel_insert_input
  utility_thrown: player_utility_arr_rel_insert_input
}

"""aggregate max on columns"""
type players_max_fields {
  avatar_url: String
  country: String
  created_at: timestamptz

  """
  A computed field, executes function "get_player_current_lobby_id"
  """
  current_lobby_id: uuid
  discord_id: String

  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  language: String

  """
  A computed field, executes function "get_player_matchmaking_cooldown"
  """
  matchmaking_cooldown: timestamptz
  name: String
  profile_url: String
  steam_id: bigint

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""aggregate min on columns"""
type players_min_fields {
  avatar_url: String
  country: String
  created_at: timestamptz

  """
  A computed field, executes function "get_player_current_lobby_id"
  """
  current_lobby_id: uuid
  discord_id: String

  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  language: String

  """
  A computed field, executes function "get_player_matchmaking_cooldown"
  """
  matchmaking_cooldown: timestamptz
  name: String
  profile_url: String
  steam_id: bigint

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""
response of any mutation on the table "players"
"""
type players_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [players!]!
}

"""
input type for inserting object relation for remote table "players"
"""
input players_obj_rel_insert_input {
  data: players_insert_input!

  """upsert condition"""
  on_conflict: players_on_conflict
}

"""
on_conflict condition type for table "players"
"""
input players_on_conflict {
  constraint: players_constraint!
  update_columns: [players_update_column!]! = []
  where: players_bool_exp
}

"""Ordering options when selecting data from "players"."""
input players_order_by {
  abandoned_matches_aggregate: abandoned_matches_aggregate_order_by
  assists_aggregate: player_assists_aggregate_order_by
  assited_by_players_aggregate: player_assists_aggregate_order_by
  avatar_url: order_by
  coach_lineups_aggregate: match_lineups_aggregate_order_by
  country: order_by
  created_at: order_by
  current_lobby_id: order_by
  damage_dealt_aggregate: player_damages_aggregate_order_by
  damage_taken_aggregate: player_damages_aggregate_order_by
  deaths_aggregate: player_kills_aggregate_order_by
  discord_id: order_by
  elo: order_by
  elo_history_aggregate: player_elo_aggregate_order_by
  flashed_by_players_aggregate: player_flashes_aggregate_order_by
  flashed_players_aggregate: player_flashes_aggregate_order_by
  friends_aggregate: my_friends_aggregate_order_by
  invited_players_aggregate: team_invites_aggregate_order_by
  is_banned: order_by
  is_gagged: order_by
  is_in_another_match: order_by
  is_muted: order_by
  kills_aggregate: player_kills_aggregate_order_by
  language: order_by
  lobby_players_aggregate: lobby_players_aggregate_order_by
  matches_aggregate: matches_aggregate_order_by
  matchmaking_cooldown: order_by
  multi_kills_aggregate: v_player_multi_kills_aggregate_order_by
  name: order_by
  name_registered: order_by
  notifications_aggregate: notifications_aggregate_order_by
  objectives_aggregate: player_objectives_aggregate_order_by
  owned_teams_aggregate: teams_aggregate_order_by
  player_lineup_aggregate: match_lineup_players_aggregate_order_by
  player_unused_utilities_aggregate: player_unused_utility_aggregate_order_by
  profile_url: order_by
  role: order_by
  steam_id: order_by
  team_invites_aggregate: team_invites_aggregate_order_by
  team_members_aggregate: team_roster_aggregate_order_by
  teams_aggregate: teams_aggregate_order_by
  total_matches: order_by
  tournament_organizers_aggregate: tournament_organizers_aggregate_order_by
  tournament_rosters_aggregate: tournament_team_roster_aggregate_order_by
  tournaments_aggregate: tournaments_aggregate_order_by
  utility_thrown_aggregate: player_utility_aggregate_order_by
}

"""primary key columns input for table: players"""
input players_pk_columns_input {
  steam_id: bigint!
}

"""
select columns of table "players"
"""
enum players_select_column {
  """column name"""
  avatar_url

  """column name"""
  country

  """column name"""
  created_at

  """column name"""
  discord_id

  """column name"""
  language

  """column name"""
  name

  """column name"""
  name_registered

  """column name"""
  profile_url

  """column name"""
  role

  """column name"""
  steam_id
}

"""
input type for updating data in table "players"
"""
input players_set_input {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  language: String
  name: String
  name_registered: Boolean
  profile_url: String
  role: e_player_roles_enum
  steam_id: bigint
}

"""aggregate stddev on columns"""
type players_stddev_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""aggregate stddev_pop on columns"""
type players_stddev_pop_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""aggregate stddev_samp on columns"""
type players_stddev_samp_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""
Streaming cursor of the table "players"
"""
input players_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: players_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input players_stream_cursor_value_input {
  avatar_url: String
  country: String
  created_at: timestamptz
  discord_id: String
  language: String
  name: String
  name_registered: Boolean
  profile_url: String
  role: e_player_roles_enum
  steam_id: bigint
}

"""aggregate sum on columns"""
type players_sum_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: bigint

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""
update columns of table "players"
"""
enum players_update_column {
  """column name"""
  avatar_url

  """column name"""
  country

  """column name"""
  created_at

  """column name"""
  discord_id

  """column name"""
  language

  """column name"""
  name

  """column name"""
  name_registered

  """column name"""
  profile_url

  """column name"""
  role

  """column name"""
  steam_id
}

input players_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: players_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: players_set_input

  """filter the rows which have to be updated"""
  where: players_bool_exp!
}

"""aggregate var_pop on columns"""
type players_var_pop_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""aggregate var_samp on columns"""
type players_var_samp_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

"""aggregate variance on columns"""
type players_variance_fields {
  """
  A computed field, executes function "get_player_elo"
  """
  elo: numeric
  steam_id: Float

  """
  A computed field, executes function "get_total_player_matches"
  """
  total_matches: Int
}

type query_root {
  """
  fetch data from the table: "_map_pool"
  """
  _map_pool(
    """distinct select on columns"""
    distinct_on: [_map_pool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_map_pool_order_by!]

    """filter the rows returned"""
    where: _map_pool_bool_exp
  ): [_map_pool!]!

  """
  fetch aggregated fields from the table: "_map_pool"
  """
  _map_pool_aggregate(
    """distinct select on columns"""
    distinct_on: [_map_pool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_map_pool_order_by!]

    """filter the rows returned"""
    where: _map_pool_bool_exp
  ): _map_pool_aggregate!

  """fetch data from the table: "_map_pool" using primary key columns"""
  _map_pool_by_pk(map_id: uuid!, map_pool_id: uuid!): _map_pool

  """An array relationship"""
  abandoned_matches(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): [abandoned_matches!]!

  """An aggregate relationship"""
  abandoned_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): abandoned_matches_aggregate!

  """
  fetch data from the table: "abandoned_matches" using primary key columns
  """
  abandoned_matches_by_pk(id: uuid!): abandoned_matches

  """
  fetch data from the table: "e_friend_status"
  """
  e_friend_status(
    """distinct select on columns"""
    distinct_on: [e_friend_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_friend_status_order_by!]

    """filter the rows returned"""
    where: e_friend_status_bool_exp
  ): [e_friend_status!]!

  """
  fetch aggregated fields from the table: "e_friend_status"
  """
  e_friend_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_friend_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_friend_status_order_by!]

    """filter the rows returned"""
    where: e_friend_status_bool_exp
  ): e_friend_status_aggregate!

  """fetch data from the table: "e_friend_status" using primary key columns"""
  e_friend_status_by_pk(value: String!): e_friend_status

  """
  fetch data from the table: "e_game_server_node_statuses"
  """
  e_game_server_node_statuses(
    """distinct select on columns"""
    distinct_on: [e_game_server_node_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_game_server_node_statuses_order_by!]

    """filter the rows returned"""
    where: e_game_server_node_statuses_bool_exp
  ): [e_game_server_node_statuses!]!

  """
  fetch aggregated fields from the table: "e_game_server_node_statuses"
  """
  e_game_server_node_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [e_game_server_node_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_game_server_node_statuses_order_by!]

    """filter the rows returned"""
    where: e_game_server_node_statuses_bool_exp
  ): e_game_server_node_statuses_aggregate!

  """
  fetch data from the table: "e_game_server_node_statuses" using primary key columns
  """
  e_game_server_node_statuses_by_pk(value: String!): e_game_server_node_statuses

  """
  fetch data from the table: "e_lobby_access"
  """
  e_lobby_access(
    """distinct select on columns"""
    distinct_on: [e_lobby_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_access_order_by!]

    """filter the rows returned"""
    where: e_lobby_access_bool_exp
  ): [e_lobby_access!]!

  """
  fetch aggregated fields from the table: "e_lobby_access"
  """
  e_lobby_access_aggregate(
    """distinct select on columns"""
    distinct_on: [e_lobby_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_access_order_by!]

    """filter the rows returned"""
    where: e_lobby_access_bool_exp
  ): e_lobby_access_aggregate!

  """fetch data from the table: "e_lobby_access" using primary key columns"""
  e_lobby_access_by_pk(value: String!): e_lobby_access

  """
  fetch data from the table: "e_lobby_player_status"
  """
  e_lobby_player_status(
    """distinct select on columns"""
    distinct_on: [e_lobby_player_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_player_status_order_by!]

    """filter the rows returned"""
    where: e_lobby_player_status_bool_exp
  ): [e_lobby_player_status!]!

  """
  fetch aggregated fields from the table: "e_lobby_player_status"
  """
  e_lobby_player_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_lobby_player_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_player_status_order_by!]

    """filter the rows returned"""
    where: e_lobby_player_status_bool_exp
  ): e_lobby_player_status_aggregate!

  """
  fetch data from the table: "e_lobby_player_status" using primary key columns
  """
  e_lobby_player_status_by_pk(value: String!): e_lobby_player_status

  """
  fetch data from the table: "e_map_pool_types"
  """
  e_map_pool_types(
    """distinct select on columns"""
    distinct_on: [e_map_pool_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_map_pool_types_order_by!]

    """filter the rows returned"""
    where: e_map_pool_types_bool_exp
  ): [e_map_pool_types!]!

  """
  fetch aggregated fields from the table: "e_map_pool_types"
  """
  e_map_pool_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_map_pool_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_map_pool_types_order_by!]

    """filter the rows returned"""
    where: e_map_pool_types_bool_exp
  ): e_map_pool_types_aggregate!

  """
  fetch data from the table: "e_map_pool_types" using primary key columns
  """
  e_map_pool_types_by_pk(value: String!): e_map_pool_types

  """
  fetch data from the table: "e_match_map_status"
  """
  e_match_map_status(
    """distinct select on columns"""
    distinct_on: [e_match_map_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_map_status_order_by!]

    """filter the rows returned"""
    where: e_match_map_status_bool_exp
  ): [e_match_map_status!]!

  """
  fetch aggregated fields from the table: "e_match_map_status"
  """
  e_match_map_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_map_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_map_status_order_by!]

    """filter the rows returned"""
    where: e_match_map_status_bool_exp
  ): e_match_map_status_aggregate!

  """
  fetch data from the table: "e_match_map_status" using primary key columns
  """
  e_match_map_status_by_pk(value: String!): e_match_map_status

  """
  fetch data from the table: "e_match_status"
  """
  e_match_status(
    """distinct select on columns"""
    distinct_on: [e_match_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_status_order_by!]

    """filter the rows returned"""
    where: e_match_status_bool_exp
  ): [e_match_status!]!

  """
  fetch aggregated fields from the table: "e_match_status"
  """
  e_match_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_status_order_by!]

    """filter the rows returned"""
    where: e_match_status_bool_exp
  ): e_match_status_aggregate!

  """fetch data from the table: "e_match_status" using primary key columns"""
  e_match_status_by_pk(value: String!): e_match_status

  """
  fetch data from the table: "e_match_types"
  """
  e_match_types(
    """distinct select on columns"""
    distinct_on: [e_match_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_types_order_by!]

    """filter the rows returned"""
    where: e_match_types_bool_exp
  ): [e_match_types!]!

  """
  fetch aggregated fields from the table: "e_match_types"
  """
  e_match_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_types_order_by!]

    """filter the rows returned"""
    where: e_match_types_bool_exp
  ): e_match_types_aggregate!

  """fetch data from the table: "e_match_types" using primary key columns"""
  e_match_types_by_pk(value: String!): e_match_types

  """
  fetch data from the table: "e_notification_types"
  """
  e_notification_types(
    """distinct select on columns"""
    distinct_on: [e_notification_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_notification_types_order_by!]

    """filter the rows returned"""
    where: e_notification_types_bool_exp
  ): [e_notification_types!]!

  """
  fetch aggregated fields from the table: "e_notification_types"
  """
  e_notification_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_notification_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_notification_types_order_by!]

    """filter the rows returned"""
    where: e_notification_types_bool_exp
  ): e_notification_types_aggregate!

  """
  fetch data from the table: "e_notification_types" using primary key columns
  """
  e_notification_types_by_pk(value: String!): e_notification_types

  """
  fetch data from the table: "e_objective_types"
  """
  e_objective_types(
    """distinct select on columns"""
    distinct_on: [e_objective_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_objective_types_order_by!]

    """filter the rows returned"""
    where: e_objective_types_bool_exp
  ): [e_objective_types!]!

  """
  fetch aggregated fields from the table: "e_objective_types"
  """
  e_objective_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_objective_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_objective_types_order_by!]

    """filter the rows returned"""
    where: e_objective_types_bool_exp
  ): e_objective_types_aggregate!

  """
  fetch data from the table: "e_objective_types" using primary key columns
  """
  e_objective_types_by_pk(value: String!): e_objective_types

  """
  fetch data from the table: "e_player_roles"
  """
  e_player_roles(
    """distinct select on columns"""
    distinct_on: [e_player_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_player_roles_order_by!]

    """filter the rows returned"""
    where: e_player_roles_bool_exp
  ): [e_player_roles!]!

  """
  fetch aggregated fields from the table: "e_player_roles"
  """
  e_player_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [e_player_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_player_roles_order_by!]

    """filter the rows returned"""
    where: e_player_roles_bool_exp
  ): e_player_roles_aggregate!

  """fetch data from the table: "e_player_roles" using primary key columns"""
  e_player_roles_by_pk(value: String!): e_player_roles

  """
  fetch data from the table: "e_ready_settings"
  """
  e_ready_settings(
    """distinct select on columns"""
    distinct_on: [e_ready_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_ready_settings_order_by!]

    """filter the rows returned"""
    where: e_ready_settings_bool_exp
  ): [e_ready_settings!]!

  """
  fetch aggregated fields from the table: "e_ready_settings"
  """
  e_ready_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [e_ready_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_ready_settings_order_by!]

    """filter the rows returned"""
    where: e_ready_settings_bool_exp
  ): e_ready_settings_aggregate!

  """
  fetch data from the table: "e_ready_settings" using primary key columns
  """
  e_ready_settings_by_pk(value: String!): e_ready_settings

  """
  fetch data from the table: "e_sanction_types"
  """
  e_sanction_types(
    """distinct select on columns"""
    distinct_on: [e_sanction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sanction_types_order_by!]

    """filter the rows returned"""
    where: e_sanction_types_bool_exp
  ): [e_sanction_types!]!

  """
  fetch aggregated fields from the table: "e_sanction_types"
  """
  e_sanction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_sanction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sanction_types_order_by!]

    """filter the rows returned"""
    where: e_sanction_types_bool_exp
  ): e_sanction_types_aggregate!

  """
  fetch data from the table: "e_sanction_types" using primary key columns
  """
  e_sanction_types_by_pk(value: String!): e_sanction_types

  """
  fetch data from the table: "e_sides"
  """
  e_sides(
    """distinct select on columns"""
    distinct_on: [e_sides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sides_order_by!]

    """filter the rows returned"""
    where: e_sides_bool_exp
  ): [e_sides!]!

  """
  fetch aggregated fields from the table: "e_sides"
  """
  e_sides_aggregate(
    """distinct select on columns"""
    distinct_on: [e_sides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sides_order_by!]

    """filter the rows returned"""
    where: e_sides_bool_exp
  ): e_sides_aggregate!

  """fetch data from the table: "e_sides" using primary key columns"""
  e_sides_by_pk(value: String!): e_sides

  """
  fetch data from the table: "e_team_roles"
  """
  e_team_roles(
    """distinct select on columns"""
    distinct_on: [e_team_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_team_roles_order_by!]

    """filter the rows returned"""
    where: e_team_roles_bool_exp
  ): [e_team_roles!]!

  """
  fetch aggregated fields from the table: "e_team_roles"
  """
  e_team_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [e_team_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_team_roles_order_by!]

    """filter the rows returned"""
    where: e_team_roles_bool_exp
  ): e_team_roles_aggregate!

  """fetch data from the table: "e_team_roles" using primary key columns"""
  e_team_roles_by_pk(value: String!): e_team_roles

  """
  fetch data from the table: "e_timeout_settings"
  """
  e_timeout_settings(
    """distinct select on columns"""
    distinct_on: [e_timeout_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_timeout_settings_order_by!]

    """filter the rows returned"""
    where: e_timeout_settings_bool_exp
  ): [e_timeout_settings!]!

  """
  fetch aggregated fields from the table: "e_timeout_settings"
  """
  e_timeout_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [e_timeout_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_timeout_settings_order_by!]

    """filter the rows returned"""
    where: e_timeout_settings_bool_exp
  ): e_timeout_settings_aggregate!

  """
  fetch data from the table: "e_timeout_settings" using primary key columns
  """
  e_timeout_settings_by_pk(value: String!): e_timeout_settings

  """
  fetch data from the table: "e_tournament_stage_types"
  """
  e_tournament_stage_types(
    """distinct select on columns"""
    distinct_on: [e_tournament_stage_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_stage_types_order_by!]

    """filter the rows returned"""
    where: e_tournament_stage_types_bool_exp
  ): [e_tournament_stage_types!]!

  """
  fetch aggregated fields from the table: "e_tournament_stage_types"
  """
  e_tournament_stage_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_tournament_stage_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_stage_types_order_by!]

    """filter the rows returned"""
    where: e_tournament_stage_types_bool_exp
  ): e_tournament_stage_types_aggregate!

  """
  fetch data from the table: "e_tournament_stage_types" using primary key columns
  """
  e_tournament_stage_types_by_pk(value: String!): e_tournament_stage_types

  """
  fetch data from the table: "e_tournament_status"
  """
  e_tournament_status(
    """distinct select on columns"""
    distinct_on: [e_tournament_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_status_order_by!]

    """filter the rows returned"""
    where: e_tournament_status_bool_exp
  ): [e_tournament_status!]!

  """
  fetch aggregated fields from the table: "e_tournament_status"
  """
  e_tournament_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_tournament_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_status_order_by!]

    """filter the rows returned"""
    where: e_tournament_status_bool_exp
  ): e_tournament_status_aggregate!

  """
  fetch data from the table: "e_tournament_status" using primary key columns
  """
  e_tournament_status_by_pk(value: String!): e_tournament_status

  """
  fetch data from the table: "e_utility_types"
  """
  e_utility_types(
    """distinct select on columns"""
    distinct_on: [e_utility_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_utility_types_order_by!]

    """filter the rows returned"""
    where: e_utility_types_bool_exp
  ): [e_utility_types!]!

  """
  fetch aggregated fields from the table: "e_utility_types"
  """
  e_utility_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_utility_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_utility_types_order_by!]

    """filter the rows returned"""
    where: e_utility_types_bool_exp
  ): e_utility_types_aggregate!

  """fetch data from the table: "e_utility_types" using primary key columns"""
  e_utility_types_by_pk(value: String!): e_utility_types

  """
  fetch data from the table: "e_veto_pick_types"
  """
  e_veto_pick_types(
    """distinct select on columns"""
    distinct_on: [e_veto_pick_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_veto_pick_types_order_by!]

    """filter the rows returned"""
    where: e_veto_pick_types_bool_exp
  ): [e_veto_pick_types!]!

  """
  fetch aggregated fields from the table: "e_veto_pick_types"
  """
  e_veto_pick_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_veto_pick_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_veto_pick_types_order_by!]

    """filter the rows returned"""
    where: e_veto_pick_types_bool_exp
  ): e_veto_pick_types_aggregate!

  """
  fetch data from the table: "e_veto_pick_types" using primary key columns
  """
  e_veto_pick_types_by_pk(value: String!): e_veto_pick_types

  """
  fetch data from the table: "friends"
  """
  friends(
    """distinct select on columns"""
    distinct_on: [friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friends_order_by!]

    """filter the rows returned"""
    where: friends_bool_exp
  ): [friends!]!

  """
  fetch aggregated fields from the table: "friends"
  """
  friends_aggregate(
    """distinct select on columns"""
    distinct_on: [friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friends_order_by!]

    """filter the rows returned"""
    where: friends_bool_exp
  ): friends_aggregate!

  """fetch data from the table: "friends" using primary key columns"""
  friends_by_pk(other_player_steam_id: bigint!, player_steam_id: bigint!): friends

  """An array relationship"""
  game_server_nodes(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): [game_server_nodes!]!

  """An aggregate relationship"""
  game_server_nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): game_server_nodes_aggregate!

  """
  fetch data from the table: "game_server_nodes" using primary key columns
  """
  game_server_nodes_by_pk(id: String!): game_server_nodes
  getNodeStats: [NodeStats]!
  getServiceStats: [PodStats]!

  """
  fetch data from the table: "lobbies"
  """
  lobbies(
    """distinct select on columns"""
    distinct_on: [lobbies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobbies_order_by!]

    """filter the rows returned"""
    where: lobbies_bool_exp
  ): [lobbies!]!

  """
  fetch aggregated fields from the table: "lobbies"
  """
  lobbies_aggregate(
    """distinct select on columns"""
    distinct_on: [lobbies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobbies_order_by!]

    """filter the rows returned"""
    where: lobbies_bool_exp
  ): lobbies_aggregate!

  """fetch data from the table: "lobbies" using primary key columns"""
  lobbies_by_pk(id: uuid!): lobbies

  """An array relationship"""
  lobby_players(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): [lobby_players!]!

  """An aggregate relationship"""
  lobby_players_aggregate(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): lobby_players_aggregate!

  """fetch data from the table: "lobby_players" using primary key columns"""
  lobby_players_by_pk(lobby_id: uuid!, steam_id: bigint!): lobby_players

  """
  fetch data from the table: "map_pools"
  """
  map_pools(
    """distinct select on columns"""
    distinct_on: [map_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [map_pools_order_by!]

    """filter the rows returned"""
    where: map_pools_bool_exp
  ): [map_pools!]!

  """
  fetch aggregated fields from the table: "map_pools"
  """
  map_pools_aggregate(
    """distinct select on columns"""
    distinct_on: [map_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [map_pools_order_by!]

    """filter the rows returned"""
    where: map_pools_bool_exp
  ): map_pools_aggregate!

  """fetch data from the table: "map_pools" using primary key columns"""
  map_pools_by_pk(id: uuid!): map_pools

  """An array relationship"""
  maps(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): [maps!]!

  """An aggregate relationship"""
  maps_aggregate(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): maps_aggregate!

  """fetch data from the table: "maps" using primary key columns"""
  maps_by_pk(id: uuid!): maps

  """
  fetch data from the table: "match_invites"
  """
  match_invites(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): [match_invites!]!

  """
  fetch aggregated fields from the table: "match_invites"
  """
  match_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): match_invites_aggregate!

  """fetch data from the table: "match_invites" using primary key columns"""
  match_invites_by_pk(id: uuid!): match_invites

  """
  fetch data from the table: "match_lineup_players"
  """
  match_lineup_players(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): [match_lineup_players!]!

  """
  fetch aggregated fields from the table: "match_lineup_players"
  """
  match_lineup_players_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): match_lineup_players_aggregate!

  """
  fetch data from the table: "match_lineup_players" using primary key columns
  """
  match_lineup_players_by_pk(id: uuid!): match_lineup_players

  """An array relationship"""
  match_lineups(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): [match_lineups!]!

  """An aggregate relationship"""
  match_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): match_lineups_aggregate!

  """fetch data from the table: "match_lineups" using primary key columns"""
  match_lineups_by_pk(id: uuid!): match_lineups

  """
  fetch data from the table: "match_map_demos"
  """
  match_map_demos(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): [match_map_demos!]!

  """
  fetch aggregated fields from the table: "match_map_demos"
  """
  match_map_demos_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): match_map_demos_aggregate!

  """fetch data from the table: "match_map_demos" using primary key columns"""
  match_map_demos_by_pk(id: uuid!): match_map_demos

  """
  fetch data from the table: "match_map_rounds"
  """
  match_map_rounds(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): [match_map_rounds!]!

  """
  fetch aggregated fields from the table: "match_map_rounds"
  """
  match_map_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): match_map_rounds_aggregate!

  """
  fetch data from the table: "match_map_rounds" using primary key columns
  """
  match_map_rounds_by_pk(id: uuid!): match_map_rounds

  """
  fetch data from the table: "match_map_veto_picks"
  """
  match_map_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """
  fetch aggregated fields from the table: "match_map_veto_picks"
  """
  match_map_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!

  """
  fetch data from the table: "match_map_veto_picks" using primary key columns
  """
  match_map_veto_picks_by_pk(id: uuid!): match_map_veto_picks

  """An array relationship"""
  match_maps(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!

  """fetch data from the table: "match_maps" using primary key columns"""
  match_maps_by_pk(id: uuid!): match_maps

  """
  fetch data from the table: "match_options"
  """
  match_options(
    """distinct select on columns"""
    distinct_on: [match_options_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_options_order_by!]

    """filter the rows returned"""
    where: match_options_bool_exp
  ): [match_options!]!

  """
  fetch aggregated fields from the table: "match_options"
  """
  match_options_aggregate(
    """distinct select on columns"""
    distinct_on: [match_options_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_options_order_by!]

    """filter the rows returned"""
    where: match_options_bool_exp
  ): match_options_aggregate!

  """fetch data from the table: "match_options" using primary key columns"""
  match_options_by_pk(id: uuid!): match_options

  """
  fetch data from the table: "match_region_veto_picks"
  """
  match_region_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): [match_region_veto_picks!]!

  """
  fetch aggregated fields from the table: "match_region_veto_picks"
  """
  match_region_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): match_region_veto_picks_aggregate!

  """
  fetch data from the table: "match_region_veto_picks" using primary key columns
  """
  match_region_veto_picks_by_pk(id: uuid!): match_region_veto_picks

  """
  fetch data from the table: "match_type_cfgs"
  """
  match_type_cfgs(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): [match_type_cfgs!]!

  """
  fetch aggregated fields from the table: "match_type_cfgs"
  """
  match_type_cfgs_aggregate(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): match_type_cfgs_aggregate!

  """fetch data from the table: "match_type_cfgs" using primary key columns"""
  match_type_cfgs_by_pk(type: e_match_types_enum!): match_type_cfgs

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): matches_aggregate!

  """fetch data from the table: "matches" using primary key columns"""
  matches_by_pk(id: uuid!): matches

  """Gets Current User"""
  me: MeResponse!

  """
  fetch data from the table: "migration_hashes.hashes"
  """
  migration_hashes_hashes(
    """distinct select on columns"""
    distinct_on: [migration_hashes_hashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_hashes_hashes_order_by!]

    """filter the rows returned"""
    where: migration_hashes_hashes_bool_exp
  ): [migration_hashes_hashes!]!

  """
  fetch aggregated fields from the table: "migration_hashes.hashes"
  """
  migration_hashes_hashes_aggregate(
    """distinct select on columns"""
    distinct_on: [migration_hashes_hashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_hashes_hashes_order_by!]

    """filter the rows returned"""
    where: migration_hashes_hashes_bool_exp
  ): migration_hashes_hashes_aggregate!

  """
  fetch data from the table: "migration_hashes.hashes" using primary key columns
  """
  migration_hashes_hashes_by_pk(name: String!): migration_hashes_hashes

  """
  fetch data from the table: "v_my_friends"
  """
  my_friends(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): [my_friends!]!

  """
  fetch aggregated fields from the table: "v_my_friends"
  """
  my_friends_aggregate(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): my_friends_aggregate!

  """An array relationship"""
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!

  """fetch data from the table: "notifications" using primary key columns"""
  notifications_by_pk(id: uuid!): notifications

  """An array relationship"""
  player_assists(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  player_assists_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!

  """An array relationship"""
  player_damages(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  player_damages_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """
  fetch data from the table: "player_elo"
  """
  player_elo(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): [player_elo!]!

  """
  fetch aggregated fields from the table: "player_elo"
  """
  player_elo_aggregate(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): player_elo_aggregate!

  """fetch data from the table: "player_elo" using primary key columns"""
  player_elo_by_pk(match_id: uuid!, steam_id: bigint!): player_elo

  """An array relationship"""
  player_flashes(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  player_flashes_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!

  """An array relationship"""
  player_kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  player_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!

  """fetch data from the table: "player_kills" using primary key columns"""
  player_kills_by_pk(id: uuid!, match_id: uuid!, match_map_id: uuid!, time: timestamptz!): player_kills

  """An array relationship"""
  player_objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  player_objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!

  """
  fetch data from the table: "player_sanctions"
  """
  player_sanctions(
    """distinct select on columns"""
    distinct_on: [player_sanctions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_sanctions_order_by!]

    """filter the rows returned"""
    where: player_sanctions_bool_exp
  ): [player_sanctions!]!

  """
  fetch aggregated fields from the table: "player_sanctions"
  """
  player_sanctions_aggregate(
    """distinct select on columns"""
    distinct_on: [player_sanctions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_sanctions_order_by!]

    """filter the rows returned"""
    where: player_sanctions_bool_exp
  ): player_sanctions_aggregate!

  """
  fetch data from the table: "player_unused_utility"
  """
  player_unused_utility(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """
  fetch aggregated fields from the table: "player_unused_utility"
  """
  player_unused_utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): player_unused_utility_aggregate!

  """
  fetch data from the table: "player_unused_utility" using primary key columns
  """
  player_unused_utility_by_pk(id: uuid!): player_unused_utility

  """An array relationship"""
  player_utility(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  player_utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!

  """
  fetch data from the table: "players"
  """
  players(
    """distinct select on columns"""
    distinct_on: [players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [players_order_by!]

    """filter the rows returned"""
    where: players_bool_exp
  ): [players!]!

  """
  fetch aggregated fields from the table: "players"
  """
  players_aggregate(
    """distinct select on columns"""
    distinct_on: [players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [players_order_by!]

    """filter the rows returned"""
    where: players_bool_exp
  ): players_aggregate!

  """fetch data from the table: "players" using primary key columns"""
  players_by_pk(steam_id: bigint!): players

  """
  fetch data from the table: "server_regions"
  """
  server_regions(
    """distinct select on columns"""
    distinct_on: [server_regions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [server_regions_order_by!]

    """filter the rows returned"""
    where: server_regions_bool_exp
  ): [server_regions!]!

  """
  fetch aggregated fields from the table: "server_regions"
  """
  server_regions_aggregate(
    """distinct select on columns"""
    distinct_on: [server_regions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [server_regions_order_by!]

    """filter the rows returned"""
    where: server_regions_bool_exp
  ): server_regions_aggregate!

  """fetch data from the table: "server_regions" using primary key columns"""
  server_regions_by_pk(value: String!): server_regions

  """An array relationship"""
  servers(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): [servers!]!

  """An aggregate relationship"""
  servers_aggregate(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): servers_aggregate!

  """fetch data from the table: "servers" using primary key columns"""
  servers_by_pk(id: uuid!): servers

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(name: String!): settings

  """An array relationship"""
  team_invites(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """An aggregate relationship"""
  team_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): team_invites_aggregate!

  """fetch data from the table: "team_invites" using primary key columns"""
  team_invites_by_pk(id: uuid!): team_invites

  """
  fetch data from the table: "team_roster"
  """
  team_roster(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """
  fetch aggregated fields from the table: "team_roster"
  """
  team_roster_aggregate(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): team_roster_aggregate!

  """fetch data from the table: "team_roster" using primary key columns"""
  team_roster_by_pk(player_steam_id: bigint!, team_id: uuid!): team_roster

  """
  fetch data from the table: "teams"
  """
  teams(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]!

  """
  fetch aggregated fields from the table: "teams"
  """
  teams_aggregate(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): teams_aggregate!

  """fetch data from the table: "teams" using primary key columns"""
  teams_by_pk(id: uuid!): teams
  telemetryStats: TelemetryStats!

  """An array relationship"""
  tournament_brackets(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): [tournament_brackets!]!

  """An aggregate relationship"""
  tournament_brackets_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): tournament_brackets_aggregate!

  """
  fetch data from the table: "tournament_brackets" using primary key columns
  """
  tournament_brackets_by_pk(id: uuid!): tournament_brackets

  """An array relationship"""
  tournament_organizers(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): [tournament_organizers!]!

  """An aggregate relationship"""
  tournament_organizers_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): tournament_organizers_aggregate!

  """
  fetch data from the table: "tournament_organizers" using primary key columns
  """
  tournament_organizers_by_pk(steam_id: bigint!, tournament_id: uuid!): tournament_organizers

  """An array relationship"""
  tournament_stages(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): [tournament_stages!]!

  """An aggregate relationship"""
  tournament_stages_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): tournament_stages_aggregate!

  """
  fetch data from the table: "tournament_stages" using primary key columns
  """
  tournament_stages_by_pk(id: uuid!): tournament_stages

  """
  fetch data from the table: "tournament_team_invites"
  """
  tournament_team_invites(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): [tournament_team_invites!]!

  """
  fetch aggregated fields from the table: "tournament_team_invites"
  """
  tournament_team_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): tournament_team_invites_aggregate!

  """
  fetch data from the table: "tournament_team_invites" using primary key columns
  """
  tournament_team_invites_by_pk(id: uuid!): tournament_team_invites

  """
  fetch data from the table: "tournament_team_roster"
  """
  tournament_team_roster(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """
  fetch aggregated fields from the table: "tournament_team_roster"
  """
  tournament_team_roster_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!

  """
  fetch data from the table: "tournament_team_roster" using primary key columns
  """
  tournament_team_roster_by_pk(player_steam_id: bigint!, tournament_id: uuid!): tournament_team_roster

  """An array relationship"""
  tournament_teams(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): [tournament_teams!]!

  """An aggregate relationship"""
  tournament_teams_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): tournament_teams_aggregate!

  """
  fetch data from the table: "tournament_teams" using primary key columns
  """
  tournament_teams_by_pk(id: uuid!): tournament_teams

  """An array relationship"""
  tournaments(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): [tournaments!]!

  """An aggregate relationship"""
  tournaments_aggregate(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): tournaments_aggregate!

  """fetch data from the table: "tournaments" using primary key columns"""
  tournaments_by_pk(id: uuid!): tournaments

  """
  fetch data from the table: "v_match_captains"
  """
  v_match_captains(
    """distinct select on columns"""
    distinct_on: [v_match_captains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_captains_order_by!]

    """filter the rows returned"""
    where: v_match_captains_bool_exp
  ): [v_match_captains!]!

  """
  fetch aggregated fields from the table: "v_match_captains"
  """
  v_match_captains_aggregate(
    """distinct select on columns"""
    distinct_on: [v_match_captains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_captains_order_by!]

    """filter the rows returned"""
    where: v_match_captains_bool_exp
  ): v_match_captains_aggregate!

  """
  fetch data from the table: "v_match_lineups"
  """
  v_match_lineups(
    """distinct select on columns"""
    distinct_on: [v_match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_lineups_order_by!]

    """filter the rows returned"""
    where: v_match_lineups_bool_exp
  ): [v_match_lineups!]!

  """
  fetch aggregated fields from the table: "v_match_lineups"
  """
  v_match_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [v_match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_lineups_order_by!]

    """filter the rows returned"""
    where: v_match_lineups_bool_exp
  ): v_match_lineups_aggregate!

  """
  fetch data from the table: "v_player_arch_nemesis"
  """
  v_player_arch_nemesis(
    """distinct select on columns"""
    distinct_on: [v_player_arch_nemesis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_arch_nemesis_order_by!]

    """filter the rows returned"""
    where: v_player_arch_nemesis_bool_exp
  ): [v_player_arch_nemesis!]!

  """
  fetch aggregated fields from the table: "v_player_arch_nemesis"
  """
  v_player_arch_nemesis_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_arch_nemesis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_arch_nemesis_order_by!]

    """filter the rows returned"""
    where: v_player_arch_nemesis_bool_exp
  ): v_player_arch_nemesis_aggregate!

  """
  fetch data from the table: "v_player_damage"
  """
  v_player_damage(
    """distinct select on columns"""
    distinct_on: [v_player_damage_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_damage_order_by!]

    """filter the rows returned"""
    where: v_player_damage_bool_exp
  ): [v_player_damage!]!

  """
  fetch aggregated fields from the table: "v_player_damage"
  """
  v_player_damage_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_damage_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_damage_order_by!]

    """filter the rows returned"""
    where: v_player_damage_bool_exp
  ): v_player_damage_aggregate!

  """
  fetch data from the table: "v_player_elo"
  """
  v_player_elo(
    """distinct select on columns"""
    distinct_on: [v_player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_elo_order_by!]

    """filter the rows returned"""
    where: v_player_elo_bool_exp
  ): [v_player_elo!]!

  """
  fetch aggregated fields from the table: "v_player_elo"
  """
  v_player_elo_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_elo_order_by!]

    """filter the rows returned"""
    where: v_player_elo_bool_exp
  ): v_player_elo_aggregate!

  """
  fetch data from the table: "v_player_map_losses"
  """
  v_player_map_losses(
    """distinct select on columns"""
    distinct_on: [v_player_map_losses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_losses_order_by!]

    """filter the rows returned"""
    where: v_player_map_losses_bool_exp
  ): [v_player_map_losses!]!

  """
  fetch aggregated fields from the table: "v_player_map_losses"
  """
  v_player_map_losses_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_map_losses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_losses_order_by!]

    """filter the rows returned"""
    where: v_player_map_losses_bool_exp
  ): v_player_map_losses_aggregate!

  """
  fetch data from the table: "v_player_map_wins"
  """
  v_player_map_wins(
    """distinct select on columns"""
    distinct_on: [v_player_map_wins_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_wins_order_by!]

    """filter the rows returned"""
    where: v_player_map_wins_bool_exp
  ): [v_player_map_wins!]!

  """
  fetch aggregated fields from the table: "v_player_map_wins"
  """
  v_player_map_wins_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_map_wins_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_wins_order_by!]

    """filter the rows returned"""
    where: v_player_map_wins_bool_exp
  ): v_player_map_wins_aggregate!

  """
  fetch data from the table: "v_player_multi_kills"
  """
  v_player_multi_kills(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): [v_player_multi_kills!]!

  """
  fetch aggregated fields from the table: "v_player_multi_kills"
  """
  v_player_multi_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): v_player_multi_kills_aggregate!

  """
  fetch data from the table: "v_pool_maps"
  """
  v_pool_maps(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): [v_pool_maps!]!

  """
  fetch aggregated fields from the table: "v_pool_maps"
  """
  v_pool_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): v_pool_maps_aggregate!
}

"""
columns and relationships of "server_regions"
"""
type server_regions {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int
  description: String

  """An array relationship"""
  game_server_nodes(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): [game_server_nodes!]!

  """An aggregate relationship"""
  game_server_nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): game_server_nodes_aggregate!
  is_lan: Boolean!

  """
  A computed field, executes function "region_status"
  """
  status: String

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
  value: String!
}

"""
aggregated selection of "server_regions"
"""
type server_regions_aggregate {
  aggregate: server_regions_aggregate_fields
  nodes: [server_regions!]!
}

"""
aggregate fields of "server_regions"
"""
type server_regions_aggregate_fields {
  avg: server_regions_avg_fields
  count(columns: [server_regions_select_column!], distinct: Boolean): Int!
  max: server_regions_max_fields
  min: server_regions_min_fields
  stddev: server_regions_stddev_fields
  stddev_pop: server_regions_stddev_pop_fields
  stddev_samp: server_regions_stddev_samp_fields
  sum: server_regions_sum_fields
  var_pop: server_regions_var_pop_fields
  var_samp: server_regions_var_samp_fields
  variance: server_regions_variance_fields
}

"""aggregate avg on columns"""
type server_regions_avg_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""
Boolean expression to filter rows from the table "server_regions". All fields are combined with a logical 'AND'.
"""
input server_regions_bool_exp {
  _and: [server_regions_bool_exp!]
  _not: server_regions_bool_exp
  _or: [server_regions_bool_exp!]
  available_server_count: Int_comparison_exp
  description: String_comparison_exp
  game_server_nodes: game_server_nodes_bool_exp
  game_server_nodes_aggregate: game_server_nodes_aggregate_bool_exp
  is_lan: Boolean_comparison_exp
  status: String_comparison_exp
  total_server_count: Int_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "server_regions"
"""
enum server_regions_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  e_server_regions_pkey
}

"""
input type for inserting data into table "server_regions"
"""
input server_regions_insert_input {
  description: String
  game_server_nodes: game_server_nodes_arr_rel_insert_input
  is_lan: Boolean
  value: String
}

"""aggregate max on columns"""
type server_regions_max_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int
  description: String

  """
  A computed field, executes function "region_status"
  """
  status: String

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
  value: String
}

"""aggregate min on columns"""
type server_regions_min_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int
  description: String

  """
  A computed field, executes function "region_status"
  """
  status: String

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
  value: String
}

"""
response of any mutation on the table "server_regions"
"""
type server_regions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [server_regions!]!
}

"""
input type for inserting object relation for remote table "server_regions"
"""
input server_regions_obj_rel_insert_input {
  data: server_regions_insert_input!

  """upsert condition"""
  on_conflict: server_regions_on_conflict
}

"""
on_conflict condition type for table "server_regions"
"""
input server_regions_on_conflict {
  constraint: server_regions_constraint!
  update_columns: [server_regions_update_column!]! = []
  where: server_regions_bool_exp
}

"""Ordering options when selecting data from "server_regions"."""
input server_regions_order_by {
  available_server_count: order_by
  description: order_by
  game_server_nodes_aggregate: game_server_nodes_aggregate_order_by
  is_lan: order_by
  status: order_by
  total_server_count: order_by
  value: order_by
}

"""primary key columns input for table: server_regions"""
input server_regions_pk_columns_input {
  value: String!
}

"""
select columns of table "server_regions"
"""
enum server_regions_select_column {
  """column name"""
  description

  """column name"""
  is_lan

  """column name"""
  value
}

"""
input type for updating data in table "server_regions"
"""
input server_regions_set_input {
  description: String
  is_lan: Boolean
  value: String
}

"""aggregate stddev on columns"""
type server_regions_stddev_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""aggregate stddev_pop on columns"""
type server_regions_stddev_pop_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""aggregate stddev_samp on columns"""
type server_regions_stddev_samp_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""
Streaming cursor of the table "server_regions"
"""
input server_regions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: server_regions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input server_regions_stream_cursor_value_input {
  description: String
  is_lan: Boolean
  value: String
}

"""aggregate sum on columns"""
type server_regions_sum_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""
update columns of table "server_regions"
"""
enum server_regions_update_column {
  """column name"""
  description

  """column name"""
  is_lan

  """column name"""
  value
}

input server_regions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: server_regions_set_input

  """filter the rows which have to be updated"""
  where: server_regions_bool_exp!
}

"""aggregate var_pop on columns"""
type server_regions_var_pop_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""aggregate var_samp on columns"""
type server_regions_var_samp_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""aggregate variance on columns"""
type server_regions_variance_fields {
  """
  A computed field, executes function "available_region_server_count"
  """
  available_server_count: Int

  """
  A computed field, executes function "total_region_server_count"
  """
  total_server_count: Int
}

"""
columns and relationships of "servers"
"""
type servers {
  api_password: uuid!
  connected: Boolean!

  """An object relationship"""
  current_match: matches
  enabled: Boolean!

  """An object relationship"""
  game_server_node: game_server_nodes
  game_server_node_id: String
  host: String!
  id: uuid!

  """
  A computed field, executes function "is_dedicated_server"
  """
  is_dedicated: Boolean
  label: String!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): matches_aggregate!
  port: Int!
  rcon_password: bytea!
  rcon_status: Boolean
  region: String!
  reserved_by_match_id: uuid
  tv_port: Int
}

"""
aggregated selection of "servers"
"""
type servers_aggregate {
  aggregate: servers_aggregate_fields
  nodes: [servers!]!
}

input servers_aggregate_bool_exp {
  bool_and: servers_aggregate_bool_exp_bool_and
  bool_or: servers_aggregate_bool_exp_bool_or
  count: servers_aggregate_bool_exp_count
}

input servers_aggregate_bool_exp_bool_and {
  arguments: servers_select_column_servers_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: servers_bool_exp
  predicate: Boolean_comparison_exp!
}

input servers_aggregate_bool_exp_bool_or {
  arguments: servers_select_column_servers_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: servers_bool_exp
  predicate: Boolean_comparison_exp!
}

input servers_aggregate_bool_exp_count {
  arguments: [servers_select_column!]
  distinct: Boolean
  filter: servers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "servers"
"""
type servers_aggregate_fields {
  avg: servers_avg_fields
  count(columns: [servers_select_column!], distinct: Boolean): Int!
  max: servers_max_fields
  min: servers_min_fields
  stddev: servers_stddev_fields
  stddev_pop: servers_stddev_pop_fields
  stddev_samp: servers_stddev_samp_fields
  sum: servers_sum_fields
  var_pop: servers_var_pop_fields
  var_samp: servers_var_samp_fields
  variance: servers_variance_fields
}

"""
order by aggregate values of table "servers"
"""
input servers_aggregate_order_by {
  avg: servers_avg_order_by
  count: order_by
  max: servers_max_order_by
  min: servers_min_order_by
  stddev: servers_stddev_order_by
  stddev_pop: servers_stddev_pop_order_by
  stddev_samp: servers_stddev_samp_order_by
  sum: servers_sum_order_by
  var_pop: servers_var_pop_order_by
  var_samp: servers_var_samp_order_by
  variance: servers_variance_order_by
}

"""
input type for inserting array relation for remote table "servers"
"""
input servers_arr_rel_insert_input {
  data: [servers_insert_input!]!

  """upsert condition"""
  on_conflict: servers_on_conflict
}

"""aggregate avg on columns"""
type servers_avg_fields {
  port: Float
  tv_port: Float
}

"""
order by avg() on columns of table "servers"
"""
input servers_avg_order_by {
  port: order_by
  tv_port: order_by
}

"""
Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'.
"""
input servers_bool_exp {
  _and: [servers_bool_exp!]
  _not: servers_bool_exp
  _or: [servers_bool_exp!]
  api_password: uuid_comparison_exp
  connected: Boolean_comparison_exp
  current_match: matches_bool_exp
  enabled: Boolean_comparison_exp
  game_server_node: game_server_nodes_bool_exp
  game_server_node_id: String_comparison_exp
  host: String_comparison_exp
  id: uuid_comparison_exp
  is_dedicated: Boolean_comparison_exp
  label: String_comparison_exp
  matches: matches_bool_exp
  matches_aggregate: matches_aggregate_bool_exp
  port: Int_comparison_exp
  rcon_password: bytea_comparison_exp
  rcon_status: Boolean_comparison_exp
  region: String_comparison_exp
  reserved_by_match_id: uuid_comparison_exp
  tv_port: Int_comparison_exp
}

"""
unique or primary key constraints on table "servers"
"""
enum servers_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  servers_pkey

  """
  unique or primary key constraint on columns "reserved_by_match_id"
  """
  servers_reserved_by_match_id_key
}

"""
input type for incrementing numeric columns in table "servers"
"""
input servers_inc_input {
  port: Int
  tv_port: Int
}

"""
input type for inserting data into table "servers"
"""
input servers_insert_input {
  api_password: uuid
  connected: Boolean
  current_match: matches_obj_rel_insert_input
  enabled: Boolean
  game_server_node: game_server_nodes_obj_rel_insert_input
  game_server_node_id: String
  host: String
  id: uuid
  label: String
  matches: matches_arr_rel_insert_input
  port: Int
  rcon_password: bytea
  rcon_status: Boolean
  region: String
  reserved_by_match_id: uuid
  tv_port: Int
}

"""aggregate max on columns"""
type servers_max_fields {
  api_password: uuid
  game_server_node_id: String
  host: String
  id: uuid
  label: String
  port: Int
  region: String
  reserved_by_match_id: uuid
  tv_port: Int
}

"""
order by max() on columns of table "servers"
"""
input servers_max_order_by {
  api_password: order_by
  game_server_node_id: order_by
  host: order_by
  id: order_by
  label: order_by
  port: order_by
  region: order_by
  reserved_by_match_id: order_by
  tv_port: order_by
}

"""aggregate min on columns"""
type servers_min_fields {
  api_password: uuid
  game_server_node_id: String
  host: String
  id: uuid
  label: String
  port: Int
  region: String
  reserved_by_match_id: uuid
  tv_port: Int
}

"""
order by min() on columns of table "servers"
"""
input servers_min_order_by {
  api_password: order_by
  game_server_node_id: order_by
  host: order_by
  id: order_by
  label: order_by
  port: order_by
  region: order_by
  reserved_by_match_id: order_by
  tv_port: order_by
}

"""
response of any mutation on the table "servers"
"""
type servers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [servers!]!
}

"""
input type for inserting object relation for remote table "servers"
"""
input servers_obj_rel_insert_input {
  data: servers_insert_input!

  """upsert condition"""
  on_conflict: servers_on_conflict
}

"""
on_conflict condition type for table "servers"
"""
input servers_on_conflict {
  constraint: servers_constraint!
  update_columns: [servers_update_column!]! = []
  where: servers_bool_exp
}

"""Ordering options when selecting data from "servers"."""
input servers_order_by {
  api_password: order_by
  connected: order_by
  current_match: matches_order_by
  enabled: order_by
  game_server_node: game_server_nodes_order_by
  game_server_node_id: order_by
  host: order_by
  id: order_by
  is_dedicated: order_by
  label: order_by
  matches_aggregate: matches_aggregate_order_by
  port: order_by
  rcon_password: order_by
  rcon_status: order_by
  region: order_by
  reserved_by_match_id: order_by
  tv_port: order_by
}

"""primary key columns input for table: servers"""
input servers_pk_columns_input {
  id: uuid!
}

"""
select columns of table "servers"
"""
enum servers_select_column {
  """column name"""
  api_password

  """column name"""
  connected

  """column name"""
  enabled

  """column name"""
  game_server_node_id

  """column name"""
  host

  """column name"""
  id

  """column name"""
  label

  """column name"""
  port

  """column name"""
  rcon_password

  """column name"""
  rcon_status

  """column name"""
  region

  """column name"""
  reserved_by_match_id

  """column name"""
  tv_port
}

"""
select "servers_aggregate_bool_exp_bool_and_arguments_columns" columns of table "servers"
"""
enum servers_select_column_servers_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  connected

  """column name"""
  enabled

  """column name"""
  rcon_status
}

"""
select "servers_aggregate_bool_exp_bool_or_arguments_columns" columns of table "servers"
"""
enum servers_select_column_servers_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  connected

  """column name"""
  enabled

  """column name"""
  rcon_status
}

"""
input type for updating data in table "servers"
"""
input servers_set_input {
  api_password: uuid
  connected: Boolean
  enabled: Boolean
  game_server_node_id: String
  host: String
  id: uuid
  label: String
  port: Int
  rcon_password: bytea
  rcon_status: Boolean
  region: String
  reserved_by_match_id: uuid
  tv_port: Int
}

"""aggregate stddev on columns"""
type servers_stddev_fields {
  port: Float
  tv_port: Float
}

"""
order by stddev() on columns of table "servers"
"""
input servers_stddev_order_by {
  port: order_by
  tv_port: order_by
}

"""aggregate stddev_pop on columns"""
type servers_stddev_pop_fields {
  port: Float
  tv_port: Float
}

"""
order by stddev_pop() on columns of table "servers"
"""
input servers_stddev_pop_order_by {
  port: order_by
  tv_port: order_by
}

"""aggregate stddev_samp on columns"""
type servers_stddev_samp_fields {
  port: Float
  tv_port: Float
}

"""
order by stddev_samp() on columns of table "servers"
"""
input servers_stddev_samp_order_by {
  port: order_by
  tv_port: order_by
}

"""
Streaming cursor of the table "servers"
"""
input servers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: servers_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input servers_stream_cursor_value_input {
  api_password: uuid
  connected: Boolean
  enabled: Boolean
  game_server_node_id: String
  host: String
  id: uuid
  label: String
  port: Int
  rcon_password: bytea
  rcon_status: Boolean
  region: String
  reserved_by_match_id: uuid
  tv_port: Int
}

"""aggregate sum on columns"""
type servers_sum_fields {
  port: Int
  tv_port: Int
}

"""
order by sum() on columns of table "servers"
"""
input servers_sum_order_by {
  port: order_by
  tv_port: order_by
}

"""
update columns of table "servers"
"""
enum servers_update_column {
  """column name"""
  api_password

  """column name"""
  connected

  """column name"""
  enabled

  """column name"""
  game_server_node_id

  """column name"""
  host

  """column name"""
  id

  """column name"""
  label

  """column name"""
  port

  """column name"""
  rcon_password

  """column name"""
  rcon_status

  """column name"""
  region

  """column name"""
  reserved_by_match_id

  """column name"""
  tv_port
}

input servers_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: servers_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: servers_set_input

  """filter the rows which have to be updated"""
  where: servers_bool_exp!
}

"""aggregate var_pop on columns"""
type servers_var_pop_fields {
  port: Float
  tv_port: Float
}

"""
order by var_pop() on columns of table "servers"
"""
input servers_var_pop_order_by {
  port: order_by
  tv_port: order_by
}

"""aggregate var_samp on columns"""
type servers_var_samp_fields {
  port: Float
  tv_port: Float
}

"""
order by var_samp() on columns of table "servers"
"""
input servers_var_samp_order_by {
  port: order_by
  tv_port: order_by
}

"""aggregate variance on columns"""
type servers_variance_fields {
  port: Float
  tv_port: Float
}

"""
order by variance() on columns of table "servers"
"""
input servers_variance_order_by {
  port: order_by
  tv_port: order_by
}

"""
columns and relationships of "settings"
"""
type settings {
  name: String!
  value: String
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  name: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  settings_pkey
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  name: String
  value: String
}

"""aggregate max on columns"""
type settings_max_fields {
  name: String
  value: String
}

"""aggregate min on columns"""
type settings_min_fields {
  name: String
  value: String
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on_conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  name: order_by
  value: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  name: String!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  name

  """column name"""
  value
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  name: String
  value: String
}

"""
Streaming cursor of the table "settings"
"""
input settings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: settings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input settings_stream_cursor_value_input {
  name: String
  value: String
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  name

  """column name"""
  value
}

input settings_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: settings_set_input

  """filter the rows which have to be updated"""
  where: settings_bool_exp!
}

type subscription_root {
  """
  fetch data from the table: "_map_pool"
  """
  _map_pool(
    """distinct select on columns"""
    distinct_on: [_map_pool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_map_pool_order_by!]

    """filter the rows returned"""
    where: _map_pool_bool_exp
  ): [_map_pool!]!

  """
  fetch aggregated fields from the table: "_map_pool"
  """
  _map_pool_aggregate(
    """distinct select on columns"""
    distinct_on: [_map_pool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_map_pool_order_by!]

    """filter the rows returned"""
    where: _map_pool_bool_exp
  ): _map_pool_aggregate!

  """fetch data from the table: "_map_pool" using primary key columns"""
  _map_pool_by_pk(map_id: uuid!, map_pool_id: uuid!): _map_pool

  """
  fetch data from the table in a streaming manner: "_map_pool"
  """
  _map_pool_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [_map_pool_stream_cursor_input]!

    """filter the rows returned"""
    where: _map_pool_bool_exp
  ): [_map_pool!]!

  """An array relationship"""
  abandoned_matches(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): [abandoned_matches!]!

  """An aggregate relationship"""
  abandoned_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [abandoned_matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [abandoned_matches_order_by!]

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): abandoned_matches_aggregate!

  """
  fetch data from the table: "abandoned_matches" using primary key columns
  """
  abandoned_matches_by_pk(id: uuid!): abandoned_matches

  """
  fetch data from the table in a streaming manner: "abandoned_matches"
  """
  abandoned_matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [abandoned_matches_stream_cursor_input]!

    """filter the rows returned"""
    where: abandoned_matches_bool_exp
  ): [abandoned_matches!]!

  """
  fetch data from the table: "e_friend_status"
  """
  e_friend_status(
    """distinct select on columns"""
    distinct_on: [e_friend_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_friend_status_order_by!]

    """filter the rows returned"""
    where: e_friend_status_bool_exp
  ): [e_friend_status!]!

  """
  fetch aggregated fields from the table: "e_friend_status"
  """
  e_friend_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_friend_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_friend_status_order_by!]

    """filter the rows returned"""
    where: e_friend_status_bool_exp
  ): e_friend_status_aggregate!

  """fetch data from the table: "e_friend_status" using primary key columns"""
  e_friend_status_by_pk(value: String!): e_friend_status

  """
  fetch data from the table in a streaming manner: "e_friend_status"
  """
  e_friend_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_friend_status_stream_cursor_input]!

    """filter the rows returned"""
    where: e_friend_status_bool_exp
  ): [e_friend_status!]!

  """
  fetch data from the table: "e_game_server_node_statuses"
  """
  e_game_server_node_statuses(
    """distinct select on columns"""
    distinct_on: [e_game_server_node_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_game_server_node_statuses_order_by!]

    """filter the rows returned"""
    where: e_game_server_node_statuses_bool_exp
  ): [e_game_server_node_statuses!]!

  """
  fetch aggregated fields from the table: "e_game_server_node_statuses"
  """
  e_game_server_node_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [e_game_server_node_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_game_server_node_statuses_order_by!]

    """filter the rows returned"""
    where: e_game_server_node_statuses_bool_exp
  ): e_game_server_node_statuses_aggregate!

  """
  fetch data from the table: "e_game_server_node_statuses" using primary key columns
  """
  e_game_server_node_statuses_by_pk(value: String!): e_game_server_node_statuses

  """
  fetch data from the table in a streaming manner: "e_game_server_node_statuses"
  """
  e_game_server_node_statuses_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_game_server_node_statuses_stream_cursor_input]!

    """filter the rows returned"""
    where: e_game_server_node_statuses_bool_exp
  ): [e_game_server_node_statuses!]!

  """
  fetch data from the table: "e_lobby_access"
  """
  e_lobby_access(
    """distinct select on columns"""
    distinct_on: [e_lobby_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_access_order_by!]

    """filter the rows returned"""
    where: e_lobby_access_bool_exp
  ): [e_lobby_access!]!

  """
  fetch aggregated fields from the table: "e_lobby_access"
  """
  e_lobby_access_aggregate(
    """distinct select on columns"""
    distinct_on: [e_lobby_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_access_order_by!]

    """filter the rows returned"""
    where: e_lobby_access_bool_exp
  ): e_lobby_access_aggregate!

  """fetch data from the table: "e_lobby_access" using primary key columns"""
  e_lobby_access_by_pk(value: String!): e_lobby_access

  """
  fetch data from the table in a streaming manner: "e_lobby_access"
  """
  e_lobby_access_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_lobby_access_stream_cursor_input]!

    """filter the rows returned"""
    where: e_lobby_access_bool_exp
  ): [e_lobby_access!]!

  """
  fetch data from the table: "e_lobby_player_status"
  """
  e_lobby_player_status(
    """distinct select on columns"""
    distinct_on: [e_lobby_player_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_player_status_order_by!]

    """filter the rows returned"""
    where: e_lobby_player_status_bool_exp
  ): [e_lobby_player_status!]!

  """
  fetch aggregated fields from the table: "e_lobby_player_status"
  """
  e_lobby_player_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_lobby_player_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_lobby_player_status_order_by!]

    """filter the rows returned"""
    where: e_lobby_player_status_bool_exp
  ): e_lobby_player_status_aggregate!

  """
  fetch data from the table: "e_lobby_player_status" using primary key columns
  """
  e_lobby_player_status_by_pk(value: String!): e_lobby_player_status

  """
  fetch data from the table in a streaming manner: "e_lobby_player_status"
  """
  e_lobby_player_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_lobby_player_status_stream_cursor_input]!

    """filter the rows returned"""
    where: e_lobby_player_status_bool_exp
  ): [e_lobby_player_status!]!

  """
  fetch data from the table: "e_map_pool_types"
  """
  e_map_pool_types(
    """distinct select on columns"""
    distinct_on: [e_map_pool_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_map_pool_types_order_by!]

    """filter the rows returned"""
    where: e_map_pool_types_bool_exp
  ): [e_map_pool_types!]!

  """
  fetch aggregated fields from the table: "e_map_pool_types"
  """
  e_map_pool_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_map_pool_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_map_pool_types_order_by!]

    """filter the rows returned"""
    where: e_map_pool_types_bool_exp
  ): e_map_pool_types_aggregate!

  """
  fetch data from the table: "e_map_pool_types" using primary key columns
  """
  e_map_pool_types_by_pk(value: String!): e_map_pool_types

  """
  fetch data from the table in a streaming manner: "e_map_pool_types"
  """
  e_map_pool_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_map_pool_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_map_pool_types_bool_exp
  ): [e_map_pool_types!]!

  """
  fetch data from the table: "e_match_map_status"
  """
  e_match_map_status(
    """distinct select on columns"""
    distinct_on: [e_match_map_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_map_status_order_by!]

    """filter the rows returned"""
    where: e_match_map_status_bool_exp
  ): [e_match_map_status!]!

  """
  fetch aggregated fields from the table: "e_match_map_status"
  """
  e_match_map_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_map_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_map_status_order_by!]

    """filter the rows returned"""
    where: e_match_map_status_bool_exp
  ): e_match_map_status_aggregate!

  """
  fetch data from the table: "e_match_map_status" using primary key columns
  """
  e_match_map_status_by_pk(value: String!): e_match_map_status

  """
  fetch data from the table in a streaming manner: "e_match_map_status"
  """
  e_match_map_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_match_map_status_stream_cursor_input]!

    """filter the rows returned"""
    where: e_match_map_status_bool_exp
  ): [e_match_map_status!]!

  """
  fetch data from the table: "e_match_status"
  """
  e_match_status(
    """distinct select on columns"""
    distinct_on: [e_match_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_status_order_by!]

    """filter the rows returned"""
    where: e_match_status_bool_exp
  ): [e_match_status!]!

  """
  fetch aggregated fields from the table: "e_match_status"
  """
  e_match_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_status_order_by!]

    """filter the rows returned"""
    where: e_match_status_bool_exp
  ): e_match_status_aggregate!

  """fetch data from the table: "e_match_status" using primary key columns"""
  e_match_status_by_pk(value: String!): e_match_status

  """
  fetch data from the table in a streaming manner: "e_match_status"
  """
  e_match_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_match_status_stream_cursor_input]!

    """filter the rows returned"""
    where: e_match_status_bool_exp
  ): [e_match_status!]!

  """
  fetch data from the table: "e_match_types"
  """
  e_match_types(
    """distinct select on columns"""
    distinct_on: [e_match_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_types_order_by!]

    """filter the rows returned"""
    where: e_match_types_bool_exp
  ): [e_match_types!]!

  """
  fetch aggregated fields from the table: "e_match_types"
  """
  e_match_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_match_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_match_types_order_by!]

    """filter the rows returned"""
    where: e_match_types_bool_exp
  ): e_match_types_aggregate!

  """fetch data from the table: "e_match_types" using primary key columns"""
  e_match_types_by_pk(value: String!): e_match_types

  """
  fetch data from the table in a streaming manner: "e_match_types"
  """
  e_match_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_match_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_match_types_bool_exp
  ): [e_match_types!]!

  """
  fetch data from the table: "e_notification_types"
  """
  e_notification_types(
    """distinct select on columns"""
    distinct_on: [e_notification_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_notification_types_order_by!]

    """filter the rows returned"""
    where: e_notification_types_bool_exp
  ): [e_notification_types!]!

  """
  fetch aggregated fields from the table: "e_notification_types"
  """
  e_notification_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_notification_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_notification_types_order_by!]

    """filter the rows returned"""
    where: e_notification_types_bool_exp
  ): e_notification_types_aggregate!

  """
  fetch data from the table: "e_notification_types" using primary key columns
  """
  e_notification_types_by_pk(value: String!): e_notification_types

  """
  fetch data from the table in a streaming manner: "e_notification_types"
  """
  e_notification_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_notification_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_notification_types_bool_exp
  ): [e_notification_types!]!

  """
  fetch data from the table: "e_objective_types"
  """
  e_objective_types(
    """distinct select on columns"""
    distinct_on: [e_objective_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_objective_types_order_by!]

    """filter the rows returned"""
    where: e_objective_types_bool_exp
  ): [e_objective_types!]!

  """
  fetch aggregated fields from the table: "e_objective_types"
  """
  e_objective_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_objective_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_objective_types_order_by!]

    """filter the rows returned"""
    where: e_objective_types_bool_exp
  ): e_objective_types_aggregate!

  """
  fetch data from the table: "e_objective_types" using primary key columns
  """
  e_objective_types_by_pk(value: String!): e_objective_types

  """
  fetch data from the table in a streaming manner: "e_objective_types"
  """
  e_objective_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_objective_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_objective_types_bool_exp
  ): [e_objective_types!]!

  """
  fetch data from the table: "e_player_roles"
  """
  e_player_roles(
    """distinct select on columns"""
    distinct_on: [e_player_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_player_roles_order_by!]

    """filter the rows returned"""
    where: e_player_roles_bool_exp
  ): [e_player_roles!]!

  """
  fetch aggregated fields from the table: "e_player_roles"
  """
  e_player_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [e_player_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_player_roles_order_by!]

    """filter the rows returned"""
    where: e_player_roles_bool_exp
  ): e_player_roles_aggregate!

  """fetch data from the table: "e_player_roles" using primary key columns"""
  e_player_roles_by_pk(value: String!): e_player_roles

  """
  fetch data from the table in a streaming manner: "e_player_roles"
  """
  e_player_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_player_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: e_player_roles_bool_exp
  ): [e_player_roles!]!

  """
  fetch data from the table: "e_ready_settings"
  """
  e_ready_settings(
    """distinct select on columns"""
    distinct_on: [e_ready_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_ready_settings_order_by!]

    """filter the rows returned"""
    where: e_ready_settings_bool_exp
  ): [e_ready_settings!]!

  """
  fetch aggregated fields from the table: "e_ready_settings"
  """
  e_ready_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [e_ready_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_ready_settings_order_by!]

    """filter the rows returned"""
    where: e_ready_settings_bool_exp
  ): e_ready_settings_aggregate!

  """
  fetch data from the table: "e_ready_settings" using primary key columns
  """
  e_ready_settings_by_pk(value: String!): e_ready_settings

  """
  fetch data from the table in a streaming manner: "e_ready_settings"
  """
  e_ready_settings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_ready_settings_stream_cursor_input]!

    """filter the rows returned"""
    where: e_ready_settings_bool_exp
  ): [e_ready_settings!]!

  """
  fetch data from the table: "e_sanction_types"
  """
  e_sanction_types(
    """distinct select on columns"""
    distinct_on: [e_sanction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sanction_types_order_by!]

    """filter the rows returned"""
    where: e_sanction_types_bool_exp
  ): [e_sanction_types!]!

  """
  fetch aggregated fields from the table: "e_sanction_types"
  """
  e_sanction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_sanction_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sanction_types_order_by!]

    """filter the rows returned"""
    where: e_sanction_types_bool_exp
  ): e_sanction_types_aggregate!

  """
  fetch data from the table: "e_sanction_types" using primary key columns
  """
  e_sanction_types_by_pk(value: String!): e_sanction_types

  """
  fetch data from the table in a streaming manner: "e_sanction_types"
  """
  e_sanction_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_sanction_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_sanction_types_bool_exp
  ): [e_sanction_types!]!

  """
  fetch data from the table: "e_sides"
  """
  e_sides(
    """distinct select on columns"""
    distinct_on: [e_sides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sides_order_by!]

    """filter the rows returned"""
    where: e_sides_bool_exp
  ): [e_sides!]!

  """
  fetch aggregated fields from the table: "e_sides"
  """
  e_sides_aggregate(
    """distinct select on columns"""
    distinct_on: [e_sides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_sides_order_by!]

    """filter the rows returned"""
    where: e_sides_bool_exp
  ): e_sides_aggregate!

  """fetch data from the table: "e_sides" using primary key columns"""
  e_sides_by_pk(value: String!): e_sides

  """
  fetch data from the table in a streaming manner: "e_sides"
  """
  e_sides_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_sides_stream_cursor_input]!

    """filter the rows returned"""
    where: e_sides_bool_exp
  ): [e_sides!]!

  """
  fetch data from the table: "e_team_roles"
  """
  e_team_roles(
    """distinct select on columns"""
    distinct_on: [e_team_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_team_roles_order_by!]

    """filter the rows returned"""
    where: e_team_roles_bool_exp
  ): [e_team_roles!]!

  """
  fetch aggregated fields from the table: "e_team_roles"
  """
  e_team_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [e_team_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_team_roles_order_by!]

    """filter the rows returned"""
    where: e_team_roles_bool_exp
  ): e_team_roles_aggregate!

  """fetch data from the table: "e_team_roles" using primary key columns"""
  e_team_roles_by_pk(value: String!): e_team_roles

  """
  fetch data from the table in a streaming manner: "e_team_roles"
  """
  e_team_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_team_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: e_team_roles_bool_exp
  ): [e_team_roles!]!

  """
  fetch data from the table: "e_timeout_settings"
  """
  e_timeout_settings(
    """distinct select on columns"""
    distinct_on: [e_timeout_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_timeout_settings_order_by!]

    """filter the rows returned"""
    where: e_timeout_settings_bool_exp
  ): [e_timeout_settings!]!

  """
  fetch aggregated fields from the table: "e_timeout_settings"
  """
  e_timeout_settings_aggregate(
    """distinct select on columns"""
    distinct_on: [e_timeout_settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_timeout_settings_order_by!]

    """filter the rows returned"""
    where: e_timeout_settings_bool_exp
  ): e_timeout_settings_aggregate!

  """
  fetch data from the table: "e_timeout_settings" using primary key columns
  """
  e_timeout_settings_by_pk(value: String!): e_timeout_settings

  """
  fetch data from the table in a streaming manner: "e_timeout_settings"
  """
  e_timeout_settings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_timeout_settings_stream_cursor_input]!

    """filter the rows returned"""
    where: e_timeout_settings_bool_exp
  ): [e_timeout_settings!]!

  """
  fetch data from the table: "e_tournament_stage_types"
  """
  e_tournament_stage_types(
    """distinct select on columns"""
    distinct_on: [e_tournament_stage_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_stage_types_order_by!]

    """filter the rows returned"""
    where: e_tournament_stage_types_bool_exp
  ): [e_tournament_stage_types!]!

  """
  fetch aggregated fields from the table: "e_tournament_stage_types"
  """
  e_tournament_stage_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_tournament_stage_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_stage_types_order_by!]

    """filter the rows returned"""
    where: e_tournament_stage_types_bool_exp
  ): e_tournament_stage_types_aggregate!

  """
  fetch data from the table: "e_tournament_stage_types" using primary key columns
  """
  e_tournament_stage_types_by_pk(value: String!): e_tournament_stage_types

  """
  fetch data from the table in a streaming manner: "e_tournament_stage_types"
  """
  e_tournament_stage_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_tournament_stage_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_tournament_stage_types_bool_exp
  ): [e_tournament_stage_types!]!

  """
  fetch data from the table: "e_tournament_status"
  """
  e_tournament_status(
    """distinct select on columns"""
    distinct_on: [e_tournament_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_status_order_by!]

    """filter the rows returned"""
    where: e_tournament_status_bool_exp
  ): [e_tournament_status!]!

  """
  fetch aggregated fields from the table: "e_tournament_status"
  """
  e_tournament_status_aggregate(
    """distinct select on columns"""
    distinct_on: [e_tournament_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_tournament_status_order_by!]

    """filter the rows returned"""
    where: e_tournament_status_bool_exp
  ): e_tournament_status_aggregate!

  """
  fetch data from the table: "e_tournament_status" using primary key columns
  """
  e_tournament_status_by_pk(value: String!): e_tournament_status

  """
  fetch data from the table in a streaming manner: "e_tournament_status"
  """
  e_tournament_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_tournament_status_stream_cursor_input]!

    """filter the rows returned"""
    where: e_tournament_status_bool_exp
  ): [e_tournament_status!]!

  """
  fetch data from the table: "e_utility_types"
  """
  e_utility_types(
    """distinct select on columns"""
    distinct_on: [e_utility_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_utility_types_order_by!]

    """filter the rows returned"""
    where: e_utility_types_bool_exp
  ): [e_utility_types!]!

  """
  fetch aggregated fields from the table: "e_utility_types"
  """
  e_utility_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_utility_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_utility_types_order_by!]

    """filter the rows returned"""
    where: e_utility_types_bool_exp
  ): e_utility_types_aggregate!

  """fetch data from the table: "e_utility_types" using primary key columns"""
  e_utility_types_by_pk(value: String!): e_utility_types

  """
  fetch data from the table in a streaming manner: "e_utility_types"
  """
  e_utility_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_utility_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_utility_types_bool_exp
  ): [e_utility_types!]!

  """
  fetch data from the table: "e_veto_pick_types"
  """
  e_veto_pick_types(
    """distinct select on columns"""
    distinct_on: [e_veto_pick_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_veto_pick_types_order_by!]

    """filter the rows returned"""
    where: e_veto_pick_types_bool_exp
  ): [e_veto_pick_types!]!

  """
  fetch aggregated fields from the table: "e_veto_pick_types"
  """
  e_veto_pick_types_aggregate(
    """distinct select on columns"""
    distinct_on: [e_veto_pick_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [e_veto_pick_types_order_by!]

    """filter the rows returned"""
    where: e_veto_pick_types_bool_exp
  ): e_veto_pick_types_aggregate!

  """
  fetch data from the table: "e_veto_pick_types" using primary key columns
  """
  e_veto_pick_types_by_pk(value: String!): e_veto_pick_types

  """
  fetch data from the table in a streaming manner: "e_veto_pick_types"
  """
  e_veto_pick_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [e_veto_pick_types_stream_cursor_input]!

    """filter the rows returned"""
    where: e_veto_pick_types_bool_exp
  ): [e_veto_pick_types!]!

  """
  fetch data from the table: "friends"
  """
  friends(
    """distinct select on columns"""
    distinct_on: [friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friends_order_by!]

    """filter the rows returned"""
    where: friends_bool_exp
  ): [friends!]!

  """
  fetch aggregated fields from the table: "friends"
  """
  friends_aggregate(
    """distinct select on columns"""
    distinct_on: [friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friends_order_by!]

    """filter the rows returned"""
    where: friends_bool_exp
  ): friends_aggregate!

  """fetch data from the table: "friends" using primary key columns"""
  friends_by_pk(other_player_steam_id: bigint!, player_steam_id: bigint!): friends

  """
  fetch data from the table in a streaming manner: "friends"
  """
  friends_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [friends_stream_cursor_input]!

    """filter the rows returned"""
    where: friends_bool_exp
  ): [friends!]!

  """An array relationship"""
  game_server_nodes(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): [game_server_nodes!]!

  """An aggregate relationship"""
  game_server_nodes_aggregate(
    """distinct select on columns"""
    distinct_on: [game_server_nodes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [game_server_nodes_order_by!]

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): game_server_nodes_aggregate!

  """
  fetch data from the table: "game_server_nodes" using primary key columns
  """
  game_server_nodes_by_pk(id: String!): game_server_nodes

  """
  fetch data from the table in a streaming manner: "game_server_nodes"
  """
  game_server_nodes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [game_server_nodes_stream_cursor_input]!

    """filter the rows returned"""
    where: game_server_nodes_bool_exp
  ): [game_server_nodes!]!

  """
  fetch data from the table: "lobbies"
  """
  lobbies(
    """distinct select on columns"""
    distinct_on: [lobbies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobbies_order_by!]

    """filter the rows returned"""
    where: lobbies_bool_exp
  ): [lobbies!]!

  """
  fetch aggregated fields from the table: "lobbies"
  """
  lobbies_aggregate(
    """distinct select on columns"""
    distinct_on: [lobbies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobbies_order_by!]

    """filter the rows returned"""
    where: lobbies_bool_exp
  ): lobbies_aggregate!

  """fetch data from the table: "lobbies" using primary key columns"""
  lobbies_by_pk(id: uuid!): lobbies

  """
  fetch data from the table in a streaming manner: "lobbies"
  """
  lobbies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lobbies_stream_cursor_input]!

    """filter the rows returned"""
    where: lobbies_bool_exp
  ): [lobbies!]!

  """An array relationship"""
  lobby_players(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): [lobby_players!]!

  """An aggregate relationship"""
  lobby_players_aggregate(
    """distinct select on columns"""
    distinct_on: [lobby_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lobby_players_order_by!]

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): lobby_players_aggregate!

  """fetch data from the table: "lobby_players" using primary key columns"""
  lobby_players_by_pk(lobby_id: uuid!, steam_id: bigint!): lobby_players

  """
  fetch data from the table in a streaming manner: "lobby_players"
  """
  lobby_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lobby_players_stream_cursor_input]!

    """filter the rows returned"""
    where: lobby_players_bool_exp
  ): [lobby_players!]!

  """
  fetch data from the table: "map_pools"
  """
  map_pools(
    """distinct select on columns"""
    distinct_on: [map_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [map_pools_order_by!]

    """filter the rows returned"""
    where: map_pools_bool_exp
  ): [map_pools!]!

  """
  fetch aggregated fields from the table: "map_pools"
  """
  map_pools_aggregate(
    """distinct select on columns"""
    distinct_on: [map_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [map_pools_order_by!]

    """filter the rows returned"""
    where: map_pools_bool_exp
  ): map_pools_aggregate!

  """fetch data from the table: "map_pools" using primary key columns"""
  map_pools_by_pk(id: uuid!): map_pools

  """
  fetch data from the table in a streaming manner: "map_pools"
  """
  map_pools_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [map_pools_stream_cursor_input]!

    """filter the rows returned"""
    where: map_pools_bool_exp
  ): [map_pools!]!

  """An array relationship"""
  maps(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): [maps!]!

  """An aggregate relationship"""
  maps_aggregate(
    """distinct select on columns"""
    distinct_on: [maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maps_order_by!]

    """filter the rows returned"""
    where: maps_bool_exp
  ): maps_aggregate!

  """fetch data from the table: "maps" using primary key columns"""
  maps_by_pk(id: uuid!): maps

  """
  fetch data from the table in a streaming manner: "maps"
  """
  maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [maps_stream_cursor_input]!

    """filter the rows returned"""
    where: maps_bool_exp
  ): [maps!]!

  """
  fetch data from the table: "match_invites"
  """
  match_invites(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): [match_invites!]!

  """
  fetch aggregated fields from the table: "match_invites"
  """
  match_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [match_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_invites_order_by!]

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): match_invites_aggregate!

  """fetch data from the table: "match_invites" using primary key columns"""
  match_invites_by_pk(id: uuid!): match_invites

  """
  fetch data from the table in a streaming manner: "match_invites"
  """
  match_invites_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_invites_stream_cursor_input]!

    """filter the rows returned"""
    where: match_invites_bool_exp
  ): [match_invites!]!

  """
  fetch data from the table: "match_lineup_players"
  """
  match_lineup_players(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): [match_lineup_players!]!

  """
  fetch aggregated fields from the table: "match_lineup_players"
  """
  match_lineup_players_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineup_players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineup_players_order_by!]

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): match_lineup_players_aggregate!

  """
  fetch data from the table: "match_lineup_players" using primary key columns
  """
  match_lineup_players_by_pk(id: uuid!): match_lineup_players

  """
  fetch data from the table in a streaming manner: "match_lineup_players"
  """
  match_lineup_players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_lineup_players_stream_cursor_input]!

    """filter the rows returned"""
    where: match_lineup_players_bool_exp
  ): [match_lineup_players!]!

  """An array relationship"""
  match_lineups(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): [match_lineups!]!

  """An aggregate relationship"""
  match_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): match_lineups_aggregate!

  """fetch data from the table: "match_lineups" using primary key columns"""
  match_lineups_by_pk(id: uuid!): match_lineups

  """
  fetch data from the table in a streaming manner: "match_lineups"
  """
  match_lineups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_lineups_stream_cursor_input]!

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): [match_lineups!]!

  """
  fetch data from the table: "match_map_demos"
  """
  match_map_demos(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): [match_map_demos!]!

  """
  fetch aggregated fields from the table: "match_map_demos"
  """
  match_map_demos_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_demos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_demos_order_by!]

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): match_map_demos_aggregate!

  """fetch data from the table: "match_map_demos" using primary key columns"""
  match_map_demos_by_pk(id: uuid!): match_map_demos

  """
  fetch data from the table in a streaming manner: "match_map_demos"
  """
  match_map_demos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_map_demos_stream_cursor_input]!

    """filter the rows returned"""
    where: match_map_demos_bool_exp
  ): [match_map_demos!]!

  """
  fetch data from the table: "match_map_rounds"
  """
  match_map_rounds(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): [match_map_rounds!]!

  """
  fetch aggregated fields from the table: "match_map_rounds"
  """
  match_map_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_rounds_order_by!]

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): match_map_rounds_aggregate!

  """
  fetch data from the table: "match_map_rounds" using primary key columns
  """
  match_map_rounds_by_pk(id: uuid!): match_map_rounds

  """
  fetch data from the table in a streaming manner: "match_map_rounds"
  """
  match_map_rounds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_map_rounds_stream_cursor_input]!

    """filter the rows returned"""
    where: match_map_rounds_bool_exp
  ): [match_map_rounds!]!

  """
  fetch data from the table: "match_map_veto_picks"
  """
  match_map_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """
  fetch aggregated fields from the table: "match_map_veto_picks"
  """
  match_map_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_map_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_map_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): match_map_veto_picks_aggregate!

  """
  fetch data from the table: "match_map_veto_picks" using primary key columns
  """
  match_map_veto_picks_by_pk(id: uuid!): match_map_veto_picks

  """
  fetch data from the table in a streaming manner: "match_map_veto_picks"
  """
  match_map_veto_picks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_map_veto_picks_stream_cursor_input]!

    """filter the rows returned"""
    where: match_map_veto_picks_bool_exp
  ): [match_map_veto_picks!]!

  """An array relationship"""
  match_maps(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """An aggregate relationship"""
  match_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [match_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_maps_order_by!]

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): match_maps_aggregate!

  """fetch data from the table: "match_maps" using primary key columns"""
  match_maps_by_pk(id: uuid!): match_maps

  """
  fetch data from the table in a streaming manner: "match_maps"
  """
  match_maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_maps_stream_cursor_input]!

    """filter the rows returned"""
    where: match_maps_bool_exp
  ): [match_maps!]!

  """
  fetch data from the table: "match_options"
  """
  match_options(
    """distinct select on columns"""
    distinct_on: [match_options_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_options_order_by!]

    """filter the rows returned"""
    where: match_options_bool_exp
  ): [match_options!]!

  """
  fetch aggregated fields from the table: "match_options"
  """
  match_options_aggregate(
    """distinct select on columns"""
    distinct_on: [match_options_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_options_order_by!]

    """filter the rows returned"""
    where: match_options_bool_exp
  ): match_options_aggregate!

  """fetch data from the table: "match_options" using primary key columns"""
  match_options_by_pk(id: uuid!): match_options

  """
  fetch data from the table in a streaming manner: "match_options"
  """
  match_options_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_options_stream_cursor_input]!

    """filter the rows returned"""
    where: match_options_bool_exp
  ): [match_options!]!

  """
  fetch data from the table: "match_region_veto_picks"
  """
  match_region_veto_picks(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): [match_region_veto_picks!]!

  """
  fetch aggregated fields from the table: "match_region_veto_picks"
  """
  match_region_veto_picks_aggregate(
    """distinct select on columns"""
    distinct_on: [match_region_veto_picks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_region_veto_picks_order_by!]

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): match_region_veto_picks_aggregate!

  """
  fetch data from the table: "match_region_veto_picks" using primary key columns
  """
  match_region_veto_picks_by_pk(id: uuid!): match_region_veto_picks

  """
  fetch data from the table in a streaming manner: "match_region_veto_picks"
  """
  match_region_veto_picks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_region_veto_picks_stream_cursor_input]!

    """filter the rows returned"""
    where: match_region_veto_picks_bool_exp
  ): [match_region_veto_picks!]!

  """
  fetch data from the table: "match_type_cfgs"
  """
  match_type_cfgs(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): [match_type_cfgs!]!

  """
  fetch aggregated fields from the table: "match_type_cfgs"
  """
  match_type_cfgs_aggregate(
    """distinct select on columns"""
    distinct_on: [match_type_cfgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_type_cfgs_order_by!]

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): match_type_cfgs_aggregate!

  """fetch data from the table: "match_type_cfgs" using primary key columns"""
  match_type_cfgs_by_pk(type: e_match_types_enum!): match_type_cfgs

  """
  fetch data from the table in a streaming manner: "match_type_cfgs"
  """
  match_type_cfgs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_type_cfgs_stream_cursor_input]!

    """filter the rows returned"""
    where: match_type_cfgs_bool_exp
  ): [match_type_cfgs!]!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): matches_aggregate!

  """fetch data from the table: "matches" using primary key columns"""
  matches_by_pk(id: uuid!): matches

  """
  fetch data from the table in a streaming manner: "matches"
  """
  matches_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [matches_stream_cursor_input]!

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]!

  """
  fetch data from the table: "migration_hashes.hashes"
  """
  migration_hashes_hashes(
    """distinct select on columns"""
    distinct_on: [migration_hashes_hashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_hashes_hashes_order_by!]

    """filter the rows returned"""
    where: migration_hashes_hashes_bool_exp
  ): [migration_hashes_hashes!]!

  """
  fetch aggregated fields from the table: "migration_hashes.hashes"
  """
  migration_hashes_hashes_aggregate(
    """distinct select on columns"""
    distinct_on: [migration_hashes_hashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_hashes_hashes_order_by!]

    """filter the rows returned"""
    where: migration_hashes_hashes_bool_exp
  ): migration_hashes_hashes_aggregate!

  """
  fetch data from the table: "migration_hashes.hashes" using primary key columns
  """
  migration_hashes_hashes_by_pk(name: String!): migration_hashes_hashes

  """
  fetch data from the table in a streaming manner: "migration_hashes.hashes"
  """
  migration_hashes_hashes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [migration_hashes_hashes_stream_cursor_input]!

    """filter the rows returned"""
    where: migration_hashes_hashes_bool_exp
  ): [migration_hashes_hashes!]!

  """
  fetch data from the table: "v_my_friends"
  """
  my_friends(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): [my_friends!]!

  """
  fetch aggregated fields from the table: "v_my_friends"
  """
  my_friends_aggregate(
    """distinct select on columns"""
    distinct_on: [my_friends_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [my_friends_order_by!]

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): my_friends_aggregate!

  """
  fetch data from the table in a streaming manner: "v_my_friends"
  """
  my_friends_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [my_friends_stream_cursor_input]!

    """filter the rows returned"""
    where: my_friends_bool_exp
  ): [my_friends!]!

  """An array relationship"""
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!

  """fetch data from the table: "notifications" using primary key columns"""
  notifications_by_pk(id: uuid!): notifications

  """
  fetch data from the table in a streaming manner: "notifications"
  """
  notifications_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [notifications_stream_cursor_input]!

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An array relationship"""
  player_assists(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An aggregate relationship"""
  player_assists_aggregate(
    """distinct select on columns"""
    distinct_on: [player_assists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_assists_order_by!]

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): player_assists_aggregate!

  """
  fetch data from the table in a streaming manner: "player_assists"
  """
  player_assists_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_assists_stream_cursor_input]!

    """filter the rows returned"""
    where: player_assists_bool_exp
  ): [player_assists!]!

  """An array relationship"""
  player_damages(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """An aggregate relationship"""
  player_damages_aggregate(
    """distinct select on columns"""
    distinct_on: [player_damages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_damages_order_by!]

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): player_damages_aggregate!

  """
  fetch data from the table in a streaming manner: "player_damages"
  """
  player_damages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_damages_stream_cursor_input]!

    """filter the rows returned"""
    where: player_damages_bool_exp
  ): [player_damages!]!

  """
  fetch data from the table: "player_elo"
  """
  player_elo(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): [player_elo!]!

  """
  fetch aggregated fields from the table: "player_elo"
  """
  player_elo_aggregate(
    """distinct select on columns"""
    distinct_on: [player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_elo_order_by!]

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): player_elo_aggregate!

  """fetch data from the table: "player_elo" using primary key columns"""
  player_elo_by_pk(match_id: uuid!, steam_id: bigint!): player_elo

  """
  fetch data from the table in a streaming manner: "player_elo"
  """
  player_elo_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_elo_stream_cursor_input]!

    """filter the rows returned"""
    where: player_elo_bool_exp
  ): [player_elo!]!

  """An array relationship"""
  player_flashes(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An aggregate relationship"""
  player_flashes_aggregate(
    """distinct select on columns"""
    distinct_on: [player_flashes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_flashes_order_by!]

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): player_flashes_aggregate!

  """
  fetch data from the table in a streaming manner: "player_flashes"
  """
  player_flashes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_flashes_stream_cursor_input]!

    """filter the rows returned"""
    where: player_flashes_bool_exp
  ): [player_flashes!]!

  """An array relationship"""
  player_kills(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An aggregate relationship"""
  player_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [player_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_kills_order_by!]

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): player_kills_aggregate!

  """fetch data from the table: "player_kills" using primary key columns"""
  player_kills_by_pk(id: uuid!, match_id: uuid!, match_map_id: uuid!, time: timestamptz!): player_kills

  """
  fetch data from the table in a streaming manner: "player_kills"
  """
  player_kills_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_kills_stream_cursor_input]!

    """filter the rows returned"""
    where: player_kills_bool_exp
  ): [player_kills!]!

  """An array relationship"""
  player_objectives(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """An aggregate relationship"""
  player_objectives_aggregate(
    """distinct select on columns"""
    distinct_on: [player_objectives_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_objectives_order_by!]

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): player_objectives_aggregate!

  """
  fetch data from the table in a streaming manner: "player_objectives"
  """
  player_objectives_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_objectives_stream_cursor_input]!

    """filter the rows returned"""
    where: player_objectives_bool_exp
  ): [player_objectives!]!

  """
  fetch data from the table: "player_sanctions"
  """
  player_sanctions(
    """distinct select on columns"""
    distinct_on: [player_sanctions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_sanctions_order_by!]

    """filter the rows returned"""
    where: player_sanctions_bool_exp
  ): [player_sanctions!]!

  """
  fetch aggregated fields from the table: "player_sanctions"
  """
  player_sanctions_aggregate(
    """distinct select on columns"""
    distinct_on: [player_sanctions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_sanctions_order_by!]

    """filter the rows returned"""
    where: player_sanctions_bool_exp
  ): player_sanctions_aggregate!

  """
  fetch data from the table in a streaming manner: "player_sanctions"
  """
  player_sanctions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_sanctions_stream_cursor_input]!

    """filter the rows returned"""
    where: player_sanctions_bool_exp
  ): [player_sanctions!]!

  """
  fetch data from the table: "player_unused_utility"
  """
  player_unused_utility(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """
  fetch aggregated fields from the table: "player_unused_utility"
  """
  player_unused_utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_unused_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_unused_utility_order_by!]

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): player_unused_utility_aggregate!

  """
  fetch data from the table: "player_unused_utility" using primary key columns
  """
  player_unused_utility_by_pk(id: uuid!): player_unused_utility

  """
  fetch data from the table in a streaming manner: "player_unused_utility"
  """
  player_unused_utility_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_unused_utility_stream_cursor_input]!

    """filter the rows returned"""
    where: player_unused_utility_bool_exp
  ): [player_unused_utility!]!

  """An array relationship"""
  player_utility(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """An aggregate relationship"""
  player_utility_aggregate(
    """distinct select on columns"""
    distinct_on: [player_utility_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_utility_order_by!]

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): player_utility_aggregate!

  """
  fetch data from the table in a streaming manner: "player_utility"
  """
  player_utility_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [player_utility_stream_cursor_input]!

    """filter the rows returned"""
    where: player_utility_bool_exp
  ): [player_utility!]!

  """
  fetch data from the table: "players"
  """
  players(
    """distinct select on columns"""
    distinct_on: [players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [players_order_by!]

    """filter the rows returned"""
    where: players_bool_exp
  ): [players!]!

  """
  fetch aggregated fields from the table: "players"
  """
  players_aggregate(
    """distinct select on columns"""
    distinct_on: [players_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [players_order_by!]

    """filter the rows returned"""
    where: players_bool_exp
  ): players_aggregate!

  """fetch data from the table: "players" using primary key columns"""
  players_by_pk(steam_id: bigint!): players

  """
  fetch data from the table in a streaming manner: "players"
  """
  players_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [players_stream_cursor_input]!

    """filter the rows returned"""
    where: players_bool_exp
  ): [players!]!

  """
  fetch data from the table: "server_regions"
  """
  server_regions(
    """distinct select on columns"""
    distinct_on: [server_regions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [server_regions_order_by!]

    """filter the rows returned"""
    where: server_regions_bool_exp
  ): [server_regions!]!

  """
  fetch aggregated fields from the table: "server_regions"
  """
  server_regions_aggregate(
    """distinct select on columns"""
    distinct_on: [server_regions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [server_regions_order_by!]

    """filter the rows returned"""
    where: server_regions_bool_exp
  ): server_regions_aggregate!

  """fetch data from the table: "server_regions" using primary key columns"""
  server_regions_by_pk(value: String!): server_regions

  """
  fetch data from the table in a streaming manner: "server_regions"
  """
  server_regions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [server_regions_stream_cursor_input]!

    """filter the rows returned"""
    where: server_regions_bool_exp
  ): [server_regions!]!

  """An array relationship"""
  servers(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): [servers!]!

  """An aggregate relationship"""
  servers_aggregate(
    """distinct select on columns"""
    distinct_on: [servers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [servers_order_by!]

    """filter the rows returned"""
    where: servers_bool_exp
  ): servers_aggregate!

  """fetch data from the table: "servers" using primary key columns"""
  servers_by_pk(id: uuid!): servers

  """
  fetch data from the table in a streaming manner: "servers"
  """
  servers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [servers_stream_cursor_input]!

    """filter the rows returned"""
    where: servers_bool_exp
  ): [servers!]!

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(name: String!): settings

  """
  fetch data from the table in a streaming manner: "settings"
  """
  settings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [settings_stream_cursor_input]!

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """An array relationship"""
  team_invites(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """An aggregate relationship"""
  team_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): team_invites_aggregate!

  """fetch data from the table: "team_invites" using primary key columns"""
  team_invites_by_pk(id: uuid!): team_invites

  """
  fetch data from the table in a streaming manner: "team_invites"
  """
  team_invites_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [team_invites_stream_cursor_input]!

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """
  fetch data from the table: "team_roster"
  """
  team_roster(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """
  fetch aggregated fields from the table: "team_roster"
  """
  team_roster_aggregate(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): team_roster_aggregate!

  """fetch data from the table: "team_roster" using primary key columns"""
  team_roster_by_pk(player_steam_id: bigint!, team_id: uuid!): team_roster

  """
  fetch data from the table in a streaming manner: "team_roster"
  """
  team_roster_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [team_roster_stream_cursor_input]!

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """
  fetch data from the table: "teams"
  """
  teams(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]!

  """
  fetch aggregated fields from the table: "teams"
  """
  teams_aggregate(
    """distinct select on columns"""
    distinct_on: [teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teams_order_by!]

    """filter the rows returned"""
    where: teams_bool_exp
  ): teams_aggregate!

  """fetch data from the table: "teams" using primary key columns"""
  teams_by_pk(id: uuid!): teams

  """
  fetch data from the table in a streaming manner: "teams"
  """
  teams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [teams_stream_cursor_input]!

    """filter the rows returned"""
    where: teams_bool_exp
  ): [teams!]!

  """An array relationship"""
  tournament_brackets(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): [tournament_brackets!]!

  """An aggregate relationship"""
  tournament_brackets_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): tournament_brackets_aggregate!

  """
  fetch data from the table: "tournament_brackets" using primary key columns
  """
  tournament_brackets_by_pk(id: uuid!): tournament_brackets

  """
  fetch data from the table in a streaming manner: "tournament_brackets"
  """
  tournament_brackets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_brackets_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): [tournament_brackets!]!

  """An array relationship"""
  tournament_organizers(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): [tournament_organizers!]!

  """An aggregate relationship"""
  tournament_organizers_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): tournament_organizers_aggregate!

  """
  fetch data from the table: "tournament_organizers" using primary key columns
  """
  tournament_organizers_by_pk(steam_id: bigint!, tournament_id: uuid!): tournament_organizers

  """
  fetch data from the table in a streaming manner: "tournament_organizers"
  """
  tournament_organizers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_organizers_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): [tournament_organizers!]!

  """An array relationship"""
  tournament_stages(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): [tournament_stages!]!

  """An aggregate relationship"""
  tournament_stages_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): tournament_stages_aggregate!

  """
  fetch data from the table: "tournament_stages" using primary key columns
  """
  tournament_stages_by_pk(id: uuid!): tournament_stages

  """
  fetch data from the table in a streaming manner: "tournament_stages"
  """
  tournament_stages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_stages_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): [tournament_stages!]!

  """
  fetch data from the table: "tournament_team_invites"
  """
  tournament_team_invites(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): [tournament_team_invites!]!

  """
  fetch aggregated fields from the table: "tournament_team_invites"
  """
  tournament_team_invites_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): tournament_team_invites_aggregate!

  """
  fetch data from the table: "tournament_team_invites" using primary key columns
  """
  tournament_team_invites_by_pk(id: uuid!): tournament_team_invites

  """
  fetch data from the table in a streaming manner: "tournament_team_invites"
  """
  tournament_team_invites_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_team_invites_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): [tournament_team_invites!]!

  """
  fetch data from the table: "tournament_team_roster"
  """
  tournament_team_roster(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """
  fetch aggregated fields from the table: "tournament_team_roster"
  """
  tournament_team_roster_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!

  """
  fetch data from the table: "tournament_team_roster" using primary key columns
  """
  tournament_team_roster_by_pk(player_steam_id: bigint!, tournament_id: uuid!): tournament_team_roster

  """
  fetch data from the table in a streaming manner: "tournament_team_roster"
  """
  tournament_team_roster_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_team_roster_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """An array relationship"""
  tournament_teams(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): [tournament_teams!]!

  """An aggregate relationship"""
  tournament_teams_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): tournament_teams_aggregate!

  """
  fetch data from the table: "tournament_teams" using primary key columns
  """
  tournament_teams_by_pk(id: uuid!): tournament_teams

  """
  fetch data from the table in a streaming manner: "tournament_teams"
  """
  tournament_teams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournament_teams_stream_cursor_input]!

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): [tournament_teams!]!

  """An array relationship"""
  tournaments(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): [tournaments!]!

  """An aggregate relationship"""
  tournaments_aggregate(
    """distinct select on columns"""
    distinct_on: [tournaments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournaments_order_by!]

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): tournaments_aggregate!

  """fetch data from the table: "tournaments" using primary key columns"""
  tournaments_by_pk(id: uuid!): tournaments

  """
  fetch data from the table in a streaming manner: "tournaments"
  """
  tournaments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tournaments_stream_cursor_input]!

    """filter the rows returned"""
    where: tournaments_bool_exp
  ): [tournaments!]!

  """
  fetch data from the table: "v_match_captains"
  """
  v_match_captains(
    """distinct select on columns"""
    distinct_on: [v_match_captains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_captains_order_by!]

    """filter the rows returned"""
    where: v_match_captains_bool_exp
  ): [v_match_captains!]!

  """
  fetch aggregated fields from the table: "v_match_captains"
  """
  v_match_captains_aggregate(
    """distinct select on columns"""
    distinct_on: [v_match_captains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_captains_order_by!]

    """filter the rows returned"""
    where: v_match_captains_bool_exp
  ): v_match_captains_aggregate!

  """
  fetch data from the table in a streaming manner: "v_match_captains"
  """
  v_match_captains_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_match_captains_stream_cursor_input]!

    """filter the rows returned"""
    where: v_match_captains_bool_exp
  ): [v_match_captains!]!

  """
  fetch data from the table: "v_match_lineups"
  """
  v_match_lineups(
    """distinct select on columns"""
    distinct_on: [v_match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_lineups_order_by!]

    """filter the rows returned"""
    where: v_match_lineups_bool_exp
  ): [v_match_lineups!]!

  """
  fetch aggregated fields from the table: "v_match_lineups"
  """
  v_match_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [v_match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_match_lineups_order_by!]

    """filter the rows returned"""
    where: v_match_lineups_bool_exp
  ): v_match_lineups_aggregate!

  """
  fetch data from the table in a streaming manner: "v_match_lineups"
  """
  v_match_lineups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_match_lineups_stream_cursor_input]!

    """filter the rows returned"""
    where: v_match_lineups_bool_exp
  ): [v_match_lineups!]!

  """
  fetch data from the table: "v_player_arch_nemesis"
  """
  v_player_arch_nemesis(
    """distinct select on columns"""
    distinct_on: [v_player_arch_nemesis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_arch_nemesis_order_by!]

    """filter the rows returned"""
    where: v_player_arch_nemesis_bool_exp
  ): [v_player_arch_nemesis!]!

  """
  fetch aggregated fields from the table: "v_player_arch_nemesis"
  """
  v_player_arch_nemesis_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_arch_nemesis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_arch_nemesis_order_by!]

    """filter the rows returned"""
    where: v_player_arch_nemesis_bool_exp
  ): v_player_arch_nemesis_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_arch_nemesis"
  """
  v_player_arch_nemesis_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_arch_nemesis_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_arch_nemesis_bool_exp
  ): [v_player_arch_nemesis!]!

  """
  fetch data from the table: "v_player_damage"
  """
  v_player_damage(
    """distinct select on columns"""
    distinct_on: [v_player_damage_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_damage_order_by!]

    """filter the rows returned"""
    where: v_player_damage_bool_exp
  ): [v_player_damage!]!

  """
  fetch aggregated fields from the table: "v_player_damage"
  """
  v_player_damage_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_damage_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_damage_order_by!]

    """filter the rows returned"""
    where: v_player_damage_bool_exp
  ): v_player_damage_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_damage"
  """
  v_player_damage_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_damage_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_damage_bool_exp
  ): [v_player_damage!]!

  """
  fetch data from the table: "v_player_elo"
  """
  v_player_elo(
    """distinct select on columns"""
    distinct_on: [v_player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_elo_order_by!]

    """filter the rows returned"""
    where: v_player_elo_bool_exp
  ): [v_player_elo!]!

  """
  fetch aggregated fields from the table: "v_player_elo"
  """
  v_player_elo_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_elo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_elo_order_by!]

    """filter the rows returned"""
    where: v_player_elo_bool_exp
  ): v_player_elo_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_elo"
  """
  v_player_elo_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_elo_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_elo_bool_exp
  ): [v_player_elo!]!

  """
  fetch data from the table: "v_player_map_losses"
  """
  v_player_map_losses(
    """distinct select on columns"""
    distinct_on: [v_player_map_losses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_losses_order_by!]

    """filter the rows returned"""
    where: v_player_map_losses_bool_exp
  ): [v_player_map_losses!]!

  """
  fetch aggregated fields from the table: "v_player_map_losses"
  """
  v_player_map_losses_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_map_losses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_losses_order_by!]

    """filter the rows returned"""
    where: v_player_map_losses_bool_exp
  ): v_player_map_losses_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_map_losses"
  """
  v_player_map_losses_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_map_losses_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_map_losses_bool_exp
  ): [v_player_map_losses!]!

  """
  fetch data from the table: "v_player_map_wins"
  """
  v_player_map_wins(
    """distinct select on columns"""
    distinct_on: [v_player_map_wins_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_wins_order_by!]

    """filter the rows returned"""
    where: v_player_map_wins_bool_exp
  ): [v_player_map_wins!]!

  """
  fetch aggregated fields from the table: "v_player_map_wins"
  """
  v_player_map_wins_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_map_wins_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_map_wins_order_by!]

    """filter the rows returned"""
    where: v_player_map_wins_bool_exp
  ): v_player_map_wins_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_map_wins"
  """
  v_player_map_wins_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_map_wins_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_map_wins_bool_exp
  ): [v_player_map_wins!]!

  """
  fetch data from the table: "v_player_multi_kills"
  """
  v_player_multi_kills(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): [v_player_multi_kills!]!

  """
  fetch aggregated fields from the table: "v_player_multi_kills"
  """
  v_player_multi_kills_aggregate(
    """distinct select on columns"""
    distinct_on: [v_player_multi_kills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_player_multi_kills_order_by!]

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): v_player_multi_kills_aggregate!

  """
  fetch data from the table in a streaming manner: "v_player_multi_kills"
  """
  v_player_multi_kills_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_player_multi_kills_stream_cursor_input]!

    """filter the rows returned"""
    where: v_player_multi_kills_bool_exp
  ): [v_player_multi_kills!]!

  """
  fetch data from the table: "v_pool_maps"
  """
  v_pool_maps(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): [v_pool_maps!]!

  """
  fetch aggregated fields from the table: "v_pool_maps"
  """
  v_pool_maps_aggregate(
    """distinct select on columns"""
    distinct_on: [v_pool_maps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [v_pool_maps_order_by!]

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): v_pool_maps_aggregate!

  """
  fetch data from the table in a streaming manner: "v_pool_maps"
  """
  v_pool_maps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [v_pool_maps_stream_cursor_input]!

    """filter the rows returned"""
    where: v_pool_maps_bool_exp
  ): [v_pool_maps!]!
}

"""
columns and relationships of "team_invites"
"""
type team_invites {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  invited_by: players!
  invited_by_player_steam_id: bigint!

  """An object relationship"""
  player: players!
  steam_id: bigint!

  """An object relationship"""
  team: teams!
  team_id: uuid!
}

"""
aggregated selection of "team_invites"
"""
type team_invites_aggregate {
  aggregate: team_invites_aggregate_fields
  nodes: [team_invites!]!
}

input team_invites_aggregate_bool_exp {
  count: team_invites_aggregate_bool_exp_count
}

input team_invites_aggregate_bool_exp_count {
  arguments: [team_invites_select_column!]
  distinct: Boolean
  filter: team_invites_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "team_invites"
"""
type team_invites_aggregate_fields {
  avg: team_invites_avg_fields
  count(columns: [team_invites_select_column!], distinct: Boolean): Int!
  max: team_invites_max_fields
  min: team_invites_min_fields
  stddev: team_invites_stddev_fields
  stddev_pop: team_invites_stddev_pop_fields
  stddev_samp: team_invites_stddev_samp_fields
  sum: team_invites_sum_fields
  var_pop: team_invites_var_pop_fields
  var_samp: team_invites_var_samp_fields
  variance: team_invites_variance_fields
}

"""
order by aggregate values of table "team_invites"
"""
input team_invites_aggregate_order_by {
  avg: team_invites_avg_order_by
  count: order_by
  max: team_invites_max_order_by
  min: team_invites_min_order_by
  stddev: team_invites_stddev_order_by
  stddev_pop: team_invites_stddev_pop_order_by
  stddev_samp: team_invites_stddev_samp_order_by
  sum: team_invites_sum_order_by
  var_pop: team_invites_var_pop_order_by
  var_samp: team_invites_var_samp_order_by
  variance: team_invites_variance_order_by
}

"""
input type for inserting array relation for remote table "team_invites"
"""
input team_invites_arr_rel_insert_input {
  data: [team_invites_insert_input!]!

  """upsert condition"""
  on_conflict: team_invites_on_conflict
}

"""aggregate avg on columns"""
type team_invites_avg_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by avg() on columns of table "team_invites"
"""
input team_invites_avg_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'.
"""
input team_invites_bool_exp {
  _and: [team_invites_bool_exp!]
  _not: team_invites_bool_exp
  _or: [team_invites_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  invited_by: players_bool_exp
  invited_by_player_steam_id: bigint_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
  team: teams_bool_exp
  team_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "team_invites"
"""
enum team_invites_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  team_invites_pkey

  """
  unique or primary key constraint on columns "steam_id", "team_id"
  """
  team_invites_team_id_steam_id_key
}

"""
input type for incrementing numeric columns in table "team_invites"
"""
input team_invites_inc_input {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
input type for inserting data into table "team_invites"
"""
input team_invites_insert_input {
  created_at: timestamptz
  id: uuid
  invited_by: players_obj_rel_insert_input
  invited_by_player_steam_id: bigint
  player: players_obj_rel_insert_input
  steam_id: bigint
  team: teams_obj_rel_insert_input
  team_id: uuid
}

"""aggregate max on columns"""
type team_invites_max_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  team_id: uuid
}

"""
order by max() on columns of table "team_invites"
"""
input team_invites_max_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  steam_id: order_by
  team_id: order_by
}

"""aggregate min on columns"""
type team_invites_min_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  team_id: uuid
}

"""
order by min() on columns of table "team_invites"
"""
input team_invites_min_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  steam_id: order_by
  team_id: order_by
}

"""
response of any mutation on the table "team_invites"
"""
type team_invites_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [team_invites!]!
}

"""
on_conflict condition type for table "team_invites"
"""
input team_invites_on_conflict {
  constraint: team_invites_constraint!
  update_columns: [team_invites_update_column!]! = []
  where: team_invites_bool_exp
}

"""Ordering options when selecting data from "team_invites"."""
input team_invites_order_by {
  created_at: order_by
  id: order_by
  invited_by: players_order_by
  invited_by_player_steam_id: order_by
  player: players_order_by
  steam_id: order_by
  team: teams_order_by
  team_id: order_by
}

"""primary key columns input for table: team_invites"""
input team_invites_pk_columns_input {
  id: uuid!
}

"""
select columns of table "team_invites"
"""
enum team_invites_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  steam_id

  """column name"""
  team_id
}

"""
input type for updating data in table "team_invites"
"""
input team_invites_set_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  team_id: uuid
}

"""aggregate stddev on columns"""
type team_invites_stddev_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "team_invites"
"""
input team_invites_stddev_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type team_invites_stddev_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "team_invites"
"""
input team_invites_stddev_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type team_invites_stddev_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "team_invites"
"""
input team_invites_stddev_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "team_invites"
"""
input team_invites_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: team_invites_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input team_invites_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  team_id: uuid
}

"""aggregate sum on columns"""
type team_invites_sum_fields {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
order by sum() on columns of table "team_invites"
"""
input team_invites_sum_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
update columns of table "team_invites"
"""
enum team_invites_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  steam_id

  """column name"""
  team_id
}

input team_invites_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: team_invites_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: team_invites_set_input

  """filter the rows which have to be updated"""
  where: team_invites_bool_exp!
}

"""aggregate var_pop on columns"""
type team_invites_var_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "team_invites"
"""
input team_invites_var_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type team_invites_var_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "team_invites"
"""
input team_invites_var_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type team_invites_variance_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by variance() on columns of table "team_invites"
"""
input team_invites_variance_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
columns and relationships of "team_roster"
"""
type team_roster {
  """An object relationship"""
  player: players!
  player_steam_id: bigint!
  role: e_team_roles_enum!

  """An object relationship"""
  team: teams!
  team_id: uuid!
}

"""
aggregated selection of "team_roster"
"""
type team_roster_aggregate {
  aggregate: team_roster_aggregate_fields
  nodes: [team_roster!]!
}

input team_roster_aggregate_bool_exp {
  count: team_roster_aggregate_bool_exp_count
}

input team_roster_aggregate_bool_exp_count {
  arguments: [team_roster_select_column!]
  distinct: Boolean
  filter: team_roster_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "team_roster"
"""
type team_roster_aggregate_fields {
  avg: team_roster_avg_fields
  count(columns: [team_roster_select_column!], distinct: Boolean): Int!
  max: team_roster_max_fields
  min: team_roster_min_fields
  stddev: team_roster_stddev_fields
  stddev_pop: team_roster_stddev_pop_fields
  stddev_samp: team_roster_stddev_samp_fields
  sum: team_roster_sum_fields
  var_pop: team_roster_var_pop_fields
  var_samp: team_roster_var_samp_fields
  variance: team_roster_variance_fields
}

"""
order by aggregate values of table "team_roster"
"""
input team_roster_aggregate_order_by {
  avg: team_roster_avg_order_by
  count: order_by
  max: team_roster_max_order_by
  min: team_roster_min_order_by
  stddev: team_roster_stddev_order_by
  stddev_pop: team_roster_stddev_pop_order_by
  stddev_samp: team_roster_stddev_samp_order_by
  sum: team_roster_sum_order_by
  var_pop: team_roster_var_pop_order_by
  var_samp: team_roster_var_samp_order_by
  variance: team_roster_variance_order_by
}

"""
input type for inserting array relation for remote table "team_roster"
"""
input team_roster_arr_rel_insert_input {
  data: [team_roster_insert_input!]!

  """upsert condition"""
  on_conflict: team_roster_on_conflict
}

"""aggregate avg on columns"""
type team_roster_avg_fields {
  player_steam_id: Float
}

"""
order by avg() on columns of table "team_roster"
"""
input team_roster_avg_order_by {
  player_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'.
"""
input team_roster_bool_exp {
  _and: [team_roster_bool_exp!]
  _not: team_roster_bool_exp
  _or: [team_roster_bool_exp!]
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  role: e_team_roles_enum_comparison_exp
  team: teams_bool_exp
  team_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "team_roster"
"""
enum team_roster_constraint {
  """
  unique or primary key constraint on columns "player_steam_id", "team_id"
  """
  team_members_pkey
}

"""
input type for incrementing numeric columns in table "team_roster"
"""
input team_roster_inc_input {
  player_steam_id: bigint
}

"""
input type for inserting data into table "team_roster"
"""
input team_roster_insert_input {
  player: players_obj_rel_insert_input
  player_steam_id: bigint
  role: e_team_roles_enum
  team: teams_obj_rel_insert_input
  team_id: uuid
}

"""aggregate max on columns"""
type team_roster_max_fields {
  player_steam_id: bigint
  team_id: uuid
}

"""
order by max() on columns of table "team_roster"
"""
input team_roster_max_order_by {
  player_steam_id: order_by
  team_id: order_by
}

"""aggregate min on columns"""
type team_roster_min_fields {
  player_steam_id: bigint
  team_id: uuid
}

"""
order by min() on columns of table "team_roster"
"""
input team_roster_min_order_by {
  player_steam_id: order_by
  team_id: order_by
}

"""
response of any mutation on the table "team_roster"
"""
type team_roster_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [team_roster!]!
}

"""
on_conflict condition type for table "team_roster"
"""
input team_roster_on_conflict {
  constraint: team_roster_constraint!
  update_columns: [team_roster_update_column!]! = []
  where: team_roster_bool_exp
}

"""Ordering options when selecting data from "team_roster"."""
input team_roster_order_by {
  player: players_order_by
  player_steam_id: order_by
  role: order_by
  team: teams_order_by
  team_id: order_by
}

"""primary key columns input for table: team_roster"""
input team_roster_pk_columns_input {
  player_steam_id: bigint!
  team_id: uuid!
}

"""
select columns of table "team_roster"
"""
enum team_roster_select_column {
  """column name"""
  player_steam_id

  """column name"""
  role

  """column name"""
  team_id
}

"""
input type for updating data in table "team_roster"
"""
input team_roster_set_input {
  player_steam_id: bigint
  role: e_team_roles_enum
  team_id: uuid
}

"""aggregate stddev on columns"""
type team_roster_stddev_fields {
  player_steam_id: Float
}

"""
order by stddev() on columns of table "team_roster"
"""
input team_roster_stddev_order_by {
  player_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type team_roster_stddev_pop_fields {
  player_steam_id: Float
}

"""
order by stddev_pop() on columns of table "team_roster"
"""
input team_roster_stddev_pop_order_by {
  player_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type team_roster_stddev_samp_fields {
  player_steam_id: Float
}

"""
order by stddev_samp() on columns of table "team_roster"
"""
input team_roster_stddev_samp_order_by {
  player_steam_id: order_by
}

"""
Streaming cursor of the table "team_roster"
"""
input team_roster_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: team_roster_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input team_roster_stream_cursor_value_input {
  player_steam_id: bigint
  role: e_team_roles_enum
  team_id: uuid
}

"""aggregate sum on columns"""
type team_roster_sum_fields {
  player_steam_id: bigint
}

"""
order by sum() on columns of table "team_roster"
"""
input team_roster_sum_order_by {
  player_steam_id: order_by
}

"""
update columns of table "team_roster"
"""
enum team_roster_update_column {
  """column name"""
  player_steam_id

  """column name"""
  role

  """column name"""
  team_id
}

input team_roster_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: team_roster_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: team_roster_set_input

  """filter the rows which have to be updated"""
  where: team_roster_bool_exp!
}

"""aggregate var_pop on columns"""
type team_roster_var_pop_fields {
  player_steam_id: Float
}

"""
order by var_pop() on columns of table "team_roster"
"""
input team_roster_var_pop_order_by {
  player_steam_id: order_by
}

"""aggregate var_samp on columns"""
type team_roster_var_samp_fields {
  player_steam_id: Float
}

"""
order by var_samp() on columns of table "team_roster"
"""
input team_roster_var_samp_order_by {
  player_steam_id: order_by
}

"""aggregate variance on columns"""
type team_roster_variance_fields {
  player_steam_id: Float
}

"""
order by variance() on columns of table "team_roster"
"""
input team_roster_variance_order_by {
  player_steam_id: order_by
}

"""
columns and relationships of "teams"
"""
type teams {
  """
  A computed field, executes function "can_change_team_role"
  """
  can_change_role: Boolean

  """
  A computed field, executes function "can_invite_to_team"
  """
  can_invite: Boolean

  """
  A computed field, executes function "can_remove_from_team"
  """
  can_remove: Boolean
  id: uuid!

  """An array relationship"""
  invites(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): [team_invites!]!

  """An aggregate relationship"""
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_invites_order_by!]

    """filter the rows returned"""
    where: team_invites_bool_exp
  ): team_invites_aggregate!

  """An array relationship"""
  match_lineups(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): [match_lineups!]!

  """An aggregate relationship"""
  match_lineups_aggregate(
    """distinct select on columns"""
    distinct_on: [match_lineups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_lineups_order_by!]

    """filter the rows returned"""
    where: match_lineups_bool_exp
  ): match_lineups_aggregate!

  """
  A computed field, executes function "get_team_matches"
  """
  matches(
    """distinct select on columns"""
    distinct_on: [matches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [matches_order_by!]

    """filter the rows returned"""
    where: matches_bool_exp
  ): [matches!]
  name: String!

  """An object relationship"""
  owner: players!
  owner_steam_id: bigint!

  """An array relationship"""
  roster(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): [team_roster!]!

  """An aggregate relationship"""
  roster_aggregate(
    """distinct select on columns"""
    distinct_on: [team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_roster_order_by!]

    """filter the rows returned"""
    where: team_roster_bool_exp
  ): team_roster_aggregate!
  short_name: String!

  """An array relationship"""
  tournament_teams(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): [tournament_teams!]!

  """An aggregate relationship"""
  tournament_teams_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): tournament_teams_aggregate!
}

"""
aggregated selection of "teams"
"""
type teams_aggregate {
  aggregate: teams_aggregate_fields
  nodes: [teams!]!
}

input teams_aggregate_bool_exp {
  count: teams_aggregate_bool_exp_count
}

input teams_aggregate_bool_exp_count {
  arguments: [teams_select_column!]
  distinct: Boolean
  filter: teams_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "teams"
"""
type teams_aggregate_fields {
  avg: teams_avg_fields
  count(columns: [teams_select_column!], distinct: Boolean): Int!
  max: teams_max_fields
  min: teams_min_fields
  stddev: teams_stddev_fields
  stddev_pop: teams_stddev_pop_fields
  stddev_samp: teams_stddev_samp_fields
  sum: teams_sum_fields
  var_pop: teams_var_pop_fields
  var_samp: teams_var_samp_fields
  variance: teams_variance_fields
}

"""
order by aggregate values of table "teams"
"""
input teams_aggregate_order_by {
  avg: teams_avg_order_by
  count: order_by
  max: teams_max_order_by
  min: teams_min_order_by
  stddev: teams_stddev_order_by
  stddev_pop: teams_stddev_pop_order_by
  stddev_samp: teams_stddev_samp_order_by
  sum: teams_sum_order_by
  var_pop: teams_var_pop_order_by
  var_samp: teams_var_samp_order_by
  variance: teams_variance_order_by
}

"""
input type for inserting array relation for remote table "teams"
"""
input teams_arr_rel_insert_input {
  data: [teams_insert_input!]!

  """upsert condition"""
  on_conflict: teams_on_conflict
}

"""aggregate avg on columns"""
type teams_avg_fields {
  owner_steam_id: Float
}

"""
order by avg() on columns of table "teams"
"""
input teams_avg_order_by {
  owner_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'.
"""
input teams_bool_exp {
  _and: [teams_bool_exp!]
  _not: teams_bool_exp
  _or: [teams_bool_exp!]
  can_change_role: Boolean_comparison_exp
  can_invite: Boolean_comparison_exp
  can_remove: Boolean_comparison_exp
  id: uuid_comparison_exp
  invites: team_invites_bool_exp
  invites_aggregate: team_invites_aggregate_bool_exp
  match_lineups: match_lineups_bool_exp
  match_lineups_aggregate: match_lineups_aggregate_bool_exp
  matches: matches_bool_exp
  name: String_comparison_exp
  owner: players_bool_exp
  owner_steam_id: bigint_comparison_exp
  roster: team_roster_bool_exp
  roster_aggregate: team_roster_aggregate_bool_exp
  short_name: String_comparison_exp
  tournament_teams: tournament_teams_bool_exp
  tournament_teams_aggregate: tournament_teams_aggregate_bool_exp
}

"""
unique or primary key constraints on table "teams"
"""
enum teams_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  teams_name_key

  """
  unique or primary key constraint on columns "id"
  """
  teams_pkey
}

"""
input type for incrementing numeric columns in table "teams"
"""
input teams_inc_input {
  owner_steam_id: bigint
}

"""
input type for inserting data into table "teams"
"""
input teams_insert_input {
  id: uuid
  invites: team_invites_arr_rel_insert_input
  match_lineups: match_lineups_arr_rel_insert_input
  name: String
  owner: players_obj_rel_insert_input
  owner_steam_id: bigint
  roster: team_roster_arr_rel_insert_input
  short_name: String
  tournament_teams: tournament_teams_arr_rel_insert_input
}

"""aggregate max on columns"""
type teams_max_fields {
  id: uuid
  name: String
  owner_steam_id: bigint
  short_name: String
}

"""
order by max() on columns of table "teams"
"""
input teams_max_order_by {
  id: order_by
  name: order_by
  owner_steam_id: order_by
  short_name: order_by
}

"""aggregate min on columns"""
type teams_min_fields {
  id: uuid
  name: String
  owner_steam_id: bigint
  short_name: String
}

"""
order by min() on columns of table "teams"
"""
input teams_min_order_by {
  id: order_by
  name: order_by
  owner_steam_id: order_by
  short_name: order_by
}

"""
response of any mutation on the table "teams"
"""
type teams_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [teams!]!
}

"""
input type for inserting object relation for remote table "teams"
"""
input teams_obj_rel_insert_input {
  data: teams_insert_input!

  """upsert condition"""
  on_conflict: teams_on_conflict
}

"""
on_conflict condition type for table "teams"
"""
input teams_on_conflict {
  constraint: teams_constraint!
  update_columns: [teams_update_column!]! = []
  where: teams_bool_exp
}

"""Ordering options when selecting data from "teams"."""
input teams_order_by {
  can_change_role: order_by
  can_invite: order_by
  can_remove: order_by
  id: order_by
  invites_aggregate: team_invites_aggregate_order_by
  match_lineups_aggregate: match_lineups_aggregate_order_by
  matches_aggregate: matches_aggregate_order_by
  name: order_by
  owner: players_order_by
  owner_steam_id: order_by
  roster_aggregate: team_roster_aggregate_order_by
  short_name: order_by
  tournament_teams_aggregate: tournament_teams_aggregate_order_by
}

"""primary key columns input for table: teams"""
input teams_pk_columns_input {
  id: uuid!
}

"""
select columns of table "teams"
"""
enum teams_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_steam_id

  """column name"""
  short_name
}

"""
input type for updating data in table "teams"
"""
input teams_set_input {
  id: uuid
  name: String
  owner_steam_id: bigint
  short_name: String
}

"""aggregate stddev on columns"""
type teams_stddev_fields {
  owner_steam_id: Float
}

"""
order by stddev() on columns of table "teams"
"""
input teams_stddev_order_by {
  owner_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type teams_stddev_pop_fields {
  owner_steam_id: Float
}

"""
order by stddev_pop() on columns of table "teams"
"""
input teams_stddev_pop_order_by {
  owner_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type teams_stddev_samp_fields {
  owner_steam_id: Float
}

"""
order by stddev_samp() on columns of table "teams"
"""
input teams_stddev_samp_order_by {
  owner_steam_id: order_by
}

"""
Streaming cursor of the table "teams"
"""
input teams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: teams_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input teams_stream_cursor_value_input {
  id: uuid
  name: String
  owner_steam_id: bigint
  short_name: String
}

"""aggregate sum on columns"""
type teams_sum_fields {
  owner_steam_id: bigint
}

"""
order by sum() on columns of table "teams"
"""
input teams_sum_order_by {
  owner_steam_id: order_by
}

"""
update columns of table "teams"
"""
enum teams_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_steam_id

  """column name"""
  short_name
}

input teams_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: teams_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: teams_set_input

  """filter the rows which have to be updated"""
  where: teams_bool_exp!
}

"""aggregate var_pop on columns"""
type teams_var_pop_fields {
  owner_steam_id: Float
}

"""
order by var_pop() on columns of table "teams"
"""
input teams_var_pop_order_by {
  owner_steam_id: order_by
}

"""aggregate var_samp on columns"""
type teams_var_samp_fields {
  owner_steam_id: Float
}

"""
order by var_samp() on columns of table "teams"
"""
input teams_var_samp_order_by {
  owner_steam_id: order_by
}

"""aggregate variance on columns"""
type teams_variance_fields {
  owner_steam_id: Float
}

"""
order by variance() on columns of table "teams"
"""
input teams_variance_order_by {
  owner_steam_id: order_by
}

scalar timestamp

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "tournament_brackets"
"""
type tournament_brackets {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  match: matches
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int!

  """An object relationship"""
  stage: tournament_stages!

  """An object relationship"""
  team_1: tournament_teams

  """An object relationship"""
  team_2: tournament_teams
  tournament_stage_id: uuid!
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""
aggregated selection of "tournament_brackets"
"""
type tournament_brackets_aggregate {
  aggregate: tournament_brackets_aggregate_fields
  nodes: [tournament_brackets!]!
}

input tournament_brackets_aggregate_bool_exp {
  count: tournament_brackets_aggregate_bool_exp_count
}

input tournament_brackets_aggregate_bool_exp_count {
  arguments: [tournament_brackets_select_column!]
  distinct: Boolean
  filter: tournament_brackets_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_brackets"
"""
type tournament_brackets_aggregate_fields {
  avg: tournament_brackets_avg_fields
  count(columns: [tournament_brackets_select_column!], distinct: Boolean): Int!
  max: tournament_brackets_max_fields
  min: tournament_brackets_min_fields
  stddev: tournament_brackets_stddev_fields
  stddev_pop: tournament_brackets_stddev_pop_fields
  stddev_samp: tournament_brackets_stddev_samp_fields
  sum: tournament_brackets_sum_fields
  var_pop: tournament_brackets_var_pop_fields
  var_samp: tournament_brackets_var_samp_fields
  variance: tournament_brackets_variance_fields
}

"""
order by aggregate values of table "tournament_brackets"
"""
input tournament_brackets_aggregate_order_by {
  avg: tournament_brackets_avg_order_by
  count: order_by
  max: tournament_brackets_max_order_by
  min: tournament_brackets_min_order_by
  stddev: tournament_brackets_stddev_order_by
  stddev_pop: tournament_brackets_stddev_pop_order_by
  stddev_samp: tournament_brackets_stddev_samp_order_by
  sum: tournament_brackets_sum_order_by
  var_pop: tournament_brackets_var_pop_order_by
  var_samp: tournament_brackets_var_samp_order_by
  variance: tournament_brackets_variance_order_by
}

"""
input type for inserting array relation for remote table "tournament_brackets"
"""
input tournament_brackets_arr_rel_insert_input {
  data: [tournament_brackets_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_brackets_on_conflict
}

"""aggregate avg on columns"""
type tournament_brackets_avg_fields {
  match_number: Float
  round: Float
}

"""
order by avg() on columns of table "tournament_brackets"
"""
input tournament_brackets_avg_order_by {
  match_number: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "tournament_brackets". All fields are combined with a logical 'AND'.
"""
input tournament_brackets_bool_exp {
  _and: [tournament_brackets_bool_exp!]
  _not: tournament_brackets_bool_exp
  _or: [tournament_brackets_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  match_number: Int_comparison_exp
  parent_bracket_id: uuid_comparison_exp
  round: Int_comparison_exp
  stage: tournament_stages_bool_exp
  team_1: tournament_teams_bool_exp
  team_2: tournament_teams_bool_exp
  tournament_stage_id: uuid_comparison_exp
  tournament_team_id_1: uuid_comparison_exp
  tournament_team_id_2: uuid_comparison_exp
}

"""
unique or primary key constraints on table "tournament_brackets"
"""
enum tournament_brackets_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  touarnment_brackets_pkey

  """
  unique or primary key constraint on columns "id", "tournament_team_id_1", "tournament_team_id_2"
  """
  tournament_brackets_id_tournament_team_id_1_tournament_team_id_
}

"""
input type for incrementing numeric columns in table "tournament_brackets"
"""
input tournament_brackets_inc_input {
  match_number: Int
  round: Int
}

"""
input type for inserting data into table "tournament_brackets"
"""
input tournament_brackets_insert_input {
  created_at: timestamptz
  id: uuid
  match: matches_obj_rel_insert_input
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int
  stage: tournament_stages_obj_rel_insert_input
  team_1: tournament_teams_obj_rel_insert_input
  team_2: tournament_teams_obj_rel_insert_input
  tournament_stage_id: uuid
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""aggregate max on columns"""
type tournament_brackets_max_fields {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int
  tournament_stage_id: uuid
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""
order by max() on columns of table "tournament_brackets"
"""
input tournament_brackets_max_order_by {
  created_at: order_by
  id: order_by
  match_id: order_by
  match_number: order_by
  parent_bracket_id: order_by
  round: order_by
  tournament_stage_id: order_by
  tournament_team_id_1: order_by
  tournament_team_id_2: order_by
}

"""aggregate min on columns"""
type tournament_brackets_min_fields {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int
  tournament_stage_id: uuid
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""
order by min() on columns of table "tournament_brackets"
"""
input tournament_brackets_min_order_by {
  created_at: order_by
  id: order_by
  match_id: order_by
  match_number: order_by
  parent_bracket_id: order_by
  round: order_by
  tournament_stage_id: order_by
  tournament_team_id_1: order_by
  tournament_team_id_2: order_by
}

"""
response of any mutation on the table "tournament_brackets"
"""
type tournament_brackets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_brackets!]!
}

"""
on_conflict condition type for table "tournament_brackets"
"""
input tournament_brackets_on_conflict {
  constraint: tournament_brackets_constraint!
  update_columns: [tournament_brackets_update_column!]! = []
  where: tournament_brackets_bool_exp
}

"""Ordering options when selecting data from "tournament_brackets"."""
input tournament_brackets_order_by {
  created_at: order_by
  id: order_by
  match: matches_order_by
  match_id: order_by
  match_number: order_by
  parent_bracket_id: order_by
  round: order_by
  stage: tournament_stages_order_by
  team_1: tournament_teams_order_by
  team_2: tournament_teams_order_by
  tournament_stage_id: order_by
  tournament_team_id_1: order_by
  tournament_team_id_2: order_by
}

"""primary key columns input for table: tournament_brackets"""
input tournament_brackets_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tournament_brackets"
"""
enum tournament_brackets_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_number

  """column name"""
  parent_bracket_id

  """column name"""
  round

  """column name"""
  tournament_stage_id

  """column name"""
  tournament_team_id_1

  """column name"""
  tournament_team_id_2
}

"""
input type for updating data in table "tournament_brackets"
"""
input tournament_brackets_set_input {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int
  tournament_stage_id: uuid
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""aggregate stddev on columns"""
type tournament_brackets_stddev_fields {
  match_number: Float
  round: Float
}

"""
order by stddev() on columns of table "tournament_brackets"
"""
input tournament_brackets_stddev_order_by {
  match_number: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_brackets_stddev_pop_fields {
  match_number: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "tournament_brackets"
"""
input tournament_brackets_stddev_pop_order_by {
  match_number: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_brackets_stddev_samp_fields {
  match_number: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "tournament_brackets"
"""
input tournament_brackets_stddev_samp_order_by {
  match_number: order_by
  round: order_by
}

"""
Streaming cursor of the table "tournament_brackets"
"""
input tournament_brackets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_brackets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_brackets_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  match_id: uuid
  match_number: Int
  parent_bracket_id: uuid
  round: Int
  tournament_stage_id: uuid
  tournament_team_id_1: uuid
  tournament_team_id_2: uuid
}

"""aggregate sum on columns"""
type tournament_brackets_sum_fields {
  match_number: Int
  round: Int
}

"""
order by sum() on columns of table "tournament_brackets"
"""
input tournament_brackets_sum_order_by {
  match_number: order_by
  round: order_by
}

"""
update columns of table "tournament_brackets"
"""
enum tournament_brackets_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  match_number

  """column name"""
  parent_bracket_id

  """column name"""
  round

  """column name"""
  tournament_stage_id

  """column name"""
  tournament_team_id_1

  """column name"""
  tournament_team_id_2
}

input tournament_brackets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_brackets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_brackets_set_input

  """filter the rows which have to be updated"""
  where: tournament_brackets_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_brackets_var_pop_fields {
  match_number: Float
  round: Float
}

"""
order by var_pop() on columns of table "tournament_brackets"
"""
input tournament_brackets_var_pop_order_by {
  match_number: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type tournament_brackets_var_samp_fields {
  match_number: Float
  round: Float
}

"""
order by var_samp() on columns of table "tournament_brackets"
"""
input tournament_brackets_var_samp_order_by {
  match_number: order_by
  round: order_by
}

"""aggregate variance on columns"""
type tournament_brackets_variance_fields {
  match_number: Float
  round: Float
}

"""
order by variance() on columns of table "tournament_brackets"
"""
input tournament_brackets_variance_order_by {
  match_number: order_by
  round: order_by
}

"""
columns and relationships of "tournament_organizers"
"""
type tournament_organizers {
  """An object relationship"""
  organizer: players!
  steam_id: bigint!

  """An object relationship"""
  tournament: tournaments!
  tournament_id: uuid!
}

"""
aggregated selection of "tournament_organizers"
"""
type tournament_organizers_aggregate {
  aggregate: tournament_organizers_aggregate_fields
  nodes: [tournament_organizers!]!
}

input tournament_organizers_aggregate_bool_exp {
  count: tournament_organizers_aggregate_bool_exp_count
}

input tournament_organizers_aggregate_bool_exp_count {
  arguments: [tournament_organizers_select_column!]
  distinct: Boolean
  filter: tournament_organizers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_organizers"
"""
type tournament_organizers_aggregate_fields {
  avg: tournament_organizers_avg_fields
  count(columns: [tournament_organizers_select_column!], distinct: Boolean): Int!
  max: tournament_organizers_max_fields
  min: tournament_organizers_min_fields
  stddev: tournament_organizers_stddev_fields
  stddev_pop: tournament_organizers_stddev_pop_fields
  stddev_samp: tournament_organizers_stddev_samp_fields
  sum: tournament_organizers_sum_fields
  var_pop: tournament_organizers_var_pop_fields
  var_samp: tournament_organizers_var_samp_fields
  variance: tournament_organizers_variance_fields
}

"""
order by aggregate values of table "tournament_organizers"
"""
input tournament_organizers_aggregate_order_by {
  avg: tournament_organizers_avg_order_by
  count: order_by
  max: tournament_organizers_max_order_by
  min: tournament_organizers_min_order_by
  stddev: tournament_organizers_stddev_order_by
  stddev_pop: tournament_organizers_stddev_pop_order_by
  stddev_samp: tournament_organizers_stddev_samp_order_by
  sum: tournament_organizers_sum_order_by
  var_pop: tournament_organizers_var_pop_order_by
  var_samp: tournament_organizers_var_samp_order_by
  variance: tournament_organizers_variance_order_by
}

"""
input type for inserting array relation for remote table "tournament_organizers"
"""
input tournament_organizers_arr_rel_insert_input {
  data: [tournament_organizers_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_organizers_on_conflict
}

"""aggregate avg on columns"""
type tournament_organizers_avg_fields {
  steam_id: Float
}

"""
order by avg() on columns of table "tournament_organizers"
"""
input tournament_organizers_avg_order_by {
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'.
"""
input tournament_organizers_bool_exp {
  _and: [tournament_organizers_bool_exp!]
  _not: tournament_organizers_bool_exp
  _or: [tournament_organizers_bool_exp!]
  organizer: players_bool_exp
  steam_id: bigint_comparison_exp
  tournament: tournaments_bool_exp
  tournament_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "tournament_organizers"
"""
enum tournament_organizers_constraint {
  """
  unique or primary key constraint on columns "steam_id", "tournament_id"
  """
  tournament_organizers_pkey
}

"""
input type for incrementing numeric columns in table "tournament_organizers"
"""
input tournament_organizers_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "tournament_organizers"
"""
input tournament_organizers_insert_input {
  organizer: players_obj_rel_insert_input
  steam_id: bigint
  tournament: tournaments_obj_rel_insert_input
  tournament_id: uuid
}

"""aggregate max on columns"""
type tournament_organizers_max_fields {
  steam_id: bigint
  tournament_id: uuid
}

"""
order by max() on columns of table "tournament_organizers"
"""
input tournament_organizers_max_order_by {
  steam_id: order_by
  tournament_id: order_by
}

"""aggregate min on columns"""
type tournament_organizers_min_fields {
  steam_id: bigint
  tournament_id: uuid
}

"""
order by min() on columns of table "tournament_organizers"
"""
input tournament_organizers_min_order_by {
  steam_id: order_by
  tournament_id: order_by
}

"""
response of any mutation on the table "tournament_organizers"
"""
type tournament_organizers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_organizers!]!
}

"""
on_conflict condition type for table "tournament_organizers"
"""
input tournament_organizers_on_conflict {
  constraint: tournament_organizers_constraint!
  update_columns: [tournament_organizers_update_column!]! = []
  where: tournament_organizers_bool_exp
}

"""Ordering options when selecting data from "tournament_organizers"."""
input tournament_organizers_order_by {
  organizer: players_order_by
  steam_id: order_by
  tournament: tournaments_order_by
  tournament_id: order_by
}

"""primary key columns input for table: tournament_organizers"""
input tournament_organizers_pk_columns_input {
  steam_id: bigint!
  tournament_id: uuid!
}

"""
select columns of table "tournament_organizers"
"""
enum tournament_organizers_select_column {
  """column name"""
  steam_id

  """column name"""
  tournament_id
}

"""
input type for updating data in table "tournament_organizers"
"""
input tournament_organizers_set_input {
  steam_id: bigint
  tournament_id: uuid
}

"""aggregate stddev on columns"""
type tournament_organizers_stddev_fields {
  steam_id: Float
}

"""
order by stddev() on columns of table "tournament_organizers"
"""
input tournament_organizers_stddev_order_by {
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_organizers_stddev_pop_fields {
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "tournament_organizers"
"""
input tournament_organizers_stddev_pop_order_by {
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_organizers_stddev_samp_fields {
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "tournament_organizers"
"""
input tournament_organizers_stddev_samp_order_by {
  steam_id: order_by
}

"""
Streaming cursor of the table "tournament_organizers"
"""
input tournament_organizers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_organizers_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_organizers_stream_cursor_value_input {
  steam_id: bigint
  tournament_id: uuid
}

"""aggregate sum on columns"""
type tournament_organizers_sum_fields {
  steam_id: bigint
}

"""
order by sum() on columns of table "tournament_organizers"
"""
input tournament_organizers_sum_order_by {
  steam_id: order_by
}

"""
update columns of table "tournament_organizers"
"""
enum tournament_organizers_update_column {
  """column name"""
  steam_id

  """column name"""
  tournament_id
}

input tournament_organizers_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_organizers_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_organizers_set_input

  """filter the rows which have to be updated"""
  where: tournament_organizers_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_organizers_var_pop_fields {
  steam_id: Float
}

"""
order by var_pop() on columns of table "tournament_organizers"
"""
input tournament_organizers_var_pop_order_by {
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type tournament_organizers_var_samp_fields {
  steam_id: Float
}

"""
order by var_samp() on columns of table "tournament_organizers"
"""
input tournament_organizers_var_samp_order_by {
  steam_id: order_by
}

"""aggregate variance on columns"""
type tournament_organizers_variance_fields {
  steam_id: Float
}

"""
order by variance() on columns of table "tournament_organizers"
"""
input tournament_organizers_variance_order_by {
  steam_id: order_by
}

"""
columns and relationships of "tournament_stages"
"""
type tournament_stages {
  """An array relationship"""
  brackets(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): [tournament_brackets!]!

  """An aggregate relationship"""
  brackets_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_brackets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_brackets_order_by!]

    """filter the rows returned"""
    where: tournament_brackets_bool_exp
  ): tournament_brackets_aggregate!

  """An object relationship"""
  e_tournament_stage_type: e_tournament_stage_types!
  id: uuid!
  max_teams: Int!
  min_teams: Int!
  order: Int!
  settings(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  tournament: tournaments!
  tournament_id: uuid!
  type: e_tournament_stage_types_enum!
}

"""
aggregated selection of "tournament_stages"
"""
type tournament_stages_aggregate {
  aggregate: tournament_stages_aggregate_fields
  nodes: [tournament_stages!]!
}

input tournament_stages_aggregate_bool_exp {
  count: tournament_stages_aggregate_bool_exp_count
}

input tournament_stages_aggregate_bool_exp_count {
  arguments: [tournament_stages_select_column!]
  distinct: Boolean
  filter: tournament_stages_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_stages"
"""
type tournament_stages_aggregate_fields {
  avg: tournament_stages_avg_fields
  count(columns: [tournament_stages_select_column!], distinct: Boolean): Int!
  max: tournament_stages_max_fields
  min: tournament_stages_min_fields
  stddev: tournament_stages_stddev_fields
  stddev_pop: tournament_stages_stddev_pop_fields
  stddev_samp: tournament_stages_stddev_samp_fields
  sum: tournament_stages_sum_fields
  var_pop: tournament_stages_var_pop_fields
  var_samp: tournament_stages_var_samp_fields
  variance: tournament_stages_variance_fields
}

"""
order by aggregate values of table "tournament_stages"
"""
input tournament_stages_aggregate_order_by {
  avg: tournament_stages_avg_order_by
  count: order_by
  max: tournament_stages_max_order_by
  min: tournament_stages_min_order_by
  stddev: tournament_stages_stddev_order_by
  stddev_pop: tournament_stages_stddev_pop_order_by
  stddev_samp: tournament_stages_stddev_samp_order_by
  sum: tournament_stages_sum_order_by
  var_pop: tournament_stages_var_pop_order_by
  var_samp: tournament_stages_var_samp_order_by
  variance: tournament_stages_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input tournament_stages_append_input {
  settings: jsonb
}

"""
input type for inserting array relation for remote table "tournament_stages"
"""
input tournament_stages_arr_rel_insert_input {
  data: [tournament_stages_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_stages_on_conflict
}

"""aggregate avg on columns"""
type tournament_stages_avg_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by avg() on columns of table "tournament_stages"
"""
input tournament_stages_avg_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""
Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'.
"""
input tournament_stages_bool_exp {
  _and: [tournament_stages_bool_exp!]
  _not: tournament_stages_bool_exp
  _or: [tournament_stages_bool_exp!]
  brackets: tournament_brackets_bool_exp
  brackets_aggregate: tournament_brackets_aggregate_bool_exp
  e_tournament_stage_type: e_tournament_stage_types_bool_exp
  id: uuid_comparison_exp
  max_teams: Int_comparison_exp
  min_teams: Int_comparison_exp
  order: Int_comparison_exp
  settings: jsonb_comparison_exp
  tournament: tournaments_bool_exp
  tournament_id: uuid_comparison_exp
  type: e_tournament_stage_types_enum_comparison_exp
}

"""
unique or primary key constraints on table "tournament_stages"
"""
enum tournament_stages_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tournament_stages_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input tournament_stages_delete_at_path_input {
  settings: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input tournament_stages_delete_elem_input {
  settings: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input tournament_stages_delete_key_input {
  settings: String
}

"""
input type for incrementing numeric columns in table "tournament_stages"
"""
input tournament_stages_inc_input {
  max_teams: Int
  min_teams: Int
  order: Int
}

"""
input type for inserting data into table "tournament_stages"
"""
input tournament_stages_insert_input {
  brackets: tournament_brackets_arr_rel_insert_input
  e_tournament_stage_type: e_tournament_stage_types_obj_rel_insert_input
  id: uuid
  max_teams: Int
  min_teams: Int
  order: Int
  settings: jsonb
  tournament: tournaments_obj_rel_insert_input
  tournament_id: uuid
  type: e_tournament_stage_types_enum
}

"""aggregate max on columns"""
type tournament_stages_max_fields {
  id: uuid
  max_teams: Int
  min_teams: Int
  order: Int
  tournament_id: uuid
}

"""
order by max() on columns of table "tournament_stages"
"""
input tournament_stages_max_order_by {
  id: order_by
  max_teams: order_by
  min_teams: order_by
  order: order_by
  tournament_id: order_by
}

"""aggregate min on columns"""
type tournament_stages_min_fields {
  id: uuid
  max_teams: Int
  min_teams: Int
  order: Int
  tournament_id: uuid
}

"""
order by min() on columns of table "tournament_stages"
"""
input tournament_stages_min_order_by {
  id: order_by
  max_teams: order_by
  min_teams: order_by
  order: order_by
  tournament_id: order_by
}

"""
response of any mutation on the table "tournament_stages"
"""
type tournament_stages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_stages!]!
}

"""
input type for inserting object relation for remote table "tournament_stages"
"""
input tournament_stages_obj_rel_insert_input {
  data: tournament_stages_insert_input!

  """upsert condition"""
  on_conflict: tournament_stages_on_conflict
}

"""
on_conflict condition type for table "tournament_stages"
"""
input tournament_stages_on_conflict {
  constraint: tournament_stages_constraint!
  update_columns: [tournament_stages_update_column!]! = []
  where: tournament_stages_bool_exp
}

"""Ordering options when selecting data from "tournament_stages"."""
input tournament_stages_order_by {
  brackets_aggregate: tournament_brackets_aggregate_order_by
  e_tournament_stage_type: e_tournament_stage_types_order_by
  id: order_by
  max_teams: order_by
  min_teams: order_by
  order: order_by
  settings: order_by
  tournament: tournaments_order_by
  tournament_id: order_by
  type: order_by
}

"""primary key columns input for table: tournament_stages"""
input tournament_stages_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input tournament_stages_prepend_input {
  settings: jsonb
}

"""
select columns of table "tournament_stages"
"""
enum tournament_stages_select_column {
  """column name"""
  id

  """column name"""
  max_teams

  """column name"""
  min_teams

  """column name"""
  order

  """column name"""
  settings

  """column name"""
  tournament_id

  """column name"""
  type
}

"""
input type for updating data in table "tournament_stages"
"""
input tournament_stages_set_input {
  id: uuid
  max_teams: Int
  min_teams: Int
  order: Int
  settings: jsonb
  tournament_id: uuid
  type: e_tournament_stage_types_enum
}

"""aggregate stddev on columns"""
type tournament_stages_stddev_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by stddev() on columns of table "tournament_stages"
"""
input tournament_stages_stddev_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_stages_stddev_pop_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by stddev_pop() on columns of table "tournament_stages"
"""
input tournament_stages_stddev_pop_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_stages_stddev_samp_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by stddev_samp() on columns of table "tournament_stages"
"""
input tournament_stages_stddev_samp_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""
Streaming cursor of the table "tournament_stages"
"""
input tournament_stages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_stages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_stages_stream_cursor_value_input {
  id: uuid
  max_teams: Int
  min_teams: Int
  order: Int
  settings: jsonb
  tournament_id: uuid
  type: e_tournament_stage_types_enum
}

"""aggregate sum on columns"""
type tournament_stages_sum_fields {
  max_teams: Int
  min_teams: Int
  order: Int
}

"""
order by sum() on columns of table "tournament_stages"
"""
input tournament_stages_sum_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""
update columns of table "tournament_stages"
"""
enum tournament_stages_update_column {
  """column name"""
  id

  """column name"""
  max_teams

  """column name"""
  min_teams

  """column name"""
  order

  """column name"""
  settings

  """column name"""
  tournament_id

  """column name"""
  type
}

input tournament_stages_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: tournament_stages_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: tournament_stages_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: tournament_stages_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: tournament_stages_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_stages_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: tournament_stages_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_stages_set_input

  """filter the rows which have to be updated"""
  where: tournament_stages_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_stages_var_pop_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by var_pop() on columns of table "tournament_stages"
"""
input tournament_stages_var_pop_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""aggregate var_samp on columns"""
type tournament_stages_var_samp_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by var_samp() on columns of table "tournament_stages"
"""
input tournament_stages_var_samp_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""aggregate variance on columns"""
type tournament_stages_variance_fields {
  max_teams: Float
  min_teams: Float
  order: Float
}

"""
order by variance() on columns of table "tournament_stages"
"""
input tournament_stages_variance_order_by {
  max_teams: order_by
  min_teams: order_by
  order: order_by
}

"""
columns and relationships of "tournament_team_invites"
"""
type tournament_team_invites {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  invited_by: players!
  invited_by_player_steam_id: bigint!

  """An object relationship"""
  player: players!
  steam_id: bigint!

  """An object relationship"""
  team: tournament_teams!
  tournament_team_id: uuid!
}

"""
aggregated selection of "tournament_team_invites"
"""
type tournament_team_invites_aggregate {
  aggregate: tournament_team_invites_aggregate_fields
  nodes: [tournament_team_invites!]!
}

input tournament_team_invites_aggregate_bool_exp {
  count: tournament_team_invites_aggregate_bool_exp_count
}

input tournament_team_invites_aggregate_bool_exp_count {
  arguments: [tournament_team_invites_select_column!]
  distinct: Boolean
  filter: tournament_team_invites_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_team_invites"
"""
type tournament_team_invites_aggregate_fields {
  avg: tournament_team_invites_avg_fields
  count(columns: [tournament_team_invites_select_column!], distinct: Boolean): Int!
  max: tournament_team_invites_max_fields
  min: tournament_team_invites_min_fields
  stddev: tournament_team_invites_stddev_fields
  stddev_pop: tournament_team_invites_stddev_pop_fields
  stddev_samp: tournament_team_invites_stddev_samp_fields
  sum: tournament_team_invites_sum_fields
  var_pop: tournament_team_invites_var_pop_fields
  var_samp: tournament_team_invites_var_samp_fields
  variance: tournament_team_invites_variance_fields
}

"""
order by aggregate values of table "tournament_team_invites"
"""
input tournament_team_invites_aggregate_order_by {
  avg: tournament_team_invites_avg_order_by
  count: order_by
  max: tournament_team_invites_max_order_by
  min: tournament_team_invites_min_order_by
  stddev: tournament_team_invites_stddev_order_by
  stddev_pop: tournament_team_invites_stddev_pop_order_by
  stddev_samp: tournament_team_invites_stddev_samp_order_by
  sum: tournament_team_invites_sum_order_by
  var_pop: tournament_team_invites_var_pop_order_by
  var_samp: tournament_team_invites_var_samp_order_by
  variance: tournament_team_invites_variance_order_by
}

"""
input type for inserting array relation for remote table "tournament_team_invites"
"""
input tournament_team_invites_arr_rel_insert_input {
  data: [tournament_team_invites_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_team_invites_on_conflict
}

"""aggregate avg on columns"""
type tournament_team_invites_avg_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by avg() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_avg_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Boolean expression to filter rows from the table "tournament_team_invites". All fields are combined with a logical 'AND'.
"""
input tournament_team_invites_bool_exp {
  _and: [tournament_team_invites_bool_exp!]
  _not: tournament_team_invites_bool_exp
  _or: [tournament_team_invites_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  invited_by: players_bool_exp
  invited_by_player_steam_id: bigint_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
  team: tournament_teams_bool_exp
  tournament_team_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "tournament_team_invites"
"""
enum tournament_team_invites_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tournament_team_invites_pkey

  """
  unique or primary key constraint on columns "steam_id", "tournament_team_id"
  """
  tournament_team_invites_steam_id_tournament_team_id_key
}

"""
input type for incrementing numeric columns in table "tournament_team_invites"
"""
input tournament_team_invites_inc_input {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
input type for inserting data into table "tournament_team_invites"
"""
input tournament_team_invites_insert_input {
  created_at: timestamptz
  id: uuid
  invited_by: players_obj_rel_insert_input
  invited_by_player_steam_id: bigint
  player: players_obj_rel_insert_input
  steam_id: bigint
  team: tournament_teams_obj_rel_insert_input
  tournament_team_id: uuid
}

"""aggregate max on columns"""
type tournament_team_invites_max_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  tournament_team_id: uuid
}

"""
order by max() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_max_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  steam_id: order_by
  tournament_team_id: order_by
}

"""aggregate min on columns"""
type tournament_team_invites_min_fields {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  tournament_team_id: uuid
}

"""
order by min() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_min_order_by {
  created_at: order_by
  id: order_by
  invited_by_player_steam_id: order_by
  steam_id: order_by
  tournament_team_id: order_by
}

"""
response of any mutation on the table "tournament_team_invites"
"""
type tournament_team_invites_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_team_invites!]!
}

"""
on_conflict condition type for table "tournament_team_invites"
"""
input tournament_team_invites_on_conflict {
  constraint: tournament_team_invites_constraint!
  update_columns: [tournament_team_invites_update_column!]! = []
  where: tournament_team_invites_bool_exp
}

"""Ordering options when selecting data from "tournament_team_invites"."""
input tournament_team_invites_order_by {
  created_at: order_by
  id: order_by
  invited_by: players_order_by
  invited_by_player_steam_id: order_by
  player: players_order_by
  steam_id: order_by
  team: tournament_teams_order_by
  tournament_team_id: order_by
}

"""primary key columns input for table: tournament_team_invites"""
input tournament_team_invites_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tournament_team_invites"
"""
enum tournament_team_invites_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  steam_id

  """column name"""
  tournament_team_id
}

"""
input type for updating data in table "tournament_team_invites"
"""
input tournament_team_invites_set_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  tournament_team_id: uuid
}

"""aggregate stddev on columns"""
type tournament_team_invites_stddev_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_stddev_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_team_invites_stddev_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_pop() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_stddev_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_team_invites_stddev_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by stddev_samp() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_stddev_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
Streaming cursor of the table "tournament_team_invites"
"""
input tournament_team_invites_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_team_invites_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_team_invites_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  invited_by_player_steam_id: bigint
  steam_id: bigint
  tournament_team_id: uuid
}

"""aggregate sum on columns"""
type tournament_team_invites_sum_fields {
  invited_by_player_steam_id: bigint
  steam_id: bigint
}

"""
order by sum() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_sum_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
update columns of table "tournament_team_invites"
"""
enum tournament_team_invites_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  invited_by_player_steam_id

  """column name"""
  steam_id

  """column name"""
  tournament_team_id
}

input tournament_team_invites_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_team_invites_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_team_invites_set_input

  """filter the rows which have to be updated"""
  where: tournament_team_invites_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_team_invites_var_pop_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_pop() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_var_pop_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate var_samp on columns"""
type tournament_team_invites_var_samp_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by var_samp() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_var_samp_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""aggregate variance on columns"""
type tournament_team_invites_variance_fields {
  invited_by_player_steam_id: Float
  steam_id: Float
}

"""
order by variance() on columns of table "tournament_team_invites"
"""
input tournament_team_invites_variance_order_by {
  invited_by_player_steam_id: order_by
  steam_id: order_by
}

"""
columns and relationships of "tournament_team_roster"
"""
type tournament_team_roster {
  """An object relationship"""
  e_team_role: e_team_roles!

  """An object relationship"""
  player: players!
  player_steam_id: bigint!
  role: e_team_roles_enum!

  """An object relationship"""
  tournament: tournaments!
  tournament_id: uuid!

  """An object relationship"""
  tournament_team: tournament_teams!
  tournament_team_id: uuid!
}

"""
aggregated selection of "tournament_team_roster"
"""
type tournament_team_roster_aggregate {
  aggregate: tournament_team_roster_aggregate_fields
  nodes: [tournament_team_roster!]!
}

input tournament_team_roster_aggregate_bool_exp {
  count: tournament_team_roster_aggregate_bool_exp_count
}

input tournament_team_roster_aggregate_bool_exp_count {
  arguments: [tournament_team_roster_select_column!]
  distinct: Boolean
  filter: tournament_team_roster_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_team_roster"
"""
type tournament_team_roster_aggregate_fields {
  avg: tournament_team_roster_avg_fields
  count(columns: [tournament_team_roster_select_column!], distinct: Boolean): Int!
  max: tournament_team_roster_max_fields
  min: tournament_team_roster_min_fields
  stddev: tournament_team_roster_stddev_fields
  stddev_pop: tournament_team_roster_stddev_pop_fields
  stddev_samp: tournament_team_roster_stddev_samp_fields
  sum: tournament_team_roster_sum_fields
  var_pop: tournament_team_roster_var_pop_fields
  var_samp: tournament_team_roster_var_samp_fields
  variance: tournament_team_roster_variance_fields
}

"""
order by aggregate values of table "tournament_team_roster"
"""
input tournament_team_roster_aggregate_order_by {
  avg: tournament_team_roster_avg_order_by
  count: order_by
  max: tournament_team_roster_max_order_by
  min: tournament_team_roster_min_order_by
  stddev: tournament_team_roster_stddev_order_by
  stddev_pop: tournament_team_roster_stddev_pop_order_by
  stddev_samp: tournament_team_roster_stddev_samp_order_by
  sum: tournament_team_roster_sum_order_by
  var_pop: tournament_team_roster_var_pop_order_by
  var_samp: tournament_team_roster_var_samp_order_by
  variance: tournament_team_roster_variance_order_by
}

"""
input type for inserting array relation for remote table "tournament_team_roster"
"""
input tournament_team_roster_arr_rel_insert_input {
  data: [tournament_team_roster_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_team_roster_on_conflict
}

"""aggregate avg on columns"""
type tournament_team_roster_avg_fields {
  player_steam_id: Float
}

"""
order by avg() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_avg_order_by {
  player_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "tournament_team_roster". All fields are combined with a logical 'AND'.
"""
input tournament_team_roster_bool_exp {
  _and: [tournament_team_roster_bool_exp!]
  _not: tournament_team_roster_bool_exp
  _or: [tournament_team_roster_bool_exp!]
  e_team_role: e_team_roles_bool_exp
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  role: e_team_roles_enum_comparison_exp
  tournament: tournaments_bool_exp
  tournament_id: uuid_comparison_exp
  tournament_team: tournament_teams_bool_exp
  tournament_team_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "tournament_team_roster"
"""
enum tournament_team_roster_constraint {
  """
  unique or primary key constraint on columns "player_steam_id", "tournament_id"
  """
  tournament_roster_pkey

  """
  unique or primary key constraint on columns "player_steam_id", "tournament_id"
  """
  tournament_roster_player_steam_id_tournament_id_key
}

"""
input type for incrementing numeric columns in table "tournament_team_roster"
"""
input tournament_team_roster_inc_input {
  player_steam_id: bigint
}

"""
input type for inserting data into table "tournament_team_roster"
"""
input tournament_team_roster_insert_input {
  e_team_role: e_team_roles_obj_rel_insert_input
  player: players_obj_rel_insert_input
  player_steam_id: bigint
  role: e_team_roles_enum
  tournament: tournaments_obj_rel_insert_input
  tournament_id: uuid
  tournament_team: tournament_teams_obj_rel_insert_input
  tournament_team_id: uuid
}

"""aggregate max on columns"""
type tournament_team_roster_max_fields {
  player_steam_id: bigint
  tournament_id: uuid
  tournament_team_id: uuid
}

"""
order by max() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_max_order_by {
  player_steam_id: order_by
  tournament_id: order_by
  tournament_team_id: order_by
}

"""aggregate min on columns"""
type tournament_team_roster_min_fields {
  player_steam_id: bigint
  tournament_id: uuid
  tournament_team_id: uuid
}

"""
order by min() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_min_order_by {
  player_steam_id: order_by
  tournament_id: order_by
  tournament_team_id: order_by
}

"""
response of any mutation on the table "tournament_team_roster"
"""
type tournament_team_roster_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_team_roster!]!
}

"""
on_conflict condition type for table "tournament_team_roster"
"""
input tournament_team_roster_on_conflict {
  constraint: tournament_team_roster_constraint!
  update_columns: [tournament_team_roster_update_column!]! = []
  where: tournament_team_roster_bool_exp
}

"""Ordering options when selecting data from "tournament_team_roster"."""
input tournament_team_roster_order_by {
  e_team_role: e_team_roles_order_by
  player: players_order_by
  player_steam_id: order_by
  role: order_by
  tournament: tournaments_order_by
  tournament_id: order_by
  tournament_team: tournament_teams_order_by
  tournament_team_id: order_by
}

"""primary key columns input for table: tournament_team_roster"""
input tournament_team_roster_pk_columns_input {
  player_steam_id: bigint!
  tournament_id: uuid!
}

"""
select columns of table "tournament_team_roster"
"""
enum tournament_team_roster_select_column {
  """column name"""
  player_steam_id

  """column name"""
  role

  """column name"""
  tournament_id

  """column name"""
  tournament_team_id
}

"""
input type for updating data in table "tournament_team_roster"
"""
input tournament_team_roster_set_input {
  player_steam_id: bigint
  role: e_team_roles_enum
  tournament_id: uuid
  tournament_team_id: uuid
}

"""aggregate stddev on columns"""
type tournament_team_roster_stddev_fields {
  player_steam_id: Float
}

"""
order by stddev() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_stddev_order_by {
  player_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_team_roster_stddev_pop_fields {
  player_steam_id: Float
}

"""
order by stddev_pop() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_stddev_pop_order_by {
  player_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_team_roster_stddev_samp_fields {
  player_steam_id: Float
}

"""
order by stddev_samp() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_stddev_samp_order_by {
  player_steam_id: order_by
}

"""
Streaming cursor of the table "tournament_team_roster"
"""
input tournament_team_roster_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_team_roster_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_team_roster_stream_cursor_value_input {
  player_steam_id: bigint
  role: e_team_roles_enum
  tournament_id: uuid
  tournament_team_id: uuid
}

"""aggregate sum on columns"""
type tournament_team_roster_sum_fields {
  player_steam_id: bigint
}

"""
order by sum() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_sum_order_by {
  player_steam_id: order_by
}

"""
update columns of table "tournament_team_roster"
"""
enum tournament_team_roster_update_column {
  """column name"""
  player_steam_id

  """column name"""
  role

  """column name"""
  tournament_id

  """column name"""
  tournament_team_id
}

input tournament_team_roster_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_team_roster_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_team_roster_set_input

  """filter the rows which have to be updated"""
  where: tournament_team_roster_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_team_roster_var_pop_fields {
  player_steam_id: Float
}

"""
order by var_pop() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_var_pop_order_by {
  player_steam_id: order_by
}

"""aggregate var_samp on columns"""
type tournament_team_roster_var_samp_fields {
  player_steam_id: Float
}

"""
order by var_samp() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_var_samp_order_by {
  player_steam_id: order_by
}

"""aggregate variance on columns"""
type tournament_team_roster_variance_fields {
  player_steam_id: Float
}

"""
order by variance() on columns of table "tournament_team_roster"
"""
input tournament_team_roster_variance_order_by {
  player_steam_id: order_by
}

"""
columns and relationships of "tournament_teams"
"""
type tournament_teams {
  """
  A computed field, executes function "can_manage_tournament_team"
  """
  can_manage: Boolean

  """An object relationship"""
  creator: players!
  eligible_at: timestamptz
  id: uuid!

  """An array relationship"""
  invites(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): [tournament_team_invites!]!

  """An aggregate relationship"""
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_invites_order_by!]

    """filter the rows returned"""
    where: tournament_team_invites_bool_exp
  ): tournament_team_invites_aggregate!
  name: String!
  owner_steam_id: bigint!

  """An array relationship"""
  roster(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """An aggregate relationship"""
  roster_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!
  seed: Int

  """An object relationship"""
  team: teams
  team_id: uuid

  """An object relationship"""
  tournament: tournaments!
  tournament_id: uuid!
}

"""
aggregated selection of "tournament_teams"
"""
type tournament_teams_aggregate {
  aggregate: tournament_teams_aggregate_fields
  nodes: [tournament_teams!]!
}

input tournament_teams_aggregate_bool_exp {
  count: tournament_teams_aggregate_bool_exp_count
}

input tournament_teams_aggregate_bool_exp_count {
  arguments: [tournament_teams_select_column!]
  distinct: Boolean
  filter: tournament_teams_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournament_teams"
"""
type tournament_teams_aggregate_fields {
  avg: tournament_teams_avg_fields
  count(columns: [tournament_teams_select_column!], distinct: Boolean): Int!
  max: tournament_teams_max_fields
  min: tournament_teams_min_fields
  stddev: tournament_teams_stddev_fields
  stddev_pop: tournament_teams_stddev_pop_fields
  stddev_samp: tournament_teams_stddev_samp_fields
  sum: tournament_teams_sum_fields
  var_pop: tournament_teams_var_pop_fields
  var_samp: tournament_teams_var_samp_fields
  variance: tournament_teams_variance_fields
}

"""
order by aggregate values of table "tournament_teams"
"""
input tournament_teams_aggregate_order_by {
  avg: tournament_teams_avg_order_by
  count: order_by
  max: tournament_teams_max_order_by
  min: tournament_teams_min_order_by
  stddev: tournament_teams_stddev_order_by
  stddev_pop: tournament_teams_stddev_pop_order_by
  stddev_samp: tournament_teams_stddev_samp_order_by
  sum: tournament_teams_sum_order_by
  var_pop: tournament_teams_var_pop_order_by
  var_samp: tournament_teams_var_samp_order_by
  variance: tournament_teams_variance_order_by
}

"""
input type for inserting array relation for remote table "tournament_teams"
"""
input tournament_teams_arr_rel_insert_input {
  data: [tournament_teams_insert_input!]!

  """upsert condition"""
  on_conflict: tournament_teams_on_conflict
}

"""aggregate avg on columns"""
type tournament_teams_avg_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by avg() on columns of table "tournament_teams"
"""
input tournament_teams_avg_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""
Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'.
"""
input tournament_teams_bool_exp {
  _and: [tournament_teams_bool_exp!]
  _not: tournament_teams_bool_exp
  _or: [tournament_teams_bool_exp!]
  can_manage: Boolean_comparison_exp
  creator: players_bool_exp
  eligible_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  invites: tournament_team_invites_bool_exp
  invites_aggregate: tournament_team_invites_aggregate_bool_exp
  name: String_comparison_exp
  owner_steam_id: bigint_comparison_exp
  roster: tournament_team_roster_bool_exp
  roster_aggregate: tournament_team_roster_aggregate_bool_exp
  seed: Int_comparison_exp
  team: teams_bool_exp
  team_id: uuid_comparison_exp
  tournament: tournaments_bool_exp
  tournament_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "tournament_teams"
"""
enum tournament_teams_constraint {
  """
  unique or primary key constraint on columns "tournament_id", "owner_steam_id"
  """
  tournament_teams_creator_steam_id_tournament_id_key

  """
  unique or primary key constraint on columns "id"
  """
  tournament_teams_pkey

  """
  unique or primary key constraint on columns "tournament_id", "name"
  """
  tournament_teams_tournament_id_name_key

  """
  unique or primary key constraint on columns "tournament_id", "team_id"
  """
  tournament_teams_tournament_id_team_id_key
}

"""
input type for incrementing numeric columns in table "tournament_teams"
"""
input tournament_teams_inc_input {
  owner_steam_id: bigint
  seed: Int
}

"""
input type for inserting data into table "tournament_teams"
"""
input tournament_teams_insert_input {
  creator: players_obj_rel_insert_input
  eligible_at: timestamptz
  id: uuid
  invites: tournament_team_invites_arr_rel_insert_input
  name: String
  owner_steam_id: bigint
  roster: tournament_team_roster_arr_rel_insert_input
  seed: Int
  team: teams_obj_rel_insert_input
  team_id: uuid
  tournament: tournaments_obj_rel_insert_input
  tournament_id: uuid
}

"""aggregate max on columns"""
type tournament_teams_max_fields {
  eligible_at: timestamptz
  id: uuid
  name: String
  owner_steam_id: bigint
  seed: Int
  team_id: uuid
  tournament_id: uuid
}

"""
order by max() on columns of table "tournament_teams"
"""
input tournament_teams_max_order_by {
  eligible_at: order_by
  id: order_by
  name: order_by
  owner_steam_id: order_by
  seed: order_by
  team_id: order_by
  tournament_id: order_by
}

"""aggregate min on columns"""
type tournament_teams_min_fields {
  eligible_at: timestamptz
  id: uuid
  name: String
  owner_steam_id: bigint
  seed: Int
  team_id: uuid
  tournament_id: uuid
}

"""
order by min() on columns of table "tournament_teams"
"""
input tournament_teams_min_order_by {
  eligible_at: order_by
  id: order_by
  name: order_by
  owner_steam_id: order_by
  seed: order_by
  team_id: order_by
  tournament_id: order_by
}

"""
response of any mutation on the table "tournament_teams"
"""
type tournament_teams_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournament_teams!]!
}

"""
input type for inserting object relation for remote table "tournament_teams"
"""
input tournament_teams_obj_rel_insert_input {
  data: tournament_teams_insert_input!

  """upsert condition"""
  on_conflict: tournament_teams_on_conflict
}

"""
on_conflict condition type for table "tournament_teams"
"""
input tournament_teams_on_conflict {
  constraint: tournament_teams_constraint!
  update_columns: [tournament_teams_update_column!]! = []
  where: tournament_teams_bool_exp
}

"""Ordering options when selecting data from "tournament_teams"."""
input tournament_teams_order_by {
  can_manage: order_by
  creator: players_order_by
  eligible_at: order_by
  id: order_by
  invites_aggregate: tournament_team_invites_aggregate_order_by
  name: order_by
  owner_steam_id: order_by
  roster_aggregate: tournament_team_roster_aggregate_order_by
  seed: order_by
  team: teams_order_by
  team_id: order_by
  tournament: tournaments_order_by
  tournament_id: order_by
}

"""primary key columns input for table: tournament_teams"""
input tournament_teams_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tournament_teams"
"""
enum tournament_teams_select_column {
  """column name"""
  eligible_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_steam_id

  """column name"""
  seed

  """column name"""
  team_id

  """column name"""
  tournament_id
}

"""
input type for updating data in table "tournament_teams"
"""
input tournament_teams_set_input {
  eligible_at: timestamptz
  id: uuid
  name: String
  owner_steam_id: bigint
  seed: Int
  team_id: uuid
  tournament_id: uuid
}

"""aggregate stddev on columns"""
type tournament_teams_stddev_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by stddev() on columns of table "tournament_teams"
"""
input tournament_teams_stddev_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""aggregate stddev_pop on columns"""
type tournament_teams_stddev_pop_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by stddev_pop() on columns of table "tournament_teams"
"""
input tournament_teams_stddev_pop_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""aggregate stddev_samp on columns"""
type tournament_teams_stddev_samp_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by stddev_samp() on columns of table "tournament_teams"
"""
input tournament_teams_stddev_samp_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""
Streaming cursor of the table "tournament_teams"
"""
input tournament_teams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournament_teams_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournament_teams_stream_cursor_value_input {
  eligible_at: timestamptz
  id: uuid
  name: String
  owner_steam_id: bigint
  seed: Int
  team_id: uuid
  tournament_id: uuid
}

"""aggregate sum on columns"""
type tournament_teams_sum_fields {
  owner_steam_id: bigint
  seed: Int
}

"""
order by sum() on columns of table "tournament_teams"
"""
input tournament_teams_sum_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""
update columns of table "tournament_teams"
"""
enum tournament_teams_update_column {
  """column name"""
  eligible_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_steam_id

  """column name"""
  seed

  """column name"""
  team_id

  """column name"""
  tournament_id
}

input tournament_teams_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournament_teams_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournament_teams_set_input

  """filter the rows which have to be updated"""
  where: tournament_teams_bool_exp!
}

"""aggregate var_pop on columns"""
type tournament_teams_var_pop_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by var_pop() on columns of table "tournament_teams"
"""
input tournament_teams_var_pop_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""aggregate var_samp on columns"""
type tournament_teams_var_samp_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by var_samp() on columns of table "tournament_teams"
"""
input tournament_teams_var_samp_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""aggregate variance on columns"""
type tournament_teams_variance_fields {
  owner_steam_id: Float
  seed: Float
}

"""
order by variance() on columns of table "tournament_teams"
"""
input tournament_teams_variance_order_by {
  owner_steam_id: order_by
  seed: order_by
}

"""
columns and relationships of "tournaments"
"""
type tournaments {
  """An object relationship"""
  admin: players!

  """
  A computed field, executes function "can_cancel_tournament"
  """
  can_cancel: Boolean

  """
  A computed field, executes function "can_close_tournament_registration"
  """
  can_close_registration: Boolean

  """
  A computed field, executes function "can_join_tournament"
  """
  can_join: Boolean

  """
  A computed field, executes function "can_open_tournament_registration"
  """
  can_open_registration: Boolean
  description: String

  """An object relationship"""
  e_tournament_status: e_tournament_status!

  """
  A computed field, executes function "tournament_has_min_teams"
  """
  has_min_teams: Boolean
  id: uuid!

  """
  A computed field, executes function "is_tournament_organizer"
  """
  is_organizer: Boolean
  match_options_id: uuid!

  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  name: String!

  """An object relationship"""
  options: match_options!
  organizer_steam_id: bigint!

  """An array relationship"""
  organizers(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): [tournament_organizers!]!

  """An aggregate relationship"""
  organizers_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_organizers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_organizers_order_by!]

    """filter the rows returned"""
    where: tournament_organizers_bool_exp
  ): tournament_organizers_aggregate!

  """An array relationship"""
  rosters(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): [tournament_team_roster!]!

  """An aggregate relationship"""
  rosters_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_team_roster_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_team_roster_order_by!]

    """filter the rows returned"""
    where: tournament_team_roster_bool_exp
  ): tournament_team_roster_aggregate!

  """An array relationship"""
  stages(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): [tournament_stages!]!

  """An aggregate relationship"""
  stages_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_stages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_stages_order_by!]

    """filter the rows returned"""
    where: tournament_stages_bool_exp
  ): tournament_stages_aggregate!
  start: timestamptz!
  status: e_tournament_status_enum!

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): [tournament_teams!]!

  """An aggregate relationship"""
  teams_aggregate(
    """distinct select on columns"""
    distinct_on: [tournament_teams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tournament_teams_order_by!]

    """filter the rows returned"""
    where: tournament_teams_bool_exp
  ): tournament_teams_aggregate!
}

"""
aggregated selection of "tournaments"
"""
type tournaments_aggregate {
  aggregate: tournaments_aggregate_fields
  nodes: [tournaments!]!
}

input tournaments_aggregate_bool_exp {
  count: tournaments_aggregate_bool_exp_count
}

input tournaments_aggregate_bool_exp_count {
  arguments: [tournaments_select_column!]
  distinct: Boolean
  filter: tournaments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tournaments"
"""
type tournaments_aggregate_fields {
  avg: tournaments_avg_fields
  count(columns: [tournaments_select_column!], distinct: Boolean): Int!
  max: tournaments_max_fields
  min: tournaments_min_fields
  stddev: tournaments_stddev_fields
  stddev_pop: tournaments_stddev_pop_fields
  stddev_samp: tournaments_stddev_samp_fields
  sum: tournaments_sum_fields
  var_pop: tournaments_var_pop_fields
  var_samp: tournaments_var_samp_fields
  variance: tournaments_variance_fields
}

"""
order by aggregate values of table "tournaments"
"""
input tournaments_aggregate_order_by {
  avg: tournaments_avg_order_by
  count: order_by
  max: tournaments_max_order_by
  min: tournaments_min_order_by
  stddev: tournaments_stddev_order_by
  stddev_pop: tournaments_stddev_pop_order_by
  stddev_samp: tournaments_stddev_samp_order_by
  sum: tournaments_sum_order_by
  var_pop: tournaments_var_pop_order_by
  var_samp: tournaments_var_samp_order_by
  variance: tournaments_variance_order_by
}

"""
input type for inserting array relation for remote table "tournaments"
"""
input tournaments_arr_rel_insert_input {
  data: [tournaments_insert_input!]!

  """upsert condition"""
  on_conflict: tournaments_on_conflict
}

"""aggregate avg on columns"""
type tournaments_avg_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by avg() on columns of table "tournaments"
"""
input tournaments_avg_order_by {
  organizer_steam_id: order_by
}

"""
Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'.
"""
input tournaments_bool_exp {
  _and: [tournaments_bool_exp!]
  _not: tournaments_bool_exp
  _or: [tournaments_bool_exp!]
  admin: players_bool_exp
  can_cancel: Boolean_comparison_exp
  can_close_registration: Boolean_comparison_exp
  can_join: Boolean_comparison_exp
  can_open_registration: Boolean_comparison_exp
  description: String_comparison_exp
  e_tournament_status: e_tournament_status_bool_exp
  has_min_teams: Boolean_comparison_exp
  id: uuid_comparison_exp
  is_organizer: Boolean_comparison_exp
  match_options_id: uuid_comparison_exp
  max_players_per_lineup: Int_comparison_exp
  min_players_per_lineup: Int_comparison_exp
  name: String_comparison_exp
  options: match_options_bool_exp
  organizer_steam_id: bigint_comparison_exp
  organizers: tournament_organizers_bool_exp
  organizers_aggregate: tournament_organizers_aggregate_bool_exp
  rosters: tournament_team_roster_bool_exp
  rosters_aggregate: tournament_team_roster_aggregate_bool_exp
  stages: tournament_stages_bool_exp
  stages_aggregate: tournament_stages_aggregate_bool_exp
  start: timestamptz_comparison_exp
  status: e_tournament_status_enum_comparison_exp
  teams: tournament_teams_bool_exp
  teams_aggregate: tournament_teams_aggregate_bool_exp
}

"""
unique or primary key constraints on table "tournaments"
"""
enum tournaments_constraint {
  """
  unique or primary key constraint on columns "match_options_id"
  """
  tournaments_match_options_id_key

  """
  unique or primary key constraint on columns "id"
  """
  tournaments_pkey
}

"""
input type for incrementing numeric columns in table "tournaments"
"""
input tournaments_inc_input {
  organizer_steam_id: bigint
}

"""
input type for inserting data into table "tournaments"
"""
input tournaments_insert_input {
  admin: players_obj_rel_insert_input
  description: String
  e_tournament_status: e_tournament_status_obj_rel_insert_input
  id: uuid
  match_options_id: uuid
  name: String
  options: match_options_obj_rel_insert_input
  organizer_steam_id: bigint
  organizers: tournament_organizers_arr_rel_insert_input
  rosters: tournament_team_roster_arr_rel_insert_input
  stages: tournament_stages_arr_rel_insert_input
  start: timestamptz
  status: e_tournament_status_enum
  teams: tournament_teams_arr_rel_insert_input
}

"""aggregate max on columns"""
type tournaments_max_fields {
  description: String
  id: uuid
  match_options_id: uuid

  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  name: String
  organizer_steam_id: bigint
  start: timestamptz
}

"""
order by max() on columns of table "tournaments"
"""
input tournaments_max_order_by {
  description: order_by
  id: order_by
  match_options_id: order_by
  name: order_by
  organizer_steam_id: order_by
  start: order_by
}

"""aggregate min on columns"""
type tournaments_min_fields {
  description: String
  id: uuid
  match_options_id: uuid

  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  name: String
  organizer_steam_id: bigint
  start: timestamptz
}

"""
order by min() on columns of table "tournaments"
"""
input tournaments_min_order_by {
  description: order_by
  id: order_by
  match_options_id: order_by
  name: order_by
  organizer_steam_id: order_by
  start: order_by
}

"""
response of any mutation on the table "tournaments"
"""
type tournaments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tournaments!]!
}

"""
input type for inserting object relation for remote table "tournaments"
"""
input tournaments_obj_rel_insert_input {
  data: tournaments_insert_input!

  """upsert condition"""
  on_conflict: tournaments_on_conflict
}

"""
on_conflict condition type for table "tournaments"
"""
input tournaments_on_conflict {
  constraint: tournaments_constraint!
  update_columns: [tournaments_update_column!]! = []
  where: tournaments_bool_exp
}

"""Ordering options when selecting data from "tournaments"."""
input tournaments_order_by {
  admin: players_order_by
  can_cancel: order_by
  can_close_registration: order_by
  can_join: order_by
  can_open_registration: order_by
  description: order_by
  e_tournament_status: e_tournament_status_order_by
  has_min_teams: order_by
  id: order_by
  is_organizer: order_by
  match_options_id: order_by
  max_players_per_lineup: order_by
  min_players_per_lineup: order_by
  name: order_by
  options: match_options_order_by
  organizer_steam_id: order_by
  organizers_aggregate: tournament_organizers_aggregate_order_by
  rosters_aggregate: tournament_team_roster_aggregate_order_by
  stages_aggregate: tournament_stages_aggregate_order_by
  start: order_by
  status: order_by
  teams_aggregate: tournament_teams_aggregate_order_by
}

"""primary key columns input for table: tournaments"""
input tournaments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tournaments"
"""
enum tournaments_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  match_options_id

  """column name"""
  name

  """column name"""
  organizer_steam_id

  """column name"""
  start

  """column name"""
  status
}

"""
input type for updating data in table "tournaments"
"""
input tournaments_set_input {
  description: String
  id: uuid
  match_options_id: uuid
  name: String
  organizer_steam_id: bigint
  start: timestamptz
  status: e_tournament_status_enum
}

"""aggregate stddev on columns"""
type tournaments_stddev_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev() on columns of table "tournaments"
"""
input tournaments_stddev_order_by {
  organizer_steam_id: order_by
}

"""aggregate stddev_pop on columns"""
type tournaments_stddev_pop_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev_pop() on columns of table "tournaments"
"""
input tournaments_stddev_pop_order_by {
  organizer_steam_id: order_by
}

"""aggregate stddev_samp on columns"""
type tournaments_stddev_samp_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by stddev_samp() on columns of table "tournaments"
"""
input tournaments_stddev_samp_order_by {
  organizer_steam_id: order_by
}

"""
Streaming cursor of the table "tournaments"
"""
input tournaments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tournaments_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tournaments_stream_cursor_value_input {
  description: String
  id: uuid
  match_options_id: uuid
  name: String
  organizer_steam_id: bigint
  start: timestamptz
  status: e_tournament_status_enum
}

"""aggregate sum on columns"""
type tournaments_sum_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: bigint
}

"""
order by sum() on columns of table "tournaments"
"""
input tournaments_sum_order_by {
  organizer_steam_id: order_by
}

"""
update columns of table "tournaments"
"""
enum tournaments_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  match_options_id

  """column name"""
  name

  """column name"""
  organizer_steam_id

  """column name"""
  start

  """column name"""
  status
}

input tournaments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tournaments_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tournaments_set_input

  """filter the rows which have to be updated"""
  where: tournaments_bool_exp!
}

"""aggregate var_pop on columns"""
type tournaments_var_pop_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by var_pop() on columns of table "tournaments"
"""
input tournaments_var_pop_order_by {
  organizer_steam_id: order_by
}

"""aggregate var_samp on columns"""
type tournaments_var_samp_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by var_samp() on columns of table "tournaments"
"""
input tournaments_var_samp_order_by {
  organizer_steam_id: order_by
}

"""aggregate variance on columns"""
type tournaments_variance_fields {
  """
  A computed field, executes function "tournament_max_players_per_lineup"
  """
  max_players_per_lineup: Int

  """
  A computed field, executes function "tournament_min_players_per_lineup"
  """
  min_players_per_lineup: Int
  organizer_steam_id: Float
}

"""
order by variance() on columns of table "tournaments"
"""
input tournaments_variance_order_by {
  organizer_steam_id: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "v_match_captains"
"""
type v_match_captains {
  captain: Boolean
  discord_id: String
  id: uuid

  """An object relationship"""
  lineup: match_lineups
  match_lineup_id: uuid
  placeholder_name: String

  """An object relationship"""
  player: players
  steam_id: bigint
}

"""
aggregated selection of "v_match_captains"
"""
type v_match_captains_aggregate {
  aggregate: v_match_captains_aggregate_fields
  nodes: [v_match_captains!]!
}

"""
aggregate fields of "v_match_captains"
"""
type v_match_captains_aggregate_fields {
  avg: v_match_captains_avg_fields
  count(columns: [v_match_captains_select_column!], distinct: Boolean): Int!
  max: v_match_captains_max_fields
  min: v_match_captains_min_fields
  stddev: v_match_captains_stddev_fields
  stddev_pop: v_match_captains_stddev_pop_fields
  stddev_samp: v_match_captains_stddev_samp_fields
  sum: v_match_captains_sum_fields
  var_pop: v_match_captains_var_pop_fields
  var_samp: v_match_captains_var_samp_fields
  variance: v_match_captains_variance_fields
}

"""aggregate avg on columns"""
type v_match_captains_avg_fields {
  steam_id: Float
}

"""
Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'.
"""
input v_match_captains_bool_exp {
  _and: [v_match_captains_bool_exp!]
  _not: v_match_captains_bool_exp
  _or: [v_match_captains_bool_exp!]
  captain: Boolean_comparison_exp
  discord_id: String_comparison_exp
  id: uuid_comparison_exp
  lineup: match_lineups_bool_exp
  match_lineup_id: uuid_comparison_exp
  placeholder_name: String_comparison_exp
  player: players_bool_exp
  steam_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "v_match_captains"
"""
input v_match_captains_inc_input {
  steam_id: bigint
}

"""
input type for inserting data into table "v_match_captains"
"""
input v_match_captains_insert_input {
  captain: Boolean
  discord_id: String
  id: uuid
  lineup: match_lineups_obj_rel_insert_input
  match_lineup_id: uuid
  placeholder_name: String
  player: players_obj_rel_insert_input
  steam_id: bigint
}

"""aggregate max on columns"""
type v_match_captains_max_fields {
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""aggregate min on columns"""
type v_match_captains_min_fields {
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""
response of any mutation on the table "v_match_captains"
"""
type v_match_captains_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [v_match_captains!]!
}

"""
input type for inserting object relation for remote table "v_match_captains"
"""
input v_match_captains_obj_rel_insert_input {
  data: v_match_captains_insert_input!
}

"""Ordering options when selecting data from "v_match_captains"."""
input v_match_captains_order_by {
  captain: order_by
  discord_id: order_by
  id: order_by
  lineup: match_lineups_order_by
  match_lineup_id: order_by
  placeholder_name: order_by
  player: players_order_by
  steam_id: order_by
}

"""
select columns of table "v_match_captains"
"""
enum v_match_captains_select_column {
  """column name"""
  captain

  """column name"""
  discord_id

  """column name"""
  id

  """column name"""
  match_lineup_id

  """column name"""
  placeholder_name

  """column name"""
  steam_id
}

"""
input type for updating data in table "v_match_captains"
"""
input v_match_captains_set_input {
  captain: Boolean
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""aggregate stddev on columns"""
type v_match_captains_stddev_fields {
  steam_id: Float
}

"""aggregate stddev_pop on columns"""
type v_match_captains_stddev_pop_fields {
  steam_id: Float
}

"""aggregate stddev_samp on columns"""
type v_match_captains_stddev_samp_fields {
  steam_id: Float
}

"""
Streaming cursor of the table "v_match_captains"
"""
input v_match_captains_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_match_captains_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_match_captains_stream_cursor_value_input {
  captain: Boolean
  discord_id: String
  id: uuid
  match_lineup_id: uuid
  placeholder_name: String
  steam_id: bigint
}

"""aggregate sum on columns"""
type v_match_captains_sum_fields {
  steam_id: bigint
}

input v_match_captains_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: v_match_captains_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: v_match_captains_set_input

  """filter the rows which have to be updated"""
  where: v_match_captains_bool_exp!
}

"""aggregate var_pop on columns"""
type v_match_captains_var_pop_fields {
  steam_id: Float
}

"""aggregate var_samp on columns"""
type v_match_captains_var_samp_fields {
  steam_id: Float
}

"""aggregate variance on columns"""
type v_match_captains_variance_fields {
  steam_id: Float
}

"""
columns and relationships of "v_match_lineups"
"""
type v_match_lineups {
  coach_steam_id: bigint
  id: uuid

  """An object relationship"""
  lineup: match_lineups

  """An object relationship"""
  match: matches
  match_id: uuid
  team_id: uuid
}

"""
aggregated selection of "v_match_lineups"
"""
type v_match_lineups_aggregate {
  aggregate: v_match_lineups_aggregate_fields
  nodes: [v_match_lineups!]!
}

"""
aggregate fields of "v_match_lineups"
"""
type v_match_lineups_aggregate_fields {
  avg: v_match_lineups_avg_fields
  count(columns: [v_match_lineups_select_column!], distinct: Boolean): Int!
  max: v_match_lineups_max_fields
  min: v_match_lineups_min_fields
  stddev: v_match_lineups_stddev_fields
  stddev_pop: v_match_lineups_stddev_pop_fields
  stddev_samp: v_match_lineups_stddev_samp_fields
  sum: v_match_lineups_sum_fields
  var_pop: v_match_lineups_var_pop_fields
  var_samp: v_match_lineups_var_samp_fields
  variance: v_match_lineups_variance_fields
}

"""aggregate avg on columns"""
type v_match_lineups_avg_fields {
  coach_steam_id: Float
}

"""
Boolean expression to filter rows from the table "v_match_lineups". All fields are combined with a logical 'AND'.
"""
input v_match_lineups_bool_exp {
  _and: [v_match_lineups_bool_exp!]
  _not: v_match_lineups_bool_exp
  _or: [v_match_lineups_bool_exp!]
  coach_steam_id: bigint_comparison_exp
  id: uuid_comparison_exp
  lineup: match_lineups_bool_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  team_id: uuid_comparison_exp
}

"""
input type for inserting data into table "v_match_lineups"
"""
input v_match_lineups_insert_input {
  coach_steam_id: bigint
  id: uuid
  lineup: match_lineups_obj_rel_insert_input
  match: matches_obj_rel_insert_input
  match_id: uuid
  team_id: uuid
}

"""aggregate max on columns"""
type v_match_lineups_max_fields {
  coach_steam_id: bigint
  id: uuid
  match_id: uuid
  team_id: uuid
}

"""aggregate min on columns"""
type v_match_lineups_min_fields {
  coach_steam_id: bigint
  id: uuid
  match_id: uuid
  team_id: uuid
}

"""
input type for inserting object relation for remote table "v_match_lineups"
"""
input v_match_lineups_obj_rel_insert_input {
  data: v_match_lineups_insert_input!
}

"""Ordering options when selecting data from "v_match_lineups"."""
input v_match_lineups_order_by {
  coach_steam_id: order_by
  id: order_by
  lineup: match_lineups_order_by
  match: matches_order_by
  match_id: order_by
  team_id: order_by
}

"""
select columns of table "v_match_lineups"
"""
enum v_match_lineups_select_column {
  """column name"""
  coach_steam_id

  """column name"""
  id

  """column name"""
  match_id

  """column name"""
  team_id
}

"""aggregate stddev on columns"""
type v_match_lineups_stddev_fields {
  coach_steam_id: Float
}

"""aggregate stddev_pop on columns"""
type v_match_lineups_stddev_pop_fields {
  coach_steam_id: Float
}

"""aggregate stddev_samp on columns"""
type v_match_lineups_stddev_samp_fields {
  coach_steam_id: Float
}

"""
Streaming cursor of the table "v_match_lineups"
"""
input v_match_lineups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_match_lineups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_match_lineups_stream_cursor_value_input {
  coach_steam_id: bigint
  id: uuid
  match_id: uuid
  team_id: uuid
}

"""aggregate sum on columns"""
type v_match_lineups_sum_fields {
  coach_steam_id: bigint
}

"""aggregate var_pop on columns"""
type v_match_lineups_var_pop_fields {
  coach_steam_id: Float
}

"""aggregate var_samp on columns"""
type v_match_lineups_var_samp_fields {
  coach_steam_id: Float
}

"""aggregate variance on columns"""
type v_match_lineups_variance_fields {
  coach_steam_id: Float
}

"""
columns and relationships of "v_player_arch_nemesis"
"""
type v_player_arch_nemesis {
  attacker_id: bigint
  kill_count: bigint

  """An object relationship"""
  nemsis: players

  """An object relationship"""
  player: players
  victim_id: bigint
}

"""
aggregated selection of "v_player_arch_nemesis"
"""
type v_player_arch_nemesis_aggregate {
  aggregate: v_player_arch_nemesis_aggregate_fields
  nodes: [v_player_arch_nemesis!]!
}

"""
aggregate fields of "v_player_arch_nemesis"
"""
type v_player_arch_nemesis_aggregate_fields {
  avg: v_player_arch_nemesis_avg_fields
  count(columns: [v_player_arch_nemesis_select_column!], distinct: Boolean): Int!
  max: v_player_arch_nemesis_max_fields
  min: v_player_arch_nemesis_min_fields
  stddev: v_player_arch_nemesis_stddev_fields
  stddev_pop: v_player_arch_nemesis_stddev_pop_fields
  stddev_samp: v_player_arch_nemesis_stddev_samp_fields
  sum: v_player_arch_nemesis_sum_fields
  var_pop: v_player_arch_nemesis_var_pop_fields
  var_samp: v_player_arch_nemesis_var_samp_fields
  variance: v_player_arch_nemesis_variance_fields
}

"""aggregate avg on columns"""
type v_player_arch_nemesis_avg_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""
Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'.
"""
input v_player_arch_nemesis_bool_exp {
  _and: [v_player_arch_nemesis_bool_exp!]
  _not: v_player_arch_nemesis_bool_exp
  _or: [v_player_arch_nemesis_bool_exp!]
  attacker_id: bigint_comparison_exp
  kill_count: bigint_comparison_exp
  nemsis: players_bool_exp
  player: players_bool_exp
  victim_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type v_player_arch_nemesis_max_fields {
  attacker_id: bigint
  kill_count: bigint
  victim_id: bigint
}

"""aggregate min on columns"""
type v_player_arch_nemesis_min_fields {
  attacker_id: bigint
  kill_count: bigint
  victim_id: bigint
}

"""Ordering options when selecting data from "v_player_arch_nemesis"."""
input v_player_arch_nemesis_order_by {
  attacker_id: order_by
  kill_count: order_by
  nemsis: players_order_by
  player: players_order_by
  victim_id: order_by
}

"""
select columns of table "v_player_arch_nemesis"
"""
enum v_player_arch_nemesis_select_column {
  """column name"""
  attacker_id

  """column name"""
  kill_count

  """column name"""
  victim_id
}

"""aggregate stddev on columns"""
type v_player_arch_nemesis_stddev_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""aggregate stddev_pop on columns"""
type v_player_arch_nemesis_stddev_pop_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""aggregate stddev_samp on columns"""
type v_player_arch_nemesis_stddev_samp_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""
Streaming cursor of the table "v_player_arch_nemesis"
"""
input v_player_arch_nemesis_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_arch_nemesis_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_arch_nemesis_stream_cursor_value_input {
  attacker_id: bigint
  kill_count: bigint
  victim_id: bigint
}

"""aggregate sum on columns"""
type v_player_arch_nemesis_sum_fields {
  attacker_id: bigint
  kill_count: bigint
  victim_id: bigint
}

"""aggregate var_pop on columns"""
type v_player_arch_nemesis_var_pop_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""aggregate var_samp on columns"""
type v_player_arch_nemesis_var_samp_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""aggregate variance on columns"""
type v_player_arch_nemesis_variance_fields {
  attacker_id: Float
  kill_count: Float
  victim_id: Float
}

"""
columns and relationships of "v_player_damage"
"""
type v_player_damage {
  avg_damage_per_round: bigint

  """An object relationship"""
  player: players
  player_steam_id: bigint
  total_damage: bigint
  total_rounds: bigint
}

"""
aggregated selection of "v_player_damage"
"""
type v_player_damage_aggregate {
  aggregate: v_player_damage_aggregate_fields
  nodes: [v_player_damage!]!
}

"""
aggregate fields of "v_player_damage"
"""
type v_player_damage_aggregate_fields {
  avg: v_player_damage_avg_fields
  count(columns: [v_player_damage_select_column!], distinct: Boolean): Int!
  max: v_player_damage_max_fields
  min: v_player_damage_min_fields
  stddev: v_player_damage_stddev_fields
  stddev_pop: v_player_damage_stddev_pop_fields
  stddev_samp: v_player_damage_stddev_samp_fields
  sum: v_player_damage_sum_fields
  var_pop: v_player_damage_var_pop_fields
  var_samp: v_player_damage_var_samp_fields
  variance: v_player_damage_variance_fields
}

"""aggregate avg on columns"""
type v_player_damage_avg_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""
Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'.
"""
input v_player_damage_bool_exp {
  _and: [v_player_damage_bool_exp!]
  _not: v_player_damage_bool_exp
  _or: [v_player_damage_bool_exp!]
  avg_damage_per_round: bigint_comparison_exp
  player: players_bool_exp
  player_steam_id: bigint_comparison_exp
  total_damage: bigint_comparison_exp
  total_rounds: bigint_comparison_exp
}

"""aggregate max on columns"""
type v_player_damage_max_fields {
  avg_damage_per_round: bigint
  player_steam_id: bigint
  total_damage: bigint
  total_rounds: bigint
}

"""aggregate min on columns"""
type v_player_damage_min_fields {
  avg_damage_per_round: bigint
  player_steam_id: bigint
  total_damage: bigint
  total_rounds: bigint
}

"""Ordering options when selecting data from "v_player_damage"."""
input v_player_damage_order_by {
  avg_damage_per_round: order_by
  player: players_order_by
  player_steam_id: order_by
  total_damage: order_by
  total_rounds: order_by
}

"""
select columns of table "v_player_damage"
"""
enum v_player_damage_select_column {
  """column name"""
  avg_damage_per_round

  """column name"""
  player_steam_id

  """column name"""
  total_damage

  """column name"""
  total_rounds
}

"""aggregate stddev on columns"""
type v_player_damage_stddev_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""aggregate stddev_pop on columns"""
type v_player_damage_stddev_pop_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""aggregate stddev_samp on columns"""
type v_player_damage_stddev_samp_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""
Streaming cursor of the table "v_player_damage"
"""
input v_player_damage_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_damage_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_damage_stream_cursor_value_input {
  avg_damage_per_round: bigint
  player_steam_id: bigint
  total_damage: bigint
  total_rounds: bigint
}

"""aggregate sum on columns"""
type v_player_damage_sum_fields {
  avg_damage_per_round: bigint
  player_steam_id: bigint
  total_damage: bigint
  total_rounds: bigint
}

"""aggregate var_pop on columns"""
type v_player_damage_var_pop_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""aggregate var_samp on columns"""
type v_player_damage_var_samp_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""aggregate variance on columns"""
type v_player_damage_variance_fields {
  avg_damage_per_round: Float
  player_steam_id: Float
  total_damage: Float
  total_rounds: Float
}

"""
columns and relationships of "v_player_elo"
"""
type v_player_elo {
  actual_score: float8
  assists: Int
  current_elo: Int
  damage: Int
  damage_percent: float8
  deaths: Int
  elo_change: Int
  expected_score: float8
  k_factor: Int
  kda: float8
  kills: Int
  match_created_at: timestamptz
  match_id: uuid
  match_result: String
  opponent_team_elo_avg: float8
  performance_multiplier: float8
  player_name: String
  player_steam_id: bigint
  player_team_elo_avg: float8
  team_avg_kda: float8
  updated_elo: Int
}

"""
aggregated selection of "v_player_elo"
"""
type v_player_elo_aggregate {
  aggregate: v_player_elo_aggregate_fields
  nodes: [v_player_elo!]!
}

"""
aggregate fields of "v_player_elo"
"""
type v_player_elo_aggregate_fields {
  avg: v_player_elo_avg_fields
  count(columns: [v_player_elo_select_column!], distinct: Boolean): Int!
  max: v_player_elo_max_fields
  min: v_player_elo_min_fields
  stddev: v_player_elo_stddev_fields
  stddev_pop: v_player_elo_stddev_pop_fields
  stddev_samp: v_player_elo_stddev_samp_fields
  sum: v_player_elo_sum_fields
  var_pop: v_player_elo_var_pop_fields
  var_samp: v_player_elo_var_samp_fields
  variance: v_player_elo_variance_fields
}

"""aggregate avg on columns"""
type v_player_elo_avg_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""
Boolean expression to filter rows from the table "v_player_elo". All fields are combined with a logical 'AND'.
"""
input v_player_elo_bool_exp {
  _and: [v_player_elo_bool_exp!]
  _not: v_player_elo_bool_exp
  _or: [v_player_elo_bool_exp!]
  actual_score: float8_comparison_exp
  assists: Int_comparison_exp
  current_elo: Int_comparison_exp
  damage: Int_comparison_exp
  damage_percent: float8_comparison_exp
  deaths: Int_comparison_exp
  elo_change: Int_comparison_exp
  expected_score: float8_comparison_exp
  k_factor: Int_comparison_exp
  kda: float8_comparison_exp
  kills: Int_comparison_exp
  match_created_at: timestamptz_comparison_exp
  match_id: uuid_comparison_exp
  match_result: String_comparison_exp
  opponent_team_elo_avg: float8_comparison_exp
  performance_multiplier: float8_comparison_exp
  player_name: String_comparison_exp
  player_steam_id: bigint_comparison_exp
  player_team_elo_avg: float8_comparison_exp
  team_avg_kda: float8_comparison_exp
  updated_elo: Int_comparison_exp
}

"""aggregate max on columns"""
type v_player_elo_max_fields {
  actual_score: float8
  assists: Int
  current_elo: Int
  damage: Int
  damage_percent: float8
  deaths: Int
  elo_change: Int
  expected_score: float8
  k_factor: Int
  kda: float8
  kills: Int
  match_created_at: timestamptz
  match_id: uuid
  match_result: String
  opponent_team_elo_avg: float8
  performance_multiplier: float8
  player_name: String
  player_steam_id: bigint
  player_team_elo_avg: float8
  team_avg_kda: float8
  updated_elo: Int
}

"""aggregate min on columns"""
type v_player_elo_min_fields {
  actual_score: float8
  assists: Int
  current_elo: Int
  damage: Int
  damage_percent: float8
  deaths: Int
  elo_change: Int
  expected_score: float8
  k_factor: Int
  kda: float8
  kills: Int
  match_created_at: timestamptz
  match_id: uuid
  match_result: String
  opponent_team_elo_avg: float8
  performance_multiplier: float8
  player_name: String
  player_steam_id: bigint
  player_team_elo_avg: float8
  team_avg_kda: float8
  updated_elo: Int
}

"""Ordering options when selecting data from "v_player_elo"."""
input v_player_elo_order_by {
  actual_score: order_by
  assists: order_by
  current_elo: order_by
  damage: order_by
  damage_percent: order_by
  deaths: order_by
  elo_change: order_by
  expected_score: order_by
  k_factor: order_by
  kda: order_by
  kills: order_by
  match_created_at: order_by
  match_id: order_by
  match_result: order_by
  opponent_team_elo_avg: order_by
  performance_multiplier: order_by
  player_name: order_by
  player_steam_id: order_by
  player_team_elo_avg: order_by
  team_avg_kda: order_by
  updated_elo: order_by
}

"""
select columns of table "v_player_elo"
"""
enum v_player_elo_select_column {
  """column name"""
  actual_score

  """column name"""
  assists

  """column name"""
  current_elo

  """column name"""
  damage

  """column name"""
  damage_percent

  """column name"""
  deaths

  """column name"""
  elo_change

  """column name"""
  expected_score

  """column name"""
  k_factor

  """column name"""
  kda

  """column name"""
  kills

  """column name"""
  match_created_at

  """column name"""
  match_id

  """column name"""
  match_result

  """column name"""
  opponent_team_elo_avg

  """column name"""
  performance_multiplier

  """column name"""
  player_name

  """column name"""
  player_steam_id

  """column name"""
  player_team_elo_avg

  """column name"""
  team_avg_kda

  """column name"""
  updated_elo
}

"""aggregate stddev on columns"""
type v_player_elo_stddev_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""aggregate stddev_pop on columns"""
type v_player_elo_stddev_pop_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""aggregate stddev_samp on columns"""
type v_player_elo_stddev_samp_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""
Streaming cursor of the table "v_player_elo"
"""
input v_player_elo_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_elo_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_elo_stream_cursor_value_input {
  actual_score: float8
  assists: Int
  current_elo: Int
  damage: Int
  damage_percent: float8
  deaths: Int
  elo_change: Int
  expected_score: float8
  k_factor: Int
  kda: float8
  kills: Int
  match_created_at: timestamptz
  match_id: uuid
  match_result: String
  opponent_team_elo_avg: float8
  performance_multiplier: float8
  player_name: String
  player_steam_id: bigint
  player_team_elo_avg: float8
  team_avg_kda: float8
  updated_elo: Int
}

"""aggregate sum on columns"""
type v_player_elo_sum_fields {
  actual_score: float8
  assists: Int
  current_elo: Int
  damage: Int
  damage_percent: float8
  deaths: Int
  elo_change: Int
  expected_score: float8
  k_factor: Int
  kda: float8
  kills: Int
  opponent_team_elo_avg: float8
  performance_multiplier: float8
  player_steam_id: bigint
  player_team_elo_avg: float8
  team_avg_kda: float8
  updated_elo: Int
}

"""aggregate var_pop on columns"""
type v_player_elo_var_pop_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""aggregate var_samp on columns"""
type v_player_elo_var_samp_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""aggregate variance on columns"""
type v_player_elo_variance_fields {
  actual_score: Float
  assists: Float
  current_elo: Float
  damage: Float
  damage_percent: Float
  deaths: Float
  elo_change: Float
  expected_score: Float
  k_factor: Float
  kda: Float
  kills: Float
  opponent_team_elo_avg: Float
  performance_multiplier: Float
  player_steam_id: Float
  player_team_elo_avg: Float
  team_avg_kda: Float
  updated_elo: Float
}

"""
columns and relationships of "v_player_map_losses"
"""
type v_player_map_losses {
  """An object relationship"""
  map: maps
  map_id: uuid

  """An object relationship"""
  match: matches
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""
aggregated selection of "v_player_map_losses"
"""
type v_player_map_losses_aggregate {
  aggregate: v_player_map_losses_aggregate_fields
  nodes: [v_player_map_losses!]!
}

"""
aggregate fields of "v_player_map_losses"
"""
type v_player_map_losses_aggregate_fields {
  avg: v_player_map_losses_avg_fields
  count(columns: [v_player_map_losses_select_column!], distinct: Boolean): Int!
  max: v_player_map_losses_max_fields
  min: v_player_map_losses_min_fields
  stddev: v_player_map_losses_stddev_fields
  stddev_pop: v_player_map_losses_stddev_pop_fields
  stddev_samp: v_player_map_losses_stddev_samp_fields
  sum: v_player_map_losses_sum_fields
  var_pop: v_player_map_losses_var_pop_fields
  var_samp: v_player_map_losses_var_samp_fields
  variance: v_player_map_losses_variance_fields
}

"""aggregate avg on columns"""
type v_player_map_losses_avg_fields {
  steam_id: Float
}

"""
Boolean expression to filter rows from the table "v_player_map_losses". All fields are combined with a logical 'AND'.
"""
input v_player_map_losses_bool_exp {
  _and: [v_player_map_losses_bool_exp!]
  _not: v_player_map_losses_bool_exp
  _or: [v_player_map_losses_bool_exp!]
  map: maps_bool_exp
  map_id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  started_at: timestamptz_comparison_exp
  steam_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type v_player_map_losses_max_fields {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""aggregate min on columns"""
type v_player_map_losses_min_fields {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""Ordering options when selecting data from "v_player_map_losses"."""
input v_player_map_losses_order_by {
  map: maps_order_by
  map_id: order_by
  match: matches_order_by
  match_id: order_by
  started_at: order_by
  steam_id: order_by
}

"""
select columns of table "v_player_map_losses"
"""
enum v_player_map_losses_select_column {
  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  started_at

  """column name"""
  steam_id
}

"""aggregate stddev on columns"""
type v_player_map_losses_stddev_fields {
  steam_id: Float
}

"""aggregate stddev_pop on columns"""
type v_player_map_losses_stddev_pop_fields {
  steam_id: Float
}

"""aggregate stddev_samp on columns"""
type v_player_map_losses_stddev_samp_fields {
  steam_id: Float
}

"""
Streaming cursor of the table "v_player_map_losses"
"""
input v_player_map_losses_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_map_losses_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_map_losses_stream_cursor_value_input {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""aggregate sum on columns"""
type v_player_map_losses_sum_fields {
  steam_id: bigint
}

"""aggregate var_pop on columns"""
type v_player_map_losses_var_pop_fields {
  steam_id: Float
}

"""aggregate var_samp on columns"""
type v_player_map_losses_var_samp_fields {
  steam_id: Float
}

"""aggregate variance on columns"""
type v_player_map_losses_variance_fields {
  steam_id: Float
}

"""
columns and relationships of "v_player_map_wins"
"""
type v_player_map_wins {
  """An object relationship"""
  map: maps
  map_id: uuid

  """An object relationship"""
  match: matches
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""
aggregated selection of "v_player_map_wins"
"""
type v_player_map_wins_aggregate {
  aggregate: v_player_map_wins_aggregate_fields
  nodes: [v_player_map_wins!]!
}

"""
aggregate fields of "v_player_map_wins"
"""
type v_player_map_wins_aggregate_fields {
  avg: v_player_map_wins_avg_fields
  count(columns: [v_player_map_wins_select_column!], distinct: Boolean): Int!
  max: v_player_map_wins_max_fields
  min: v_player_map_wins_min_fields
  stddev: v_player_map_wins_stddev_fields
  stddev_pop: v_player_map_wins_stddev_pop_fields
  stddev_samp: v_player_map_wins_stddev_samp_fields
  sum: v_player_map_wins_sum_fields
  var_pop: v_player_map_wins_var_pop_fields
  var_samp: v_player_map_wins_var_samp_fields
  variance: v_player_map_wins_variance_fields
}

"""aggregate avg on columns"""
type v_player_map_wins_avg_fields {
  steam_id: Float
}

"""
Boolean expression to filter rows from the table "v_player_map_wins". All fields are combined with a logical 'AND'.
"""
input v_player_map_wins_bool_exp {
  _and: [v_player_map_wins_bool_exp!]
  _not: v_player_map_wins_bool_exp
  _or: [v_player_map_wins_bool_exp!]
  map: maps_bool_exp
  map_id: uuid_comparison_exp
  match: matches_bool_exp
  match_id: uuid_comparison_exp
  started_at: timestamptz_comparison_exp
  steam_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type v_player_map_wins_max_fields {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""aggregate min on columns"""
type v_player_map_wins_min_fields {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""Ordering options when selecting data from "v_player_map_wins"."""
input v_player_map_wins_order_by {
  map: maps_order_by
  map_id: order_by
  match: matches_order_by
  match_id: order_by
  started_at: order_by
  steam_id: order_by
}

"""
select columns of table "v_player_map_wins"
"""
enum v_player_map_wins_select_column {
  """column name"""
  map_id

  """column name"""
  match_id

  """column name"""
  started_at

  """column name"""
  steam_id
}

"""aggregate stddev on columns"""
type v_player_map_wins_stddev_fields {
  steam_id: Float
}

"""aggregate stddev_pop on columns"""
type v_player_map_wins_stddev_pop_fields {
  steam_id: Float
}

"""aggregate stddev_samp on columns"""
type v_player_map_wins_stddev_samp_fields {
  steam_id: Float
}

"""
Streaming cursor of the table "v_player_map_wins"
"""
input v_player_map_wins_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_map_wins_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_map_wins_stream_cursor_value_input {
  map_id: uuid
  match_id: uuid
  started_at: timestamptz
  steam_id: bigint
}

"""aggregate sum on columns"""
type v_player_map_wins_sum_fields {
  steam_id: bigint
}

"""aggregate var_pop on columns"""
type v_player_map_wins_var_pop_fields {
  steam_id: Float
}

"""aggregate var_samp on columns"""
type v_player_map_wins_var_samp_fields {
  steam_id: Float
}

"""aggregate variance on columns"""
type v_player_map_wins_variance_fields {
  steam_id: Float
}

"""
columns and relationships of "v_player_multi_kills"
"""
type v_player_multi_kills {
  attacker_steam_id: bigint
  kills: bigint
  match_id: uuid
  round: Int
}

"""
aggregated selection of "v_player_multi_kills"
"""
type v_player_multi_kills_aggregate {
  aggregate: v_player_multi_kills_aggregate_fields
  nodes: [v_player_multi_kills!]!
}

input v_player_multi_kills_aggregate_bool_exp {
  count: v_player_multi_kills_aggregate_bool_exp_count
}

input v_player_multi_kills_aggregate_bool_exp_count {
  arguments: [v_player_multi_kills_select_column!]
  distinct: Boolean
  filter: v_player_multi_kills_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "v_player_multi_kills"
"""
type v_player_multi_kills_aggregate_fields {
  avg: v_player_multi_kills_avg_fields
  count(columns: [v_player_multi_kills_select_column!], distinct: Boolean): Int!
  max: v_player_multi_kills_max_fields
  min: v_player_multi_kills_min_fields
  stddev: v_player_multi_kills_stddev_fields
  stddev_pop: v_player_multi_kills_stddev_pop_fields
  stddev_samp: v_player_multi_kills_stddev_samp_fields
  sum: v_player_multi_kills_sum_fields
  var_pop: v_player_multi_kills_var_pop_fields
  var_samp: v_player_multi_kills_var_samp_fields
  variance: v_player_multi_kills_variance_fields
}

"""
order by aggregate values of table "v_player_multi_kills"
"""
input v_player_multi_kills_aggregate_order_by {
  avg: v_player_multi_kills_avg_order_by
  count: order_by
  max: v_player_multi_kills_max_order_by
  min: v_player_multi_kills_min_order_by
  stddev: v_player_multi_kills_stddev_order_by
  stddev_pop: v_player_multi_kills_stddev_pop_order_by
  stddev_samp: v_player_multi_kills_stddev_samp_order_by
  sum: v_player_multi_kills_sum_order_by
  var_pop: v_player_multi_kills_var_pop_order_by
  var_samp: v_player_multi_kills_var_samp_order_by
  variance: v_player_multi_kills_variance_order_by
}

"""
input type for inserting array relation for remote table "v_player_multi_kills"
"""
input v_player_multi_kills_arr_rel_insert_input {
  data: [v_player_multi_kills_insert_input!]!
}

"""aggregate avg on columns"""
type v_player_multi_kills_avg_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by avg() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_avg_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""
Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'.
"""
input v_player_multi_kills_bool_exp {
  _and: [v_player_multi_kills_bool_exp!]
  _not: v_player_multi_kills_bool_exp
  _or: [v_player_multi_kills_bool_exp!]
  attacker_steam_id: bigint_comparison_exp
  kills: bigint_comparison_exp
  match_id: uuid_comparison_exp
  round: Int_comparison_exp
}

"""
input type for inserting data into table "v_player_multi_kills"
"""
input v_player_multi_kills_insert_input {
  attacker_steam_id: bigint
  kills: bigint
  match_id: uuid
  round: Int
}

"""aggregate max on columns"""
type v_player_multi_kills_max_fields {
  attacker_steam_id: bigint
  kills: bigint
  match_id: uuid
  round: Int
}

"""
order by max() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_max_order_by {
  attacker_steam_id: order_by
  kills: order_by
  match_id: order_by
  round: order_by
}

"""aggregate min on columns"""
type v_player_multi_kills_min_fields {
  attacker_steam_id: bigint
  kills: bigint
  match_id: uuid
  round: Int
}

"""
order by min() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_min_order_by {
  attacker_steam_id: order_by
  kills: order_by
  match_id: order_by
  round: order_by
}

"""Ordering options when selecting data from "v_player_multi_kills"."""
input v_player_multi_kills_order_by {
  attacker_steam_id: order_by
  kills: order_by
  match_id: order_by
  round: order_by
}

"""
select columns of table "v_player_multi_kills"
"""
enum v_player_multi_kills_select_column {
  """column name"""
  attacker_steam_id

  """column name"""
  kills

  """column name"""
  match_id

  """column name"""
  round
}

"""aggregate stddev on columns"""
type v_player_multi_kills_stddev_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by stddev() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_stddev_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""aggregate stddev_pop on columns"""
type v_player_multi_kills_stddev_pop_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by stddev_pop() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_stddev_pop_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""aggregate stddev_samp on columns"""
type v_player_multi_kills_stddev_samp_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by stddev_samp() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_stddev_samp_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""
Streaming cursor of the table "v_player_multi_kills"
"""
input v_player_multi_kills_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_player_multi_kills_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_player_multi_kills_stream_cursor_value_input {
  attacker_steam_id: bigint
  kills: bigint
  match_id: uuid
  round: Int
}

"""aggregate sum on columns"""
type v_player_multi_kills_sum_fields {
  attacker_steam_id: bigint
  kills: bigint
  round: Int
}

"""
order by sum() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_sum_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""aggregate var_pop on columns"""
type v_player_multi_kills_var_pop_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by var_pop() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_var_pop_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""aggregate var_samp on columns"""
type v_player_multi_kills_var_samp_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by var_samp() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_var_samp_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""aggregate variance on columns"""
type v_player_multi_kills_variance_fields {
  attacker_steam_id: Float
  kills: Float
  round: Float
}

"""
order by variance() on columns of table "v_player_multi_kills"
"""
input v_player_multi_kills_variance_order_by {
  attacker_steam_id: order_by
  kills: order_by
  round: order_by
}

"""
columns and relationships of "v_pool_maps"
"""
type v_pool_maps {
  active_pool: Boolean
  id: uuid
  label: String

  """An object relationship"""
  map_pool: map_pools
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

"""
aggregated selection of "v_pool_maps"
"""
type v_pool_maps_aggregate {
  aggregate: v_pool_maps_aggregate_fields
  nodes: [v_pool_maps!]!
}

input v_pool_maps_aggregate_bool_exp {
  bool_and: v_pool_maps_aggregate_bool_exp_bool_and
  bool_or: v_pool_maps_aggregate_bool_exp_bool_or
  count: v_pool_maps_aggregate_bool_exp_count
}

input v_pool_maps_aggregate_bool_exp_bool_and {
  arguments: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: v_pool_maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input v_pool_maps_aggregate_bool_exp_bool_or {
  arguments: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: v_pool_maps_bool_exp
  predicate: Boolean_comparison_exp!
}

input v_pool_maps_aggregate_bool_exp_count {
  arguments: [v_pool_maps_select_column!]
  distinct: Boolean
  filter: v_pool_maps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "v_pool_maps"
"""
type v_pool_maps_aggregate_fields {
  count(columns: [v_pool_maps_select_column!], distinct: Boolean): Int!
  max: v_pool_maps_max_fields
  min: v_pool_maps_min_fields
}

"""
order by aggregate values of table "v_pool_maps"
"""
input v_pool_maps_aggregate_order_by {
  count: order_by
  max: v_pool_maps_max_order_by
  min: v_pool_maps_min_order_by
}

"""
input type for inserting array relation for remote table "v_pool_maps"
"""
input v_pool_maps_arr_rel_insert_input {
  data: [v_pool_maps_insert_input!]!
}

"""
Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'.
"""
input v_pool_maps_bool_exp {
  _and: [v_pool_maps_bool_exp!]
  _not: v_pool_maps_bool_exp
  _or: [v_pool_maps_bool_exp!]
  active_pool: Boolean_comparison_exp
  id: uuid_comparison_exp
  label: String_comparison_exp
  map_pool: map_pools_bool_exp
  map_pool_id: uuid_comparison_exp
  name: String_comparison_exp
  patch: String_comparison_exp
  poster: String_comparison_exp
  type: String_comparison_exp
  workshop_map_id: String_comparison_exp
}

"""
input type for inserting data into table "v_pool_maps"
"""
input v_pool_maps_insert_input {
  active_pool: Boolean
  id: uuid
  label: String
  map_pool: map_pools_obj_rel_insert_input
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

"""aggregate max on columns"""
type v_pool_maps_max_fields {
  id: uuid
  label: String
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

"""
order by max() on columns of table "v_pool_maps"
"""
input v_pool_maps_max_order_by {
  id: order_by
  label: order_by
  map_pool_id: order_by
  name: order_by
  patch: order_by
  poster: order_by
  type: order_by
  workshop_map_id: order_by
}

"""aggregate min on columns"""
type v_pool_maps_min_fields {
  id: uuid
  label: String
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

"""
order by min() on columns of table "v_pool_maps"
"""
input v_pool_maps_min_order_by {
  id: order_by
  label: order_by
  map_pool_id: order_by
  name: order_by
  patch: order_by
  poster: order_by
  type: order_by
  workshop_map_id: order_by
}

"""
response of any mutation on the table "v_pool_maps"
"""
type v_pool_maps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [v_pool_maps!]!
}

"""Ordering options when selecting data from "v_pool_maps"."""
input v_pool_maps_order_by {
  active_pool: order_by
  id: order_by
  label: order_by
  map_pool: map_pools_order_by
  map_pool_id: order_by
  name: order_by
  patch: order_by
  poster: order_by
  type: order_by
  workshop_map_id: order_by
}

"""
select columns of table "v_pool_maps"
"""
enum v_pool_maps_select_column {
  """column name"""
  active_pool

  """column name"""
  id

  """column name"""
  label

  """column name"""
  map_pool_id

  """column name"""
  name

  """column name"""
  patch

  """column name"""
  poster

  """column name"""
  type

  """column name"""
  workshop_map_id
}

"""
select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps"
"""
enum v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  active_pool
}

"""
select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps"
"""
enum v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  active_pool
}

"""
input type for updating data in table "v_pool_maps"
"""
input v_pool_maps_set_input {
  active_pool: Boolean
  id: uuid
  label: String
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

"""
Streaming cursor of the table "v_pool_maps"
"""
input v_pool_maps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: v_pool_maps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input v_pool_maps_stream_cursor_value_input {
  active_pool: Boolean
  id: uuid
  label: String
  map_pool_id: uuid
  name: String
  patch: String
  poster: String
  type: String
  workshop_map_id: String
}

input v_pool_maps_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: v_pool_maps_set_input

  """filter the rows which have to be updated"""
  where: v_pool_maps_bool_exp!
}