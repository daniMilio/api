// @ts-nocheck
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type Scalars = {
    Boolean: boolean,
    Float: number,
    Int: number,
    String: string,
    bigint: any,
    bytea: any,
    float8: any,
    inet: any,
    json: any,
    jsonb: any,
    numeric: any,
    timestamp: any,
    timestamptz: any,
    uuid: any,
}

export interface CpuStat {
    time: (Scalars['timestamp'] | null)
    total: (Scalars['bigint'] | null)
    used: (Scalars['bigint'] | null)
    window: (Scalars['Float'] | null)
    __typename: 'CpuStat'
}

export interface MeResponse {
    avatar_url: Scalars['String']
    country: (Scalars['String'] | null)
    discord_id: (Scalars['String'] | null)
    language: (Scalars['String'] | null)
    name: Scalars['String']
    player: (players | null)
    profile_url: (Scalars['String'] | null)
    role: Scalars['String']
    steam_id: Scalars['String']
    __typename: 'MeResponse'
}

export interface MemoryStat {
    time: (Scalars['timestamp'] | null)
    total: (Scalars['bigint'] | null)
    used: (Scalars['bigint'] | null)
    __typename: 'MemoryStat'
}

export interface NodeStats {
    cpu: (CpuStat | null)
    memory: (MemoryStat | null)
    node: Scalars['String']
    __typename: 'NodeStats'
}

export interface PodStats {
    cpu: (CpuStat | null)
    memory: (MemoryStat | null)
    name: Scalars['String']
    node: Scalars['String']
    __typename: 'PodStats'
}

export interface SetupGameServeOutput {
    link: Scalars['String']
    __typename: 'SetupGameServeOutput'
}

export interface SuccessOutput {
    success: Scalars['Boolean']
    __typename: 'SuccessOutput'
}

export interface TelemetryStats {
    online: Scalars['Int']
    __typename: 'TelemetryStats'
}


/** columns and relationships of "_map_pool" */
export interface _map_pool {
    map_id: Scalars['uuid']
    map_pool_id: Scalars['uuid']
    __typename: '_map_pool'
}


/** aggregated selection of "_map_pool" */
export interface _map_pool_aggregate {
    aggregate: (_map_pool_aggregate_fields | null)
    nodes: _map_pool[]
    __typename: '_map_pool_aggregate'
}


/** aggregate fields of "_map_pool" */
export interface _map_pool_aggregate_fields {
    count: Scalars['Int']
    max: (_map_pool_max_fields | null)
    min: (_map_pool_min_fields | null)
    __typename: '_map_pool_aggregate_fields'
}


/** unique or primary key constraints on table "_map_pool" */
export type _map_pool_constraint = 'map_pool_pkey'


/** aggregate max on columns */
export interface _map_pool_max_fields {
    map_id: (Scalars['uuid'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    __typename: '_map_pool_max_fields'
}


/** aggregate min on columns */
export interface _map_pool_min_fields {
    map_id: (Scalars['uuid'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    __typename: '_map_pool_min_fields'
}


/** response of any mutation on the table "_map_pool" */
export interface _map_pool_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: _map_pool[]
    __typename: '_map_pool_mutation_response'
}


/** select columns of table "_map_pool" */
export type _map_pool_select_column = 'map_id' | 'map_pool_id'


/** update columns of table "_map_pool" */
export type _map_pool_update_column = 'map_id' | 'map_pool_id'


/** columns and relationships of "abandoned_matches" */
export interface abandoned_matches {
    abandoned_at: Scalars['timestamptz']
    id: Scalars['uuid']
    steam_id: Scalars['bigint']
    __typename: 'abandoned_matches'
}


/** aggregated selection of "abandoned_matches" */
export interface abandoned_matches_aggregate {
    aggregate: (abandoned_matches_aggregate_fields | null)
    nodes: abandoned_matches[]
    __typename: 'abandoned_matches_aggregate'
}


/** aggregate fields of "abandoned_matches" */
export interface abandoned_matches_aggregate_fields {
    avg: (abandoned_matches_avg_fields | null)
    count: Scalars['Int']
    max: (abandoned_matches_max_fields | null)
    min: (abandoned_matches_min_fields | null)
    stddev: (abandoned_matches_stddev_fields | null)
    stddev_pop: (abandoned_matches_stddev_pop_fields | null)
    stddev_samp: (abandoned_matches_stddev_samp_fields | null)
    sum: (abandoned_matches_sum_fields | null)
    var_pop: (abandoned_matches_var_pop_fields | null)
    var_samp: (abandoned_matches_var_samp_fields | null)
    variance: (abandoned_matches_variance_fields | null)
    __typename: 'abandoned_matches_aggregate_fields'
}


/** aggregate avg on columns */
export interface abandoned_matches_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_avg_fields'
}


/** unique or primary key constraints on table "abandoned_matches" */
export type abandoned_matches_constraint = 'abandoned_matches_pkey'


/** aggregate max on columns */
export interface abandoned_matches_max_fields {
    abandoned_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'abandoned_matches_max_fields'
}


/** aggregate min on columns */
export interface abandoned_matches_min_fields {
    abandoned_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'abandoned_matches_min_fields'
}


/** response of any mutation on the table "abandoned_matches" */
export interface abandoned_matches_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: abandoned_matches[]
    __typename: 'abandoned_matches_mutation_response'
}


/** select columns of table "abandoned_matches" */
export type abandoned_matches_select_column = 'abandoned_at' | 'id' | 'steam_id'


/** aggregate stddev on columns */
export interface abandoned_matches_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface abandoned_matches_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface abandoned_matches_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface abandoned_matches_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'abandoned_matches_sum_fields'
}


/** update columns of table "abandoned_matches" */
export type abandoned_matches_update_column = 'abandoned_at' | 'id' | 'steam_id'


/** aggregate var_pop on columns */
export interface abandoned_matches_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface abandoned_matches_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_var_samp_fields'
}


/** aggregate variance on columns */
export interface abandoned_matches_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'abandoned_matches_variance_fields'
}


/** ordering argument of a cursor */
export type cursor_ordering = 'ASC' | 'DESC'


/** columns and relationships of "e_friend_status" */
export interface e_friend_status {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_friend_status'
}


/** aggregated selection of "e_friend_status" */
export interface e_friend_status_aggregate {
    aggregate: (e_friend_status_aggregate_fields | null)
    nodes: e_friend_status[]
    __typename: 'e_friend_status_aggregate'
}


/** aggregate fields of "e_friend_status" */
export interface e_friend_status_aggregate_fields {
    count: Scalars['Int']
    max: (e_friend_status_max_fields | null)
    min: (e_friend_status_min_fields | null)
    __typename: 'e_friend_status_aggregate_fields'
}


/** unique or primary key constraints on table "e_friend_status" */
export type e_friend_status_constraint = 'e_friend_status_pkey'

export type e_friend_status_enum = 'Accepted' | 'Pending'


/** aggregate max on columns */
export interface e_friend_status_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_friend_status_max_fields'
}


/** aggregate min on columns */
export interface e_friend_status_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_friend_status_min_fields'
}


/** response of any mutation on the table "e_friend_status" */
export interface e_friend_status_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_friend_status[]
    __typename: 'e_friend_status_mutation_response'
}


/** select columns of table "e_friend_status" */
export type e_friend_status_select_column = 'description' | 'value'


/** update columns of table "e_friend_status" */
export type e_friend_status_update_column = 'description' | 'value'


/** columns and relationships of "e_game_server_node_statuses" */
export interface e_game_server_node_statuses {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_game_server_node_statuses'
}


/** aggregated selection of "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_aggregate {
    aggregate: (e_game_server_node_statuses_aggregate_fields | null)
    nodes: e_game_server_node_statuses[]
    __typename: 'e_game_server_node_statuses_aggregate'
}


/** aggregate fields of "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_aggregate_fields {
    count: Scalars['Int']
    max: (e_game_server_node_statuses_max_fields | null)
    min: (e_game_server_node_statuses_min_fields | null)
    __typename: 'e_game_server_node_statuses_aggregate_fields'
}


/** unique or primary key constraints on table "e_game_server_node_statuses" */
export type e_game_server_node_statuses_constraint = 'e_game_server_node_statuses_pkey'

export type e_game_server_node_statuses_enum = 'NotAcceptingNewMatches' | 'Offline' | 'Online' | 'Setup'


/** aggregate max on columns */
export interface e_game_server_node_statuses_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_game_server_node_statuses_max_fields'
}


/** aggregate min on columns */
export interface e_game_server_node_statuses_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_game_server_node_statuses_min_fields'
}


/** response of any mutation on the table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_game_server_node_statuses[]
    __typename: 'e_game_server_node_statuses_mutation_response'
}


/** select columns of table "e_game_server_node_statuses" */
export type e_game_server_node_statuses_select_column = 'description' | 'value'


/** update columns of table "e_game_server_node_statuses" */
export type e_game_server_node_statuses_update_column = 'description' | 'value'


/** columns and relationships of "e_lobby_access" */
export interface e_lobby_access {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_lobby_access'
}


/** aggregated selection of "e_lobby_access" */
export interface e_lobby_access_aggregate {
    aggregate: (e_lobby_access_aggregate_fields | null)
    nodes: e_lobby_access[]
    __typename: 'e_lobby_access_aggregate'
}


/** aggregate fields of "e_lobby_access" */
export interface e_lobby_access_aggregate_fields {
    count: Scalars['Int']
    max: (e_lobby_access_max_fields | null)
    min: (e_lobby_access_min_fields | null)
    __typename: 'e_lobby_access_aggregate_fields'
}


/** unique or primary key constraints on table "e_lobby_access" */
export type e_lobby_access_constraint = 'e_lobby_access_pkey'

export type e_lobby_access_enum = 'Friends' | 'Invite' | 'Open' | 'Private'


/** aggregate max on columns */
export interface e_lobby_access_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_lobby_access_max_fields'
}


/** aggregate min on columns */
export interface e_lobby_access_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_lobby_access_min_fields'
}


/** response of any mutation on the table "e_lobby_access" */
export interface e_lobby_access_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_lobby_access[]
    __typename: 'e_lobby_access_mutation_response'
}


/** select columns of table "e_lobby_access" */
export type e_lobby_access_select_column = 'description' | 'value'


/** update columns of table "e_lobby_access" */
export type e_lobby_access_update_column = 'description' | 'value'


/** columns and relationships of "e_lobby_player_status" */
export interface e_lobby_player_status {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_lobby_player_status'
}


/** aggregated selection of "e_lobby_player_status" */
export interface e_lobby_player_status_aggregate {
    aggregate: (e_lobby_player_status_aggregate_fields | null)
    nodes: e_lobby_player_status[]
    __typename: 'e_lobby_player_status_aggregate'
}


/** aggregate fields of "e_lobby_player_status" */
export interface e_lobby_player_status_aggregate_fields {
    count: Scalars['Int']
    max: (e_lobby_player_status_max_fields | null)
    min: (e_lobby_player_status_min_fields | null)
    __typename: 'e_lobby_player_status_aggregate_fields'
}


/** unique or primary key constraints on table "e_lobby_player_status" */
export type e_lobby_player_status_constraint = 'e_lobby_player_status_pkey'

export type e_lobby_player_status_enum = 'Accepted' | 'Invited'


/** aggregate max on columns */
export interface e_lobby_player_status_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_lobby_player_status_max_fields'
}


/** aggregate min on columns */
export interface e_lobby_player_status_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_lobby_player_status_min_fields'
}


/** response of any mutation on the table "e_lobby_player_status" */
export interface e_lobby_player_status_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_lobby_player_status[]
    __typename: 'e_lobby_player_status_mutation_response'
}


/** select columns of table "e_lobby_player_status" */
export type e_lobby_player_status_select_column = 'description' | 'value'


/** update columns of table "e_lobby_player_status" */
export type e_lobby_player_status_update_column = 'description' | 'value'


/** columns and relationships of "e_map_pool_types" */
export interface e_map_pool_types {
    description: (Scalars['String'] | null)
    value: Scalars['String']
    __typename: 'e_map_pool_types'
}


/** aggregated selection of "e_map_pool_types" */
export interface e_map_pool_types_aggregate {
    aggregate: (e_map_pool_types_aggregate_fields | null)
    nodes: e_map_pool_types[]
    __typename: 'e_map_pool_types_aggregate'
}


/** aggregate fields of "e_map_pool_types" */
export interface e_map_pool_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_map_pool_types_max_fields | null)
    min: (e_map_pool_types_min_fields | null)
    __typename: 'e_map_pool_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_map_pool_types" */
export type e_map_pool_types_constraint = 'e_map_pool_types_pkey'

export type e_map_pool_types_enum = 'Competitive' | 'Custom' | 'Duel' | 'Wingman'


/** aggregate max on columns */
export interface e_map_pool_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_map_pool_types_max_fields'
}


/** aggregate min on columns */
export interface e_map_pool_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_map_pool_types_min_fields'
}


/** response of any mutation on the table "e_map_pool_types" */
export interface e_map_pool_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_map_pool_types[]
    __typename: 'e_map_pool_types_mutation_response'
}


/** select columns of table "e_map_pool_types" */
export type e_map_pool_types_select_column = 'description' | 'value'


/** update columns of table "e_map_pool_types" */
export type e_map_pool_types_update_column = 'description' | 'value'


/** columns and relationships of "e_match_map_status" */
export interface e_match_map_status {
    description: Scalars['String']
    /** An array relationship */
    match_maps: match_maps[]
    /** An aggregate relationship */
    match_maps_aggregate: match_maps_aggregate
    value: Scalars['String']
    __typename: 'e_match_map_status'
}


/** aggregated selection of "e_match_map_status" */
export interface e_match_map_status_aggregate {
    aggregate: (e_match_map_status_aggregate_fields | null)
    nodes: e_match_map_status[]
    __typename: 'e_match_map_status_aggregate'
}


/** aggregate fields of "e_match_map_status" */
export interface e_match_map_status_aggregate_fields {
    count: Scalars['Int']
    max: (e_match_map_status_max_fields | null)
    min: (e_match_map_status_min_fields | null)
    __typename: 'e_match_map_status_aggregate_fields'
}


/** unique or primary key constraints on table "e_match_map_status" */
export type e_match_map_status_constraint = 'match_map_status_pkey'

export type e_match_map_status_enum = 'Canceled' | 'Finished' | 'Knife' | 'Live' | 'Overtime' | 'Paused' | 'Scheduled' | 'Warmup'


/** aggregate max on columns */
export interface e_match_map_status_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_map_status_max_fields'
}


/** aggregate min on columns */
export interface e_match_map_status_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_map_status_min_fields'
}


/** response of any mutation on the table "e_match_map_status" */
export interface e_match_map_status_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_match_map_status[]
    __typename: 'e_match_map_status_mutation_response'
}


/** select columns of table "e_match_map_status" */
export type e_match_map_status_select_column = 'description' | 'value'


/** update columns of table "e_match_map_status" */
export type e_match_map_status_update_column = 'description' | 'value'


/** columns and relationships of "e_match_status" */
export interface e_match_status {
    description: Scalars['String']
    /** An array relationship */
    matches: matches[]
    /** An aggregate relationship */
    matches_aggregate: matches_aggregate
    value: Scalars['String']
    __typename: 'e_match_status'
}


/** aggregated selection of "e_match_status" */
export interface e_match_status_aggregate {
    aggregate: (e_match_status_aggregate_fields | null)
    nodes: e_match_status[]
    __typename: 'e_match_status_aggregate'
}


/** aggregate fields of "e_match_status" */
export interface e_match_status_aggregate_fields {
    count: Scalars['Int']
    max: (e_match_status_max_fields | null)
    min: (e_match_status_min_fields | null)
    __typename: 'e_match_status_aggregate_fields'
}


/** unique or primary key constraints on table "e_match_status" */
export type e_match_status_constraint = 'e_match_status_pkey'

export type e_match_status_enum = 'Canceled' | 'Finished' | 'Forfeit' | 'Live' | 'PickingPlayers' | 'Scheduled' | 'Surrendered' | 'Tie' | 'Veto' | 'WaitingForCheckIn' | 'WaitingForServer'


/** aggregate max on columns */
export interface e_match_status_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_status_max_fields'
}


/** aggregate min on columns */
export interface e_match_status_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_status_min_fields'
}


/** response of any mutation on the table "e_match_status" */
export interface e_match_status_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_match_status[]
    __typename: 'e_match_status_mutation_response'
}


/** select columns of table "e_match_status" */
export type e_match_status_select_column = 'description' | 'value'


/** update columns of table "e_match_status" */
export type e_match_status_update_column = 'description' | 'value'


/** columns and relationships of "e_match_types" */
export interface e_match_types {
    /** An array relationship */
    config: match_type_cfgs[]
    /** An aggregate relationship */
    config_aggregate: match_type_cfgs_aggregate
    description: Scalars['String']
    /** An array relationship */
    maps: maps[]
    /** An aggregate relationship */
    maps_aggregate: maps_aggregate
    value: Scalars['String']
    __typename: 'e_match_types'
}


/** aggregated selection of "e_match_types" */
export interface e_match_types_aggregate {
    aggregate: (e_match_types_aggregate_fields | null)
    nodes: e_match_types[]
    __typename: 'e_match_types_aggregate'
}


/** aggregate fields of "e_match_types" */
export interface e_match_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_match_types_max_fields | null)
    min: (e_match_types_min_fields | null)
    __typename: 'e_match_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_match_types" */
export type e_match_types_constraint = 'e_match_types_pkey'

export type e_match_types_enum = 'Competitive' | 'Duel' | 'Wingman'


/** aggregate max on columns */
export interface e_match_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_types_max_fields'
}


/** aggregate min on columns */
export interface e_match_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_match_types_min_fields'
}


/** response of any mutation on the table "e_match_types" */
export interface e_match_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_match_types[]
    __typename: 'e_match_types_mutation_response'
}


/** select columns of table "e_match_types" */
export type e_match_types_select_column = 'description' | 'value'


/** update columns of table "e_match_types" */
export type e_match_types_update_column = 'description' | 'value'


/** columns and relationships of "e_notification_types" */
export interface e_notification_types {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_notification_types'
}


/** aggregated selection of "e_notification_types" */
export interface e_notification_types_aggregate {
    aggregate: (e_notification_types_aggregate_fields | null)
    nodes: e_notification_types[]
    __typename: 'e_notification_types_aggregate'
}


/** aggregate fields of "e_notification_types" */
export interface e_notification_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_notification_types_max_fields | null)
    min: (e_notification_types_min_fields | null)
    __typename: 'e_notification_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_notification_types" */
export type e_notification_types_constraint = 'e_notification_types_pkey'

export type e_notification_types_enum = 'DedicatedServerRconStatus' | 'DedicatedServerStatus' | 'GameNodeStatus' | 'GameUpdate' | 'MatchSupport' | 'NameChangeRequest'


/** aggregate max on columns */
export interface e_notification_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_notification_types_max_fields'
}


/** aggregate min on columns */
export interface e_notification_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_notification_types_min_fields'
}


/** response of any mutation on the table "e_notification_types" */
export interface e_notification_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_notification_types[]
    __typename: 'e_notification_types_mutation_response'
}


/** select columns of table "e_notification_types" */
export type e_notification_types_select_column = 'description' | 'value'


/** update columns of table "e_notification_types" */
export type e_notification_types_update_column = 'description' | 'value'


/** columns and relationships of "e_objective_types" */
export interface e_objective_types {
    description: Scalars['String']
    /** An array relationship */
    player_objectives: player_objectives[]
    /** An aggregate relationship */
    player_objectives_aggregate: player_objectives_aggregate
    value: Scalars['String']
    __typename: 'e_objective_types'
}


/** aggregated selection of "e_objective_types" */
export interface e_objective_types_aggregate {
    aggregate: (e_objective_types_aggregate_fields | null)
    nodes: e_objective_types[]
    __typename: 'e_objective_types_aggregate'
}


/** aggregate fields of "e_objective_types" */
export interface e_objective_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_objective_types_max_fields | null)
    min: (e_objective_types_min_fields | null)
    __typename: 'e_objective_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_objective_types" */
export type e_objective_types_constraint = 'e_objective__pkey'

export type e_objective_types_enum = 'Defused' | 'Exploded' | 'Planted'


/** aggregate max on columns */
export interface e_objective_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_objective_types_max_fields'
}


/** aggregate min on columns */
export interface e_objective_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_objective_types_min_fields'
}


/** response of any mutation on the table "e_objective_types" */
export interface e_objective_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_objective_types[]
    __typename: 'e_objective_types_mutation_response'
}


/** select columns of table "e_objective_types" */
export type e_objective_types_select_column = 'description' | 'value'


/** update columns of table "e_objective_types" */
export type e_objective_types_update_column = 'description' | 'value'


/** columns and relationships of "e_player_roles" */
export interface e_player_roles {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_player_roles'
}


/** aggregated selection of "e_player_roles" */
export interface e_player_roles_aggregate {
    aggregate: (e_player_roles_aggregate_fields | null)
    nodes: e_player_roles[]
    __typename: 'e_player_roles_aggregate'
}


/** aggregate fields of "e_player_roles" */
export interface e_player_roles_aggregate_fields {
    count: Scalars['Int']
    max: (e_player_roles_max_fields | null)
    min: (e_player_roles_min_fields | null)
    __typename: 'e_player_roles_aggregate_fields'
}


/** unique or primary key constraints on table "e_player_roles" */
export type e_player_roles_constraint = 'e_player_roles_pkey'

export type e_player_roles_enum = 'administrator' | 'match_organizer' | 'streamer' | 'tournament_organizer' | 'user' | 'verified_user'


/** aggregate max on columns */
export interface e_player_roles_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_player_roles_max_fields'
}


/** aggregate min on columns */
export interface e_player_roles_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_player_roles_min_fields'
}


/** response of any mutation on the table "e_player_roles" */
export interface e_player_roles_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_player_roles[]
    __typename: 'e_player_roles_mutation_response'
}


/** select columns of table "e_player_roles" */
export type e_player_roles_select_column = 'description' | 'value'


/** update columns of table "e_player_roles" */
export type e_player_roles_update_column = 'description' | 'value'


/** columns and relationships of "e_ready_settings" */
export interface e_ready_settings {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_ready_settings'
}


/** aggregated selection of "e_ready_settings" */
export interface e_ready_settings_aggregate {
    aggregate: (e_ready_settings_aggregate_fields | null)
    nodes: e_ready_settings[]
    __typename: 'e_ready_settings_aggregate'
}


/** aggregate fields of "e_ready_settings" */
export interface e_ready_settings_aggregate_fields {
    count: Scalars['Int']
    max: (e_ready_settings_max_fields | null)
    min: (e_ready_settings_min_fields | null)
    __typename: 'e_ready_settings_aggregate_fields'
}


/** unique or primary key constraints on table "e_ready_settings" */
export type e_ready_settings_constraint = 'e_ready_settings_pkey'

export type e_ready_settings_enum = 'Admin' | 'Captains' | 'Coach' | 'Players'


/** aggregate max on columns */
export interface e_ready_settings_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_ready_settings_max_fields'
}


/** aggregate min on columns */
export interface e_ready_settings_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_ready_settings_min_fields'
}


/** response of any mutation on the table "e_ready_settings" */
export interface e_ready_settings_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_ready_settings[]
    __typename: 'e_ready_settings_mutation_response'
}


/** select columns of table "e_ready_settings" */
export type e_ready_settings_select_column = 'description' | 'value'


/** update columns of table "e_ready_settings" */
export type e_ready_settings_update_column = 'description' | 'value'


/** columns and relationships of "e_sanction_types" */
export interface e_sanction_types {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_sanction_types'
}


/** aggregated selection of "e_sanction_types" */
export interface e_sanction_types_aggregate {
    aggregate: (e_sanction_types_aggregate_fields | null)
    nodes: e_sanction_types[]
    __typename: 'e_sanction_types_aggregate'
}


/** aggregate fields of "e_sanction_types" */
export interface e_sanction_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_sanction_types_max_fields | null)
    min: (e_sanction_types_min_fields | null)
    __typename: 'e_sanction_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_sanction_types" */
export type e_sanction_types_constraint = 'e_sanction_types_pkey'

export type e_sanction_types_enum = 'ban' | 'gag' | 'mute' | 'silence'


/** aggregate max on columns */
export interface e_sanction_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_sanction_types_max_fields'
}


/** aggregate min on columns */
export interface e_sanction_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_sanction_types_min_fields'
}


/** response of any mutation on the table "e_sanction_types" */
export interface e_sanction_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_sanction_types[]
    __typename: 'e_sanction_types_mutation_response'
}


/** select columns of table "e_sanction_types" */
export type e_sanction_types_select_column = 'description' | 'value'


/** update columns of table "e_sanction_types" */
export type e_sanction_types_update_column = 'description' | 'value'


/** columns and relationships of "e_sides" */
export interface e_sides {
    description: Scalars['String']
    /** An array relationship */
    match_map_lineup_1: match_maps[]
    /** An aggregate relationship */
    match_map_lineup_1_aggregate: match_maps_aggregate
    /** An array relationship */
    match_map_lineup_2: match_maps[]
    /** An aggregate relationship */
    match_map_lineup_2_aggregate: match_maps_aggregate
    value: Scalars['String']
    __typename: 'e_sides'
}


/** aggregated selection of "e_sides" */
export interface e_sides_aggregate {
    aggregate: (e_sides_aggregate_fields | null)
    nodes: e_sides[]
    __typename: 'e_sides_aggregate'
}


/** aggregate fields of "e_sides" */
export interface e_sides_aggregate_fields {
    count: Scalars['Int']
    max: (e_sides_max_fields | null)
    min: (e_sides_min_fields | null)
    __typename: 'e_sides_aggregate_fields'
}


/** unique or primary key constraints on table "e_sides" */
export type e_sides_constraint = 'e_teams_pkey'

export type e_sides_enum = 'CT' | 'None' | 'Spectator' | 'TERRORIST'


/** aggregate max on columns */
export interface e_sides_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_sides_max_fields'
}


/** aggregate min on columns */
export interface e_sides_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_sides_min_fields'
}


/** response of any mutation on the table "e_sides" */
export interface e_sides_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_sides[]
    __typename: 'e_sides_mutation_response'
}


/** select columns of table "e_sides" */
export type e_sides_select_column = 'description' | 'value'


/** update columns of table "e_sides" */
export type e_sides_update_column = 'description' | 'value'


/** columns and relationships of "e_team_roles" */
export interface e_team_roles {
    description: Scalars['String']
    /** An array relationship */
    team_rosters: team_roster[]
    /** An aggregate relationship */
    team_rosters_aggregate: team_roster_aggregate
    /** An array relationship */
    tournament_team_rosters: tournament_team_roster[]
    /** An aggregate relationship */
    tournament_team_rosters_aggregate: tournament_team_roster_aggregate
    value: Scalars['String']
    __typename: 'e_team_roles'
}


/** aggregated selection of "e_team_roles" */
export interface e_team_roles_aggregate {
    aggregate: (e_team_roles_aggregate_fields | null)
    nodes: e_team_roles[]
    __typename: 'e_team_roles_aggregate'
}


/** aggregate fields of "e_team_roles" */
export interface e_team_roles_aggregate_fields {
    count: Scalars['Int']
    max: (e_team_roles_max_fields | null)
    min: (e_team_roles_min_fields | null)
    __typename: 'e_team_roles_aggregate_fields'
}


/** unique or primary key constraints on table "e_team_roles" */
export type e_team_roles_constraint = 'e_team_roles_pkey'

export type e_team_roles_enum = 'Admin' | 'Invite' | 'Member'


/** aggregate max on columns */
export interface e_team_roles_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_team_roles_max_fields'
}


/** aggregate min on columns */
export interface e_team_roles_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_team_roles_min_fields'
}


/** response of any mutation on the table "e_team_roles" */
export interface e_team_roles_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_team_roles[]
    __typename: 'e_team_roles_mutation_response'
}


/** select columns of table "e_team_roles" */
export type e_team_roles_select_column = 'description' | 'value'


/** update columns of table "e_team_roles" */
export type e_team_roles_update_column = 'description' | 'value'


/** columns and relationships of "e_timeout_settings" */
export interface e_timeout_settings {
    description: Scalars['String']
    value: Scalars['String']
    __typename: 'e_timeout_settings'
}


/** aggregated selection of "e_timeout_settings" */
export interface e_timeout_settings_aggregate {
    aggregate: (e_timeout_settings_aggregate_fields | null)
    nodes: e_timeout_settings[]
    __typename: 'e_timeout_settings_aggregate'
}


/** aggregate fields of "e_timeout_settings" */
export interface e_timeout_settings_aggregate_fields {
    count: Scalars['Int']
    max: (e_timeout_settings_max_fields | null)
    min: (e_timeout_settings_min_fields | null)
    __typename: 'e_timeout_settings_aggregate_fields'
}


/** unique or primary key constraints on table "e_timeout_settings" */
export type e_timeout_settings_constraint = 'e_timeout_settings_pkey'

export type e_timeout_settings_enum = 'Admin' | 'Coach' | 'CoachAndCaptains' | 'CoachAndPlayers'


/** aggregate max on columns */
export interface e_timeout_settings_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_timeout_settings_max_fields'
}


/** aggregate min on columns */
export interface e_timeout_settings_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_timeout_settings_min_fields'
}


/** response of any mutation on the table "e_timeout_settings" */
export interface e_timeout_settings_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_timeout_settings[]
    __typename: 'e_timeout_settings_mutation_response'
}


/** select columns of table "e_timeout_settings" */
export type e_timeout_settings_select_column = 'description' | 'value'


/** update columns of table "e_timeout_settings" */
export type e_timeout_settings_update_column = 'description' | 'value'


/** columns and relationships of "e_tournament_stage_types" */
export interface e_tournament_stage_types {
    description: Scalars['String']
    /** An array relationship */
    tournament_stages: tournament_stages[]
    /** An aggregate relationship */
    tournament_stages_aggregate: tournament_stages_aggregate
    value: Scalars['String']
    __typename: 'e_tournament_stage_types'
}


/** aggregated selection of "e_tournament_stage_types" */
export interface e_tournament_stage_types_aggregate {
    aggregate: (e_tournament_stage_types_aggregate_fields | null)
    nodes: e_tournament_stage_types[]
    __typename: 'e_tournament_stage_types_aggregate'
}


/** aggregate fields of "e_tournament_stage_types" */
export interface e_tournament_stage_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_tournament_stage_types_max_fields | null)
    min: (e_tournament_stage_types_min_fields | null)
    __typename: 'e_tournament_stage_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_tournament_stage_types" */
export type e_tournament_stage_types_constraint = 'e_tournament_stage_types_pkey'

export type e_tournament_stage_types_enum = 'SingleElimination'


/** aggregate max on columns */
export interface e_tournament_stage_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_tournament_stage_types_max_fields'
}


/** aggregate min on columns */
export interface e_tournament_stage_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_tournament_stage_types_min_fields'
}


/** response of any mutation on the table "e_tournament_stage_types" */
export interface e_tournament_stage_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_tournament_stage_types[]
    __typename: 'e_tournament_stage_types_mutation_response'
}


/** select columns of table "e_tournament_stage_types" */
export type e_tournament_stage_types_select_column = 'description' | 'value'


/** update columns of table "e_tournament_stage_types" */
export type e_tournament_stage_types_update_column = 'description' | 'value'


/** columns and relationships of "e_tournament_status" */
export interface e_tournament_status {
    description: Scalars['String']
    /** An array relationship */
    tournaments: tournaments[]
    /** An aggregate relationship */
    tournaments_aggregate: tournaments_aggregate
    value: Scalars['String']
    __typename: 'e_tournament_status'
}


/** aggregated selection of "e_tournament_status" */
export interface e_tournament_status_aggregate {
    aggregate: (e_tournament_status_aggregate_fields | null)
    nodes: e_tournament_status[]
    __typename: 'e_tournament_status_aggregate'
}


/** aggregate fields of "e_tournament_status" */
export interface e_tournament_status_aggregate_fields {
    count: Scalars['Int']
    max: (e_tournament_status_max_fields | null)
    min: (e_tournament_status_min_fields | null)
    __typename: 'e_tournament_status_aggregate_fields'
}


/** unique or primary key constraints on table "e_tournament_status" */
export type e_tournament_status_constraint = 'e_tournament_status_pkey'

export type e_tournament_status_enum = 'Cancelled' | 'CancelledMinTeams' | 'Finished' | 'Live' | 'RegistrationClosed' | 'RegistrationOpen' | 'Setup'


/** aggregate max on columns */
export interface e_tournament_status_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_tournament_status_max_fields'
}


/** aggregate min on columns */
export interface e_tournament_status_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_tournament_status_min_fields'
}


/** response of any mutation on the table "e_tournament_status" */
export interface e_tournament_status_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_tournament_status[]
    __typename: 'e_tournament_status_mutation_response'
}


/** select columns of table "e_tournament_status" */
export type e_tournament_status_select_column = 'description' | 'value'


/** update columns of table "e_tournament_status" */
export type e_tournament_status_update_column = 'description' | 'value'


/** columns and relationships of "e_utility_types" */
export interface e_utility_types {
    description: Scalars['String']
    /** An array relationship */
    player_utilities: player_utility[]
    /** An aggregate relationship */
    player_utilities_aggregate: player_utility_aggregate
    value: Scalars['String']
    __typename: 'e_utility_types'
}


/** aggregated selection of "e_utility_types" */
export interface e_utility_types_aggregate {
    aggregate: (e_utility_types_aggregate_fields | null)
    nodes: e_utility_types[]
    __typename: 'e_utility_types_aggregate'
}


/** aggregate fields of "e_utility_types" */
export interface e_utility_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_utility_types_max_fields | null)
    min: (e_utility_types_min_fields | null)
    __typename: 'e_utility_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_utility_types" */
export type e_utility_types_constraint = 'e_utility_types_pkey'

export type e_utility_types_enum = 'Decoy' | 'Flash' | 'HighExplosive' | 'Molotov' | 'Smoke'


/** aggregate max on columns */
export interface e_utility_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_utility_types_max_fields'
}


/** aggregate min on columns */
export interface e_utility_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_utility_types_min_fields'
}


/** response of any mutation on the table "e_utility_types" */
export interface e_utility_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_utility_types[]
    __typename: 'e_utility_types_mutation_response'
}


/** select columns of table "e_utility_types" */
export type e_utility_types_select_column = 'description' | 'value'


/** update columns of table "e_utility_types" */
export type e_utility_types_update_column = 'description' | 'value'


/** columns and relationships of "e_veto_pick_types" */
export interface e_veto_pick_types {
    description: Scalars['String']
    /** An array relationship */
    match_veto_picks: match_map_veto_picks[]
    /** An aggregate relationship */
    match_veto_picks_aggregate: match_map_veto_picks_aggregate
    value: Scalars['String']
    __typename: 'e_veto_pick_types'
}


/** aggregated selection of "e_veto_pick_types" */
export interface e_veto_pick_types_aggregate {
    aggregate: (e_veto_pick_types_aggregate_fields | null)
    nodes: e_veto_pick_types[]
    __typename: 'e_veto_pick_types_aggregate'
}


/** aggregate fields of "e_veto_pick_types" */
export interface e_veto_pick_types_aggregate_fields {
    count: Scalars['Int']
    max: (e_veto_pick_types_max_fields | null)
    min: (e_veto_pick_types_min_fields | null)
    __typename: 'e_veto_pick_types_aggregate_fields'
}


/** unique or primary key constraints on table "e_veto_pick_types" */
export type e_veto_pick_types_constraint = 'e_veto_pick_type_pkey'

export type e_veto_pick_types_enum = 'Ban' | 'Decider' | 'Pick' | 'Side'


/** aggregate max on columns */
export interface e_veto_pick_types_max_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_veto_pick_types_max_fields'
}


/** aggregate min on columns */
export interface e_veto_pick_types_min_fields {
    description: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'e_veto_pick_types_min_fields'
}


/** response of any mutation on the table "e_veto_pick_types" */
export interface e_veto_pick_types_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: e_veto_pick_types[]
    __typename: 'e_veto_pick_types_mutation_response'
}


/** select columns of table "e_veto_pick_types" */
export type e_veto_pick_types_select_column = 'description' | 'value'


/** update columns of table "e_veto_pick_types" */
export type e_veto_pick_types_update_column = 'description' | 'value'


/** columns and relationships of "friends" */
export interface friends {
    /** An object relationship */
    e_status: e_friend_status
    other_player_steam_id: Scalars['bigint']
    player_steam_id: Scalars['bigint']
    status: e_friend_status_enum
    __typename: 'friends'
}


/** aggregated selection of "friends" */
export interface friends_aggregate {
    aggregate: (friends_aggregate_fields | null)
    nodes: friends[]
    __typename: 'friends_aggregate'
}


/** aggregate fields of "friends" */
export interface friends_aggregate_fields {
    avg: (friends_avg_fields | null)
    count: Scalars['Int']
    max: (friends_max_fields | null)
    min: (friends_min_fields | null)
    stddev: (friends_stddev_fields | null)
    stddev_pop: (friends_stddev_pop_fields | null)
    stddev_samp: (friends_stddev_samp_fields | null)
    sum: (friends_sum_fields | null)
    var_pop: (friends_var_pop_fields | null)
    var_samp: (friends_var_samp_fields | null)
    variance: (friends_variance_fields | null)
    __typename: 'friends_aggregate_fields'
}


/** aggregate avg on columns */
export interface friends_avg_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_avg_fields'
}


/** unique or primary key constraints on table "friends" */
export type friends_constraint = 'friends_pkey'


/** aggregate max on columns */
export interface friends_max_fields {
    other_player_steam_id: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    __typename: 'friends_max_fields'
}


/** aggregate min on columns */
export interface friends_min_fields {
    other_player_steam_id: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    __typename: 'friends_min_fields'
}


/** response of any mutation on the table "friends" */
export interface friends_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: friends[]
    __typename: 'friends_mutation_response'
}


/** select columns of table "friends" */
export type friends_select_column = 'other_player_steam_id' | 'player_steam_id' | 'status'


/** aggregate stddev on columns */
export interface friends_stddev_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface friends_stddev_pop_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface friends_stddev_samp_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface friends_sum_fields {
    other_player_steam_id: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    __typename: 'friends_sum_fields'
}


/** update columns of table "friends" */
export type friends_update_column = 'other_player_steam_id' | 'player_steam_id' | 'status'


/** aggregate var_pop on columns */
export interface friends_var_pop_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface friends_var_samp_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_var_samp_fields'
}


/** aggregate variance on columns */
export interface friends_variance_fields {
    other_player_steam_id: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'friends_variance_fields'
}


/** columns and relationships of "game_server_nodes" */
export interface game_server_nodes {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Int'] | null)
    /** An object relationship */
    e_region: (server_regions | null)
    /** An object relationship */
    e_status: (e_game_server_node_statuses | null)
    enabled: Scalars['Boolean']
    end_port_range: (Scalars['Int'] | null)
    id: Scalars['String']
    label: (Scalars['String'] | null)
    lan_ip: (Scalars['inet'] | null)
    node_ip: (Scalars['inet'] | null)
    public_ip: (Scalars['inet'] | null)
    region: (Scalars['String'] | null)
    /** An array relationship */
    servers: servers[]
    /** An aggregate relationship */
    servers_aggregate: servers_aggregate
    start_port_range: (Scalars['Int'] | null)
    status: (e_game_server_node_statuses_enum | null)
    supports_cpu_pinning: Scalars['Boolean']
    supports_low_latency: Scalars['Boolean']
    token: (Scalars['String'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    update_status: (Scalars['String'] | null)
    __typename: 'game_server_nodes'
}


/** aggregated selection of "game_server_nodes" */
export interface game_server_nodes_aggregate {
    aggregate: (game_server_nodes_aggregate_fields | null)
    nodes: game_server_nodes[]
    __typename: 'game_server_nodes_aggregate'
}


/** aggregate fields of "game_server_nodes" */
export interface game_server_nodes_aggregate_fields {
    avg: (game_server_nodes_avg_fields | null)
    count: Scalars['Int']
    max: (game_server_nodes_max_fields | null)
    min: (game_server_nodes_min_fields | null)
    stddev: (game_server_nodes_stddev_fields | null)
    stddev_pop: (game_server_nodes_stddev_pop_fields | null)
    stddev_samp: (game_server_nodes_stddev_samp_fields | null)
    sum: (game_server_nodes_sum_fields | null)
    var_pop: (game_server_nodes_var_pop_fields | null)
    var_samp: (game_server_nodes_var_samp_fields | null)
    variance: (game_server_nodes_variance_fields | null)
    __typename: 'game_server_nodes_aggregate_fields'
}


/** aggregate avg on columns */
export interface game_server_nodes_avg_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_avg_fields'
}


/** unique or primary key constraints on table "game_server_nodes" */
export type game_server_nodes_constraint = 'game_server_nodes_pkey'


/** aggregate max on columns */
export interface game_server_nodes_max_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Int'] | null)
    end_port_range: (Scalars['Int'] | null)
    id: (Scalars['String'] | null)
    label: (Scalars['String'] | null)
    region: (Scalars['String'] | null)
    start_port_range: (Scalars['Int'] | null)
    token: (Scalars['String'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    update_status: (Scalars['String'] | null)
    __typename: 'game_server_nodes_max_fields'
}


/** aggregate min on columns */
export interface game_server_nodes_min_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Int'] | null)
    end_port_range: (Scalars['Int'] | null)
    id: (Scalars['String'] | null)
    label: (Scalars['String'] | null)
    region: (Scalars['String'] | null)
    start_port_range: (Scalars['Int'] | null)
    token: (Scalars['String'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    update_status: (Scalars['String'] | null)
    __typename: 'game_server_nodes_min_fields'
}


/** response of any mutation on the table "game_server_nodes" */
export interface game_server_nodes_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: game_server_nodes[]
    __typename: 'game_server_nodes_mutation_response'
}


/** select columns of table "game_server_nodes" */
export type game_server_nodes_select_column = 'build_id' | 'enabled' | 'end_port_range' | 'id' | 'label' | 'lan_ip' | 'node_ip' | 'public_ip' | 'region' | 'start_port_range' | 'status' | 'supports_cpu_pinning' | 'supports_low_latency' | 'token' | 'update_status'


/** select "game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "game_server_nodes" */
export type game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns = 'enabled' | 'supports_cpu_pinning' | 'supports_low_latency'


/** select "game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "game_server_nodes" */
export type game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns = 'enabled' | 'supports_cpu_pinning' | 'supports_low_latency'


/** aggregate stddev on columns */
export interface game_server_nodes_stddev_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface game_server_nodes_stddev_pop_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface game_server_nodes_stddev_samp_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface game_server_nodes_sum_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Int'] | null)
    end_port_range: (Scalars['Int'] | null)
    start_port_range: (Scalars['Int'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_sum_fields'
}


/** update columns of table "game_server_nodes" */
export type game_server_nodes_update_column = 'build_id' | 'enabled' | 'end_port_range' | 'id' | 'label' | 'lan_ip' | 'node_ip' | 'public_ip' | 'region' | 'start_port_range' | 'status' | 'supports_cpu_pinning' | 'supports_low_latency' | 'token' | 'update_status'


/** aggregate var_pop on columns */
export interface game_server_nodes_var_pop_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface game_server_nodes_var_samp_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_var_samp_fields'
}


/** aggregate variance on columns */
export interface game_server_nodes_variance_fields {
    /** A computed field, executes function "available_node_server_count" */
    available_server_count: (Scalars['Int'] | null)
    build_id: (Scalars['Float'] | null)
    end_port_range: (Scalars['Float'] | null)
    start_port_range: (Scalars['Float'] | null)
    /** A computed field, executes function "total_node_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'game_server_nodes_variance_fields'
}


/** columns and relationships of "lobbies" */
export interface lobbies {
    access: e_lobby_access_enum
    created_at: Scalars['timestamptz']
    /** An object relationship */
    e_lobby_access: e_lobby_access
    id: Scalars['uuid']
    /** An array relationship */
    players: lobby_players[]
    /** An aggregate relationship */
    players_aggregate: lobby_players_aggregate
    __typename: 'lobbies'
}


/** aggregated selection of "lobbies" */
export interface lobbies_aggregate {
    aggregate: (lobbies_aggregate_fields | null)
    nodes: lobbies[]
    __typename: 'lobbies_aggregate'
}


/** aggregate fields of "lobbies" */
export interface lobbies_aggregate_fields {
    count: Scalars['Int']
    max: (lobbies_max_fields | null)
    min: (lobbies_min_fields | null)
    __typename: 'lobbies_aggregate_fields'
}


/** unique or primary key constraints on table "lobbies" */
export type lobbies_constraint = 'lobbies_pkey'


/** aggregate max on columns */
export interface lobbies_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    __typename: 'lobbies_max_fields'
}


/** aggregate min on columns */
export interface lobbies_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    __typename: 'lobbies_min_fields'
}


/** response of any mutation on the table "lobbies" */
export interface lobbies_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: lobbies[]
    __typename: 'lobbies_mutation_response'
}


/** select columns of table "lobbies" */
export type lobbies_select_column = 'access' | 'created_at' | 'id'


/** update columns of table "lobbies" */
export type lobbies_update_column = 'access' | 'created_at' | 'id'


/** columns and relationships of "lobby_players" */
export interface lobby_players {
    captain: Scalars['Boolean']
    invited_by_steam_id: (Scalars['bigint'] | null)
    /** An object relationship */
    lobby: lobbies
    lobby_id: Scalars['uuid']
    /** An object relationship */
    player: players
    status: (e_lobby_player_status_enum | null)
    steam_id: Scalars['bigint']
    __typename: 'lobby_players'
}


/** aggregated selection of "lobby_players" */
export interface lobby_players_aggregate {
    aggregate: (lobby_players_aggregate_fields | null)
    nodes: lobby_players[]
    __typename: 'lobby_players_aggregate'
}


/** aggregate fields of "lobby_players" */
export interface lobby_players_aggregate_fields {
    avg: (lobby_players_avg_fields | null)
    count: Scalars['Int']
    max: (lobby_players_max_fields | null)
    min: (lobby_players_min_fields | null)
    stddev: (lobby_players_stddev_fields | null)
    stddev_pop: (lobby_players_stddev_pop_fields | null)
    stddev_samp: (lobby_players_stddev_samp_fields | null)
    sum: (lobby_players_sum_fields | null)
    var_pop: (lobby_players_var_pop_fields | null)
    var_samp: (lobby_players_var_samp_fields | null)
    variance: (lobby_players_variance_fields | null)
    __typename: 'lobby_players_aggregate_fields'
}


/** aggregate avg on columns */
export interface lobby_players_avg_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_avg_fields'
}


/** unique or primary key constraints on table "lobby_players" */
export type lobby_players_constraint = 'lobby_players_pkey'


/** aggregate max on columns */
export interface lobby_players_max_fields {
    invited_by_steam_id: (Scalars['bigint'] | null)
    lobby_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'lobby_players_max_fields'
}


/** aggregate min on columns */
export interface lobby_players_min_fields {
    invited_by_steam_id: (Scalars['bigint'] | null)
    lobby_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'lobby_players_min_fields'
}


/** response of any mutation on the table "lobby_players" */
export interface lobby_players_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: lobby_players[]
    __typename: 'lobby_players_mutation_response'
}


/** select columns of table "lobby_players" */
export type lobby_players_select_column = 'captain' | 'invited_by_steam_id' | 'lobby_id' | 'status' | 'steam_id'


/** select "lobby_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "lobby_players" */
export type lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_and_arguments_columns = 'captain'


/** select "lobby_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "lobby_players" */
export type lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_or_arguments_columns = 'captain'


/** aggregate stddev on columns */
export interface lobby_players_stddev_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface lobby_players_stddev_pop_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface lobby_players_stddev_samp_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface lobby_players_sum_fields {
    invited_by_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'lobby_players_sum_fields'
}


/** update columns of table "lobby_players" */
export type lobby_players_update_column = 'captain' | 'invited_by_steam_id' | 'lobby_id' | 'status' | 'steam_id'


/** aggregate var_pop on columns */
export interface lobby_players_var_pop_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface lobby_players_var_samp_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_var_samp_fields'
}


/** aggregate variance on columns */
export interface lobby_players_variance_fields {
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'lobby_players_variance_fields'
}


/** columns and relationships of "map_pools" */
export interface map_pools {
    /** An object relationship */
    e_type: e_map_pool_types
    enabled: Scalars['Boolean']
    id: Scalars['uuid']
    /** An array relationship */
    maps: v_pool_maps[]
    /** An aggregate relationship */
    maps_aggregate: v_pool_maps_aggregate
    seed: Scalars['Boolean']
    type: e_map_pool_types_enum
    __typename: 'map_pools'
}


/** aggregated selection of "map_pools" */
export interface map_pools_aggregate {
    aggregate: (map_pools_aggregate_fields | null)
    nodes: map_pools[]
    __typename: 'map_pools_aggregate'
}


/** aggregate fields of "map_pools" */
export interface map_pools_aggregate_fields {
    count: Scalars['Int']
    max: (map_pools_max_fields | null)
    min: (map_pools_min_fields | null)
    __typename: 'map_pools_aggregate_fields'
}


/** unique or primary key constraints on table "map_pools" */
export type map_pools_constraint = 'map_pools_pkey'


/** aggregate max on columns */
export interface map_pools_max_fields {
    id: (Scalars['uuid'] | null)
    __typename: 'map_pools_max_fields'
}


/** aggregate min on columns */
export interface map_pools_min_fields {
    id: (Scalars['uuid'] | null)
    __typename: 'map_pools_min_fields'
}


/** response of any mutation on the table "map_pools" */
export interface map_pools_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: map_pools[]
    __typename: 'map_pools_mutation_response'
}


/** select columns of table "map_pools" */
export type map_pools_select_column = 'enabled' | 'id' | 'seed' | 'type'


/** update columns of table "map_pools" */
export type map_pools_update_column = 'enabled' | 'id' | 'seed' | 'type'


/** columns and relationships of "maps" */
export interface maps {
    active_pool: Scalars['Boolean']
    /** An object relationship */
    e_match_type: e_match_types
    enabled: Scalars['Boolean']
    id: Scalars['uuid']
    label: (Scalars['String'] | null)
    /** An array relationship */
    match_maps: match_maps[]
    /** An aggregate relationship */
    match_maps_aggregate: match_maps_aggregate
    /** An array relationship */
    match_veto_picks: match_map_veto_picks[]
    /** An aggregate relationship */
    match_veto_picks_aggregate: match_map_veto_picks_aggregate
    name: Scalars['String']
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    type: e_match_types_enum
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'maps'
}


/** aggregated selection of "maps" */
export interface maps_aggregate {
    aggregate: (maps_aggregate_fields | null)
    nodes: maps[]
    __typename: 'maps_aggregate'
}


/** aggregate fields of "maps" */
export interface maps_aggregate_fields {
    count: Scalars['Int']
    max: (maps_max_fields | null)
    min: (maps_min_fields | null)
    __typename: 'maps_aggregate_fields'
}


/** unique or primary key constraints on table "maps" */
export type maps_constraint = 'maps_name_type_key' | 'maps_pkey'


/** aggregate max on columns */
export interface maps_max_fields {
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    name: (Scalars['String'] | null)
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'maps_max_fields'
}


/** aggregate min on columns */
export interface maps_min_fields {
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    name: (Scalars['String'] | null)
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'maps_min_fields'
}


/** response of any mutation on the table "maps" */
export interface maps_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: maps[]
    __typename: 'maps_mutation_response'
}


/** select columns of table "maps" */
export type maps_select_column = 'active_pool' | 'enabled' | 'id' | 'label' | 'name' | 'patch' | 'poster' | 'type' | 'workshop_map_id'


/** select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps" */
export type maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns = 'active_pool' | 'enabled'


/** select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps" */
export type maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns = 'active_pool' | 'enabled'


/** update columns of table "maps" */
export type maps_update_column = 'active_pool' | 'enabled' | 'id' | 'label' | 'name' | 'patch' | 'poster' | 'type' | 'workshop_map_id'


/** columns and relationships of "match_invites" */
export interface match_invites {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    invited_by: players
    invited_by_player_steam_id: Scalars['bigint']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    player: players
    steam_id: Scalars['bigint']
    __typename: 'match_invites'
}


/** aggregated selection of "match_invites" */
export interface match_invites_aggregate {
    aggregate: (match_invites_aggregate_fields | null)
    nodes: match_invites[]
    __typename: 'match_invites_aggregate'
}


/** aggregate fields of "match_invites" */
export interface match_invites_aggregate_fields {
    avg: (match_invites_avg_fields | null)
    count: Scalars['Int']
    max: (match_invites_max_fields | null)
    min: (match_invites_min_fields | null)
    stddev: (match_invites_stddev_fields | null)
    stddev_pop: (match_invites_stddev_pop_fields | null)
    stddev_samp: (match_invites_stddev_samp_fields | null)
    sum: (match_invites_sum_fields | null)
    var_pop: (match_invites_var_pop_fields | null)
    var_samp: (match_invites_var_samp_fields | null)
    variance: (match_invites_variance_fields | null)
    __typename: 'match_invites_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_invites_avg_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_avg_fields'
}


/** unique or primary key constraints on table "match_invites" */
export type match_invites_constraint = 'match_invites_match_id_invited_by_player_steam_id_steam_id_key' | 'match_invites_pkey'


/** aggregate max on columns */
export interface match_invites_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    match_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_invites_max_fields'
}


/** aggregate min on columns */
export interface match_invites_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    match_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_invites_min_fields'
}


/** response of any mutation on the table "match_invites" */
export interface match_invites_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_invites[]
    __typename: 'match_invites_mutation_response'
}


/** select columns of table "match_invites" */
export type match_invites_select_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'match_id' | 'steam_id'


/** aggregate stddev on columns */
export interface match_invites_stddev_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_invites_stddev_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_invites_stddev_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_invites_sum_fields {
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_invites_sum_fields'
}


/** update columns of table "match_invites" */
export type match_invites_update_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'match_id' | 'steam_id'


/** aggregate var_pop on columns */
export interface match_invites_var_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_invites_var_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_invites_variance_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_invites_variance_fields'
}


/** relational table for assigning a players to a match and lineup */
export interface match_lineup_players {
    captain: Scalars['Boolean']
    checked_in: Scalars['Boolean']
    discord_id: (Scalars['String'] | null)
    id: Scalars['uuid']
    /** An object relationship */
    lineup: match_lineups
    match_lineup_id: Scalars['uuid']
    placeholder_name: (Scalars['String'] | null)
    /** An object relationship */
    player: (players | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_lineup_players'
}


/** aggregated selection of "match_lineup_players" */
export interface match_lineup_players_aggregate {
    aggregate: (match_lineup_players_aggregate_fields | null)
    nodes: match_lineup_players[]
    __typename: 'match_lineup_players_aggregate'
}


/** aggregate fields of "match_lineup_players" */
export interface match_lineup_players_aggregate_fields {
    avg: (match_lineup_players_avg_fields | null)
    count: Scalars['Int']
    max: (match_lineup_players_max_fields | null)
    min: (match_lineup_players_min_fields | null)
    stddev: (match_lineup_players_stddev_fields | null)
    stddev_pop: (match_lineup_players_stddev_pop_fields | null)
    stddev_samp: (match_lineup_players_stddev_samp_fields | null)
    sum: (match_lineup_players_sum_fields | null)
    var_pop: (match_lineup_players_var_pop_fields | null)
    var_samp: (match_lineup_players_var_samp_fields | null)
    variance: (match_lineup_players_variance_fields | null)
    __typename: 'match_lineup_players_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_lineup_players_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_avg_fields'
}


/** unique or primary key constraints on table "match_lineup_players" */
export type match_lineup_players_constraint = 'match_lineup_players_match_lineup_id_placeholder_name_key' | 'match_lineup_players_match_lineup_id_steam_id_key' | 'match_members_pkey'


/** aggregate max on columns */
export interface match_lineup_players_max_fields {
    discord_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    placeholder_name: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_lineup_players_max_fields'
}


/** aggregate min on columns */
export interface match_lineup_players_min_fields {
    discord_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    placeholder_name: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_lineup_players_min_fields'
}


/** response of any mutation on the table "match_lineup_players" */
export interface match_lineup_players_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_lineup_players[]
    __typename: 'match_lineup_players_mutation_response'
}


/** select columns of table "match_lineup_players" */
export type match_lineup_players_select_column = 'captain' | 'checked_in' | 'discord_id' | 'id' | 'match_lineup_id' | 'placeholder_name' | 'steam_id'


/** select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players" */
export type match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns = 'captain' | 'checked_in'


/** select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players" */
export type match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns = 'captain' | 'checked_in'


/** aggregate stddev on columns */
export interface match_lineup_players_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_lineup_players_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_lineup_players_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_lineup_players_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'match_lineup_players_sum_fields'
}


/** update columns of table "match_lineup_players" */
export type match_lineup_players_update_column = 'captain' | 'checked_in' | 'discord_id' | 'id' | 'match_lineup_id' | 'placeholder_name' | 'steam_id'


/** aggregate var_pop on columns */
export interface match_lineup_players_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_lineup_players_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_lineup_players_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineup_players_variance_fields'
}


/** relational table for assigning a team to a match and lineup */
export interface match_lineups {
    /** A computed field, executes function "can_pick_map_veto" */
    can_pick_map_veto: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_pick_region_veto" */
    can_pick_region_veto: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_update_lineup" */
    can_update_lineup: (Scalars['Boolean'] | null)
    /** An object relationship */
    captain: (v_match_captains | null)
    /** An object relationship */
    coach: (players | null)
    coach_steam_id: (Scalars['bigint'] | null)
    id: Scalars['uuid']
    /** A computed field, executes function "is_on_lineup" */
    is_on_lineup: (Scalars['Boolean'] | null)
    /** A computed field, executes function "lineup_is_picking_map_veto" */
    is_picking_map_veto: (Scalars['Boolean'] | null)
    /** A computed field, executes function "lineup_is_picking_region_veto" */
    is_picking_region_veto: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_match_lineup_ready" */
    is_ready: (Scalars['Boolean'] | null)
    /** An array relationship */
    lineup_players: match_lineup_players[]
    /** An aggregate relationship */
    lineup_players_aggregate: match_lineup_players_aggregate
    /** An array relationship */
    match_veto_picks: match_map_veto_picks[]
    /** An aggregate relationship */
    match_veto_picks_aggregate: match_map_veto_picks_aggregate
    /** A computed field, executes function "get_team_name" */
    name: (Scalars['String'] | null)
    /** An object relationship */
    team: (teams | null)
    team_id: (Scalars['uuid'] | null)
    /** An object relationship */
    v_match_lineup: (v_match_lineups | null)
    __typename: 'match_lineups'
}


/** aggregated selection of "match_lineups" */
export interface match_lineups_aggregate {
    aggregate: (match_lineups_aggregate_fields | null)
    nodes: match_lineups[]
    __typename: 'match_lineups_aggregate'
}


/** aggregate fields of "match_lineups" */
export interface match_lineups_aggregate_fields {
    avg: (match_lineups_avg_fields | null)
    count: Scalars['Int']
    max: (match_lineups_max_fields | null)
    min: (match_lineups_min_fields | null)
    stddev: (match_lineups_stddev_fields | null)
    stddev_pop: (match_lineups_stddev_pop_fields | null)
    stddev_samp: (match_lineups_stddev_samp_fields | null)
    sum: (match_lineups_sum_fields | null)
    var_pop: (match_lineups_var_pop_fields | null)
    var_samp: (match_lineups_var_samp_fields | null)
    variance: (match_lineups_variance_fields | null)
    __typename: 'match_lineups_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_lineups_avg_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_avg_fields'
}


/** unique or primary key constraints on table "match_lineups" */
export type match_lineups_constraint = 'match_teams_pkey'


/** aggregate max on columns */
export interface match_lineups_max_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_team_name" */
    name: (Scalars['String'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'match_lineups_max_fields'
}


/** aggregate min on columns */
export interface match_lineups_min_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_team_name" */
    name: (Scalars['String'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'match_lineups_min_fields'
}


/** response of any mutation on the table "match_lineups" */
export interface match_lineups_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_lineups[]
    __typename: 'match_lineups_mutation_response'
}


/** select columns of table "match_lineups" */
export type match_lineups_select_column = 'coach_steam_id' | 'id' | 'team_id'


/** aggregate stddev on columns */
export interface match_lineups_stddev_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_lineups_stddev_pop_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_lineups_stddev_samp_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_lineups_sum_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    __typename: 'match_lineups_sum_fields'
}


/** update columns of table "match_lineups" */
export type match_lineups_update_column = 'coach_steam_id' | 'id' | 'team_id'


/** aggregate var_pop on columns */
export interface match_lineups_var_pop_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_lineups_var_samp_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_lineups_variance_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'match_lineups_variance_fields'
}


/** columns and relationships of "match_map_demos" */
export interface match_map_demos {
    /** A computed field, executes function "demo_download_url" */
    download_url: (Scalars['String'] | null)
    file: Scalars['String']
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    size: Scalars['Int']
    __typename: 'match_map_demos'
}


/** aggregated selection of "match_map_demos" */
export interface match_map_demos_aggregate {
    aggregate: (match_map_demos_aggregate_fields | null)
    nodes: match_map_demos[]
    __typename: 'match_map_demos_aggregate'
}


/** aggregate fields of "match_map_demos" */
export interface match_map_demos_aggregate_fields {
    avg: (match_map_demos_avg_fields | null)
    count: Scalars['Int']
    max: (match_map_demos_max_fields | null)
    min: (match_map_demos_min_fields | null)
    stddev: (match_map_demos_stddev_fields | null)
    stddev_pop: (match_map_demos_stddev_pop_fields | null)
    stddev_samp: (match_map_demos_stddev_samp_fields | null)
    sum: (match_map_demos_sum_fields | null)
    var_pop: (match_map_demos_var_pop_fields | null)
    var_samp: (match_map_demos_var_samp_fields | null)
    variance: (match_map_demos_variance_fields | null)
    __typename: 'match_map_demos_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_map_demos_avg_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_avg_fields'
}


/** unique or primary key constraints on table "match_map_demos" */
export type match_map_demos_constraint = 'match_demos_pkey'


/** aggregate max on columns */
export interface match_map_demos_max_fields {
    /** A computed field, executes function "demo_download_url" */
    download_url: (Scalars['String'] | null)
    file: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    size: (Scalars['Int'] | null)
    __typename: 'match_map_demos_max_fields'
}


/** aggregate min on columns */
export interface match_map_demos_min_fields {
    /** A computed field, executes function "demo_download_url" */
    download_url: (Scalars['String'] | null)
    file: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    size: (Scalars['Int'] | null)
    __typename: 'match_map_demos_min_fields'
}


/** response of any mutation on the table "match_map_demos" */
export interface match_map_demos_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_map_demos[]
    __typename: 'match_map_demos_mutation_response'
}


/** select columns of table "match_map_demos" */
export type match_map_demos_select_column = 'file' | 'id' | 'match_id' | 'match_map_id' | 'size'


/** aggregate stddev on columns */
export interface match_map_demos_stddev_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_map_demos_stddev_pop_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_map_demos_stddev_samp_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_map_demos_sum_fields {
    size: (Scalars['Int'] | null)
    __typename: 'match_map_demos_sum_fields'
}


/** update columns of table "match_map_demos" */
export type match_map_demos_update_column = 'file' | 'id' | 'match_id' | 'match_map_id' | 'size'


/** aggregate var_pop on columns */
export interface match_map_demos_var_pop_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_map_demos_var_samp_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_map_demos_variance_fields {
    size: (Scalars['Float'] | null)
    __typename: 'match_map_demos_variance_fields'
}


/** columns and relationships of "match_map_rounds" */
export interface match_map_rounds {
    backup_file: (Scalars['String'] | null)
    id: Scalars['uuid']
    /** An array relationship */
    kills: player_kills[]
    /** An aggregate relationship */
    kills_aggregate: player_kills_aggregate
    lineup_1_money: Scalars['Int']
    lineup_1_score: Scalars['Int']
    lineup_1_side: e_sides_enum
    lineup_1_timeouts_available: Scalars['Int']
    lineup_2_money: Scalars['Int']
    lineup_2_score: Scalars['Int']
    lineup_2_side: e_sides_enum
    lineup_2_timeouts_available: Scalars['Int']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    round: Scalars['Int']
    time: Scalars['timestamptz']
    winning_side: Scalars['String']
    __typename: 'match_map_rounds'
}


/** aggregated selection of "match_map_rounds" */
export interface match_map_rounds_aggregate {
    aggregate: (match_map_rounds_aggregate_fields | null)
    nodes: match_map_rounds[]
    __typename: 'match_map_rounds_aggregate'
}


/** aggregate fields of "match_map_rounds" */
export interface match_map_rounds_aggregate_fields {
    avg: (match_map_rounds_avg_fields | null)
    count: Scalars['Int']
    max: (match_map_rounds_max_fields | null)
    min: (match_map_rounds_min_fields | null)
    stddev: (match_map_rounds_stddev_fields | null)
    stddev_pop: (match_map_rounds_stddev_pop_fields | null)
    stddev_samp: (match_map_rounds_stddev_samp_fields | null)
    sum: (match_map_rounds_sum_fields | null)
    var_pop: (match_map_rounds_var_pop_fields | null)
    var_samp: (match_map_rounds_var_samp_fields | null)
    variance: (match_map_rounds_variance_fields | null)
    __typename: 'match_map_rounds_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_map_rounds_avg_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_avg_fields'
}


/** unique or primary key constraints on table "match_map_rounds" */
export type match_map_rounds_constraint = 'match_rounds__id_key' | 'match_rounds_match_id_round_key' | 'match_rounds_pkey'


/** aggregate max on columns */
export interface match_map_rounds_max_fields {
    backup_file: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    lineup_1_money: (Scalars['Int'] | null)
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    lineup_2_money: (Scalars['Int'] | null)
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    winning_side: (Scalars['String'] | null)
    __typename: 'match_map_rounds_max_fields'
}


/** aggregate min on columns */
export interface match_map_rounds_min_fields {
    backup_file: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    lineup_1_money: (Scalars['Int'] | null)
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    lineup_2_money: (Scalars['Int'] | null)
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    winning_side: (Scalars['String'] | null)
    __typename: 'match_map_rounds_min_fields'
}


/** response of any mutation on the table "match_map_rounds" */
export interface match_map_rounds_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_map_rounds[]
    __typename: 'match_map_rounds_mutation_response'
}


/** select columns of table "match_map_rounds" */
export type match_map_rounds_select_column = 'backup_file' | 'id' | 'lineup_1_money' | 'lineup_1_score' | 'lineup_1_side' | 'lineup_1_timeouts_available' | 'lineup_2_money' | 'lineup_2_score' | 'lineup_2_side' | 'lineup_2_timeouts_available' | 'match_map_id' | 'round' | 'time' | 'winning_side'


/** aggregate stddev on columns */
export interface match_map_rounds_stddev_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_map_rounds_stddev_pop_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_map_rounds_stddev_samp_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_map_rounds_sum_fields {
    lineup_1_money: (Scalars['Int'] | null)
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    lineup_2_money: (Scalars['Int'] | null)
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'match_map_rounds_sum_fields'
}


/** update columns of table "match_map_rounds" */
export type match_map_rounds_update_column = 'backup_file' | 'id' | 'lineup_1_money' | 'lineup_1_score' | 'lineup_1_side' | 'lineup_1_timeouts_available' | 'lineup_2_money' | 'lineup_2_score' | 'lineup_2_side' | 'lineup_2_timeouts_available' | 'match_map_id' | 'round' | 'time' | 'winning_side'


/** aggregate var_pop on columns */
export interface match_map_rounds_var_pop_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_map_rounds_var_samp_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_map_rounds_variance_fields {
    lineup_1_money: (Scalars['Float'] | null)
    lineup_1_score: (Scalars['Float'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    lineup_2_money: (Scalars['Float'] | null)
    lineup_2_score: (Scalars['Float'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'match_map_rounds_variance_fields'
}


/** columns and relationships of "match_map_veto_picks" */
export interface match_map_veto_picks {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    map: maps
    map_id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_lineup: match_lineups
    match_lineup_id: Scalars['uuid']
    side: (Scalars['String'] | null)
    type: e_veto_pick_types_enum
    __typename: 'match_map_veto_picks'
}


/** aggregated selection of "match_map_veto_picks" */
export interface match_map_veto_picks_aggregate {
    aggregate: (match_map_veto_picks_aggregate_fields | null)
    nodes: match_map_veto_picks[]
    __typename: 'match_map_veto_picks_aggregate'
}


/** aggregate fields of "match_map_veto_picks" */
export interface match_map_veto_picks_aggregate_fields {
    count: Scalars['Int']
    max: (match_map_veto_picks_max_fields | null)
    min: (match_map_veto_picks_min_fields | null)
    __typename: 'match_map_veto_picks_aggregate_fields'
}


/** unique or primary key constraints on table "match_map_veto_picks" */
export type match_map_veto_picks_constraint = 'match_map_veto_picks_pkey'


/** aggregate max on columns */
export interface match_map_veto_picks_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    side: (Scalars['String'] | null)
    __typename: 'match_map_veto_picks_max_fields'
}


/** aggregate min on columns */
export interface match_map_veto_picks_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    side: (Scalars['String'] | null)
    __typename: 'match_map_veto_picks_min_fields'
}


/** response of any mutation on the table "match_map_veto_picks" */
export interface match_map_veto_picks_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_map_veto_picks[]
    __typename: 'match_map_veto_picks_mutation_response'
}


/** select columns of table "match_map_veto_picks" */
export type match_map_veto_picks_select_column = 'created_at' | 'id' | 'map_id' | 'match_id' | 'match_lineup_id' | 'side' | 'type'


/** update columns of table "match_map_veto_picks" */
export type match_map_veto_picks_update_column = 'created_at' | 'id' | 'map_id' | 'match_id' | 'match_lineup_id' | 'side' | 'type'


/** columns and relationships of "match_maps" */
export interface match_maps {
    created_at: Scalars['timestamptz']
    /** An array relationship */
    demos: match_map_demos[]
    /** An aggregate relationship */
    demos_aggregate: match_map_demos_aggregate
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url: (Scalars['String'] | null)
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** An object relationship */
    e_match_map_status: e_match_map_status
    ended_at: (Scalars['timestamptz'] | null)
    /** An array relationship */
    flashes: player_flashes[]
    /** An aggregate relationship */
    flashes_aggregate: player_flashes_aggregate
    id: Scalars['uuid']
    /** A computed field, executes function "is_current_match_map" */
    is_current_map: (Scalars['Boolean'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_side: e_sides_enum
    lineup_1_timeouts_available: Scalars['Int']
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_side: (e_sides_enum | null)
    lineup_2_timeouts_available: Scalars['Int']
    /** An object relationship */
    map: maps
    map_id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An array relationship */
    objectives: player_objectives[]
    /** An aggregate relationship */
    objectives_aggregate: player_objectives_aggregate
    order: Scalars['Int']
    /** An array relationship */
    player_assists: player_assists[]
    /** An aggregate relationship */
    player_assists_aggregate: player_assists_aggregate
    /** An array relationship */
    player_damages: player_damages[]
    /** An aggregate relationship */
    player_damages_aggregate: player_damages_aggregate
    /** An array relationship */
    player_kills: player_kills[]
    /** An aggregate relationship */
    player_kills_aggregate: player_kills_aggregate
    /** An array relationship */
    player_unused_utilities: player_unused_utility[]
    /** An aggregate relationship */
    player_unused_utilities_aggregate: player_unused_utility_aggregate
    /** An array relationship */
    rounds: match_map_rounds[]
    /** An aggregate relationship */
    rounds_aggregate: match_map_rounds_aggregate
    started_at: (Scalars['timestamptz'] | null)
    status: e_match_map_status_enum
    /** An array relationship */
    utility: player_utility[]
    /** An aggregate relationship */
    utility_aggregate: player_utility_aggregate
    /** An array relationship */
    vetos: match_map_veto_picks[]
    /** An aggregate relationship */
    vetos_aggregate: match_map_veto_picks_aggregate
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'match_maps'
}


/** aggregated selection of "match_maps" */
export interface match_maps_aggregate {
    aggregate: (match_maps_aggregate_fields | null)
    nodes: match_maps[]
    __typename: 'match_maps_aggregate'
}


/** aggregate fields of "match_maps" */
export interface match_maps_aggregate_fields {
    avg: (match_maps_avg_fields | null)
    count: Scalars['Int']
    max: (match_maps_max_fields | null)
    min: (match_maps_min_fields | null)
    stddev: (match_maps_stddev_fields | null)
    stddev_pop: (match_maps_stddev_pop_fields | null)
    stddev_samp: (match_maps_stddev_samp_fields | null)
    sum: (match_maps_sum_fields | null)
    var_pop: (match_maps_var_pop_fields | null)
    var_samp: (match_maps_var_samp_fields | null)
    variance: (match_maps_variance_fields | null)
    __typename: 'match_maps_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_maps_avg_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_avg_fields'
}


/** unique or primary key constraints on table "match_maps" */
export type match_maps_constraint = 'match_maps_match_id_order_key' | 'match_maps_pkey'


/** aggregate max on columns */
export interface match_maps_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url: (Scalars['String'] | null)
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    ended_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    order: (Scalars['Int'] | null)
    started_at: (Scalars['timestamptz'] | null)
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'match_maps_max_fields'
}


/** aggregate min on columns */
export interface match_maps_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url: (Scalars['String'] | null)
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    ended_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    order: (Scalars['Int'] | null)
    started_at: (Scalars['timestamptz'] | null)
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'match_maps_min_fields'
}


/** response of any mutation on the table "match_maps" */
export interface match_maps_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_maps[]
    __typename: 'match_maps_mutation_response'
}


/** select columns of table "match_maps" */
export type match_maps_select_column = 'created_at' | 'ended_at' | 'id' | 'lineup_1_side' | 'lineup_1_timeouts_available' | 'lineup_2_side' | 'lineup_2_timeouts_available' | 'map_id' | 'match_id' | 'order' | 'started_at' | 'status' | 'winning_lineup_id'


/** aggregate stddev on columns */
export interface match_maps_stddev_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_maps_stddev_pop_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_maps_stddev_samp_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_maps_sum_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Int'] | null)
    order: (Scalars['Int'] | null)
    __typename: 'match_maps_sum_fields'
}


/** update columns of table "match_maps" */
export type match_maps_update_column = 'created_at' | 'ended_at' | 'id' | 'lineup_1_side' | 'lineup_1_timeouts_available' | 'lineup_2_side' | 'lineup_2_timeouts_available' | 'map_id' | 'match_id' | 'order' | 'started_at' | 'status' | 'winning_lineup_id'


/** aggregate var_pop on columns */
export interface match_maps_var_pop_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_maps_var_samp_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_maps_variance_fields {
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size: (Scalars['Int'] | null)
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score: (Scalars['Int'] | null)
    lineup_1_timeouts_available: (Scalars['Float'] | null)
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score: (Scalars['Int'] | null)
    lineup_2_timeouts_available: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'match_maps_variance_fields'
}


/** columns and relationships of "match_options" */
export interface match_options {
    best_of: Scalars['Int']
    coaches: Scalars['Boolean']
    /** A computed field, executes function "has_active_matches" */
    has_active_matches: (Scalars['Boolean'] | null)
    id: Scalars['uuid']
    invite_code: (Scalars['String'] | null)
    knife_round: Scalars['Boolean']
    lobby_access: (e_lobby_access_enum | null)
    /** An object relationship */
    map_pool: map_pools
    map_pool_id: Scalars['uuid']
    map_veto: Scalars['Boolean']
    /** An array relationship */
    matches: matches[]
    /** An aggregate relationship */
    matches_aggregate: matches_aggregate
    mr: Scalars['Int']
    number_of_substitutes: Scalars['Int']
    overtime: Scalars['Boolean']
    prefer_dedicated_server: Scalars['Boolean']
    ready_setting: e_ready_settings_enum
    region_veto: Scalars['Boolean']
    regions: (Scalars['String'][] | null)
    tech_timeout_setting: e_timeout_settings_enum
    timeout_setting: e_timeout_settings_enum
    /** An object relationship */
    tournament: (tournaments | null)
    tv_delay: Scalars['Int']
    type: e_match_types_enum
    __typename: 'match_options'
}


/** aggregated selection of "match_options" */
export interface match_options_aggregate {
    aggregate: (match_options_aggregate_fields | null)
    nodes: match_options[]
    __typename: 'match_options_aggregate'
}


/** aggregate fields of "match_options" */
export interface match_options_aggregate_fields {
    avg: (match_options_avg_fields | null)
    count: Scalars['Int']
    max: (match_options_max_fields | null)
    min: (match_options_min_fields | null)
    stddev: (match_options_stddev_fields | null)
    stddev_pop: (match_options_stddev_pop_fields | null)
    stddev_samp: (match_options_stddev_samp_fields | null)
    sum: (match_options_sum_fields | null)
    var_pop: (match_options_var_pop_fields | null)
    var_samp: (match_options_var_samp_fields | null)
    variance: (match_options_variance_fields | null)
    __typename: 'match_options_aggregate_fields'
}


/** aggregate avg on columns */
export interface match_options_avg_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_avg_fields'
}


/** unique or primary key constraints on table "match_options" */
export type match_options_constraint = 'match_options_pkey'


/** aggregate max on columns */
export interface match_options_max_fields {
    best_of: (Scalars['Int'] | null)
    id: (Scalars['uuid'] | null)
    invite_code: (Scalars['String'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    mr: (Scalars['Int'] | null)
    number_of_substitutes: (Scalars['Int'] | null)
    regions: (Scalars['String'][] | null)
    tv_delay: (Scalars['Int'] | null)
    __typename: 'match_options_max_fields'
}


/** aggregate min on columns */
export interface match_options_min_fields {
    best_of: (Scalars['Int'] | null)
    id: (Scalars['uuid'] | null)
    invite_code: (Scalars['String'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    mr: (Scalars['Int'] | null)
    number_of_substitutes: (Scalars['Int'] | null)
    regions: (Scalars['String'][] | null)
    tv_delay: (Scalars['Int'] | null)
    __typename: 'match_options_min_fields'
}


/** response of any mutation on the table "match_options" */
export interface match_options_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_options[]
    __typename: 'match_options_mutation_response'
}


/** select columns of table "match_options" */
export type match_options_select_column = 'best_of' | 'coaches' | 'id' | 'invite_code' | 'knife_round' | 'lobby_access' | 'map_pool_id' | 'map_veto' | 'mr' | 'number_of_substitutes' | 'overtime' | 'prefer_dedicated_server' | 'ready_setting' | 'region_veto' | 'regions' | 'tech_timeout_setting' | 'timeout_setting' | 'tv_delay' | 'type'


/** aggregate stddev on columns */
export interface match_options_stddev_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface match_options_stddev_pop_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface match_options_stddev_samp_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface match_options_sum_fields {
    best_of: (Scalars['Int'] | null)
    mr: (Scalars['Int'] | null)
    number_of_substitutes: (Scalars['Int'] | null)
    tv_delay: (Scalars['Int'] | null)
    __typename: 'match_options_sum_fields'
}


/** update columns of table "match_options" */
export type match_options_update_column = 'best_of' | 'coaches' | 'id' | 'invite_code' | 'knife_round' | 'lobby_access' | 'map_pool_id' | 'map_veto' | 'mr' | 'number_of_substitutes' | 'overtime' | 'prefer_dedicated_server' | 'ready_setting' | 'region_veto' | 'regions' | 'tech_timeout_setting' | 'timeout_setting' | 'tv_delay' | 'type'


/** aggregate var_pop on columns */
export interface match_options_var_pop_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface match_options_var_samp_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_var_samp_fields'
}


/** aggregate variance on columns */
export interface match_options_variance_fields {
    best_of: (Scalars['Float'] | null)
    mr: (Scalars['Float'] | null)
    number_of_substitutes: (Scalars['Float'] | null)
    tv_delay: (Scalars['Float'] | null)
    __typename: 'match_options_variance_fields'
}


/** columns and relationships of "match_region_veto_picks" */
export interface match_region_veto_picks {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_lineup: match_lineups
    match_lineup_id: Scalars['uuid']
    region: Scalars['String']
    type: e_veto_pick_types_enum
    __typename: 'match_region_veto_picks'
}


/** aggregated selection of "match_region_veto_picks" */
export interface match_region_veto_picks_aggregate {
    aggregate: (match_region_veto_picks_aggregate_fields | null)
    nodes: match_region_veto_picks[]
    __typename: 'match_region_veto_picks_aggregate'
}


/** aggregate fields of "match_region_veto_picks" */
export interface match_region_veto_picks_aggregate_fields {
    count: Scalars['Int']
    max: (match_region_veto_picks_max_fields | null)
    min: (match_region_veto_picks_min_fields | null)
    __typename: 'match_region_veto_picks_aggregate_fields'
}


/** unique or primary key constraints on table "match_region_veto_picks" */
export type match_region_veto_picks_constraint = 'match_region_veto_picks_pkey'


/** aggregate max on columns */
export interface match_region_veto_picks_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    region: (Scalars['String'] | null)
    __typename: 'match_region_veto_picks_max_fields'
}


/** aggregate min on columns */
export interface match_region_veto_picks_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    region: (Scalars['String'] | null)
    __typename: 'match_region_veto_picks_min_fields'
}


/** response of any mutation on the table "match_region_veto_picks" */
export interface match_region_veto_picks_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_region_veto_picks[]
    __typename: 'match_region_veto_picks_mutation_response'
}


/** select columns of table "match_region_veto_picks" */
export type match_region_veto_picks_select_column = 'created_at' | 'id' | 'match_id' | 'match_lineup_id' | 'region' | 'type'


/** update columns of table "match_region_veto_picks" */
export type match_region_veto_picks_update_column = 'created_at' | 'id' | 'match_id' | 'match_lineup_id' | 'region' | 'type'


/** columns and relationships of "match_type_cfgs" */
export interface match_type_cfgs {
    cfg: Scalars['String']
    /** An object relationship */
    e_match_type: e_match_types
    type: e_match_types_enum
    __typename: 'match_type_cfgs'
}


/** aggregated selection of "match_type_cfgs" */
export interface match_type_cfgs_aggregate {
    aggregate: (match_type_cfgs_aggregate_fields | null)
    nodes: match_type_cfgs[]
    __typename: 'match_type_cfgs_aggregate'
}


/** aggregate fields of "match_type_cfgs" */
export interface match_type_cfgs_aggregate_fields {
    count: Scalars['Int']
    max: (match_type_cfgs_max_fields | null)
    min: (match_type_cfgs_min_fields | null)
    __typename: 'match_type_cfgs_aggregate_fields'
}


/** unique or primary key constraints on table "match_type_cfgs" */
export type match_type_cfgs_constraint = 'match_type_cfgs_pkey'


/** aggregate max on columns */
export interface match_type_cfgs_max_fields {
    cfg: (Scalars['String'] | null)
    __typename: 'match_type_cfgs_max_fields'
}


/** aggregate min on columns */
export interface match_type_cfgs_min_fields {
    cfg: (Scalars['String'] | null)
    __typename: 'match_type_cfgs_min_fields'
}


/** response of any mutation on the table "match_type_cfgs" */
export interface match_type_cfgs_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: match_type_cfgs[]
    __typename: 'match_type_cfgs_mutation_response'
}


/** select columns of table "match_type_cfgs" */
export type match_type_cfgs_select_column = 'cfg' | 'type'


/** update columns of table "match_type_cfgs" */
export type match_type_cfgs_update_column = 'cfg' | 'type'


/** columns and relationships of "matches" */
export interface matches {
    /** A computed field, executes function "can_assign_server_to_match" */
    can_assign_server: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_cancel_match" */
    can_cancel: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_check_in" */
    can_check_in: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_schedule_match" */
    can_schedule: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_start_match" */
    can_start: (Scalars['Boolean'] | null)
    cancels_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_match_connection_link" */
    connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_connection_string" */
    connection_string: (Scalars['String'] | null)
    created_at: Scalars['timestamptz']
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id: (Scalars['uuid'] | null)
    /** An array relationship */
    demos: match_map_demos[]
    /** An aggregate relationship */
    demos_aggregate: match_map_demos_aggregate
    /** An object relationship */
    e_match_status: e_match_status
    /** An object relationship */
    e_region: (server_regions | null)
    ended_at: (Scalars['timestamptz'] | null)
    id: Scalars['uuid']
    /** A computed field, executes function "match_invite_code" */
    invite_code: (Scalars['String'] | null)
    /** An array relationship */
    invites: match_invites[]
    /** An aggregate relationship */
    invites_aggregate: match_invites_aggregate
    /** A computed field, executes function "is_captain" */
    is_captain: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_coach" */
    is_coach: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_in_lineup" */
    is_in_lineup: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_match_server_available" */
    is_match_server_available: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_match_organizer" */
    is_organizer: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_server_online" */
    is_server_online: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_tournament_match" */
    is_tournament_match: (Scalars['Boolean'] | null)
    label: (Scalars['String'] | null)
    /** An object relationship */
    lineup_1: match_lineups
    lineup_1_id: Scalars['uuid']
    /** An object relationship */
    lineup_2: match_lineups
    lineup_2_id: Scalars['uuid']
    /** A computed field, executes function "get_lineup_counts" */
    lineup_counts: (Scalars['json'] | null)
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id: (Scalars['uuid'] | null)
    /** An array relationship */
    map_veto_picks: match_map_veto_picks[]
    /** An aggregate relationship */
    map_veto_picks_aggregate: match_map_veto_picks_aggregate
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type: (Scalars['String'] | null)
    /** An array relationship */
    match_maps: match_maps[]
    /** An aggregate relationship */
    match_maps_aggregate: match_maps_aggregate
    match_options_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    /** An object relationship */
    options: (match_options | null)
    /** An object relationship */
    organizer: (players | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    password: Scalars['String']
    /** An array relationship */
    player_assists: player_assists[]
    /** An aggregate relationship */
    player_assists_aggregate: player_assists_aggregate
    /** An array relationship */
    player_damages: player_damages[]
    /** An aggregate relationship */
    player_damages_aggregate: player_damages_aggregate
    /** An array relationship */
    player_flashes: player_flashes[]
    /** An aggregate relationship */
    player_flashes_aggregate: player_flashes_aggregate
    /** An array relationship */
    player_kills: player_kills[]
    /** An aggregate relationship */
    player_kills_aggregate: player_kills_aggregate
    /** An array relationship */
    player_objectives: player_objectives[]
    /** An aggregate relationship */
    player_objectives_aggregate: player_objectives_aggregate
    /** An array relationship */
    player_unused_utilities: player_unused_utility[]
    /** An aggregate relationship */
    player_unused_utilities_aggregate: player_unused_utility_aggregate
    /** An array relationship */
    player_utility: player_utility[]
    /** An aggregate relationship */
    player_utility_aggregate: player_utility_aggregate
    region: (Scalars['String'] | null)
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id: (Scalars['uuid'] | null)
    /** An array relationship */
    region_veto_picks: match_region_veto_picks[]
    /** An aggregate relationship */
    region_veto_picks_aggregate: match_region_veto_picks_aggregate
    /** A computed field, executes function "match_requested_organizer" */
    requested_organizer: (Scalars['Boolean'] | null)
    scheduled_at: (Scalars['timestamptz'] | null)
    /** An object relationship */
    server: (servers | null)
    server_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_match_server_region" */
    server_region: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_server_type" */
    server_type: (Scalars['String'] | null)
    started_at: (Scalars['timestamptz'] | null)
    status: e_match_status_enum
    /** A computed field, executes function "get_match_teams" */
    teams: (teams[] | null)
    /** An array relationship */
    tournament_brackets: tournament_brackets[]
    /** An aggregate relationship */
    tournament_brackets_aggregate: tournament_brackets_aggregate
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string: (Scalars['String'] | null)
    /** An object relationship */
    winner: (match_lineups | null)
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'matches'
}


/** aggregated selection of "matches" */
export interface matches_aggregate {
    aggregate: (matches_aggregate_fields | null)
    nodes: matches[]
    __typename: 'matches_aggregate'
}


/** aggregate fields of "matches" */
export interface matches_aggregate_fields {
    avg: (matches_avg_fields | null)
    count: Scalars['Int']
    max: (matches_max_fields | null)
    min: (matches_min_fields | null)
    stddev: (matches_stddev_fields | null)
    stddev_pop: (matches_stddev_pop_fields | null)
    stddev_samp: (matches_stddev_samp_fields | null)
    sum: (matches_sum_fields | null)
    var_pop: (matches_var_pop_fields | null)
    var_samp: (matches_var_samp_fields | null)
    variance: (matches_variance_fields | null)
    __typename: 'matches_aggregate_fields'
}


/** aggregate avg on columns */
export interface matches_avg_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_avg_fields'
}


/** unique or primary key constraints on table "matches" */
export type matches_constraint = 'matches_lineup_1_id_key' | 'matches_lineup_1_id_lineup_2_id_key' | 'matches_lineup_2_id_key' | 'matches_pkey'


/** aggregate max on columns */
export interface matches_max_fields {
    cancels_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_match_connection_link" */
    connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_connection_string" */
    connection_string: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id: (Scalars['uuid'] | null)
    ended_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "match_invite_code" */
    invite_code: (Scalars['String'] | null)
    label: (Scalars['String'] | null)
    lineup_1_id: (Scalars['uuid'] | null)
    lineup_2_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type: (Scalars['String'] | null)
    match_options_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    password: (Scalars['String'] | null)
    region: (Scalars['String'] | null)
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id: (Scalars['uuid'] | null)
    scheduled_at: (Scalars['timestamptz'] | null)
    server_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_match_server_region" */
    server_region: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_server_type" */
    server_type: (Scalars['String'] | null)
    started_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string: (Scalars['String'] | null)
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'matches_max_fields'
}


/** aggregate min on columns */
export interface matches_min_fields {
    cancels_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_match_connection_link" */
    connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_connection_string" */
    connection_string: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id: (Scalars['uuid'] | null)
    ended_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    /** A computed field, executes function "match_invite_code" */
    invite_code: (Scalars['String'] | null)
    label: (Scalars['String'] | null)
    lineup_1_id: (Scalars['uuid'] | null)
    lineup_2_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type: (Scalars['String'] | null)
    match_options_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    password: (Scalars['String'] | null)
    region: (Scalars['String'] | null)
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id: (Scalars['uuid'] | null)
    scheduled_at: (Scalars['timestamptz'] | null)
    server_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "get_match_server_region" */
    server_region: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_server_type" */
    server_type: (Scalars['String'] | null)
    started_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link: (Scalars['String'] | null)
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string: (Scalars['String'] | null)
    winning_lineup_id: (Scalars['uuid'] | null)
    __typename: 'matches_min_fields'
}


/** response of any mutation on the table "matches" */
export interface matches_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: matches[]
    __typename: 'matches_mutation_response'
}


/** select columns of table "matches" */
export type matches_select_column = 'cancels_at' | 'created_at' | 'ended_at' | 'id' | 'label' | 'lineup_1_id' | 'lineup_2_id' | 'match_options_id' | 'organizer_steam_id' | 'password' | 'region' | 'scheduled_at' | 'server_id' | 'started_at' | 'status' | 'winning_lineup_id'


/** aggregate stddev on columns */
export interface matches_stddev_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface matches_stddev_pop_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface matches_stddev_samp_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface matches_sum_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    __typename: 'matches_sum_fields'
}


/** update columns of table "matches" */
export type matches_update_column = 'cancels_at' | 'created_at' | 'ended_at' | 'id' | 'label' | 'lineup_1_id' | 'lineup_2_id' | 'match_options_id' | 'organizer_steam_id' | 'password' | 'region' | 'scheduled_at' | 'server_id' | 'started_at' | 'status' | 'winning_lineup_id'


/** aggregate var_pop on columns */
export interface matches_var_pop_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface matches_var_samp_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_var_samp_fields'
}


/** aggregate variance on columns */
export interface matches_variance_fields {
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'matches_variance_fields'
}


/** columns and relationships of "migration_hashes.hashes" */
export interface migration_hashes_hashes {
    hash: Scalars['String']
    name: Scalars['String']
    __typename: 'migration_hashes_hashes'
}


/** aggregated selection of "migration_hashes.hashes" */
export interface migration_hashes_hashes_aggregate {
    aggregate: (migration_hashes_hashes_aggregate_fields | null)
    nodes: migration_hashes_hashes[]
    __typename: 'migration_hashes_hashes_aggregate'
}


/** aggregate fields of "migration_hashes.hashes" */
export interface migration_hashes_hashes_aggregate_fields {
    count: Scalars['Int']
    max: (migration_hashes_hashes_max_fields | null)
    min: (migration_hashes_hashes_min_fields | null)
    __typename: 'migration_hashes_hashes_aggregate_fields'
}


/** unique or primary key constraints on table "migration_hashes.hashes" */
export type migration_hashes_hashes_constraint = 'hashes_pkey'


/** aggregate max on columns */
export interface migration_hashes_hashes_max_fields {
    hash: (Scalars['String'] | null)
    name: (Scalars['String'] | null)
    __typename: 'migration_hashes_hashes_max_fields'
}


/** aggregate min on columns */
export interface migration_hashes_hashes_min_fields {
    hash: (Scalars['String'] | null)
    name: (Scalars['String'] | null)
    __typename: 'migration_hashes_hashes_min_fields'
}


/** response of any mutation on the table "migration_hashes.hashes" */
export interface migration_hashes_hashes_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: migration_hashes_hashes[]
    __typename: 'migration_hashes_hashes_mutation_response'
}


/** select columns of table "migration_hashes.hashes" */
export type migration_hashes_hashes_select_column = 'hash' | 'name'


/** update columns of table "migration_hashes.hashes" */
export type migration_hashes_hashes_update_column = 'hash' | 'name'


/** mutation root */
export interface mutation_root {
    /** accept team invite */
    acceptInvite: (SuccessOutput | null)
    approveNameChange: (SuccessOutput | null)
    /** callForOrganizer */
    callForOrganizer: (SuccessOutput | null)
    /** cancelMatch */
    cancelMatch: (SuccessOutput | null)
    /** checkIntoMatch */
    checkIntoMatch: (SuccessOutput | null)
    /** delete data from the table: "_map_pool" */
    delete__map_pool: (_map_pool_mutation_response | null)
    /** delete single row from the table: "_map_pool" */
    delete__map_pool_by_pk: (_map_pool | null)
    /** delete data from the table: "abandoned_matches" */
    delete_abandoned_matches: (abandoned_matches_mutation_response | null)
    /** delete single row from the table: "abandoned_matches" */
    delete_abandoned_matches_by_pk: (abandoned_matches | null)
    /** delete data from the table: "e_friend_status" */
    delete_e_friend_status: (e_friend_status_mutation_response | null)
    /** delete single row from the table: "e_friend_status" */
    delete_e_friend_status_by_pk: (e_friend_status | null)
    /** delete data from the table: "e_game_server_node_statuses" */
    delete_e_game_server_node_statuses: (e_game_server_node_statuses_mutation_response | null)
    /** delete single row from the table: "e_game_server_node_statuses" */
    delete_e_game_server_node_statuses_by_pk: (e_game_server_node_statuses | null)
    /** delete data from the table: "e_lobby_access" */
    delete_e_lobby_access: (e_lobby_access_mutation_response | null)
    /** delete single row from the table: "e_lobby_access" */
    delete_e_lobby_access_by_pk: (e_lobby_access | null)
    /** delete data from the table: "e_lobby_player_status" */
    delete_e_lobby_player_status: (e_lobby_player_status_mutation_response | null)
    /** delete single row from the table: "e_lobby_player_status" */
    delete_e_lobby_player_status_by_pk: (e_lobby_player_status | null)
    /** delete data from the table: "e_map_pool_types" */
    delete_e_map_pool_types: (e_map_pool_types_mutation_response | null)
    /** delete single row from the table: "e_map_pool_types" */
    delete_e_map_pool_types_by_pk: (e_map_pool_types | null)
    /** delete data from the table: "e_match_map_status" */
    delete_e_match_map_status: (e_match_map_status_mutation_response | null)
    /** delete single row from the table: "e_match_map_status" */
    delete_e_match_map_status_by_pk: (e_match_map_status | null)
    /** delete data from the table: "e_match_status" */
    delete_e_match_status: (e_match_status_mutation_response | null)
    /** delete single row from the table: "e_match_status" */
    delete_e_match_status_by_pk: (e_match_status | null)
    /** delete data from the table: "e_match_types" */
    delete_e_match_types: (e_match_types_mutation_response | null)
    /** delete single row from the table: "e_match_types" */
    delete_e_match_types_by_pk: (e_match_types | null)
    /** delete data from the table: "e_notification_types" */
    delete_e_notification_types: (e_notification_types_mutation_response | null)
    /** delete single row from the table: "e_notification_types" */
    delete_e_notification_types_by_pk: (e_notification_types | null)
    /** delete data from the table: "e_objective_types" */
    delete_e_objective_types: (e_objective_types_mutation_response | null)
    /** delete single row from the table: "e_objective_types" */
    delete_e_objective_types_by_pk: (e_objective_types | null)
    /** delete data from the table: "e_player_roles" */
    delete_e_player_roles: (e_player_roles_mutation_response | null)
    /** delete single row from the table: "e_player_roles" */
    delete_e_player_roles_by_pk: (e_player_roles | null)
    /** delete data from the table: "e_ready_settings" */
    delete_e_ready_settings: (e_ready_settings_mutation_response | null)
    /** delete single row from the table: "e_ready_settings" */
    delete_e_ready_settings_by_pk: (e_ready_settings | null)
    /** delete data from the table: "e_sanction_types" */
    delete_e_sanction_types: (e_sanction_types_mutation_response | null)
    /** delete single row from the table: "e_sanction_types" */
    delete_e_sanction_types_by_pk: (e_sanction_types | null)
    /** delete data from the table: "e_sides" */
    delete_e_sides: (e_sides_mutation_response | null)
    /** delete single row from the table: "e_sides" */
    delete_e_sides_by_pk: (e_sides | null)
    /** delete data from the table: "e_team_roles" */
    delete_e_team_roles: (e_team_roles_mutation_response | null)
    /** delete single row from the table: "e_team_roles" */
    delete_e_team_roles_by_pk: (e_team_roles | null)
    /** delete data from the table: "e_timeout_settings" */
    delete_e_timeout_settings: (e_timeout_settings_mutation_response | null)
    /** delete single row from the table: "e_timeout_settings" */
    delete_e_timeout_settings_by_pk: (e_timeout_settings | null)
    /** delete data from the table: "e_tournament_stage_types" */
    delete_e_tournament_stage_types: (e_tournament_stage_types_mutation_response | null)
    /** delete single row from the table: "e_tournament_stage_types" */
    delete_e_tournament_stage_types_by_pk: (e_tournament_stage_types | null)
    /** delete data from the table: "e_tournament_status" */
    delete_e_tournament_status: (e_tournament_status_mutation_response | null)
    /** delete single row from the table: "e_tournament_status" */
    delete_e_tournament_status_by_pk: (e_tournament_status | null)
    /** delete data from the table: "e_utility_types" */
    delete_e_utility_types: (e_utility_types_mutation_response | null)
    /** delete single row from the table: "e_utility_types" */
    delete_e_utility_types_by_pk: (e_utility_types | null)
    /** delete data from the table: "e_veto_pick_types" */
    delete_e_veto_pick_types: (e_veto_pick_types_mutation_response | null)
    /** delete single row from the table: "e_veto_pick_types" */
    delete_e_veto_pick_types_by_pk: (e_veto_pick_types | null)
    /** delete data from the table: "friends" */
    delete_friends: (friends_mutation_response | null)
    /** delete single row from the table: "friends" */
    delete_friends_by_pk: (friends | null)
    /** delete data from the table: "game_server_nodes" */
    delete_game_server_nodes: (game_server_nodes_mutation_response | null)
    /** delete single row from the table: "game_server_nodes" */
    delete_game_server_nodes_by_pk: (game_server_nodes | null)
    /** delete data from the table: "lobbies" */
    delete_lobbies: (lobbies_mutation_response | null)
    /** delete single row from the table: "lobbies" */
    delete_lobbies_by_pk: (lobbies | null)
    /** delete data from the table: "lobby_players" */
    delete_lobby_players: (lobby_players_mutation_response | null)
    /** delete single row from the table: "lobby_players" */
    delete_lobby_players_by_pk: (lobby_players | null)
    /** delete data from the table: "map_pools" */
    delete_map_pools: (map_pools_mutation_response | null)
    /** delete single row from the table: "map_pools" */
    delete_map_pools_by_pk: (map_pools | null)
    /** delete data from the table: "maps" */
    delete_maps: (maps_mutation_response | null)
    /** delete single row from the table: "maps" */
    delete_maps_by_pk: (maps | null)
    /** delete data from the table: "match_invites" */
    delete_match_invites: (match_invites_mutation_response | null)
    /** delete single row from the table: "match_invites" */
    delete_match_invites_by_pk: (match_invites | null)
    /** delete data from the table: "match_lineup_players" */
    delete_match_lineup_players: (match_lineup_players_mutation_response | null)
    /** delete single row from the table: "match_lineup_players" */
    delete_match_lineup_players_by_pk: (match_lineup_players | null)
    /** delete data from the table: "match_lineups" */
    delete_match_lineups: (match_lineups_mutation_response | null)
    /** delete single row from the table: "match_lineups" */
    delete_match_lineups_by_pk: (match_lineups | null)
    /** delete data from the table: "match_map_demos" */
    delete_match_map_demos: (match_map_demos_mutation_response | null)
    /** delete single row from the table: "match_map_demos" */
    delete_match_map_demos_by_pk: (match_map_demos | null)
    /** delete data from the table: "match_map_rounds" */
    delete_match_map_rounds: (match_map_rounds_mutation_response | null)
    /** delete single row from the table: "match_map_rounds" */
    delete_match_map_rounds_by_pk: (match_map_rounds | null)
    /** delete data from the table: "match_map_veto_picks" */
    delete_match_map_veto_picks: (match_map_veto_picks_mutation_response | null)
    /** delete single row from the table: "match_map_veto_picks" */
    delete_match_map_veto_picks_by_pk: (match_map_veto_picks | null)
    /** delete data from the table: "match_maps" */
    delete_match_maps: (match_maps_mutation_response | null)
    /** delete single row from the table: "match_maps" */
    delete_match_maps_by_pk: (match_maps | null)
    /** delete data from the table: "match_options" */
    delete_match_options: (match_options_mutation_response | null)
    /** delete single row from the table: "match_options" */
    delete_match_options_by_pk: (match_options | null)
    /** delete data from the table: "match_region_veto_picks" */
    delete_match_region_veto_picks: (match_region_veto_picks_mutation_response | null)
    /** delete single row from the table: "match_region_veto_picks" */
    delete_match_region_veto_picks_by_pk: (match_region_veto_picks | null)
    /** delete data from the table: "match_type_cfgs" */
    delete_match_type_cfgs: (match_type_cfgs_mutation_response | null)
    /** delete single row from the table: "match_type_cfgs" */
    delete_match_type_cfgs_by_pk: (match_type_cfgs | null)
    /** delete data from the table: "matches" */
    delete_matches: (matches_mutation_response | null)
    /** delete single row from the table: "matches" */
    delete_matches_by_pk: (matches | null)
    /** delete data from the table: "migration_hashes.hashes" */
    delete_migration_hashes_hashes: (migration_hashes_hashes_mutation_response | null)
    /** delete single row from the table: "migration_hashes.hashes" */
    delete_migration_hashes_hashes_by_pk: (migration_hashes_hashes | null)
    /** delete data from the table: "v_my_friends" */
    delete_my_friends: (my_friends_mutation_response | null)
    /** delete data from the table: "notifications" */
    delete_notifications: (notifications_mutation_response | null)
    /** delete single row from the table: "notifications" */
    delete_notifications_by_pk: (notifications | null)
    /** delete data from the table: "player_assists" */
    delete_player_assists: (player_assists_mutation_response | null)
    /** delete data from the table: "player_damages" */
    delete_player_damages: (player_damages_mutation_response | null)
    /** delete data from the table: "player_elo" */
    delete_player_elo: (player_elo_mutation_response | null)
    /** delete single row from the table: "player_elo" */
    delete_player_elo_by_pk: (player_elo | null)
    /** delete data from the table: "player_flashes" */
    delete_player_flashes: (player_flashes_mutation_response | null)
    /** delete data from the table: "player_kills" */
    delete_player_kills: (player_kills_mutation_response | null)
    /** delete single row from the table: "player_kills" */
    delete_player_kills_by_pk: (player_kills | null)
    /** delete data from the table: "player_objectives" */
    delete_player_objectives: (player_objectives_mutation_response | null)
    /** delete data from the table: "player_sanctions" */
    delete_player_sanctions: (player_sanctions_mutation_response | null)
    /** delete data from the table: "player_unused_utility" */
    delete_player_unused_utility: (player_unused_utility_mutation_response | null)
    /** delete single row from the table: "player_unused_utility" */
    delete_player_unused_utility_by_pk: (player_unused_utility | null)
    /** delete data from the table: "player_utility" */
    delete_player_utility: (player_utility_mutation_response | null)
    /** delete data from the table: "players" */
    delete_players: (players_mutation_response | null)
    /** delete single row from the table: "players" */
    delete_players_by_pk: (players | null)
    /** delete data from the table: "server_regions" */
    delete_server_regions: (server_regions_mutation_response | null)
    /** delete single row from the table: "server_regions" */
    delete_server_regions_by_pk: (server_regions | null)
    /** delete data from the table: "servers" */
    delete_servers: (servers_mutation_response | null)
    /** delete single row from the table: "servers" */
    delete_servers_by_pk: (servers | null)
    /** delete data from the table: "settings" */
    delete_settings: (settings_mutation_response | null)
    /** delete single row from the table: "settings" */
    delete_settings_by_pk: (settings | null)
    /** delete data from the table: "team_invites" */
    delete_team_invites: (team_invites_mutation_response | null)
    /** delete single row from the table: "team_invites" */
    delete_team_invites_by_pk: (team_invites | null)
    /** delete data from the table: "team_roster" */
    delete_team_roster: (team_roster_mutation_response | null)
    /** delete single row from the table: "team_roster" */
    delete_team_roster_by_pk: (team_roster | null)
    /** delete data from the table: "teams" */
    delete_teams: (teams_mutation_response | null)
    /** delete single row from the table: "teams" */
    delete_teams_by_pk: (teams | null)
    /** delete data from the table: "tournament_brackets" */
    delete_tournament_brackets: (tournament_brackets_mutation_response | null)
    /** delete single row from the table: "tournament_brackets" */
    delete_tournament_brackets_by_pk: (tournament_brackets | null)
    /** delete data from the table: "tournament_organizers" */
    delete_tournament_organizers: (tournament_organizers_mutation_response | null)
    /** delete single row from the table: "tournament_organizers" */
    delete_tournament_organizers_by_pk: (tournament_organizers | null)
    /** delete data from the table: "tournament_stages" */
    delete_tournament_stages: (tournament_stages_mutation_response | null)
    /** delete single row from the table: "tournament_stages" */
    delete_tournament_stages_by_pk: (tournament_stages | null)
    /** delete data from the table: "tournament_team_invites" */
    delete_tournament_team_invites: (tournament_team_invites_mutation_response | null)
    /** delete single row from the table: "tournament_team_invites" */
    delete_tournament_team_invites_by_pk: (tournament_team_invites | null)
    /** delete data from the table: "tournament_team_roster" */
    delete_tournament_team_roster: (tournament_team_roster_mutation_response | null)
    /** delete single row from the table: "tournament_team_roster" */
    delete_tournament_team_roster_by_pk: (tournament_team_roster | null)
    /** delete data from the table: "tournament_teams" */
    delete_tournament_teams: (tournament_teams_mutation_response | null)
    /** delete single row from the table: "tournament_teams" */
    delete_tournament_teams_by_pk: (tournament_teams | null)
    /** delete data from the table: "tournaments" */
    delete_tournaments: (tournaments_mutation_response | null)
    /** delete single row from the table: "tournaments" */
    delete_tournaments_by_pk: (tournaments | null)
    /** delete data from the table: "v_match_captains" */
    delete_v_match_captains: (v_match_captains_mutation_response | null)
    /** delete data from the table: "v_pool_maps" */
    delete_v_pool_maps: (v_pool_maps_mutation_response | null)
    denyInvite: (SuccessOutput | null)
    forfeitMatch: (SuccessOutput | null)
    /** insert data into the table: "_map_pool" */
    insert__map_pool: (_map_pool_mutation_response | null)
    /** insert a single row into the table: "_map_pool" */
    insert__map_pool_one: (_map_pool | null)
    /** insert data into the table: "abandoned_matches" */
    insert_abandoned_matches: (abandoned_matches_mutation_response | null)
    /** insert a single row into the table: "abandoned_matches" */
    insert_abandoned_matches_one: (abandoned_matches | null)
    /** insert data into the table: "e_friend_status" */
    insert_e_friend_status: (e_friend_status_mutation_response | null)
    /** insert a single row into the table: "e_friend_status" */
    insert_e_friend_status_one: (e_friend_status | null)
    /** insert data into the table: "e_game_server_node_statuses" */
    insert_e_game_server_node_statuses: (e_game_server_node_statuses_mutation_response | null)
    /** insert a single row into the table: "e_game_server_node_statuses" */
    insert_e_game_server_node_statuses_one: (e_game_server_node_statuses | null)
    /** insert data into the table: "e_lobby_access" */
    insert_e_lobby_access: (e_lobby_access_mutation_response | null)
    /** insert a single row into the table: "e_lobby_access" */
    insert_e_lobby_access_one: (e_lobby_access | null)
    /** insert data into the table: "e_lobby_player_status" */
    insert_e_lobby_player_status: (e_lobby_player_status_mutation_response | null)
    /** insert a single row into the table: "e_lobby_player_status" */
    insert_e_lobby_player_status_one: (e_lobby_player_status | null)
    /** insert data into the table: "e_map_pool_types" */
    insert_e_map_pool_types: (e_map_pool_types_mutation_response | null)
    /** insert a single row into the table: "e_map_pool_types" */
    insert_e_map_pool_types_one: (e_map_pool_types | null)
    /** insert data into the table: "e_match_map_status" */
    insert_e_match_map_status: (e_match_map_status_mutation_response | null)
    /** insert a single row into the table: "e_match_map_status" */
    insert_e_match_map_status_one: (e_match_map_status | null)
    /** insert data into the table: "e_match_status" */
    insert_e_match_status: (e_match_status_mutation_response | null)
    /** insert a single row into the table: "e_match_status" */
    insert_e_match_status_one: (e_match_status | null)
    /** insert data into the table: "e_match_types" */
    insert_e_match_types: (e_match_types_mutation_response | null)
    /** insert a single row into the table: "e_match_types" */
    insert_e_match_types_one: (e_match_types | null)
    /** insert data into the table: "e_notification_types" */
    insert_e_notification_types: (e_notification_types_mutation_response | null)
    /** insert a single row into the table: "e_notification_types" */
    insert_e_notification_types_one: (e_notification_types | null)
    /** insert data into the table: "e_objective_types" */
    insert_e_objective_types: (e_objective_types_mutation_response | null)
    /** insert a single row into the table: "e_objective_types" */
    insert_e_objective_types_one: (e_objective_types | null)
    /** insert data into the table: "e_player_roles" */
    insert_e_player_roles: (e_player_roles_mutation_response | null)
    /** insert a single row into the table: "e_player_roles" */
    insert_e_player_roles_one: (e_player_roles | null)
    /** insert data into the table: "e_ready_settings" */
    insert_e_ready_settings: (e_ready_settings_mutation_response | null)
    /** insert a single row into the table: "e_ready_settings" */
    insert_e_ready_settings_one: (e_ready_settings | null)
    /** insert data into the table: "e_sanction_types" */
    insert_e_sanction_types: (e_sanction_types_mutation_response | null)
    /** insert a single row into the table: "e_sanction_types" */
    insert_e_sanction_types_one: (e_sanction_types | null)
    /** insert data into the table: "e_sides" */
    insert_e_sides: (e_sides_mutation_response | null)
    /** insert a single row into the table: "e_sides" */
    insert_e_sides_one: (e_sides | null)
    /** insert data into the table: "e_team_roles" */
    insert_e_team_roles: (e_team_roles_mutation_response | null)
    /** insert a single row into the table: "e_team_roles" */
    insert_e_team_roles_one: (e_team_roles | null)
    /** insert data into the table: "e_timeout_settings" */
    insert_e_timeout_settings: (e_timeout_settings_mutation_response | null)
    /** insert a single row into the table: "e_timeout_settings" */
    insert_e_timeout_settings_one: (e_timeout_settings | null)
    /** insert data into the table: "e_tournament_stage_types" */
    insert_e_tournament_stage_types: (e_tournament_stage_types_mutation_response | null)
    /** insert a single row into the table: "e_tournament_stage_types" */
    insert_e_tournament_stage_types_one: (e_tournament_stage_types | null)
    /** insert data into the table: "e_tournament_status" */
    insert_e_tournament_status: (e_tournament_status_mutation_response | null)
    /** insert a single row into the table: "e_tournament_status" */
    insert_e_tournament_status_one: (e_tournament_status | null)
    /** insert data into the table: "e_utility_types" */
    insert_e_utility_types: (e_utility_types_mutation_response | null)
    /** insert a single row into the table: "e_utility_types" */
    insert_e_utility_types_one: (e_utility_types | null)
    /** insert data into the table: "e_veto_pick_types" */
    insert_e_veto_pick_types: (e_veto_pick_types_mutation_response | null)
    /** insert a single row into the table: "e_veto_pick_types" */
    insert_e_veto_pick_types_one: (e_veto_pick_types | null)
    /** insert data into the table: "friends" */
    insert_friends: (friends_mutation_response | null)
    /** insert a single row into the table: "friends" */
    insert_friends_one: (friends | null)
    /** insert data into the table: "game_server_nodes" */
    insert_game_server_nodes: (game_server_nodes_mutation_response | null)
    /** insert a single row into the table: "game_server_nodes" */
    insert_game_server_nodes_one: (game_server_nodes | null)
    /** insert data into the table: "lobbies" */
    insert_lobbies: (lobbies_mutation_response | null)
    /** insert a single row into the table: "lobbies" */
    insert_lobbies_one: (lobbies | null)
    /** insert data into the table: "lobby_players" */
    insert_lobby_players: (lobby_players_mutation_response | null)
    /** insert a single row into the table: "lobby_players" */
    insert_lobby_players_one: (lobby_players | null)
    /** insert data into the table: "map_pools" */
    insert_map_pools: (map_pools_mutation_response | null)
    /** insert a single row into the table: "map_pools" */
    insert_map_pools_one: (map_pools | null)
    /** insert data into the table: "maps" */
    insert_maps: (maps_mutation_response | null)
    /** insert a single row into the table: "maps" */
    insert_maps_one: (maps | null)
    /** insert data into the table: "match_invites" */
    insert_match_invites: (match_invites_mutation_response | null)
    /** insert a single row into the table: "match_invites" */
    insert_match_invites_one: (match_invites | null)
    /** insert data into the table: "match_lineup_players" */
    insert_match_lineup_players: (match_lineup_players_mutation_response | null)
    /** insert a single row into the table: "match_lineup_players" */
    insert_match_lineup_players_one: (match_lineup_players | null)
    /** insert data into the table: "match_lineups" */
    insert_match_lineups: (match_lineups_mutation_response | null)
    /** insert a single row into the table: "match_lineups" */
    insert_match_lineups_one: (match_lineups | null)
    /** insert data into the table: "match_map_demos" */
    insert_match_map_demos: (match_map_demos_mutation_response | null)
    /** insert a single row into the table: "match_map_demos" */
    insert_match_map_demos_one: (match_map_demos | null)
    /** insert data into the table: "match_map_rounds" */
    insert_match_map_rounds: (match_map_rounds_mutation_response | null)
    /** insert a single row into the table: "match_map_rounds" */
    insert_match_map_rounds_one: (match_map_rounds | null)
    /** insert data into the table: "match_map_veto_picks" */
    insert_match_map_veto_picks: (match_map_veto_picks_mutation_response | null)
    /** insert a single row into the table: "match_map_veto_picks" */
    insert_match_map_veto_picks_one: (match_map_veto_picks | null)
    /** insert data into the table: "match_maps" */
    insert_match_maps: (match_maps_mutation_response | null)
    /** insert a single row into the table: "match_maps" */
    insert_match_maps_one: (match_maps | null)
    /** insert data into the table: "match_options" */
    insert_match_options: (match_options_mutation_response | null)
    /** insert a single row into the table: "match_options" */
    insert_match_options_one: (match_options | null)
    /** insert data into the table: "match_region_veto_picks" */
    insert_match_region_veto_picks: (match_region_veto_picks_mutation_response | null)
    /** insert a single row into the table: "match_region_veto_picks" */
    insert_match_region_veto_picks_one: (match_region_veto_picks | null)
    /** insert data into the table: "match_type_cfgs" */
    insert_match_type_cfgs: (match_type_cfgs_mutation_response | null)
    /** insert a single row into the table: "match_type_cfgs" */
    insert_match_type_cfgs_one: (match_type_cfgs | null)
    /** insert data into the table: "matches" */
    insert_matches: (matches_mutation_response | null)
    /** insert a single row into the table: "matches" */
    insert_matches_one: (matches | null)
    /** insert data into the table: "migration_hashes.hashes" */
    insert_migration_hashes_hashes: (migration_hashes_hashes_mutation_response | null)
    /** insert a single row into the table: "migration_hashes.hashes" */
    insert_migration_hashes_hashes_one: (migration_hashes_hashes | null)
    /** insert data into the table: "v_my_friends" */
    insert_my_friends: (my_friends_mutation_response | null)
    /** insert a single row into the table: "v_my_friends" */
    insert_my_friends_one: (my_friends | null)
    /** insert data into the table: "notifications" */
    insert_notifications: (notifications_mutation_response | null)
    /** insert a single row into the table: "notifications" */
    insert_notifications_one: (notifications | null)
    /** insert data into the table: "player_assists" */
    insert_player_assists: (player_assists_mutation_response | null)
    /** insert a single row into the table: "player_assists" */
    insert_player_assists_one: (player_assists | null)
    /** insert data into the table: "player_damages" */
    insert_player_damages: (player_damages_mutation_response | null)
    /** insert a single row into the table: "player_damages" */
    insert_player_damages_one: (player_damages | null)
    /** insert data into the table: "player_elo" */
    insert_player_elo: (player_elo_mutation_response | null)
    /** insert a single row into the table: "player_elo" */
    insert_player_elo_one: (player_elo | null)
    /** insert data into the table: "player_flashes" */
    insert_player_flashes: (player_flashes_mutation_response | null)
    /** insert a single row into the table: "player_flashes" */
    insert_player_flashes_one: (player_flashes | null)
    /** insert data into the table: "player_kills" */
    insert_player_kills: (player_kills_mutation_response | null)
    /** insert a single row into the table: "player_kills" */
    insert_player_kills_one: (player_kills | null)
    /** insert data into the table: "player_objectives" */
    insert_player_objectives: (player_objectives_mutation_response | null)
    /** insert a single row into the table: "player_objectives" */
    insert_player_objectives_one: (player_objectives | null)
    /** insert data into the table: "player_sanctions" */
    insert_player_sanctions: (player_sanctions_mutation_response | null)
    /** insert a single row into the table: "player_sanctions" */
    insert_player_sanctions_one: (player_sanctions | null)
    /** insert data into the table: "player_unused_utility" */
    insert_player_unused_utility: (player_unused_utility_mutation_response | null)
    /** insert a single row into the table: "player_unused_utility" */
    insert_player_unused_utility_one: (player_unused_utility | null)
    /** insert data into the table: "player_utility" */
    insert_player_utility: (player_utility_mutation_response | null)
    /** insert a single row into the table: "player_utility" */
    insert_player_utility_one: (player_utility | null)
    /** insert data into the table: "players" */
    insert_players: (players_mutation_response | null)
    /** insert a single row into the table: "players" */
    insert_players_one: (players | null)
    /** insert data into the table: "server_regions" */
    insert_server_regions: (server_regions_mutation_response | null)
    /** insert a single row into the table: "server_regions" */
    insert_server_regions_one: (server_regions | null)
    /** insert data into the table: "servers" */
    insert_servers: (servers_mutation_response | null)
    /** insert a single row into the table: "servers" */
    insert_servers_one: (servers | null)
    /** insert data into the table: "settings" */
    insert_settings: (settings_mutation_response | null)
    /** insert a single row into the table: "settings" */
    insert_settings_one: (settings | null)
    /** insert data into the table: "team_invites" */
    insert_team_invites: (team_invites_mutation_response | null)
    /** insert a single row into the table: "team_invites" */
    insert_team_invites_one: (team_invites | null)
    /** insert data into the table: "team_roster" */
    insert_team_roster: (team_roster_mutation_response | null)
    /** insert a single row into the table: "team_roster" */
    insert_team_roster_one: (team_roster | null)
    /** insert data into the table: "teams" */
    insert_teams: (teams_mutation_response | null)
    /** insert a single row into the table: "teams" */
    insert_teams_one: (teams | null)
    /** insert data into the table: "tournament_brackets" */
    insert_tournament_brackets: (tournament_brackets_mutation_response | null)
    /** insert a single row into the table: "tournament_brackets" */
    insert_tournament_brackets_one: (tournament_brackets | null)
    /** insert data into the table: "tournament_organizers" */
    insert_tournament_organizers: (tournament_organizers_mutation_response | null)
    /** insert a single row into the table: "tournament_organizers" */
    insert_tournament_organizers_one: (tournament_organizers | null)
    /** insert data into the table: "tournament_stages" */
    insert_tournament_stages: (tournament_stages_mutation_response | null)
    /** insert a single row into the table: "tournament_stages" */
    insert_tournament_stages_one: (tournament_stages | null)
    /** insert data into the table: "tournament_team_invites" */
    insert_tournament_team_invites: (tournament_team_invites_mutation_response | null)
    /** insert a single row into the table: "tournament_team_invites" */
    insert_tournament_team_invites_one: (tournament_team_invites | null)
    /** insert data into the table: "tournament_team_roster" */
    insert_tournament_team_roster: (tournament_team_roster_mutation_response | null)
    /** insert a single row into the table: "tournament_team_roster" */
    insert_tournament_team_roster_one: (tournament_team_roster | null)
    /** insert data into the table: "tournament_teams" */
    insert_tournament_teams: (tournament_teams_mutation_response | null)
    /** insert a single row into the table: "tournament_teams" */
    insert_tournament_teams_one: (tournament_teams | null)
    /** insert data into the table: "tournaments" */
    insert_tournaments: (tournaments_mutation_response | null)
    /** insert a single row into the table: "tournaments" */
    insert_tournaments_one: (tournaments | null)
    /** insert data into the table: "v_match_captains" */
    insert_v_match_captains: (v_match_captains_mutation_response | null)
    /** insert a single row into the table: "v_match_captains" */
    insert_v_match_captains_one: (v_match_captains | null)
    /** insert data into the table: "v_pool_maps" */
    insert_v_pool_maps: (v_pool_maps_mutation_response | null)
    /** insert a single row into the table: "v_pool_maps" */
    insert_v_pool_maps_one: (v_pool_maps | null)
    joinLineup: (SuccessOutput | null)
    leaveLineup: (SuccessOutput | null)
    /** logout */
    logout: (SuccessOutput | null)
    randomizeTeams: (SuccessOutput | null)
    registerName: (SuccessOutput | null)
    requestNameChange: (SuccessOutput | null)
    /** scheduleMatch */
    scheduleMatch: (SuccessOutput | null)
    /** setMatchWinner */
    setMatchWinner: (SuccessOutput | null)
    setupGameServer: (SetupGameServeOutput | null)
    /** startMatch */
    startMatch: (SuccessOutput | null)
    switchLineup: (SuccessOutput | null)
    syncSteamFriends: (SuccessOutput | null)
    unlinkDiscord: (SuccessOutput | null)
    updateCs: (SuccessOutput | null)
    updateServices: (SuccessOutput | null)
    /** update data of the table: "_map_pool" */
    update__map_pool: (_map_pool_mutation_response | null)
    /** update single row of the table: "_map_pool" */
    update__map_pool_by_pk: (_map_pool | null)
    /** update multiples rows of table: "_map_pool" */
    update__map_pool_many: ((_map_pool_mutation_response | null)[] | null)
    /** update data of the table: "abandoned_matches" */
    update_abandoned_matches: (abandoned_matches_mutation_response | null)
    /** update single row of the table: "abandoned_matches" */
    update_abandoned_matches_by_pk: (abandoned_matches | null)
    /** update multiples rows of table: "abandoned_matches" */
    update_abandoned_matches_many: ((abandoned_matches_mutation_response | null)[] | null)
    /** update data of the table: "e_friend_status" */
    update_e_friend_status: (e_friend_status_mutation_response | null)
    /** update single row of the table: "e_friend_status" */
    update_e_friend_status_by_pk: (e_friend_status | null)
    /** update multiples rows of table: "e_friend_status" */
    update_e_friend_status_many: ((e_friend_status_mutation_response | null)[] | null)
    /** update data of the table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses: (e_game_server_node_statuses_mutation_response | null)
    /** update single row of the table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses_by_pk: (e_game_server_node_statuses | null)
    /** update multiples rows of table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses_many: ((e_game_server_node_statuses_mutation_response | null)[] | null)
    /** update data of the table: "e_lobby_access" */
    update_e_lobby_access: (e_lobby_access_mutation_response | null)
    /** update single row of the table: "e_lobby_access" */
    update_e_lobby_access_by_pk: (e_lobby_access | null)
    /** update multiples rows of table: "e_lobby_access" */
    update_e_lobby_access_many: ((e_lobby_access_mutation_response | null)[] | null)
    /** update data of the table: "e_lobby_player_status" */
    update_e_lobby_player_status: (e_lobby_player_status_mutation_response | null)
    /** update single row of the table: "e_lobby_player_status" */
    update_e_lobby_player_status_by_pk: (e_lobby_player_status | null)
    /** update multiples rows of table: "e_lobby_player_status" */
    update_e_lobby_player_status_many: ((e_lobby_player_status_mutation_response | null)[] | null)
    /** update data of the table: "e_map_pool_types" */
    update_e_map_pool_types: (e_map_pool_types_mutation_response | null)
    /** update single row of the table: "e_map_pool_types" */
    update_e_map_pool_types_by_pk: (e_map_pool_types | null)
    /** update multiples rows of table: "e_map_pool_types" */
    update_e_map_pool_types_many: ((e_map_pool_types_mutation_response | null)[] | null)
    /** update data of the table: "e_match_map_status" */
    update_e_match_map_status: (e_match_map_status_mutation_response | null)
    /** update single row of the table: "e_match_map_status" */
    update_e_match_map_status_by_pk: (e_match_map_status | null)
    /** update multiples rows of table: "e_match_map_status" */
    update_e_match_map_status_many: ((e_match_map_status_mutation_response | null)[] | null)
    /** update data of the table: "e_match_status" */
    update_e_match_status: (e_match_status_mutation_response | null)
    /** update single row of the table: "e_match_status" */
    update_e_match_status_by_pk: (e_match_status | null)
    /** update multiples rows of table: "e_match_status" */
    update_e_match_status_many: ((e_match_status_mutation_response | null)[] | null)
    /** update data of the table: "e_match_types" */
    update_e_match_types: (e_match_types_mutation_response | null)
    /** update single row of the table: "e_match_types" */
    update_e_match_types_by_pk: (e_match_types | null)
    /** update multiples rows of table: "e_match_types" */
    update_e_match_types_many: ((e_match_types_mutation_response | null)[] | null)
    /** update data of the table: "e_notification_types" */
    update_e_notification_types: (e_notification_types_mutation_response | null)
    /** update single row of the table: "e_notification_types" */
    update_e_notification_types_by_pk: (e_notification_types | null)
    /** update multiples rows of table: "e_notification_types" */
    update_e_notification_types_many: ((e_notification_types_mutation_response | null)[] | null)
    /** update data of the table: "e_objective_types" */
    update_e_objective_types: (e_objective_types_mutation_response | null)
    /** update single row of the table: "e_objective_types" */
    update_e_objective_types_by_pk: (e_objective_types | null)
    /** update multiples rows of table: "e_objective_types" */
    update_e_objective_types_many: ((e_objective_types_mutation_response | null)[] | null)
    /** update data of the table: "e_player_roles" */
    update_e_player_roles: (e_player_roles_mutation_response | null)
    /** update single row of the table: "e_player_roles" */
    update_e_player_roles_by_pk: (e_player_roles | null)
    /** update multiples rows of table: "e_player_roles" */
    update_e_player_roles_many: ((e_player_roles_mutation_response | null)[] | null)
    /** update data of the table: "e_ready_settings" */
    update_e_ready_settings: (e_ready_settings_mutation_response | null)
    /** update single row of the table: "e_ready_settings" */
    update_e_ready_settings_by_pk: (e_ready_settings | null)
    /** update multiples rows of table: "e_ready_settings" */
    update_e_ready_settings_many: ((e_ready_settings_mutation_response | null)[] | null)
    /** update data of the table: "e_sanction_types" */
    update_e_sanction_types: (e_sanction_types_mutation_response | null)
    /** update single row of the table: "e_sanction_types" */
    update_e_sanction_types_by_pk: (e_sanction_types | null)
    /** update multiples rows of table: "e_sanction_types" */
    update_e_sanction_types_many: ((e_sanction_types_mutation_response | null)[] | null)
    /** update data of the table: "e_sides" */
    update_e_sides: (e_sides_mutation_response | null)
    /** update single row of the table: "e_sides" */
    update_e_sides_by_pk: (e_sides | null)
    /** update multiples rows of table: "e_sides" */
    update_e_sides_many: ((e_sides_mutation_response | null)[] | null)
    /** update data of the table: "e_team_roles" */
    update_e_team_roles: (e_team_roles_mutation_response | null)
    /** update single row of the table: "e_team_roles" */
    update_e_team_roles_by_pk: (e_team_roles | null)
    /** update multiples rows of table: "e_team_roles" */
    update_e_team_roles_many: ((e_team_roles_mutation_response | null)[] | null)
    /** update data of the table: "e_timeout_settings" */
    update_e_timeout_settings: (e_timeout_settings_mutation_response | null)
    /** update single row of the table: "e_timeout_settings" */
    update_e_timeout_settings_by_pk: (e_timeout_settings | null)
    /** update multiples rows of table: "e_timeout_settings" */
    update_e_timeout_settings_many: ((e_timeout_settings_mutation_response | null)[] | null)
    /** update data of the table: "e_tournament_stage_types" */
    update_e_tournament_stage_types: (e_tournament_stage_types_mutation_response | null)
    /** update single row of the table: "e_tournament_stage_types" */
    update_e_tournament_stage_types_by_pk: (e_tournament_stage_types | null)
    /** update multiples rows of table: "e_tournament_stage_types" */
    update_e_tournament_stage_types_many: ((e_tournament_stage_types_mutation_response | null)[] | null)
    /** update data of the table: "e_tournament_status" */
    update_e_tournament_status: (e_tournament_status_mutation_response | null)
    /** update single row of the table: "e_tournament_status" */
    update_e_tournament_status_by_pk: (e_tournament_status | null)
    /** update multiples rows of table: "e_tournament_status" */
    update_e_tournament_status_many: ((e_tournament_status_mutation_response | null)[] | null)
    /** update data of the table: "e_utility_types" */
    update_e_utility_types: (e_utility_types_mutation_response | null)
    /** update single row of the table: "e_utility_types" */
    update_e_utility_types_by_pk: (e_utility_types | null)
    /** update multiples rows of table: "e_utility_types" */
    update_e_utility_types_many: ((e_utility_types_mutation_response | null)[] | null)
    /** update data of the table: "e_veto_pick_types" */
    update_e_veto_pick_types: (e_veto_pick_types_mutation_response | null)
    /** update single row of the table: "e_veto_pick_types" */
    update_e_veto_pick_types_by_pk: (e_veto_pick_types | null)
    /** update multiples rows of table: "e_veto_pick_types" */
    update_e_veto_pick_types_many: ((e_veto_pick_types_mutation_response | null)[] | null)
    /** update data of the table: "friends" */
    update_friends: (friends_mutation_response | null)
    /** update single row of the table: "friends" */
    update_friends_by_pk: (friends | null)
    /** update multiples rows of table: "friends" */
    update_friends_many: ((friends_mutation_response | null)[] | null)
    /** update data of the table: "game_server_nodes" */
    update_game_server_nodes: (game_server_nodes_mutation_response | null)
    /** update single row of the table: "game_server_nodes" */
    update_game_server_nodes_by_pk: (game_server_nodes | null)
    /** update multiples rows of table: "game_server_nodes" */
    update_game_server_nodes_many: ((game_server_nodes_mutation_response | null)[] | null)
    /** update data of the table: "lobbies" */
    update_lobbies: (lobbies_mutation_response | null)
    /** update single row of the table: "lobbies" */
    update_lobbies_by_pk: (lobbies | null)
    /** update multiples rows of table: "lobbies" */
    update_lobbies_many: ((lobbies_mutation_response | null)[] | null)
    /** update data of the table: "lobby_players" */
    update_lobby_players: (lobby_players_mutation_response | null)
    /** update single row of the table: "lobby_players" */
    update_lobby_players_by_pk: (lobby_players | null)
    /** update multiples rows of table: "lobby_players" */
    update_lobby_players_many: ((lobby_players_mutation_response | null)[] | null)
    /** update data of the table: "map_pools" */
    update_map_pools: (map_pools_mutation_response | null)
    /** update single row of the table: "map_pools" */
    update_map_pools_by_pk: (map_pools | null)
    /** update multiples rows of table: "map_pools" */
    update_map_pools_many: ((map_pools_mutation_response | null)[] | null)
    /** update data of the table: "maps" */
    update_maps: (maps_mutation_response | null)
    /** update single row of the table: "maps" */
    update_maps_by_pk: (maps | null)
    /** update multiples rows of table: "maps" */
    update_maps_many: ((maps_mutation_response | null)[] | null)
    /** update data of the table: "match_invites" */
    update_match_invites: (match_invites_mutation_response | null)
    /** update single row of the table: "match_invites" */
    update_match_invites_by_pk: (match_invites | null)
    /** update multiples rows of table: "match_invites" */
    update_match_invites_many: ((match_invites_mutation_response | null)[] | null)
    /** update data of the table: "match_lineup_players" */
    update_match_lineup_players: (match_lineup_players_mutation_response | null)
    /** update single row of the table: "match_lineup_players" */
    update_match_lineup_players_by_pk: (match_lineup_players | null)
    /** update multiples rows of table: "match_lineup_players" */
    update_match_lineup_players_many: ((match_lineup_players_mutation_response | null)[] | null)
    /** update data of the table: "match_lineups" */
    update_match_lineups: (match_lineups_mutation_response | null)
    /** update single row of the table: "match_lineups" */
    update_match_lineups_by_pk: (match_lineups | null)
    /** update multiples rows of table: "match_lineups" */
    update_match_lineups_many: ((match_lineups_mutation_response | null)[] | null)
    /** update data of the table: "match_map_demos" */
    update_match_map_demos: (match_map_demos_mutation_response | null)
    /** update single row of the table: "match_map_demos" */
    update_match_map_demos_by_pk: (match_map_demos | null)
    /** update multiples rows of table: "match_map_demos" */
    update_match_map_demos_many: ((match_map_demos_mutation_response | null)[] | null)
    /** update data of the table: "match_map_rounds" */
    update_match_map_rounds: (match_map_rounds_mutation_response | null)
    /** update single row of the table: "match_map_rounds" */
    update_match_map_rounds_by_pk: (match_map_rounds | null)
    /** update multiples rows of table: "match_map_rounds" */
    update_match_map_rounds_many: ((match_map_rounds_mutation_response | null)[] | null)
    /** update data of the table: "match_map_veto_picks" */
    update_match_map_veto_picks: (match_map_veto_picks_mutation_response | null)
    /** update single row of the table: "match_map_veto_picks" */
    update_match_map_veto_picks_by_pk: (match_map_veto_picks | null)
    /** update multiples rows of table: "match_map_veto_picks" */
    update_match_map_veto_picks_many: ((match_map_veto_picks_mutation_response | null)[] | null)
    /** update data of the table: "match_maps" */
    update_match_maps: (match_maps_mutation_response | null)
    /** update single row of the table: "match_maps" */
    update_match_maps_by_pk: (match_maps | null)
    /** update multiples rows of table: "match_maps" */
    update_match_maps_many: ((match_maps_mutation_response | null)[] | null)
    /** update data of the table: "match_options" */
    update_match_options: (match_options_mutation_response | null)
    /** update single row of the table: "match_options" */
    update_match_options_by_pk: (match_options | null)
    /** update multiples rows of table: "match_options" */
    update_match_options_many: ((match_options_mutation_response | null)[] | null)
    /** update data of the table: "match_region_veto_picks" */
    update_match_region_veto_picks: (match_region_veto_picks_mutation_response | null)
    /** update single row of the table: "match_region_veto_picks" */
    update_match_region_veto_picks_by_pk: (match_region_veto_picks | null)
    /** update multiples rows of table: "match_region_veto_picks" */
    update_match_region_veto_picks_many: ((match_region_veto_picks_mutation_response | null)[] | null)
    /** update data of the table: "match_type_cfgs" */
    update_match_type_cfgs: (match_type_cfgs_mutation_response | null)
    /** update single row of the table: "match_type_cfgs" */
    update_match_type_cfgs_by_pk: (match_type_cfgs | null)
    /** update multiples rows of table: "match_type_cfgs" */
    update_match_type_cfgs_many: ((match_type_cfgs_mutation_response | null)[] | null)
    /** update data of the table: "matches" */
    update_matches: (matches_mutation_response | null)
    /** update single row of the table: "matches" */
    update_matches_by_pk: (matches | null)
    /** update multiples rows of table: "matches" */
    update_matches_many: ((matches_mutation_response | null)[] | null)
    /** update data of the table: "migration_hashes.hashes" */
    update_migration_hashes_hashes: (migration_hashes_hashes_mutation_response | null)
    /** update single row of the table: "migration_hashes.hashes" */
    update_migration_hashes_hashes_by_pk: (migration_hashes_hashes | null)
    /** update multiples rows of table: "migration_hashes.hashes" */
    update_migration_hashes_hashes_many: ((migration_hashes_hashes_mutation_response | null)[] | null)
    /** update data of the table: "v_my_friends" */
    update_my_friends: (my_friends_mutation_response | null)
    /** update multiples rows of table: "v_my_friends" */
    update_my_friends_many: ((my_friends_mutation_response | null)[] | null)
    /** update data of the table: "notifications" */
    update_notifications: (notifications_mutation_response | null)
    /** update single row of the table: "notifications" */
    update_notifications_by_pk: (notifications | null)
    /** update multiples rows of table: "notifications" */
    update_notifications_many: ((notifications_mutation_response | null)[] | null)
    /** update data of the table: "player_assists" */
    update_player_assists: (player_assists_mutation_response | null)
    /** update multiples rows of table: "player_assists" */
    update_player_assists_many: ((player_assists_mutation_response | null)[] | null)
    /** update data of the table: "player_damages" */
    update_player_damages: (player_damages_mutation_response | null)
    /** update multiples rows of table: "player_damages" */
    update_player_damages_many: ((player_damages_mutation_response | null)[] | null)
    /** update data of the table: "player_elo" */
    update_player_elo: (player_elo_mutation_response | null)
    /** update single row of the table: "player_elo" */
    update_player_elo_by_pk: (player_elo | null)
    /** update multiples rows of table: "player_elo" */
    update_player_elo_many: ((player_elo_mutation_response | null)[] | null)
    /** update data of the table: "player_flashes" */
    update_player_flashes: (player_flashes_mutation_response | null)
    /** update multiples rows of table: "player_flashes" */
    update_player_flashes_many: ((player_flashes_mutation_response | null)[] | null)
    /** update data of the table: "player_kills" */
    update_player_kills: (player_kills_mutation_response | null)
    /** update single row of the table: "player_kills" */
    update_player_kills_by_pk: (player_kills | null)
    /** update multiples rows of table: "player_kills" */
    update_player_kills_many: ((player_kills_mutation_response | null)[] | null)
    /** update data of the table: "player_objectives" */
    update_player_objectives: (player_objectives_mutation_response | null)
    /** update multiples rows of table: "player_objectives" */
    update_player_objectives_many: ((player_objectives_mutation_response | null)[] | null)
    /** update data of the table: "player_sanctions" */
    update_player_sanctions: (player_sanctions_mutation_response | null)
    /** update multiples rows of table: "player_sanctions" */
    update_player_sanctions_many: ((player_sanctions_mutation_response | null)[] | null)
    /** update data of the table: "player_unused_utility" */
    update_player_unused_utility: (player_unused_utility_mutation_response | null)
    /** update single row of the table: "player_unused_utility" */
    update_player_unused_utility_by_pk: (player_unused_utility | null)
    /** update multiples rows of table: "player_unused_utility" */
    update_player_unused_utility_many: ((player_unused_utility_mutation_response | null)[] | null)
    /** update data of the table: "player_utility" */
    update_player_utility: (player_utility_mutation_response | null)
    /** update multiples rows of table: "player_utility" */
    update_player_utility_many: ((player_utility_mutation_response | null)[] | null)
    /** update data of the table: "players" */
    update_players: (players_mutation_response | null)
    /** update single row of the table: "players" */
    update_players_by_pk: (players | null)
    /** update multiples rows of table: "players" */
    update_players_many: ((players_mutation_response | null)[] | null)
    /** update data of the table: "server_regions" */
    update_server_regions: (server_regions_mutation_response | null)
    /** update single row of the table: "server_regions" */
    update_server_regions_by_pk: (server_regions | null)
    /** update multiples rows of table: "server_regions" */
    update_server_regions_many: ((server_regions_mutation_response | null)[] | null)
    /** update data of the table: "servers" */
    update_servers: (servers_mutation_response | null)
    /** update single row of the table: "servers" */
    update_servers_by_pk: (servers | null)
    /** update multiples rows of table: "servers" */
    update_servers_many: ((servers_mutation_response | null)[] | null)
    /** update data of the table: "settings" */
    update_settings: (settings_mutation_response | null)
    /** update single row of the table: "settings" */
    update_settings_by_pk: (settings | null)
    /** update multiples rows of table: "settings" */
    update_settings_many: ((settings_mutation_response | null)[] | null)
    /** update data of the table: "team_invites" */
    update_team_invites: (team_invites_mutation_response | null)
    /** update single row of the table: "team_invites" */
    update_team_invites_by_pk: (team_invites | null)
    /** update multiples rows of table: "team_invites" */
    update_team_invites_many: ((team_invites_mutation_response | null)[] | null)
    /** update data of the table: "team_roster" */
    update_team_roster: (team_roster_mutation_response | null)
    /** update single row of the table: "team_roster" */
    update_team_roster_by_pk: (team_roster | null)
    /** update multiples rows of table: "team_roster" */
    update_team_roster_many: ((team_roster_mutation_response | null)[] | null)
    /** update data of the table: "teams" */
    update_teams: (teams_mutation_response | null)
    /** update single row of the table: "teams" */
    update_teams_by_pk: (teams | null)
    /** update multiples rows of table: "teams" */
    update_teams_many: ((teams_mutation_response | null)[] | null)
    /** update data of the table: "tournament_brackets" */
    update_tournament_brackets: (tournament_brackets_mutation_response | null)
    /** update single row of the table: "tournament_brackets" */
    update_tournament_brackets_by_pk: (tournament_brackets | null)
    /** update multiples rows of table: "tournament_brackets" */
    update_tournament_brackets_many: ((tournament_brackets_mutation_response | null)[] | null)
    /** update data of the table: "tournament_organizers" */
    update_tournament_organizers: (tournament_organizers_mutation_response | null)
    /** update single row of the table: "tournament_organizers" */
    update_tournament_organizers_by_pk: (tournament_organizers | null)
    /** update multiples rows of table: "tournament_organizers" */
    update_tournament_organizers_many: ((tournament_organizers_mutation_response | null)[] | null)
    /** update data of the table: "tournament_stages" */
    update_tournament_stages: (tournament_stages_mutation_response | null)
    /** update single row of the table: "tournament_stages" */
    update_tournament_stages_by_pk: (tournament_stages | null)
    /** update multiples rows of table: "tournament_stages" */
    update_tournament_stages_many: ((tournament_stages_mutation_response | null)[] | null)
    /** update data of the table: "tournament_team_invites" */
    update_tournament_team_invites: (tournament_team_invites_mutation_response | null)
    /** update single row of the table: "tournament_team_invites" */
    update_tournament_team_invites_by_pk: (tournament_team_invites | null)
    /** update multiples rows of table: "tournament_team_invites" */
    update_tournament_team_invites_many: ((tournament_team_invites_mutation_response | null)[] | null)
    /** update data of the table: "tournament_team_roster" */
    update_tournament_team_roster: (tournament_team_roster_mutation_response | null)
    /** update single row of the table: "tournament_team_roster" */
    update_tournament_team_roster_by_pk: (tournament_team_roster | null)
    /** update multiples rows of table: "tournament_team_roster" */
    update_tournament_team_roster_many: ((tournament_team_roster_mutation_response | null)[] | null)
    /** update data of the table: "tournament_teams" */
    update_tournament_teams: (tournament_teams_mutation_response | null)
    /** update single row of the table: "tournament_teams" */
    update_tournament_teams_by_pk: (tournament_teams | null)
    /** update multiples rows of table: "tournament_teams" */
    update_tournament_teams_many: ((tournament_teams_mutation_response | null)[] | null)
    /** update data of the table: "tournaments" */
    update_tournaments: (tournaments_mutation_response | null)
    /** update single row of the table: "tournaments" */
    update_tournaments_by_pk: (tournaments | null)
    /** update multiples rows of table: "tournaments" */
    update_tournaments_many: ((tournaments_mutation_response | null)[] | null)
    /** update data of the table: "v_match_captains" */
    update_v_match_captains: (v_match_captains_mutation_response | null)
    /** update multiples rows of table: "v_match_captains" */
    update_v_match_captains_many: ((v_match_captains_mutation_response | null)[] | null)
    /** update data of the table: "v_pool_maps" */
    update_v_pool_maps: (v_pool_maps_mutation_response | null)
    /** update multiples rows of table: "v_pool_maps" */
    update_v_pool_maps_many: ((v_pool_maps_mutation_response | null)[] | null)
    __typename: 'mutation_root'
}


/** columns and relationships of "v_my_friends" */
export interface my_friends {
    avatar_url: (Scalars['String'] | null)
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    discord_id: (Scalars['String'] | null)
    elo: (Scalars['numeric'] | null)
    friend_steam_id: (Scalars['bigint'] | null)
    invited_by_steam_id: (Scalars['bigint'] | null)
    name: (Scalars['String'] | null)
    name_registered: (Scalars['Boolean'] | null)
    /** An object relationship */
    player: (players | null)
    profile_url: (Scalars['String'] | null)
    role: (Scalars['String'] | null)
    status: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'my_friends'
}


/** aggregated selection of "v_my_friends" */
export interface my_friends_aggregate {
    aggregate: (my_friends_aggregate_fields | null)
    nodes: my_friends[]
    __typename: 'my_friends_aggregate'
}


/** aggregate fields of "v_my_friends" */
export interface my_friends_aggregate_fields {
    avg: (my_friends_avg_fields | null)
    count: Scalars['Int']
    max: (my_friends_max_fields | null)
    min: (my_friends_min_fields | null)
    stddev: (my_friends_stddev_fields | null)
    stddev_pop: (my_friends_stddev_pop_fields | null)
    stddev_samp: (my_friends_stddev_samp_fields | null)
    sum: (my_friends_sum_fields | null)
    var_pop: (my_friends_var_pop_fields | null)
    var_samp: (my_friends_var_samp_fields | null)
    variance: (my_friends_variance_fields | null)
    __typename: 'my_friends_aggregate_fields'
}


/** aggregate avg on columns */
export interface my_friends_avg_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_avg_fields'
}


/** aggregate max on columns */
export interface my_friends_max_fields {
    avatar_url: (Scalars['String'] | null)
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    discord_id: (Scalars['String'] | null)
    elo: (Scalars['numeric'] | null)
    friend_steam_id: (Scalars['bigint'] | null)
    invited_by_steam_id: (Scalars['bigint'] | null)
    name: (Scalars['String'] | null)
    profile_url: (Scalars['String'] | null)
    role: (Scalars['String'] | null)
    status: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'my_friends_max_fields'
}


/** aggregate min on columns */
export interface my_friends_min_fields {
    avatar_url: (Scalars['String'] | null)
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    discord_id: (Scalars['String'] | null)
    elo: (Scalars['numeric'] | null)
    friend_steam_id: (Scalars['bigint'] | null)
    invited_by_steam_id: (Scalars['bigint'] | null)
    name: (Scalars['String'] | null)
    profile_url: (Scalars['String'] | null)
    role: (Scalars['String'] | null)
    status: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'my_friends_min_fields'
}


/** response of any mutation on the table "v_my_friends" */
export interface my_friends_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: my_friends[]
    __typename: 'my_friends_mutation_response'
}


/** select columns of table "v_my_friends" */
export type my_friends_select_column = 'avatar_url' | 'country' | 'created_at' | 'discord_id' | 'elo' | 'friend_steam_id' | 'invited_by_steam_id' | 'name' | 'name_registered' | 'profile_url' | 'role' | 'status' | 'steam_id'


/** select "my_friends_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_my_friends" */
export type my_friends_select_column_my_friends_aggregate_bool_exp_bool_and_arguments_columns = 'name_registered'


/** select "my_friends_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_my_friends" */
export type my_friends_select_column_my_friends_aggregate_bool_exp_bool_or_arguments_columns = 'name_registered'


/** aggregate stddev on columns */
export interface my_friends_stddev_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface my_friends_stddev_pop_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface my_friends_stddev_samp_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface my_friends_sum_fields {
    elo: (Scalars['numeric'] | null)
    friend_steam_id: (Scalars['bigint'] | null)
    invited_by_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'my_friends_sum_fields'
}


/** aggregate var_pop on columns */
export interface my_friends_var_pop_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface my_friends_var_samp_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_var_samp_fields'
}


/** aggregate variance on columns */
export interface my_friends_variance_fields {
    elo: (Scalars['Float'] | null)
    friend_steam_id: (Scalars['Float'] | null)
    invited_by_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'my_friends_variance_fields'
}


/** columns and relationships of "notifications" */
export interface notifications {
    actions: (Scalars['jsonb'] | null)
    created_at: Scalars['timestamptz']
    deleted_at: (Scalars['timestamptz'] | null)
    entity_id: (Scalars['String'] | null)
    id: Scalars['uuid']
    is_read: Scalars['Boolean']
    message: Scalars['String']
    /** An object relationship */
    player: (players | null)
    role: e_player_roles_enum
    steam_id: (Scalars['bigint'] | null)
    title: Scalars['String']
    type: e_notification_types_enum
    __typename: 'notifications'
}


/** aggregated selection of "notifications" */
export interface notifications_aggregate {
    aggregate: (notifications_aggregate_fields | null)
    nodes: notifications[]
    __typename: 'notifications_aggregate'
}


/** aggregate fields of "notifications" */
export interface notifications_aggregate_fields {
    avg: (notifications_avg_fields | null)
    count: Scalars['Int']
    max: (notifications_max_fields | null)
    min: (notifications_min_fields | null)
    stddev: (notifications_stddev_fields | null)
    stddev_pop: (notifications_stddev_pop_fields | null)
    stddev_samp: (notifications_stddev_samp_fields | null)
    sum: (notifications_sum_fields | null)
    var_pop: (notifications_var_pop_fields | null)
    var_samp: (notifications_var_samp_fields | null)
    variance: (notifications_variance_fields | null)
    __typename: 'notifications_aggregate_fields'
}


/** aggregate avg on columns */
export interface notifications_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_avg_fields'
}


/** unique or primary key constraints on table "notifications" */
export type notifications_constraint = 'notifications_pkey'


/** aggregate max on columns */
export interface notifications_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    deleted_at: (Scalars['timestamptz'] | null)
    entity_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    message: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    title: (Scalars['String'] | null)
    __typename: 'notifications_max_fields'
}


/** aggregate min on columns */
export interface notifications_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    deleted_at: (Scalars['timestamptz'] | null)
    entity_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    message: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    title: (Scalars['String'] | null)
    __typename: 'notifications_min_fields'
}


/** response of any mutation on the table "notifications" */
export interface notifications_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: notifications[]
    __typename: 'notifications_mutation_response'
}


/** select columns of table "notifications" */
export type notifications_select_column = 'actions' | 'created_at' | 'deleted_at' | 'entity_id' | 'id' | 'is_read' | 'message' | 'role' | 'steam_id' | 'title' | 'type'


/** select "notifications_aggregate_bool_exp_bool_and_arguments_columns" columns of table "notifications" */
export type notifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns = 'is_read'


/** select "notifications_aggregate_bool_exp_bool_or_arguments_columns" columns of table "notifications" */
export type notifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns = 'is_read'


/** aggregate stddev on columns */
export interface notifications_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface notifications_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface notifications_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface notifications_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'notifications_sum_fields'
}


/** update columns of table "notifications" */
export type notifications_update_column = 'actions' | 'created_at' | 'deleted_at' | 'entity_id' | 'id' | 'is_read' | 'message' | 'role' | 'steam_id' | 'title' | 'type'


/** aggregate var_pop on columns */
export interface notifications_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface notifications_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_var_samp_fields'
}


/** aggregate variance on columns */
export interface notifications_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'notifications_variance_fields'
}


/** column ordering options */
export type order_by = 'asc' | 'asc_nulls_first' | 'asc_nulls_last' | 'desc' | 'desc_nulls_first' | 'desc_nulls_last'


/** columns and relationships of "player_assists" */
export interface player_assists {
    /** An object relationship */
    attacked_player: players
    attacked_steam_id: Scalars['bigint']
    attacked_team: Scalars['String']
    attacker_steam_id: Scalars['bigint']
    attacker_team: Scalars['String']
    flash: Scalars['Boolean']
    id: Scalars['uuid']
    /** A computed field, executes function "is_team_assist" */
    is_team_assist: (Scalars['Boolean'] | null)
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    /** An object relationship */
    player: players
    round: Scalars['Int']
    time: Scalars['timestamptz']
    __typename: 'player_assists'
}


/** aggregated selection of "player_assists" */
export interface player_assists_aggregate {
    aggregate: (player_assists_aggregate_fields | null)
    nodes: player_assists[]
    __typename: 'player_assists_aggregate'
}


/** aggregate fields of "player_assists" */
export interface player_assists_aggregate_fields {
    avg: (player_assists_avg_fields | null)
    count: Scalars['Int']
    max: (player_assists_max_fields | null)
    min: (player_assists_min_fields | null)
    stddev: (player_assists_stddev_fields | null)
    stddev_pop: (player_assists_stddev_pop_fields | null)
    stddev_samp: (player_assists_stddev_samp_fields | null)
    sum: (player_assists_sum_fields | null)
    var_pop: (player_assists_var_pop_fields | null)
    var_samp: (player_assists_var_samp_fields | null)
    variance: (player_assists_variance_fields | null)
    __typename: 'player_assists_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_assists_avg_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_avg_fields'
}


/** aggregate max on columns */
export interface player_assists_max_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_assists_max_fields'
}


/** aggregate min on columns */
export interface player_assists_min_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_assists_min_fields'
}


/** response of any mutation on the table "player_assists" */
export interface player_assists_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_assists[]
    __typename: 'player_assists_mutation_response'
}


/** select columns of table "player_assists" */
export type player_assists_select_column = 'attacked_steam_id' | 'attacked_team' | 'attacker_steam_id' | 'attacker_team' | 'flash' | 'id' | 'match_id' | 'match_map_id' | 'round' | 'time'


/** select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists" */
export type player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns = 'flash'


/** select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists" */
export type player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns = 'flash'


/** aggregate stddev on columns */
export interface player_assists_stddev_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_assists_stddev_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_assists_stddev_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_assists_sum_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'player_assists_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_assists_var_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_assists_var_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_assists_variance_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_assists_variance_fields'
}


/** columns and relationships of "player_damages" */
export interface player_damages {
    armor: Scalars['Int']
    attacked_location: Scalars['String']
    attacked_location_coordinates: (Scalars['String'] | null)
    /** An object relationship */
    attacked_player: players
    attacked_steam_id: Scalars['bigint']
    attacked_team: Scalars['String']
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    damage: Scalars['Int']
    damage_armor: Scalars['Int']
    health: Scalars['Int']
    hitgroup: Scalars['String']
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    /** An object relationship */
    player: (players | null)
    round: Scalars['numeric']
    /** A computed field, executes function "is_team_damage" */
    team_damage: (Scalars['Boolean'] | null)
    time: Scalars['timestamptz']
    with: (Scalars['String'] | null)
    __typename: 'player_damages'
}


/** aggregated selection of "player_damages" */
export interface player_damages_aggregate {
    aggregate: (player_damages_aggregate_fields | null)
    nodes: player_damages[]
    __typename: 'player_damages_aggregate'
}


/** aggregate fields of "player_damages" */
export interface player_damages_aggregate_fields {
    avg: (player_damages_avg_fields | null)
    count: Scalars['Int']
    max: (player_damages_max_fields | null)
    min: (player_damages_min_fields | null)
    stddev: (player_damages_stddev_fields | null)
    stddev_pop: (player_damages_stddev_pop_fields | null)
    stddev_samp: (player_damages_stddev_samp_fields | null)
    sum: (player_damages_sum_fields | null)
    var_pop: (player_damages_var_pop_fields | null)
    var_samp: (player_damages_var_samp_fields | null)
    variance: (player_damages_variance_fields | null)
    __typename: 'player_damages_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_damages_avg_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_avg_fields'
}


/** aggregate max on columns */
export interface player_damages_max_fields {
    armor: (Scalars['Int'] | null)
    attacked_location: (Scalars['String'] | null)
    attacked_location_coordinates: (Scalars['String'] | null)
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    damage: (Scalars['Int'] | null)
    damage_armor: (Scalars['Int'] | null)
    health: (Scalars['Int'] | null)
    hitgroup: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['numeric'] | null)
    time: (Scalars['timestamptz'] | null)
    with: (Scalars['String'] | null)
    __typename: 'player_damages_max_fields'
}


/** aggregate min on columns */
export interface player_damages_min_fields {
    armor: (Scalars['Int'] | null)
    attacked_location: (Scalars['String'] | null)
    attacked_location_coordinates: (Scalars['String'] | null)
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    damage: (Scalars['Int'] | null)
    damage_armor: (Scalars['Int'] | null)
    health: (Scalars['Int'] | null)
    hitgroup: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['numeric'] | null)
    time: (Scalars['timestamptz'] | null)
    with: (Scalars['String'] | null)
    __typename: 'player_damages_min_fields'
}


/** response of any mutation on the table "player_damages" */
export interface player_damages_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_damages[]
    __typename: 'player_damages_mutation_response'
}


/** select columns of table "player_damages" */
export type player_damages_select_column = 'armor' | 'attacked_location' | 'attacked_location_coordinates' | 'attacked_steam_id' | 'attacked_team' | 'attacker_location' | 'attacker_location_coordinates' | 'attacker_steam_id' | 'attacker_team' | 'damage' | 'damage_armor' | 'health' | 'hitgroup' | 'id' | 'match_id' | 'match_map_id' | 'round' | 'time' | 'with'


/** aggregate stddev on columns */
export interface player_damages_stddev_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_damages_stddev_pop_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_damages_stddev_samp_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_damages_sum_fields {
    armor: (Scalars['Int'] | null)
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    damage: (Scalars['Int'] | null)
    damage_armor: (Scalars['Int'] | null)
    health: (Scalars['Int'] | null)
    round: (Scalars['numeric'] | null)
    __typename: 'player_damages_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_damages_var_pop_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_damages_var_samp_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_damages_variance_fields {
    armor: (Scalars['Float'] | null)
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_armor: (Scalars['Float'] | null)
    health: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_damages_variance_fields'
}


/** columns and relationships of "player_elo" */
export interface player_elo {
    change: Scalars['numeric']
    created_at: Scalars['timestamptz']
    current: Scalars['numeric']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    player: players
    steam_id: Scalars['bigint']
    __typename: 'player_elo'
}


/** aggregated selection of "player_elo" */
export interface player_elo_aggregate {
    aggregate: (player_elo_aggregate_fields | null)
    nodes: player_elo[]
    __typename: 'player_elo_aggregate'
}


/** aggregate fields of "player_elo" */
export interface player_elo_aggregate_fields {
    avg: (player_elo_avg_fields | null)
    count: Scalars['Int']
    max: (player_elo_max_fields | null)
    min: (player_elo_min_fields | null)
    stddev: (player_elo_stddev_fields | null)
    stddev_pop: (player_elo_stddev_pop_fields | null)
    stddev_samp: (player_elo_stddev_samp_fields | null)
    sum: (player_elo_sum_fields | null)
    var_pop: (player_elo_var_pop_fields | null)
    var_samp: (player_elo_var_samp_fields | null)
    variance: (player_elo_variance_fields | null)
    __typename: 'player_elo_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_elo_avg_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_avg_fields'
}


/** unique or primary key constraints on table "player_elo" */
export type player_elo_constraint = 'player_elo_pkey'


/** aggregate max on columns */
export interface player_elo_max_fields {
    change: (Scalars['numeric'] | null)
    created_at: (Scalars['timestamptz'] | null)
    current: (Scalars['numeric'] | null)
    match_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'player_elo_max_fields'
}


/** aggregate min on columns */
export interface player_elo_min_fields {
    change: (Scalars['numeric'] | null)
    created_at: (Scalars['timestamptz'] | null)
    current: (Scalars['numeric'] | null)
    match_id: (Scalars['uuid'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'player_elo_min_fields'
}


/** response of any mutation on the table "player_elo" */
export interface player_elo_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_elo[]
    __typename: 'player_elo_mutation_response'
}


/** select columns of table "player_elo" */
export type player_elo_select_column = 'change' | 'created_at' | 'current' | 'match_id' | 'steam_id'


/** aggregate stddev on columns */
export interface player_elo_stddev_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_elo_stddev_pop_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_elo_stddev_samp_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_elo_sum_fields {
    change: (Scalars['numeric'] | null)
    current: (Scalars['numeric'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'player_elo_sum_fields'
}


/** update columns of table "player_elo" */
export type player_elo_update_column = 'change' | 'created_at' | 'current' | 'match_id' | 'steam_id'


/** aggregate var_pop on columns */
export interface player_elo_var_pop_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_elo_var_samp_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_elo_variance_fields {
    change: (Scalars['Float'] | null)
    current: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'player_elo_variance_fields'
}


/** columns and relationships of "player_flashes" */
export interface player_flashes {
    attacked_steam_id: Scalars['bigint']
    attacker_steam_id: Scalars['bigint']
    /** An object relationship */
    blinded: players
    duration: Scalars['numeric']
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    round: Scalars['Int']
    team_flash: Scalars['Boolean']
    /** An object relationship */
    thrown_by: players
    time: Scalars['timestamptz']
    __typename: 'player_flashes'
}


/** aggregated selection of "player_flashes" */
export interface player_flashes_aggregate {
    aggregate: (player_flashes_aggregate_fields | null)
    nodes: player_flashes[]
    __typename: 'player_flashes_aggregate'
}


/** aggregate fields of "player_flashes" */
export interface player_flashes_aggregate_fields {
    avg: (player_flashes_avg_fields | null)
    count: Scalars['Int']
    max: (player_flashes_max_fields | null)
    min: (player_flashes_min_fields | null)
    stddev: (player_flashes_stddev_fields | null)
    stddev_pop: (player_flashes_stddev_pop_fields | null)
    stddev_samp: (player_flashes_stddev_samp_fields | null)
    sum: (player_flashes_sum_fields | null)
    var_pop: (player_flashes_var_pop_fields | null)
    var_samp: (player_flashes_var_samp_fields | null)
    variance: (player_flashes_variance_fields | null)
    __typename: 'player_flashes_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_flashes_avg_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_avg_fields'
}


/** aggregate max on columns */
export interface player_flashes_max_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    duration: (Scalars['numeric'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_flashes_max_fields'
}


/** aggregate min on columns */
export interface player_flashes_min_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    duration: (Scalars['numeric'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_flashes_min_fields'
}


/** response of any mutation on the table "player_flashes" */
export interface player_flashes_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_flashes[]
    __typename: 'player_flashes_mutation_response'
}


/** select columns of table "player_flashes" */
export type player_flashes_select_column = 'attacked_steam_id' | 'attacker_steam_id' | 'duration' | 'id' | 'match_id' | 'match_map_id' | 'round' | 'team_flash' | 'time'


/** select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes" */
export type player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns = 'team_flash'


/** select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes" */
export type player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns = 'team_flash'


/** aggregate stddev on columns */
export interface player_flashes_stddev_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_flashes_stddev_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_flashes_stddev_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_flashes_sum_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    duration: (Scalars['numeric'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'player_flashes_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_flashes_var_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_flashes_var_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_flashes_variance_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    duration: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_flashes_variance_fields'
}


/** columns and relationships of "player_kills" */
export interface player_kills {
    assisted: Scalars['Boolean']
    attacked_location: Scalars['String']
    attacked_location_coordinates: (Scalars['String'] | null)
    /** An object relationship */
    attacked_player: players
    attacked_steam_id: Scalars['bigint']
    attacked_team: Scalars['String']
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    blinded: Scalars['Boolean']
    headshot: Scalars['Boolean']
    hitgroup: Scalars['String']
    id: Scalars['uuid']
    in_air: Scalars['Boolean']
    /** A computed field, executes function "is_suicide" */
    is_suicide: (Scalars['Boolean'] | null)
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    no_scope: Scalars['Boolean']
    /** An object relationship */
    player: (players | null)
    round: Scalars['Int']
    /** A computed field, executes function "is_team_kill" */
    team_kill: (Scalars['Boolean'] | null)
    thru_smoke: Scalars['Boolean']
    thru_wall: Scalars['Boolean']
    time: Scalars['timestamptz']
    with: (Scalars['String'] | null)
    __typename: 'player_kills'
}


/** aggregated selection of "player_kills" */
export interface player_kills_aggregate {
    aggregate: (player_kills_aggregate_fields | null)
    nodes: player_kills[]
    __typename: 'player_kills_aggregate'
}


/** aggregate fields of "player_kills" */
export interface player_kills_aggregate_fields {
    avg: (player_kills_avg_fields | null)
    count: Scalars['Int']
    max: (player_kills_max_fields | null)
    min: (player_kills_min_fields | null)
    stddev: (player_kills_stddev_fields | null)
    stddev_pop: (player_kills_stddev_pop_fields | null)
    stddev_samp: (player_kills_stddev_samp_fields | null)
    sum: (player_kills_sum_fields | null)
    var_pop: (player_kills_var_pop_fields | null)
    var_samp: (player_kills_var_samp_fields | null)
    variance: (player_kills_variance_fields | null)
    __typename: 'player_kills_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_kills_avg_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_avg_fields'
}


/** unique or primary key constraints on table "player_kills" */
export type player_kills_constraint = 'player_kills_pkey'


/** aggregate max on columns */
export interface player_kills_max_fields {
    attacked_location: (Scalars['String'] | null)
    attacked_location_coordinates: (Scalars['String'] | null)
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    hitgroup: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    with: (Scalars['String'] | null)
    __typename: 'player_kills_max_fields'
}


/** aggregate min on columns */
export interface player_kills_min_fields {
    attacked_location: (Scalars['String'] | null)
    attacked_location_coordinates: (Scalars['String'] | null)
    attacked_steam_id: (Scalars['bigint'] | null)
    attacked_team: (Scalars['String'] | null)
    attacker_location: (Scalars['String'] | null)
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    attacker_team: (Scalars['String'] | null)
    hitgroup: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    with: (Scalars['String'] | null)
    __typename: 'player_kills_min_fields'
}


/** response of any mutation on the table "player_kills" */
export interface player_kills_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_kills[]
    __typename: 'player_kills_mutation_response'
}


/** select columns of table "player_kills" */
export type player_kills_select_column = 'assisted' | 'attacked_location' | 'attacked_location_coordinates' | 'attacked_steam_id' | 'attacked_team' | 'attacker_location' | 'attacker_location_coordinates' | 'attacker_steam_id' | 'attacker_team' | 'blinded' | 'headshot' | 'hitgroup' | 'id' | 'in_air' | 'match_id' | 'match_map_id' | 'no_scope' | 'round' | 'thru_smoke' | 'thru_wall' | 'time' | 'with'


/** select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills" */
export type player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns = 'assisted' | 'blinded' | 'headshot' | 'in_air' | 'no_scope' | 'thru_smoke' | 'thru_wall'


/** select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills" */
export type player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns = 'assisted' | 'blinded' | 'headshot' | 'in_air' | 'no_scope' | 'thru_smoke' | 'thru_wall'


/** aggregate stddev on columns */
export interface player_kills_stddev_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_kills_stddev_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_kills_stddev_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_kills_sum_fields {
    attacked_steam_id: (Scalars['bigint'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'player_kills_sum_fields'
}


/** update columns of table "player_kills" */
export type player_kills_update_column = 'assisted' | 'attacked_location' | 'attacked_location_coordinates' | 'attacked_steam_id' | 'attacked_team' | 'attacker_location' | 'attacker_location_coordinates' | 'attacker_steam_id' | 'attacker_team' | 'blinded' | 'headshot' | 'hitgroup' | 'id' | 'in_air' | 'match_id' | 'match_map_id' | 'no_scope' | 'round' | 'thru_smoke' | 'thru_wall' | 'time' | 'with'


/** aggregate var_pop on columns */
export interface player_kills_var_pop_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_kills_var_samp_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_kills_variance_fields {
    attacked_steam_id: (Scalars['Float'] | null)
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_kills_variance_fields'
}


/** columns and relationships of "player_objectives" */
export interface player_objectives {
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    /** An object relationship */
    player: players
    player_steam_id: Scalars['bigint']
    round: Scalars['Int']
    time: Scalars['timestamptz']
    type: e_objective_types_enum
    __typename: 'player_objectives'
}


/** aggregated selection of "player_objectives" */
export interface player_objectives_aggregate {
    aggregate: (player_objectives_aggregate_fields | null)
    nodes: player_objectives[]
    __typename: 'player_objectives_aggregate'
}


/** aggregate fields of "player_objectives" */
export interface player_objectives_aggregate_fields {
    avg: (player_objectives_avg_fields | null)
    count: Scalars['Int']
    max: (player_objectives_max_fields | null)
    min: (player_objectives_min_fields | null)
    stddev: (player_objectives_stddev_fields | null)
    stddev_pop: (player_objectives_stddev_pop_fields | null)
    stddev_samp: (player_objectives_stddev_samp_fields | null)
    sum: (player_objectives_sum_fields | null)
    var_pop: (player_objectives_var_pop_fields | null)
    var_samp: (player_objectives_var_samp_fields | null)
    variance: (player_objectives_variance_fields | null)
    __typename: 'player_objectives_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_objectives_avg_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_avg_fields'
}


/** aggregate max on columns */
export interface player_objectives_max_fields {
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_objectives_max_fields'
}


/** aggregate min on columns */
export interface player_objectives_min_fields {
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_objectives_min_fields'
}


/** response of any mutation on the table "player_objectives" */
export interface player_objectives_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_objectives[]
    __typename: 'player_objectives_mutation_response'
}


/** select columns of table "player_objectives" */
export type player_objectives_select_column = 'id' | 'match_id' | 'match_map_id' | 'player_steam_id' | 'round' | 'time' | 'type'


/** aggregate stddev on columns */
export interface player_objectives_stddev_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_objectives_stddev_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_objectives_stddev_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_objectives_sum_fields {
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'player_objectives_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_objectives_var_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_objectives_var_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_objectives_variance_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_objectives_variance_fields'
}


/** columns and relationships of "player_sanctions" */
export interface player_sanctions {
    created_at: Scalars['timestamptz']
    /** An object relationship */
    e_sanction_type: e_sanction_types
    id: Scalars['uuid']
    /** An object relationship */
    player: players
    player_steam_id: Scalars['bigint']
    reason: (Scalars['String'] | null)
    remove_sanction_date: (Scalars['timestamptz'] | null)
    /** An object relationship */
    sanctioned_by: players
    sanctioned_by_steam_id: Scalars['bigint']
    type: e_sanction_types_enum
    __typename: 'player_sanctions'
}


/** aggregated selection of "player_sanctions" */
export interface player_sanctions_aggregate {
    aggregate: (player_sanctions_aggregate_fields | null)
    nodes: player_sanctions[]
    __typename: 'player_sanctions_aggregate'
}


/** aggregate fields of "player_sanctions" */
export interface player_sanctions_aggregate_fields {
    avg: (player_sanctions_avg_fields | null)
    count: Scalars['Int']
    max: (player_sanctions_max_fields | null)
    min: (player_sanctions_min_fields | null)
    stddev: (player_sanctions_stddev_fields | null)
    stddev_pop: (player_sanctions_stddev_pop_fields | null)
    stddev_samp: (player_sanctions_stddev_samp_fields | null)
    sum: (player_sanctions_sum_fields | null)
    var_pop: (player_sanctions_var_pop_fields | null)
    var_samp: (player_sanctions_var_samp_fields | null)
    variance: (player_sanctions_variance_fields | null)
    __typename: 'player_sanctions_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_sanctions_avg_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_avg_fields'
}


/** aggregate max on columns */
export interface player_sanctions_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    reason: (Scalars['String'] | null)
    remove_sanction_date: (Scalars['timestamptz'] | null)
    sanctioned_by_steam_id: (Scalars['bigint'] | null)
    __typename: 'player_sanctions_max_fields'
}


/** aggregate min on columns */
export interface player_sanctions_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    reason: (Scalars['String'] | null)
    remove_sanction_date: (Scalars['timestamptz'] | null)
    sanctioned_by_steam_id: (Scalars['bigint'] | null)
    __typename: 'player_sanctions_min_fields'
}


/** response of any mutation on the table "player_sanctions" */
export interface player_sanctions_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_sanctions[]
    __typename: 'player_sanctions_mutation_response'
}


/** select columns of table "player_sanctions" */
export type player_sanctions_select_column = 'created_at' | 'id' | 'player_steam_id' | 'reason' | 'remove_sanction_date' | 'sanctioned_by_steam_id' | 'type'


/** aggregate stddev on columns */
export interface player_sanctions_stddev_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_sanctions_stddev_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_sanctions_stddev_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_sanctions_sum_fields {
    player_steam_id: (Scalars['bigint'] | null)
    sanctioned_by_steam_id: (Scalars['bigint'] | null)
    __typename: 'player_sanctions_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_sanctions_var_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_sanctions_var_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_sanctions_variance_fields {
    player_steam_id: (Scalars['Float'] | null)
    sanctioned_by_steam_id: (Scalars['Float'] | null)
    __typename: 'player_sanctions_variance_fields'
}


/** columns and relationships of "player_unused_utility" */
export interface player_unused_utility {
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    /** An object relationship */
    player: players
    player_steam_id: Scalars['bigint']
    round: Scalars['Int']
    unused: Scalars['Int']
    __typename: 'player_unused_utility'
}


/** aggregated selection of "player_unused_utility" */
export interface player_unused_utility_aggregate {
    aggregate: (player_unused_utility_aggregate_fields | null)
    nodes: player_unused_utility[]
    __typename: 'player_unused_utility_aggregate'
}


/** aggregate fields of "player_unused_utility" */
export interface player_unused_utility_aggregate_fields {
    avg: (player_unused_utility_avg_fields | null)
    count: Scalars['Int']
    max: (player_unused_utility_max_fields | null)
    min: (player_unused_utility_min_fields | null)
    stddev: (player_unused_utility_stddev_fields | null)
    stddev_pop: (player_unused_utility_stddev_pop_fields | null)
    stddev_samp: (player_unused_utility_stddev_samp_fields | null)
    sum: (player_unused_utility_sum_fields | null)
    var_pop: (player_unused_utility_var_pop_fields | null)
    var_samp: (player_unused_utility_var_samp_fields | null)
    variance: (player_unused_utility_variance_fields | null)
    __typename: 'player_unused_utility_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_unused_utility_avg_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_avg_fields'
}


/** unique or primary key constraints on table "player_unused_utility" */
export type player_unused_utility_constraint = 'player_unused_utility_pkey'


/** aggregate max on columns */
export interface player_unused_utility_max_fields {
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    unused: (Scalars['Int'] | null)
    __typename: 'player_unused_utility_max_fields'
}


/** aggregate min on columns */
export interface player_unused_utility_min_fields {
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    unused: (Scalars['Int'] | null)
    __typename: 'player_unused_utility_min_fields'
}


/** response of any mutation on the table "player_unused_utility" */
export interface player_unused_utility_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_unused_utility[]
    __typename: 'player_unused_utility_mutation_response'
}


/** select columns of table "player_unused_utility" */
export type player_unused_utility_select_column = 'id' | 'match_id' | 'match_map_id' | 'player_steam_id' | 'round' | 'unused'


/** aggregate stddev on columns */
export interface player_unused_utility_stddev_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_unused_utility_stddev_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_unused_utility_stddev_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_unused_utility_sum_fields {
    player_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    unused: (Scalars['Int'] | null)
    __typename: 'player_unused_utility_sum_fields'
}


/** update columns of table "player_unused_utility" */
export type player_unused_utility_update_column = 'id' | 'match_id' | 'match_map_id' | 'player_steam_id' | 'round' | 'unused'


/** aggregate var_pop on columns */
export interface player_unused_utility_var_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_unused_utility_var_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_unused_utility_variance_fields {
    player_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    unused: (Scalars['Float'] | null)
    __typename: 'player_unused_utility_variance_fields'
}


/** columns and relationships of "player_utility" */
export interface player_utility {
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: Scalars['bigint']
    id: Scalars['uuid']
    /** An object relationship */
    match: matches
    match_id: Scalars['uuid']
    /** An object relationship */
    match_map: match_maps
    match_map_id: Scalars['uuid']
    /** An object relationship */
    player: players
    round: Scalars['Int']
    time: Scalars['timestamptz']
    type: e_utility_types_enum
    __typename: 'player_utility'
}


/** aggregated selection of "player_utility" */
export interface player_utility_aggregate {
    aggregate: (player_utility_aggregate_fields | null)
    nodes: player_utility[]
    __typename: 'player_utility_aggregate'
}


/** aggregate fields of "player_utility" */
export interface player_utility_aggregate_fields {
    avg: (player_utility_avg_fields | null)
    count: Scalars['Int']
    max: (player_utility_max_fields | null)
    min: (player_utility_min_fields | null)
    stddev: (player_utility_stddev_fields | null)
    stddev_pop: (player_utility_stddev_pop_fields | null)
    stddev_samp: (player_utility_stddev_samp_fields | null)
    sum: (player_utility_sum_fields | null)
    var_pop: (player_utility_var_pop_fields | null)
    var_samp: (player_utility_var_samp_fields | null)
    variance: (player_utility_variance_fields | null)
    __typename: 'player_utility_aggregate_fields'
}


/** aggregate avg on columns */
export interface player_utility_avg_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_avg_fields'
}


/** aggregate max on columns */
export interface player_utility_max_fields {
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_utility_max_fields'
}


/** aggregate min on columns */
export interface player_utility_min_fields {
    attacker_location_coordinates: (Scalars['String'] | null)
    attacker_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_map_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    time: (Scalars['timestamptz'] | null)
    __typename: 'player_utility_min_fields'
}


/** response of any mutation on the table "player_utility" */
export interface player_utility_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: player_utility[]
    __typename: 'player_utility_mutation_response'
}


/** select columns of table "player_utility" */
export type player_utility_select_column = 'attacker_location_coordinates' | 'attacker_steam_id' | 'id' | 'match_id' | 'match_map_id' | 'round' | 'time' | 'type'


/** aggregate stddev on columns */
export interface player_utility_stddev_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface player_utility_stddev_pop_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface player_utility_stddev_samp_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface player_utility_sum_fields {
    attacker_steam_id: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'player_utility_sum_fields'
}


/** aggregate var_pop on columns */
export interface player_utility_var_pop_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface player_utility_var_samp_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_var_samp_fields'
}


/** aggregate variance on columns */
export interface player_utility_variance_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'player_utility_variance_fields'
}


/** columns and relationships of "players" */
export interface players {
    /** An array relationship */
    abandoned_matches: abandoned_matches[]
    /** An aggregate relationship */
    abandoned_matches_aggregate: abandoned_matches_aggregate
    /** An array relationship */
    assists: player_assists[]
    /** An aggregate relationship */
    assists_aggregate: player_assists_aggregate
    /** An array relationship */
    assited_by_players: player_assists[]
    /** An aggregate relationship */
    assited_by_players_aggregate: player_assists_aggregate
    avatar_url: (Scalars['String'] | null)
    /** An array relationship */
    coach_lineups: match_lineups[]
    /** An aggregate relationship */
    coach_lineups_aggregate: match_lineups_aggregate
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id: (Scalars['uuid'] | null)
    /** An array relationship */
    damage_dealt: player_damages[]
    /** An aggregate relationship */
    damage_dealt_aggregate: player_damages_aggregate
    /** An array relationship */
    damage_taken: player_damages[]
    /** An aggregate relationship */
    damage_taken_aggregate: player_damages_aggregate
    /** An array relationship */
    deaths: player_kills[]
    /** An aggregate relationship */
    deaths_aggregate: player_kills_aggregate
    discord_id: (Scalars['String'] | null)
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    /** An array relationship */
    elo_history: player_elo[]
    /** An aggregate relationship */
    elo_history_aggregate: player_elo_aggregate
    /** An array relationship */
    flashed_by_players: player_flashes[]
    /** An aggregate relationship */
    flashed_by_players_aggregate: player_flashes_aggregate
    /** An array relationship */
    flashed_players: player_flashes[]
    /** An aggregate relationship */
    flashed_players_aggregate: player_flashes_aggregate
    /** An array relationship */
    friends: my_friends[]
    /** An aggregate relationship */
    friends_aggregate: my_friends_aggregate
    /** An array relationship */
    invited_players: team_invites[]
    /** An aggregate relationship */
    invited_players_aggregate: team_invites_aggregate
    /** A computed field, executes function "is_banned" */
    is_banned: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_gagged" */
    is_gagged: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_in_another_match" */
    is_in_another_match: (Scalars['Boolean'] | null)
    /** A computed field, executes function "is_muted" */
    is_muted: (Scalars['Boolean'] | null)
    /** An array relationship */
    kills: player_kills[]
    /** An aggregate relationship */
    kills_aggregate: player_kills_aggregate
    language: (Scalars['String'] | null)
    /** An array relationship */
    lobby_players: lobby_players[]
    /** An aggregate relationship */
    lobby_players_aggregate: lobby_players_aggregate
    /** A computed field, executes function "get_player_matches" */
    matches: (matches[] | null)
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown: (Scalars['timestamptz'] | null)
    /** An array relationship */
    multi_kills: v_player_multi_kills[]
    /** An aggregate relationship */
    multi_kills_aggregate: v_player_multi_kills_aggregate
    name: Scalars['String']
    name_registered: Scalars['Boolean']
    /** An array relationship */
    notifications: notifications[]
    /** An aggregate relationship */
    notifications_aggregate: notifications_aggregate
    /** An array relationship */
    objectives: player_objectives[]
    /** An aggregate relationship */
    objectives_aggregate: player_objectives_aggregate
    /** An array relationship */
    owned_teams: teams[]
    /** An aggregate relationship */
    owned_teams_aggregate: teams_aggregate
    /** An array relationship */
    player_lineup: match_lineup_players[]
    /** An aggregate relationship */
    player_lineup_aggregate: match_lineup_players_aggregate
    /** An array relationship */
    player_unused_utilities: player_unused_utility[]
    /** An aggregate relationship */
    player_unused_utilities_aggregate: player_unused_utility_aggregate
    profile_url: (Scalars['String'] | null)
    role: e_player_roles_enum
    steam_id: Scalars['bigint']
    /** An array relationship */
    team_invites: team_invites[]
    /** An aggregate relationship */
    team_invites_aggregate: team_invites_aggregate
    /** An array relationship */
    team_members: team_roster[]
    /** An aggregate relationship */
    team_members_aggregate: team_roster_aggregate
    /** A computed field, executes function "get_player_teams" */
    teams: (teams[] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    /** An array relationship */
    tournament_organizers: tournament_organizers[]
    /** An aggregate relationship */
    tournament_organizers_aggregate: tournament_organizers_aggregate
    /** An array relationship */
    tournament_rosters: tournament_team_roster[]
    /** An aggregate relationship */
    tournament_rosters_aggregate: tournament_team_roster_aggregate
    /** An array relationship */
    tournaments: tournaments[]
    /** An aggregate relationship */
    tournaments_aggregate: tournaments_aggregate
    /** An array relationship */
    utility_thrown: player_utility[]
    /** An aggregate relationship */
    utility_thrown_aggregate: player_utility_aggregate
    __typename: 'players'
}


/** aggregated selection of "players" */
export interface players_aggregate {
    aggregate: (players_aggregate_fields | null)
    nodes: players[]
    __typename: 'players_aggregate'
}


/** aggregate fields of "players" */
export interface players_aggregate_fields {
    avg: (players_avg_fields | null)
    count: Scalars['Int']
    max: (players_max_fields | null)
    min: (players_min_fields | null)
    stddev: (players_stddev_fields | null)
    stddev_pop: (players_stddev_pop_fields | null)
    stddev_samp: (players_stddev_samp_fields | null)
    sum: (players_sum_fields | null)
    var_pop: (players_var_pop_fields | null)
    var_samp: (players_var_samp_fields | null)
    variance: (players_variance_fields | null)
    __typename: 'players_aggregate_fields'
}


/** aggregate avg on columns */
export interface players_avg_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_avg_fields'
}


/** unique or primary key constraints on table "players" */
export type players_constraint = 'players_discord_id_key' | 'players_pkey' | 'players_steam_id_key'


/** aggregate max on columns */
export interface players_max_fields {
    avatar_url: (Scalars['String'] | null)
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id: (Scalars['uuid'] | null)
    discord_id: (Scalars['String'] | null)
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    language: (Scalars['String'] | null)
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown: (Scalars['timestamptz'] | null)
    name: (Scalars['String'] | null)
    profile_url: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_max_fields'
}


/** aggregate min on columns */
export interface players_min_fields {
    avatar_url: (Scalars['String'] | null)
    country: (Scalars['String'] | null)
    created_at: (Scalars['timestamptz'] | null)
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id: (Scalars['uuid'] | null)
    discord_id: (Scalars['String'] | null)
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    language: (Scalars['String'] | null)
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown: (Scalars['timestamptz'] | null)
    name: (Scalars['String'] | null)
    profile_url: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_min_fields'
}


/** response of any mutation on the table "players" */
export interface players_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: players[]
    __typename: 'players_mutation_response'
}


/** select columns of table "players" */
export type players_select_column = 'avatar_url' | 'country' | 'created_at' | 'discord_id' | 'language' | 'name' | 'name_registered' | 'profile_url' | 'role' | 'steam_id'


/** aggregate stddev on columns */
export interface players_stddev_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface players_stddev_pop_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface players_stddev_samp_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface players_sum_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['bigint'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_sum_fields'
}


/** update columns of table "players" */
export type players_update_column = 'avatar_url' | 'country' | 'created_at' | 'discord_id' | 'language' | 'name' | 'name_registered' | 'profile_url' | 'role' | 'steam_id'


/** aggregate var_pop on columns */
export interface players_var_pop_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface players_var_samp_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_var_samp_fields'
}


/** aggregate variance on columns */
export interface players_variance_fields {
    /** A computed field, executes function "get_player_elo" */
    elo: (Scalars['numeric'] | null)
    steam_id: (Scalars['Float'] | null)
    /** A computed field, executes function "get_total_player_matches" */
    total_matches: (Scalars['Int'] | null)
    __typename: 'players_variance_fields'
}

export interface query_root {
    /** fetch data from the table: "_map_pool" */
    _map_pool: _map_pool[]
    /** fetch aggregated fields from the table: "_map_pool" */
    _map_pool_aggregate: _map_pool_aggregate
    /** fetch data from the table: "_map_pool" using primary key columns */
    _map_pool_by_pk: (_map_pool | null)
    /** An array relationship */
    abandoned_matches: abandoned_matches[]
    /** An aggregate relationship */
    abandoned_matches_aggregate: abandoned_matches_aggregate
    /** fetch data from the table: "abandoned_matches" using primary key columns */
    abandoned_matches_by_pk: (abandoned_matches | null)
    /** fetch data from the table: "e_friend_status" */
    e_friend_status: e_friend_status[]
    /** fetch aggregated fields from the table: "e_friend_status" */
    e_friend_status_aggregate: e_friend_status_aggregate
    /** fetch data from the table: "e_friend_status" using primary key columns */
    e_friend_status_by_pk: (e_friend_status | null)
    /** fetch data from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses: e_game_server_node_statuses[]
    /** fetch aggregated fields from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses_aggregate: e_game_server_node_statuses_aggregate
    /** fetch data from the table: "e_game_server_node_statuses" using primary key columns */
    e_game_server_node_statuses_by_pk: (e_game_server_node_statuses | null)
    /** fetch data from the table: "e_lobby_access" */
    e_lobby_access: e_lobby_access[]
    /** fetch aggregated fields from the table: "e_lobby_access" */
    e_lobby_access_aggregate: e_lobby_access_aggregate
    /** fetch data from the table: "e_lobby_access" using primary key columns */
    e_lobby_access_by_pk: (e_lobby_access | null)
    /** fetch data from the table: "e_lobby_player_status" */
    e_lobby_player_status: e_lobby_player_status[]
    /** fetch aggregated fields from the table: "e_lobby_player_status" */
    e_lobby_player_status_aggregate: e_lobby_player_status_aggregate
    /** fetch data from the table: "e_lobby_player_status" using primary key columns */
    e_lobby_player_status_by_pk: (e_lobby_player_status | null)
    /** fetch data from the table: "e_map_pool_types" */
    e_map_pool_types: e_map_pool_types[]
    /** fetch aggregated fields from the table: "e_map_pool_types" */
    e_map_pool_types_aggregate: e_map_pool_types_aggregate
    /** fetch data from the table: "e_map_pool_types" using primary key columns */
    e_map_pool_types_by_pk: (e_map_pool_types | null)
    /** fetch data from the table: "e_match_map_status" */
    e_match_map_status: e_match_map_status[]
    /** fetch aggregated fields from the table: "e_match_map_status" */
    e_match_map_status_aggregate: e_match_map_status_aggregate
    /** fetch data from the table: "e_match_map_status" using primary key columns */
    e_match_map_status_by_pk: (e_match_map_status | null)
    /** fetch data from the table: "e_match_status" */
    e_match_status: e_match_status[]
    /** fetch aggregated fields from the table: "e_match_status" */
    e_match_status_aggregate: e_match_status_aggregate
    /** fetch data from the table: "e_match_status" using primary key columns */
    e_match_status_by_pk: (e_match_status | null)
    /** fetch data from the table: "e_match_types" */
    e_match_types: e_match_types[]
    /** fetch aggregated fields from the table: "e_match_types" */
    e_match_types_aggregate: e_match_types_aggregate
    /** fetch data from the table: "e_match_types" using primary key columns */
    e_match_types_by_pk: (e_match_types | null)
    /** fetch data from the table: "e_notification_types" */
    e_notification_types: e_notification_types[]
    /** fetch aggregated fields from the table: "e_notification_types" */
    e_notification_types_aggregate: e_notification_types_aggregate
    /** fetch data from the table: "e_notification_types" using primary key columns */
    e_notification_types_by_pk: (e_notification_types | null)
    /** fetch data from the table: "e_objective_types" */
    e_objective_types: e_objective_types[]
    /** fetch aggregated fields from the table: "e_objective_types" */
    e_objective_types_aggregate: e_objective_types_aggregate
    /** fetch data from the table: "e_objective_types" using primary key columns */
    e_objective_types_by_pk: (e_objective_types | null)
    /** fetch data from the table: "e_player_roles" */
    e_player_roles: e_player_roles[]
    /** fetch aggregated fields from the table: "e_player_roles" */
    e_player_roles_aggregate: e_player_roles_aggregate
    /** fetch data from the table: "e_player_roles" using primary key columns */
    e_player_roles_by_pk: (e_player_roles | null)
    /** fetch data from the table: "e_ready_settings" */
    e_ready_settings: e_ready_settings[]
    /** fetch aggregated fields from the table: "e_ready_settings" */
    e_ready_settings_aggregate: e_ready_settings_aggregate
    /** fetch data from the table: "e_ready_settings" using primary key columns */
    e_ready_settings_by_pk: (e_ready_settings | null)
    /** fetch data from the table: "e_sanction_types" */
    e_sanction_types: e_sanction_types[]
    /** fetch aggregated fields from the table: "e_sanction_types" */
    e_sanction_types_aggregate: e_sanction_types_aggregate
    /** fetch data from the table: "e_sanction_types" using primary key columns */
    e_sanction_types_by_pk: (e_sanction_types | null)
    /** fetch data from the table: "e_sides" */
    e_sides: e_sides[]
    /** fetch aggregated fields from the table: "e_sides" */
    e_sides_aggregate: e_sides_aggregate
    /** fetch data from the table: "e_sides" using primary key columns */
    e_sides_by_pk: (e_sides | null)
    /** fetch data from the table: "e_team_roles" */
    e_team_roles: e_team_roles[]
    /** fetch aggregated fields from the table: "e_team_roles" */
    e_team_roles_aggregate: e_team_roles_aggregate
    /** fetch data from the table: "e_team_roles" using primary key columns */
    e_team_roles_by_pk: (e_team_roles | null)
    /** fetch data from the table: "e_timeout_settings" */
    e_timeout_settings: e_timeout_settings[]
    /** fetch aggregated fields from the table: "e_timeout_settings" */
    e_timeout_settings_aggregate: e_timeout_settings_aggregate
    /** fetch data from the table: "e_timeout_settings" using primary key columns */
    e_timeout_settings_by_pk: (e_timeout_settings | null)
    /** fetch data from the table: "e_tournament_stage_types" */
    e_tournament_stage_types: e_tournament_stage_types[]
    /** fetch aggregated fields from the table: "e_tournament_stage_types" */
    e_tournament_stage_types_aggregate: e_tournament_stage_types_aggregate
    /** fetch data from the table: "e_tournament_stage_types" using primary key columns */
    e_tournament_stage_types_by_pk: (e_tournament_stage_types | null)
    /** fetch data from the table: "e_tournament_status" */
    e_tournament_status: e_tournament_status[]
    /** fetch aggregated fields from the table: "e_tournament_status" */
    e_tournament_status_aggregate: e_tournament_status_aggregate
    /** fetch data from the table: "e_tournament_status" using primary key columns */
    e_tournament_status_by_pk: (e_tournament_status | null)
    /** fetch data from the table: "e_utility_types" */
    e_utility_types: e_utility_types[]
    /** fetch aggregated fields from the table: "e_utility_types" */
    e_utility_types_aggregate: e_utility_types_aggregate
    /** fetch data from the table: "e_utility_types" using primary key columns */
    e_utility_types_by_pk: (e_utility_types | null)
    /** fetch data from the table: "e_veto_pick_types" */
    e_veto_pick_types: e_veto_pick_types[]
    /** fetch aggregated fields from the table: "e_veto_pick_types" */
    e_veto_pick_types_aggregate: e_veto_pick_types_aggregate
    /** fetch data from the table: "e_veto_pick_types" using primary key columns */
    e_veto_pick_types_by_pk: (e_veto_pick_types | null)
    /** fetch data from the table: "friends" */
    friends: friends[]
    /** fetch aggregated fields from the table: "friends" */
    friends_aggregate: friends_aggregate
    /** fetch data from the table: "friends" using primary key columns */
    friends_by_pk: (friends | null)
    /** An array relationship */
    game_server_nodes: game_server_nodes[]
    /** An aggregate relationship */
    game_server_nodes_aggregate: game_server_nodes_aggregate
    /** fetch data from the table: "game_server_nodes" using primary key columns */
    game_server_nodes_by_pk: (game_server_nodes | null)
    getNodeStats: (NodeStats | null)[]
    getServiceStats: (PodStats | null)[]
    /** fetch data from the table: "lobbies" */
    lobbies: lobbies[]
    /** fetch aggregated fields from the table: "lobbies" */
    lobbies_aggregate: lobbies_aggregate
    /** fetch data from the table: "lobbies" using primary key columns */
    lobbies_by_pk: (lobbies | null)
    /** An array relationship */
    lobby_players: lobby_players[]
    /** An aggregate relationship */
    lobby_players_aggregate: lobby_players_aggregate
    /** fetch data from the table: "lobby_players" using primary key columns */
    lobby_players_by_pk: (lobby_players | null)
    /** fetch data from the table: "map_pools" */
    map_pools: map_pools[]
    /** fetch aggregated fields from the table: "map_pools" */
    map_pools_aggregate: map_pools_aggregate
    /** fetch data from the table: "map_pools" using primary key columns */
    map_pools_by_pk: (map_pools | null)
    /** An array relationship */
    maps: maps[]
    /** An aggregate relationship */
    maps_aggregate: maps_aggregate
    /** fetch data from the table: "maps" using primary key columns */
    maps_by_pk: (maps | null)
    /** fetch data from the table: "match_invites" */
    match_invites: match_invites[]
    /** fetch aggregated fields from the table: "match_invites" */
    match_invites_aggregate: match_invites_aggregate
    /** fetch data from the table: "match_invites" using primary key columns */
    match_invites_by_pk: (match_invites | null)
    /** fetch data from the table: "match_lineup_players" */
    match_lineup_players: match_lineup_players[]
    /** fetch aggregated fields from the table: "match_lineup_players" */
    match_lineup_players_aggregate: match_lineup_players_aggregate
    /** fetch data from the table: "match_lineup_players" using primary key columns */
    match_lineup_players_by_pk: (match_lineup_players | null)
    /** An array relationship */
    match_lineups: match_lineups[]
    /** An aggregate relationship */
    match_lineups_aggregate: match_lineups_aggregate
    /** fetch data from the table: "match_lineups" using primary key columns */
    match_lineups_by_pk: (match_lineups | null)
    /** fetch data from the table: "match_map_demos" */
    match_map_demos: match_map_demos[]
    /** fetch aggregated fields from the table: "match_map_demos" */
    match_map_demos_aggregate: match_map_demos_aggregate
    /** fetch data from the table: "match_map_demos" using primary key columns */
    match_map_demos_by_pk: (match_map_demos | null)
    /** fetch data from the table: "match_map_rounds" */
    match_map_rounds: match_map_rounds[]
    /** fetch aggregated fields from the table: "match_map_rounds" */
    match_map_rounds_aggregate: match_map_rounds_aggregate
    /** fetch data from the table: "match_map_rounds" using primary key columns */
    match_map_rounds_by_pk: (match_map_rounds | null)
    /** fetch data from the table: "match_map_veto_picks" */
    match_map_veto_picks: match_map_veto_picks[]
    /** fetch aggregated fields from the table: "match_map_veto_picks" */
    match_map_veto_picks_aggregate: match_map_veto_picks_aggregate
    /** fetch data from the table: "match_map_veto_picks" using primary key columns */
    match_map_veto_picks_by_pk: (match_map_veto_picks | null)
    /** An array relationship */
    match_maps: match_maps[]
    /** An aggregate relationship */
    match_maps_aggregate: match_maps_aggregate
    /** fetch data from the table: "match_maps" using primary key columns */
    match_maps_by_pk: (match_maps | null)
    /** fetch data from the table: "match_options" */
    match_options: match_options[]
    /** fetch aggregated fields from the table: "match_options" */
    match_options_aggregate: match_options_aggregate
    /** fetch data from the table: "match_options" using primary key columns */
    match_options_by_pk: (match_options | null)
    /** fetch data from the table: "match_region_veto_picks" */
    match_region_veto_picks: match_region_veto_picks[]
    /** fetch aggregated fields from the table: "match_region_veto_picks" */
    match_region_veto_picks_aggregate: match_region_veto_picks_aggregate
    /** fetch data from the table: "match_region_veto_picks" using primary key columns */
    match_region_veto_picks_by_pk: (match_region_veto_picks | null)
    /** fetch data from the table: "match_type_cfgs" */
    match_type_cfgs: match_type_cfgs[]
    /** fetch aggregated fields from the table: "match_type_cfgs" */
    match_type_cfgs_aggregate: match_type_cfgs_aggregate
    /** fetch data from the table: "match_type_cfgs" using primary key columns */
    match_type_cfgs_by_pk: (match_type_cfgs | null)
    /** An array relationship */
    matches: matches[]
    /** An aggregate relationship */
    matches_aggregate: matches_aggregate
    /** fetch data from the table: "matches" using primary key columns */
    matches_by_pk: (matches | null)
    /** Gets Current User */
    me: MeResponse
    /** fetch data from the table: "migration_hashes.hashes" */
    migration_hashes_hashes: migration_hashes_hashes[]
    /** fetch aggregated fields from the table: "migration_hashes.hashes" */
    migration_hashes_hashes_aggregate: migration_hashes_hashes_aggregate
    /** fetch data from the table: "migration_hashes.hashes" using primary key columns */
    migration_hashes_hashes_by_pk: (migration_hashes_hashes | null)
    /** fetch data from the table: "v_my_friends" */
    my_friends: my_friends[]
    /** fetch aggregated fields from the table: "v_my_friends" */
    my_friends_aggregate: my_friends_aggregate
    /** An array relationship */
    notifications: notifications[]
    /** An aggregate relationship */
    notifications_aggregate: notifications_aggregate
    /** fetch data from the table: "notifications" using primary key columns */
    notifications_by_pk: (notifications | null)
    /** An array relationship */
    player_assists: player_assists[]
    /** An aggregate relationship */
    player_assists_aggregate: player_assists_aggregate
    /** An array relationship */
    player_damages: player_damages[]
    /** An aggregate relationship */
    player_damages_aggregate: player_damages_aggregate
    /** fetch data from the table: "player_elo" */
    player_elo: player_elo[]
    /** fetch aggregated fields from the table: "player_elo" */
    player_elo_aggregate: player_elo_aggregate
    /** fetch data from the table: "player_elo" using primary key columns */
    player_elo_by_pk: (player_elo | null)
    /** An array relationship */
    player_flashes: player_flashes[]
    /** An aggregate relationship */
    player_flashes_aggregate: player_flashes_aggregate
    /** An array relationship */
    player_kills: player_kills[]
    /** An aggregate relationship */
    player_kills_aggregate: player_kills_aggregate
    /** fetch data from the table: "player_kills" using primary key columns */
    player_kills_by_pk: (player_kills | null)
    /** An array relationship */
    player_objectives: player_objectives[]
    /** An aggregate relationship */
    player_objectives_aggregate: player_objectives_aggregate
    /** fetch data from the table: "player_sanctions" */
    player_sanctions: player_sanctions[]
    /** fetch aggregated fields from the table: "player_sanctions" */
    player_sanctions_aggregate: player_sanctions_aggregate
    /** fetch data from the table: "player_unused_utility" */
    player_unused_utility: player_unused_utility[]
    /** fetch aggregated fields from the table: "player_unused_utility" */
    player_unused_utility_aggregate: player_unused_utility_aggregate
    /** fetch data from the table: "player_unused_utility" using primary key columns */
    player_unused_utility_by_pk: (player_unused_utility | null)
    /** An array relationship */
    player_utility: player_utility[]
    /** An aggregate relationship */
    player_utility_aggregate: player_utility_aggregate
    /** fetch data from the table: "players" */
    players: players[]
    /** fetch aggregated fields from the table: "players" */
    players_aggregate: players_aggregate
    /** fetch data from the table: "players" using primary key columns */
    players_by_pk: (players | null)
    /** fetch data from the table: "server_regions" */
    server_regions: server_regions[]
    /** fetch aggregated fields from the table: "server_regions" */
    server_regions_aggregate: server_regions_aggregate
    /** fetch data from the table: "server_regions" using primary key columns */
    server_regions_by_pk: (server_regions | null)
    /** An array relationship */
    servers: servers[]
    /** An aggregate relationship */
    servers_aggregate: servers_aggregate
    /** fetch data from the table: "servers" using primary key columns */
    servers_by_pk: (servers | null)
    /** fetch data from the table: "settings" */
    settings: settings[]
    /** fetch aggregated fields from the table: "settings" */
    settings_aggregate: settings_aggregate
    /** fetch data from the table: "settings" using primary key columns */
    settings_by_pk: (settings | null)
    /** An array relationship */
    team_invites: team_invites[]
    /** An aggregate relationship */
    team_invites_aggregate: team_invites_aggregate
    /** fetch data from the table: "team_invites" using primary key columns */
    team_invites_by_pk: (team_invites | null)
    /** fetch data from the table: "team_roster" */
    team_roster: team_roster[]
    /** fetch aggregated fields from the table: "team_roster" */
    team_roster_aggregate: team_roster_aggregate
    /** fetch data from the table: "team_roster" using primary key columns */
    team_roster_by_pk: (team_roster | null)
    /** fetch data from the table: "teams" */
    teams: teams[]
    /** fetch aggregated fields from the table: "teams" */
    teams_aggregate: teams_aggregate
    /** fetch data from the table: "teams" using primary key columns */
    teams_by_pk: (teams | null)
    telemetryStats: TelemetryStats
    /** An array relationship */
    tournament_brackets: tournament_brackets[]
    /** An aggregate relationship */
    tournament_brackets_aggregate: tournament_brackets_aggregate
    /** fetch data from the table: "tournament_brackets" using primary key columns */
    tournament_brackets_by_pk: (tournament_brackets | null)
    /** An array relationship */
    tournament_organizers: tournament_organizers[]
    /** An aggregate relationship */
    tournament_organizers_aggregate: tournament_organizers_aggregate
    /** fetch data from the table: "tournament_organizers" using primary key columns */
    tournament_organizers_by_pk: (tournament_organizers | null)
    /** An array relationship */
    tournament_stages: tournament_stages[]
    /** An aggregate relationship */
    tournament_stages_aggregate: tournament_stages_aggregate
    /** fetch data from the table: "tournament_stages" using primary key columns */
    tournament_stages_by_pk: (tournament_stages | null)
    /** fetch data from the table: "tournament_team_invites" */
    tournament_team_invites: tournament_team_invites[]
    /** fetch aggregated fields from the table: "tournament_team_invites" */
    tournament_team_invites_aggregate: tournament_team_invites_aggregate
    /** fetch data from the table: "tournament_team_invites" using primary key columns */
    tournament_team_invites_by_pk: (tournament_team_invites | null)
    /** fetch data from the table: "tournament_team_roster" */
    tournament_team_roster: tournament_team_roster[]
    /** fetch aggregated fields from the table: "tournament_team_roster" */
    tournament_team_roster_aggregate: tournament_team_roster_aggregate
    /** fetch data from the table: "tournament_team_roster" using primary key columns */
    tournament_team_roster_by_pk: (tournament_team_roster | null)
    /** An array relationship */
    tournament_teams: tournament_teams[]
    /** An aggregate relationship */
    tournament_teams_aggregate: tournament_teams_aggregate
    /** fetch data from the table: "tournament_teams" using primary key columns */
    tournament_teams_by_pk: (tournament_teams | null)
    /** An array relationship */
    tournaments: tournaments[]
    /** An aggregate relationship */
    tournaments_aggregate: tournaments_aggregate
    /** fetch data from the table: "tournaments" using primary key columns */
    tournaments_by_pk: (tournaments | null)
    /** fetch data from the table: "v_match_captains" */
    v_match_captains: v_match_captains[]
    /** fetch aggregated fields from the table: "v_match_captains" */
    v_match_captains_aggregate: v_match_captains_aggregate
    /** fetch data from the table: "v_match_lineups" */
    v_match_lineups: v_match_lineups[]
    /** fetch aggregated fields from the table: "v_match_lineups" */
    v_match_lineups_aggregate: v_match_lineups_aggregate
    /** fetch data from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis: v_player_arch_nemesis[]
    /** fetch aggregated fields from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis_aggregate: v_player_arch_nemesis_aggregate
    /** fetch data from the table: "v_player_damage" */
    v_player_damage: v_player_damage[]
    /** fetch aggregated fields from the table: "v_player_damage" */
    v_player_damage_aggregate: v_player_damage_aggregate
    /** fetch data from the table: "v_player_elo" */
    v_player_elo: v_player_elo[]
    /** fetch aggregated fields from the table: "v_player_elo" */
    v_player_elo_aggregate: v_player_elo_aggregate
    /** fetch data from the table: "v_player_map_losses" */
    v_player_map_losses: v_player_map_losses[]
    /** fetch aggregated fields from the table: "v_player_map_losses" */
    v_player_map_losses_aggregate: v_player_map_losses_aggregate
    /** fetch data from the table: "v_player_map_wins" */
    v_player_map_wins: v_player_map_wins[]
    /** fetch aggregated fields from the table: "v_player_map_wins" */
    v_player_map_wins_aggregate: v_player_map_wins_aggregate
    /** fetch data from the table: "v_player_multi_kills" */
    v_player_multi_kills: v_player_multi_kills[]
    /** fetch aggregated fields from the table: "v_player_multi_kills" */
    v_player_multi_kills_aggregate: v_player_multi_kills_aggregate
    /** fetch data from the table: "v_pool_maps" */
    v_pool_maps: v_pool_maps[]
    /** fetch aggregated fields from the table: "v_pool_maps" */
    v_pool_maps_aggregate: v_pool_maps_aggregate
    __typename: 'query_root'
}


/** columns and relationships of "server_regions" */
export interface server_regions {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    description: (Scalars['String'] | null)
    /** An array relationship */
    game_server_nodes: game_server_nodes[]
    /** An aggregate relationship */
    game_server_nodes_aggregate: game_server_nodes_aggregate
    is_lan: Scalars['Boolean']
    /** A computed field, executes function "region_status" */
    status: (Scalars['String'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    value: Scalars['String']
    __typename: 'server_regions'
}


/** aggregated selection of "server_regions" */
export interface server_regions_aggregate {
    aggregate: (server_regions_aggregate_fields | null)
    nodes: server_regions[]
    __typename: 'server_regions_aggregate'
}


/** aggregate fields of "server_regions" */
export interface server_regions_aggregate_fields {
    avg: (server_regions_avg_fields | null)
    count: Scalars['Int']
    max: (server_regions_max_fields | null)
    min: (server_regions_min_fields | null)
    stddev: (server_regions_stddev_fields | null)
    stddev_pop: (server_regions_stddev_pop_fields | null)
    stddev_samp: (server_regions_stddev_samp_fields | null)
    sum: (server_regions_sum_fields | null)
    var_pop: (server_regions_var_pop_fields | null)
    var_samp: (server_regions_var_samp_fields | null)
    variance: (server_regions_variance_fields | null)
    __typename: 'server_regions_aggregate_fields'
}


/** aggregate avg on columns */
export interface server_regions_avg_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_avg_fields'
}


/** unique or primary key constraints on table "server_regions" */
export type server_regions_constraint = 'e_server_regions_pkey'


/** aggregate max on columns */
export interface server_regions_max_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    description: (Scalars['String'] | null)
    /** A computed field, executes function "region_status" */
    status: (Scalars['String'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    value: (Scalars['String'] | null)
    __typename: 'server_regions_max_fields'
}


/** aggregate min on columns */
export interface server_regions_min_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    description: (Scalars['String'] | null)
    /** A computed field, executes function "region_status" */
    status: (Scalars['String'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    value: (Scalars['String'] | null)
    __typename: 'server_regions_min_fields'
}


/** response of any mutation on the table "server_regions" */
export interface server_regions_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: server_regions[]
    __typename: 'server_regions_mutation_response'
}


/** select columns of table "server_regions" */
export type server_regions_select_column = 'description' | 'is_lan' | 'value'


/** aggregate stddev on columns */
export interface server_regions_stddev_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface server_regions_stddev_pop_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface server_regions_stddev_samp_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface server_regions_sum_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_sum_fields'
}


/** update columns of table "server_regions" */
export type server_regions_update_column = 'description' | 'is_lan' | 'value'


/** aggregate var_pop on columns */
export interface server_regions_var_pop_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface server_regions_var_samp_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_var_samp_fields'
}


/** aggregate variance on columns */
export interface server_regions_variance_fields {
    /** A computed field, executes function "available_region_server_count" */
    available_server_count: (Scalars['Int'] | null)
    /** A computed field, executes function "total_region_server_count" */
    total_server_count: (Scalars['Int'] | null)
    __typename: 'server_regions_variance_fields'
}


/** columns and relationships of "servers" */
export interface servers {
    api_password: Scalars['uuid']
    connected: Scalars['Boolean']
    /** An object relationship */
    current_match: (matches | null)
    enabled: Scalars['Boolean']
    /** An object relationship */
    game_server_node: (game_server_nodes | null)
    game_server_node_id: (Scalars['String'] | null)
    host: Scalars['String']
    id: Scalars['uuid']
    /** A computed field, executes function "is_dedicated_server" */
    is_dedicated: (Scalars['Boolean'] | null)
    label: Scalars['String']
    /** An array relationship */
    matches: matches[]
    /** An aggregate relationship */
    matches_aggregate: matches_aggregate
    port: Scalars['Int']
    rcon_password: Scalars['bytea']
    rcon_status: (Scalars['Boolean'] | null)
    region: Scalars['String']
    reserved_by_match_id: (Scalars['uuid'] | null)
    tv_port: (Scalars['Int'] | null)
    __typename: 'servers'
}


/** aggregated selection of "servers" */
export interface servers_aggregate {
    aggregate: (servers_aggregate_fields | null)
    nodes: servers[]
    __typename: 'servers_aggregate'
}


/** aggregate fields of "servers" */
export interface servers_aggregate_fields {
    avg: (servers_avg_fields | null)
    count: Scalars['Int']
    max: (servers_max_fields | null)
    min: (servers_min_fields | null)
    stddev: (servers_stddev_fields | null)
    stddev_pop: (servers_stddev_pop_fields | null)
    stddev_samp: (servers_stddev_samp_fields | null)
    sum: (servers_sum_fields | null)
    var_pop: (servers_var_pop_fields | null)
    var_samp: (servers_var_samp_fields | null)
    variance: (servers_variance_fields | null)
    __typename: 'servers_aggregate_fields'
}


/** aggregate avg on columns */
export interface servers_avg_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_avg_fields'
}


/** unique or primary key constraints on table "servers" */
export type servers_constraint = 'servers_pkey' | 'servers_reserved_by_match_id_key'


/** aggregate max on columns */
export interface servers_max_fields {
    api_password: (Scalars['uuid'] | null)
    game_server_node_id: (Scalars['String'] | null)
    host: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    port: (Scalars['Int'] | null)
    region: (Scalars['String'] | null)
    reserved_by_match_id: (Scalars['uuid'] | null)
    tv_port: (Scalars['Int'] | null)
    __typename: 'servers_max_fields'
}


/** aggregate min on columns */
export interface servers_min_fields {
    api_password: (Scalars['uuid'] | null)
    game_server_node_id: (Scalars['String'] | null)
    host: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    port: (Scalars['Int'] | null)
    region: (Scalars['String'] | null)
    reserved_by_match_id: (Scalars['uuid'] | null)
    tv_port: (Scalars['Int'] | null)
    __typename: 'servers_min_fields'
}


/** response of any mutation on the table "servers" */
export interface servers_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: servers[]
    __typename: 'servers_mutation_response'
}


/** select columns of table "servers" */
export type servers_select_column = 'api_password' | 'connected' | 'enabled' | 'game_server_node_id' | 'host' | 'id' | 'label' | 'port' | 'rcon_password' | 'rcon_status' | 'region' | 'reserved_by_match_id' | 'tv_port'


/** select "servers_aggregate_bool_exp_bool_and_arguments_columns" columns of table "servers" */
export type servers_select_column_servers_aggregate_bool_exp_bool_and_arguments_columns = 'connected' | 'enabled' | 'rcon_status'


/** select "servers_aggregate_bool_exp_bool_or_arguments_columns" columns of table "servers" */
export type servers_select_column_servers_aggregate_bool_exp_bool_or_arguments_columns = 'connected' | 'enabled' | 'rcon_status'


/** aggregate stddev on columns */
export interface servers_stddev_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface servers_stddev_pop_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface servers_stddev_samp_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface servers_sum_fields {
    port: (Scalars['Int'] | null)
    tv_port: (Scalars['Int'] | null)
    __typename: 'servers_sum_fields'
}


/** update columns of table "servers" */
export type servers_update_column = 'api_password' | 'connected' | 'enabled' | 'game_server_node_id' | 'host' | 'id' | 'label' | 'port' | 'rcon_password' | 'rcon_status' | 'region' | 'reserved_by_match_id' | 'tv_port'


/** aggregate var_pop on columns */
export interface servers_var_pop_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface servers_var_samp_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_var_samp_fields'
}


/** aggregate variance on columns */
export interface servers_variance_fields {
    port: (Scalars['Float'] | null)
    tv_port: (Scalars['Float'] | null)
    __typename: 'servers_variance_fields'
}


/** columns and relationships of "settings" */
export interface settings {
    name: Scalars['String']
    value: (Scalars['String'] | null)
    __typename: 'settings'
}


/** aggregated selection of "settings" */
export interface settings_aggregate {
    aggregate: (settings_aggregate_fields | null)
    nodes: settings[]
    __typename: 'settings_aggregate'
}


/** aggregate fields of "settings" */
export interface settings_aggregate_fields {
    count: Scalars['Int']
    max: (settings_max_fields | null)
    min: (settings_min_fields | null)
    __typename: 'settings_aggregate_fields'
}


/** unique or primary key constraints on table "settings" */
export type settings_constraint = 'settings_pkey'


/** aggregate max on columns */
export interface settings_max_fields {
    name: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'settings_max_fields'
}


/** aggregate min on columns */
export interface settings_min_fields {
    name: (Scalars['String'] | null)
    value: (Scalars['String'] | null)
    __typename: 'settings_min_fields'
}


/** response of any mutation on the table "settings" */
export interface settings_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: settings[]
    __typename: 'settings_mutation_response'
}


/** select columns of table "settings" */
export type settings_select_column = 'name' | 'value'


/** update columns of table "settings" */
export type settings_update_column = 'name' | 'value'

export interface subscription_root {
    /** fetch data from the table: "_map_pool" */
    _map_pool: _map_pool[]
    /** fetch aggregated fields from the table: "_map_pool" */
    _map_pool_aggregate: _map_pool_aggregate
    /** fetch data from the table: "_map_pool" using primary key columns */
    _map_pool_by_pk: (_map_pool | null)
    /** fetch data from the table in a streaming manner: "_map_pool" */
    _map_pool_stream: _map_pool[]
    /** An array relationship */
    abandoned_matches: abandoned_matches[]
    /** An aggregate relationship */
    abandoned_matches_aggregate: abandoned_matches_aggregate
    /** fetch data from the table: "abandoned_matches" using primary key columns */
    abandoned_matches_by_pk: (abandoned_matches | null)
    /** fetch data from the table in a streaming manner: "abandoned_matches" */
    abandoned_matches_stream: abandoned_matches[]
    /** fetch data from the table: "e_friend_status" */
    e_friend_status: e_friend_status[]
    /** fetch aggregated fields from the table: "e_friend_status" */
    e_friend_status_aggregate: e_friend_status_aggregate
    /** fetch data from the table: "e_friend_status" using primary key columns */
    e_friend_status_by_pk: (e_friend_status | null)
    /** fetch data from the table in a streaming manner: "e_friend_status" */
    e_friend_status_stream: e_friend_status[]
    /** fetch data from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses: e_game_server_node_statuses[]
    /** fetch aggregated fields from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses_aggregate: e_game_server_node_statuses_aggregate
    /** fetch data from the table: "e_game_server_node_statuses" using primary key columns */
    e_game_server_node_statuses_by_pk: (e_game_server_node_statuses | null)
    /** fetch data from the table in a streaming manner: "e_game_server_node_statuses" */
    e_game_server_node_statuses_stream: e_game_server_node_statuses[]
    /** fetch data from the table: "e_lobby_access" */
    e_lobby_access: e_lobby_access[]
    /** fetch aggregated fields from the table: "e_lobby_access" */
    e_lobby_access_aggregate: e_lobby_access_aggregate
    /** fetch data from the table: "e_lobby_access" using primary key columns */
    e_lobby_access_by_pk: (e_lobby_access | null)
    /** fetch data from the table in a streaming manner: "e_lobby_access" */
    e_lobby_access_stream: e_lobby_access[]
    /** fetch data from the table: "e_lobby_player_status" */
    e_lobby_player_status: e_lobby_player_status[]
    /** fetch aggregated fields from the table: "e_lobby_player_status" */
    e_lobby_player_status_aggregate: e_lobby_player_status_aggregate
    /** fetch data from the table: "e_lobby_player_status" using primary key columns */
    e_lobby_player_status_by_pk: (e_lobby_player_status | null)
    /** fetch data from the table in a streaming manner: "e_lobby_player_status" */
    e_lobby_player_status_stream: e_lobby_player_status[]
    /** fetch data from the table: "e_map_pool_types" */
    e_map_pool_types: e_map_pool_types[]
    /** fetch aggregated fields from the table: "e_map_pool_types" */
    e_map_pool_types_aggregate: e_map_pool_types_aggregate
    /** fetch data from the table: "e_map_pool_types" using primary key columns */
    e_map_pool_types_by_pk: (e_map_pool_types | null)
    /** fetch data from the table in a streaming manner: "e_map_pool_types" */
    e_map_pool_types_stream: e_map_pool_types[]
    /** fetch data from the table: "e_match_map_status" */
    e_match_map_status: e_match_map_status[]
    /** fetch aggregated fields from the table: "e_match_map_status" */
    e_match_map_status_aggregate: e_match_map_status_aggregate
    /** fetch data from the table: "e_match_map_status" using primary key columns */
    e_match_map_status_by_pk: (e_match_map_status | null)
    /** fetch data from the table in a streaming manner: "e_match_map_status" */
    e_match_map_status_stream: e_match_map_status[]
    /** fetch data from the table: "e_match_status" */
    e_match_status: e_match_status[]
    /** fetch aggregated fields from the table: "e_match_status" */
    e_match_status_aggregate: e_match_status_aggregate
    /** fetch data from the table: "e_match_status" using primary key columns */
    e_match_status_by_pk: (e_match_status | null)
    /** fetch data from the table in a streaming manner: "e_match_status" */
    e_match_status_stream: e_match_status[]
    /** fetch data from the table: "e_match_types" */
    e_match_types: e_match_types[]
    /** fetch aggregated fields from the table: "e_match_types" */
    e_match_types_aggregate: e_match_types_aggregate
    /** fetch data from the table: "e_match_types" using primary key columns */
    e_match_types_by_pk: (e_match_types | null)
    /** fetch data from the table in a streaming manner: "e_match_types" */
    e_match_types_stream: e_match_types[]
    /** fetch data from the table: "e_notification_types" */
    e_notification_types: e_notification_types[]
    /** fetch aggregated fields from the table: "e_notification_types" */
    e_notification_types_aggregate: e_notification_types_aggregate
    /** fetch data from the table: "e_notification_types" using primary key columns */
    e_notification_types_by_pk: (e_notification_types | null)
    /** fetch data from the table in a streaming manner: "e_notification_types" */
    e_notification_types_stream: e_notification_types[]
    /** fetch data from the table: "e_objective_types" */
    e_objective_types: e_objective_types[]
    /** fetch aggregated fields from the table: "e_objective_types" */
    e_objective_types_aggregate: e_objective_types_aggregate
    /** fetch data from the table: "e_objective_types" using primary key columns */
    e_objective_types_by_pk: (e_objective_types | null)
    /** fetch data from the table in a streaming manner: "e_objective_types" */
    e_objective_types_stream: e_objective_types[]
    /** fetch data from the table: "e_player_roles" */
    e_player_roles: e_player_roles[]
    /** fetch aggregated fields from the table: "e_player_roles" */
    e_player_roles_aggregate: e_player_roles_aggregate
    /** fetch data from the table: "e_player_roles" using primary key columns */
    e_player_roles_by_pk: (e_player_roles | null)
    /** fetch data from the table in a streaming manner: "e_player_roles" */
    e_player_roles_stream: e_player_roles[]
    /** fetch data from the table: "e_ready_settings" */
    e_ready_settings: e_ready_settings[]
    /** fetch aggregated fields from the table: "e_ready_settings" */
    e_ready_settings_aggregate: e_ready_settings_aggregate
    /** fetch data from the table: "e_ready_settings" using primary key columns */
    e_ready_settings_by_pk: (e_ready_settings | null)
    /** fetch data from the table in a streaming manner: "e_ready_settings" */
    e_ready_settings_stream: e_ready_settings[]
    /** fetch data from the table: "e_sanction_types" */
    e_sanction_types: e_sanction_types[]
    /** fetch aggregated fields from the table: "e_sanction_types" */
    e_sanction_types_aggregate: e_sanction_types_aggregate
    /** fetch data from the table: "e_sanction_types" using primary key columns */
    e_sanction_types_by_pk: (e_sanction_types | null)
    /** fetch data from the table in a streaming manner: "e_sanction_types" */
    e_sanction_types_stream: e_sanction_types[]
    /** fetch data from the table: "e_sides" */
    e_sides: e_sides[]
    /** fetch aggregated fields from the table: "e_sides" */
    e_sides_aggregate: e_sides_aggregate
    /** fetch data from the table: "e_sides" using primary key columns */
    e_sides_by_pk: (e_sides | null)
    /** fetch data from the table in a streaming manner: "e_sides" */
    e_sides_stream: e_sides[]
    /** fetch data from the table: "e_team_roles" */
    e_team_roles: e_team_roles[]
    /** fetch aggregated fields from the table: "e_team_roles" */
    e_team_roles_aggregate: e_team_roles_aggregate
    /** fetch data from the table: "e_team_roles" using primary key columns */
    e_team_roles_by_pk: (e_team_roles | null)
    /** fetch data from the table in a streaming manner: "e_team_roles" */
    e_team_roles_stream: e_team_roles[]
    /** fetch data from the table: "e_timeout_settings" */
    e_timeout_settings: e_timeout_settings[]
    /** fetch aggregated fields from the table: "e_timeout_settings" */
    e_timeout_settings_aggregate: e_timeout_settings_aggregate
    /** fetch data from the table: "e_timeout_settings" using primary key columns */
    e_timeout_settings_by_pk: (e_timeout_settings | null)
    /** fetch data from the table in a streaming manner: "e_timeout_settings" */
    e_timeout_settings_stream: e_timeout_settings[]
    /** fetch data from the table: "e_tournament_stage_types" */
    e_tournament_stage_types: e_tournament_stage_types[]
    /** fetch aggregated fields from the table: "e_tournament_stage_types" */
    e_tournament_stage_types_aggregate: e_tournament_stage_types_aggregate
    /** fetch data from the table: "e_tournament_stage_types" using primary key columns */
    e_tournament_stage_types_by_pk: (e_tournament_stage_types | null)
    /** fetch data from the table in a streaming manner: "e_tournament_stage_types" */
    e_tournament_stage_types_stream: e_tournament_stage_types[]
    /** fetch data from the table: "e_tournament_status" */
    e_tournament_status: e_tournament_status[]
    /** fetch aggregated fields from the table: "e_tournament_status" */
    e_tournament_status_aggregate: e_tournament_status_aggregate
    /** fetch data from the table: "e_tournament_status" using primary key columns */
    e_tournament_status_by_pk: (e_tournament_status | null)
    /** fetch data from the table in a streaming manner: "e_tournament_status" */
    e_tournament_status_stream: e_tournament_status[]
    /** fetch data from the table: "e_utility_types" */
    e_utility_types: e_utility_types[]
    /** fetch aggregated fields from the table: "e_utility_types" */
    e_utility_types_aggregate: e_utility_types_aggregate
    /** fetch data from the table: "e_utility_types" using primary key columns */
    e_utility_types_by_pk: (e_utility_types | null)
    /** fetch data from the table in a streaming manner: "e_utility_types" */
    e_utility_types_stream: e_utility_types[]
    /** fetch data from the table: "e_veto_pick_types" */
    e_veto_pick_types: e_veto_pick_types[]
    /** fetch aggregated fields from the table: "e_veto_pick_types" */
    e_veto_pick_types_aggregate: e_veto_pick_types_aggregate
    /** fetch data from the table: "e_veto_pick_types" using primary key columns */
    e_veto_pick_types_by_pk: (e_veto_pick_types | null)
    /** fetch data from the table in a streaming manner: "e_veto_pick_types" */
    e_veto_pick_types_stream: e_veto_pick_types[]
    /** fetch data from the table: "friends" */
    friends: friends[]
    /** fetch aggregated fields from the table: "friends" */
    friends_aggregate: friends_aggregate
    /** fetch data from the table: "friends" using primary key columns */
    friends_by_pk: (friends | null)
    /** fetch data from the table in a streaming manner: "friends" */
    friends_stream: friends[]
    /** An array relationship */
    game_server_nodes: game_server_nodes[]
    /** An aggregate relationship */
    game_server_nodes_aggregate: game_server_nodes_aggregate
    /** fetch data from the table: "game_server_nodes" using primary key columns */
    game_server_nodes_by_pk: (game_server_nodes | null)
    /** fetch data from the table in a streaming manner: "game_server_nodes" */
    game_server_nodes_stream: game_server_nodes[]
    /** fetch data from the table: "lobbies" */
    lobbies: lobbies[]
    /** fetch aggregated fields from the table: "lobbies" */
    lobbies_aggregate: lobbies_aggregate
    /** fetch data from the table: "lobbies" using primary key columns */
    lobbies_by_pk: (lobbies | null)
    /** fetch data from the table in a streaming manner: "lobbies" */
    lobbies_stream: lobbies[]
    /** An array relationship */
    lobby_players: lobby_players[]
    /** An aggregate relationship */
    lobby_players_aggregate: lobby_players_aggregate
    /** fetch data from the table: "lobby_players" using primary key columns */
    lobby_players_by_pk: (lobby_players | null)
    /** fetch data from the table in a streaming manner: "lobby_players" */
    lobby_players_stream: lobby_players[]
    /** fetch data from the table: "map_pools" */
    map_pools: map_pools[]
    /** fetch aggregated fields from the table: "map_pools" */
    map_pools_aggregate: map_pools_aggregate
    /** fetch data from the table: "map_pools" using primary key columns */
    map_pools_by_pk: (map_pools | null)
    /** fetch data from the table in a streaming manner: "map_pools" */
    map_pools_stream: map_pools[]
    /** An array relationship */
    maps: maps[]
    /** An aggregate relationship */
    maps_aggregate: maps_aggregate
    /** fetch data from the table: "maps" using primary key columns */
    maps_by_pk: (maps | null)
    /** fetch data from the table in a streaming manner: "maps" */
    maps_stream: maps[]
    /** fetch data from the table: "match_invites" */
    match_invites: match_invites[]
    /** fetch aggregated fields from the table: "match_invites" */
    match_invites_aggregate: match_invites_aggregate
    /** fetch data from the table: "match_invites" using primary key columns */
    match_invites_by_pk: (match_invites | null)
    /** fetch data from the table in a streaming manner: "match_invites" */
    match_invites_stream: match_invites[]
    /** fetch data from the table: "match_lineup_players" */
    match_lineup_players: match_lineup_players[]
    /** fetch aggregated fields from the table: "match_lineup_players" */
    match_lineup_players_aggregate: match_lineup_players_aggregate
    /** fetch data from the table: "match_lineup_players" using primary key columns */
    match_lineup_players_by_pk: (match_lineup_players | null)
    /** fetch data from the table in a streaming manner: "match_lineup_players" */
    match_lineup_players_stream: match_lineup_players[]
    /** An array relationship */
    match_lineups: match_lineups[]
    /** An aggregate relationship */
    match_lineups_aggregate: match_lineups_aggregate
    /** fetch data from the table: "match_lineups" using primary key columns */
    match_lineups_by_pk: (match_lineups | null)
    /** fetch data from the table in a streaming manner: "match_lineups" */
    match_lineups_stream: match_lineups[]
    /** fetch data from the table: "match_map_demos" */
    match_map_demos: match_map_demos[]
    /** fetch aggregated fields from the table: "match_map_demos" */
    match_map_demos_aggregate: match_map_demos_aggregate
    /** fetch data from the table: "match_map_demos" using primary key columns */
    match_map_demos_by_pk: (match_map_demos | null)
    /** fetch data from the table in a streaming manner: "match_map_demos" */
    match_map_demos_stream: match_map_demos[]
    /** fetch data from the table: "match_map_rounds" */
    match_map_rounds: match_map_rounds[]
    /** fetch aggregated fields from the table: "match_map_rounds" */
    match_map_rounds_aggregate: match_map_rounds_aggregate
    /** fetch data from the table: "match_map_rounds" using primary key columns */
    match_map_rounds_by_pk: (match_map_rounds | null)
    /** fetch data from the table in a streaming manner: "match_map_rounds" */
    match_map_rounds_stream: match_map_rounds[]
    /** fetch data from the table: "match_map_veto_picks" */
    match_map_veto_picks: match_map_veto_picks[]
    /** fetch aggregated fields from the table: "match_map_veto_picks" */
    match_map_veto_picks_aggregate: match_map_veto_picks_aggregate
    /** fetch data from the table: "match_map_veto_picks" using primary key columns */
    match_map_veto_picks_by_pk: (match_map_veto_picks | null)
    /** fetch data from the table in a streaming manner: "match_map_veto_picks" */
    match_map_veto_picks_stream: match_map_veto_picks[]
    /** An array relationship */
    match_maps: match_maps[]
    /** An aggregate relationship */
    match_maps_aggregate: match_maps_aggregate
    /** fetch data from the table: "match_maps" using primary key columns */
    match_maps_by_pk: (match_maps | null)
    /** fetch data from the table in a streaming manner: "match_maps" */
    match_maps_stream: match_maps[]
    /** fetch data from the table: "match_options" */
    match_options: match_options[]
    /** fetch aggregated fields from the table: "match_options" */
    match_options_aggregate: match_options_aggregate
    /** fetch data from the table: "match_options" using primary key columns */
    match_options_by_pk: (match_options | null)
    /** fetch data from the table in a streaming manner: "match_options" */
    match_options_stream: match_options[]
    /** fetch data from the table: "match_region_veto_picks" */
    match_region_veto_picks: match_region_veto_picks[]
    /** fetch aggregated fields from the table: "match_region_veto_picks" */
    match_region_veto_picks_aggregate: match_region_veto_picks_aggregate
    /** fetch data from the table: "match_region_veto_picks" using primary key columns */
    match_region_veto_picks_by_pk: (match_region_veto_picks | null)
    /** fetch data from the table in a streaming manner: "match_region_veto_picks" */
    match_region_veto_picks_stream: match_region_veto_picks[]
    /** fetch data from the table: "match_type_cfgs" */
    match_type_cfgs: match_type_cfgs[]
    /** fetch aggregated fields from the table: "match_type_cfgs" */
    match_type_cfgs_aggregate: match_type_cfgs_aggregate
    /** fetch data from the table: "match_type_cfgs" using primary key columns */
    match_type_cfgs_by_pk: (match_type_cfgs | null)
    /** fetch data from the table in a streaming manner: "match_type_cfgs" */
    match_type_cfgs_stream: match_type_cfgs[]
    /** An array relationship */
    matches: matches[]
    /** An aggregate relationship */
    matches_aggregate: matches_aggregate
    /** fetch data from the table: "matches" using primary key columns */
    matches_by_pk: (matches | null)
    /** fetch data from the table in a streaming manner: "matches" */
    matches_stream: matches[]
    /** fetch data from the table: "migration_hashes.hashes" */
    migration_hashes_hashes: migration_hashes_hashes[]
    /** fetch aggregated fields from the table: "migration_hashes.hashes" */
    migration_hashes_hashes_aggregate: migration_hashes_hashes_aggregate
    /** fetch data from the table: "migration_hashes.hashes" using primary key columns */
    migration_hashes_hashes_by_pk: (migration_hashes_hashes | null)
    /** fetch data from the table in a streaming manner: "migration_hashes.hashes" */
    migration_hashes_hashes_stream: migration_hashes_hashes[]
    /** fetch data from the table: "v_my_friends" */
    my_friends: my_friends[]
    /** fetch aggregated fields from the table: "v_my_friends" */
    my_friends_aggregate: my_friends_aggregate
    /** fetch data from the table in a streaming manner: "v_my_friends" */
    my_friends_stream: my_friends[]
    /** An array relationship */
    notifications: notifications[]
    /** An aggregate relationship */
    notifications_aggregate: notifications_aggregate
    /** fetch data from the table: "notifications" using primary key columns */
    notifications_by_pk: (notifications | null)
    /** fetch data from the table in a streaming manner: "notifications" */
    notifications_stream: notifications[]
    /** An array relationship */
    player_assists: player_assists[]
    /** An aggregate relationship */
    player_assists_aggregate: player_assists_aggregate
    /** fetch data from the table in a streaming manner: "player_assists" */
    player_assists_stream: player_assists[]
    /** An array relationship */
    player_damages: player_damages[]
    /** An aggregate relationship */
    player_damages_aggregate: player_damages_aggregate
    /** fetch data from the table in a streaming manner: "player_damages" */
    player_damages_stream: player_damages[]
    /** fetch data from the table: "player_elo" */
    player_elo: player_elo[]
    /** fetch aggregated fields from the table: "player_elo" */
    player_elo_aggregate: player_elo_aggregate
    /** fetch data from the table: "player_elo" using primary key columns */
    player_elo_by_pk: (player_elo | null)
    /** fetch data from the table in a streaming manner: "player_elo" */
    player_elo_stream: player_elo[]
    /** An array relationship */
    player_flashes: player_flashes[]
    /** An aggregate relationship */
    player_flashes_aggregate: player_flashes_aggregate
    /** fetch data from the table in a streaming manner: "player_flashes" */
    player_flashes_stream: player_flashes[]
    /** An array relationship */
    player_kills: player_kills[]
    /** An aggregate relationship */
    player_kills_aggregate: player_kills_aggregate
    /** fetch data from the table: "player_kills" using primary key columns */
    player_kills_by_pk: (player_kills | null)
    /** fetch data from the table in a streaming manner: "player_kills" */
    player_kills_stream: player_kills[]
    /** An array relationship */
    player_objectives: player_objectives[]
    /** An aggregate relationship */
    player_objectives_aggregate: player_objectives_aggregate
    /** fetch data from the table in a streaming manner: "player_objectives" */
    player_objectives_stream: player_objectives[]
    /** fetch data from the table: "player_sanctions" */
    player_sanctions: player_sanctions[]
    /** fetch aggregated fields from the table: "player_sanctions" */
    player_sanctions_aggregate: player_sanctions_aggregate
    /** fetch data from the table in a streaming manner: "player_sanctions" */
    player_sanctions_stream: player_sanctions[]
    /** fetch data from the table: "player_unused_utility" */
    player_unused_utility: player_unused_utility[]
    /** fetch aggregated fields from the table: "player_unused_utility" */
    player_unused_utility_aggregate: player_unused_utility_aggregate
    /** fetch data from the table: "player_unused_utility" using primary key columns */
    player_unused_utility_by_pk: (player_unused_utility | null)
    /** fetch data from the table in a streaming manner: "player_unused_utility" */
    player_unused_utility_stream: player_unused_utility[]
    /** An array relationship */
    player_utility: player_utility[]
    /** An aggregate relationship */
    player_utility_aggregate: player_utility_aggregate
    /** fetch data from the table in a streaming manner: "player_utility" */
    player_utility_stream: player_utility[]
    /** fetch data from the table: "players" */
    players: players[]
    /** fetch aggregated fields from the table: "players" */
    players_aggregate: players_aggregate
    /** fetch data from the table: "players" using primary key columns */
    players_by_pk: (players | null)
    /** fetch data from the table in a streaming manner: "players" */
    players_stream: players[]
    /** fetch data from the table: "server_regions" */
    server_regions: server_regions[]
    /** fetch aggregated fields from the table: "server_regions" */
    server_regions_aggregate: server_regions_aggregate
    /** fetch data from the table: "server_regions" using primary key columns */
    server_regions_by_pk: (server_regions | null)
    /** fetch data from the table in a streaming manner: "server_regions" */
    server_regions_stream: server_regions[]
    /** An array relationship */
    servers: servers[]
    /** An aggregate relationship */
    servers_aggregate: servers_aggregate
    /** fetch data from the table: "servers" using primary key columns */
    servers_by_pk: (servers | null)
    /** fetch data from the table in a streaming manner: "servers" */
    servers_stream: servers[]
    /** fetch data from the table: "settings" */
    settings: settings[]
    /** fetch aggregated fields from the table: "settings" */
    settings_aggregate: settings_aggregate
    /** fetch data from the table: "settings" using primary key columns */
    settings_by_pk: (settings | null)
    /** fetch data from the table in a streaming manner: "settings" */
    settings_stream: settings[]
    /** An array relationship */
    team_invites: team_invites[]
    /** An aggregate relationship */
    team_invites_aggregate: team_invites_aggregate
    /** fetch data from the table: "team_invites" using primary key columns */
    team_invites_by_pk: (team_invites | null)
    /** fetch data from the table in a streaming manner: "team_invites" */
    team_invites_stream: team_invites[]
    /** fetch data from the table: "team_roster" */
    team_roster: team_roster[]
    /** fetch aggregated fields from the table: "team_roster" */
    team_roster_aggregate: team_roster_aggregate
    /** fetch data from the table: "team_roster" using primary key columns */
    team_roster_by_pk: (team_roster | null)
    /** fetch data from the table in a streaming manner: "team_roster" */
    team_roster_stream: team_roster[]
    /** fetch data from the table: "teams" */
    teams: teams[]
    /** fetch aggregated fields from the table: "teams" */
    teams_aggregate: teams_aggregate
    /** fetch data from the table: "teams" using primary key columns */
    teams_by_pk: (teams | null)
    /** fetch data from the table in a streaming manner: "teams" */
    teams_stream: teams[]
    /** An array relationship */
    tournament_brackets: tournament_brackets[]
    /** An aggregate relationship */
    tournament_brackets_aggregate: tournament_brackets_aggregate
    /** fetch data from the table: "tournament_brackets" using primary key columns */
    tournament_brackets_by_pk: (tournament_brackets | null)
    /** fetch data from the table in a streaming manner: "tournament_brackets" */
    tournament_brackets_stream: tournament_brackets[]
    /** An array relationship */
    tournament_organizers: tournament_organizers[]
    /** An aggregate relationship */
    tournament_organizers_aggregate: tournament_organizers_aggregate
    /** fetch data from the table: "tournament_organizers" using primary key columns */
    tournament_organizers_by_pk: (tournament_organizers | null)
    /** fetch data from the table in a streaming manner: "tournament_organizers" */
    tournament_organizers_stream: tournament_organizers[]
    /** An array relationship */
    tournament_stages: tournament_stages[]
    /** An aggregate relationship */
    tournament_stages_aggregate: tournament_stages_aggregate
    /** fetch data from the table: "tournament_stages" using primary key columns */
    tournament_stages_by_pk: (tournament_stages | null)
    /** fetch data from the table in a streaming manner: "tournament_stages" */
    tournament_stages_stream: tournament_stages[]
    /** fetch data from the table: "tournament_team_invites" */
    tournament_team_invites: tournament_team_invites[]
    /** fetch aggregated fields from the table: "tournament_team_invites" */
    tournament_team_invites_aggregate: tournament_team_invites_aggregate
    /** fetch data from the table: "tournament_team_invites" using primary key columns */
    tournament_team_invites_by_pk: (tournament_team_invites | null)
    /** fetch data from the table in a streaming manner: "tournament_team_invites" */
    tournament_team_invites_stream: tournament_team_invites[]
    /** fetch data from the table: "tournament_team_roster" */
    tournament_team_roster: tournament_team_roster[]
    /** fetch aggregated fields from the table: "tournament_team_roster" */
    tournament_team_roster_aggregate: tournament_team_roster_aggregate
    /** fetch data from the table: "tournament_team_roster" using primary key columns */
    tournament_team_roster_by_pk: (tournament_team_roster | null)
    /** fetch data from the table in a streaming manner: "tournament_team_roster" */
    tournament_team_roster_stream: tournament_team_roster[]
    /** An array relationship */
    tournament_teams: tournament_teams[]
    /** An aggregate relationship */
    tournament_teams_aggregate: tournament_teams_aggregate
    /** fetch data from the table: "tournament_teams" using primary key columns */
    tournament_teams_by_pk: (tournament_teams | null)
    /** fetch data from the table in a streaming manner: "tournament_teams" */
    tournament_teams_stream: tournament_teams[]
    /** An array relationship */
    tournaments: tournaments[]
    /** An aggregate relationship */
    tournaments_aggregate: tournaments_aggregate
    /** fetch data from the table: "tournaments" using primary key columns */
    tournaments_by_pk: (tournaments | null)
    /** fetch data from the table in a streaming manner: "tournaments" */
    tournaments_stream: tournaments[]
    /** fetch data from the table: "v_match_captains" */
    v_match_captains: v_match_captains[]
    /** fetch aggregated fields from the table: "v_match_captains" */
    v_match_captains_aggregate: v_match_captains_aggregate
    /** fetch data from the table in a streaming manner: "v_match_captains" */
    v_match_captains_stream: v_match_captains[]
    /** fetch data from the table: "v_match_lineups" */
    v_match_lineups: v_match_lineups[]
    /** fetch aggregated fields from the table: "v_match_lineups" */
    v_match_lineups_aggregate: v_match_lineups_aggregate
    /** fetch data from the table in a streaming manner: "v_match_lineups" */
    v_match_lineups_stream: v_match_lineups[]
    /** fetch data from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis: v_player_arch_nemesis[]
    /** fetch aggregated fields from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis_aggregate: v_player_arch_nemesis_aggregate
    /** fetch data from the table in a streaming manner: "v_player_arch_nemesis" */
    v_player_arch_nemesis_stream: v_player_arch_nemesis[]
    /** fetch data from the table: "v_player_damage" */
    v_player_damage: v_player_damage[]
    /** fetch aggregated fields from the table: "v_player_damage" */
    v_player_damage_aggregate: v_player_damage_aggregate
    /** fetch data from the table in a streaming manner: "v_player_damage" */
    v_player_damage_stream: v_player_damage[]
    /** fetch data from the table: "v_player_elo" */
    v_player_elo: v_player_elo[]
    /** fetch aggregated fields from the table: "v_player_elo" */
    v_player_elo_aggregate: v_player_elo_aggregate
    /** fetch data from the table in a streaming manner: "v_player_elo" */
    v_player_elo_stream: v_player_elo[]
    /** fetch data from the table: "v_player_map_losses" */
    v_player_map_losses: v_player_map_losses[]
    /** fetch aggregated fields from the table: "v_player_map_losses" */
    v_player_map_losses_aggregate: v_player_map_losses_aggregate
    /** fetch data from the table in a streaming manner: "v_player_map_losses" */
    v_player_map_losses_stream: v_player_map_losses[]
    /** fetch data from the table: "v_player_map_wins" */
    v_player_map_wins: v_player_map_wins[]
    /** fetch aggregated fields from the table: "v_player_map_wins" */
    v_player_map_wins_aggregate: v_player_map_wins_aggregate
    /** fetch data from the table in a streaming manner: "v_player_map_wins" */
    v_player_map_wins_stream: v_player_map_wins[]
    /** fetch data from the table: "v_player_multi_kills" */
    v_player_multi_kills: v_player_multi_kills[]
    /** fetch aggregated fields from the table: "v_player_multi_kills" */
    v_player_multi_kills_aggregate: v_player_multi_kills_aggregate
    /** fetch data from the table in a streaming manner: "v_player_multi_kills" */
    v_player_multi_kills_stream: v_player_multi_kills[]
    /** fetch data from the table: "v_pool_maps" */
    v_pool_maps: v_pool_maps[]
    /** fetch aggregated fields from the table: "v_pool_maps" */
    v_pool_maps_aggregate: v_pool_maps_aggregate
    /** fetch data from the table in a streaming manner: "v_pool_maps" */
    v_pool_maps_stream: v_pool_maps[]
    __typename: 'subscription_root'
}


/** columns and relationships of "team_invites" */
export interface team_invites {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    invited_by: players
    invited_by_player_steam_id: Scalars['bigint']
    /** An object relationship */
    player: players
    steam_id: Scalars['bigint']
    /** An object relationship */
    team: teams
    team_id: Scalars['uuid']
    __typename: 'team_invites'
}


/** aggregated selection of "team_invites" */
export interface team_invites_aggregate {
    aggregate: (team_invites_aggregate_fields | null)
    nodes: team_invites[]
    __typename: 'team_invites_aggregate'
}


/** aggregate fields of "team_invites" */
export interface team_invites_aggregate_fields {
    avg: (team_invites_avg_fields | null)
    count: Scalars['Int']
    max: (team_invites_max_fields | null)
    min: (team_invites_min_fields | null)
    stddev: (team_invites_stddev_fields | null)
    stddev_pop: (team_invites_stddev_pop_fields | null)
    stddev_samp: (team_invites_stddev_samp_fields | null)
    sum: (team_invites_sum_fields | null)
    var_pop: (team_invites_var_pop_fields | null)
    var_samp: (team_invites_var_samp_fields | null)
    variance: (team_invites_variance_fields | null)
    __typename: 'team_invites_aggregate_fields'
}


/** aggregate avg on columns */
export interface team_invites_avg_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_avg_fields'
}


/** unique or primary key constraints on table "team_invites" */
export type team_invites_constraint = 'team_invites_pkey' | 'team_invites_team_id_steam_id_key'


/** aggregate max on columns */
export interface team_invites_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'team_invites_max_fields'
}


/** aggregate min on columns */
export interface team_invites_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'team_invites_min_fields'
}


/** response of any mutation on the table "team_invites" */
export interface team_invites_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: team_invites[]
    __typename: 'team_invites_mutation_response'
}


/** select columns of table "team_invites" */
export type team_invites_select_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'steam_id' | 'team_id'


/** aggregate stddev on columns */
export interface team_invites_stddev_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface team_invites_stddev_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface team_invites_stddev_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface team_invites_sum_fields {
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'team_invites_sum_fields'
}


/** update columns of table "team_invites" */
export type team_invites_update_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'steam_id' | 'team_id'


/** aggregate var_pop on columns */
export interface team_invites_var_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface team_invites_var_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_var_samp_fields'
}


/** aggregate variance on columns */
export interface team_invites_variance_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'team_invites_variance_fields'
}


/** columns and relationships of "team_roster" */
export interface team_roster {
    /** An object relationship */
    player: players
    player_steam_id: Scalars['bigint']
    role: e_team_roles_enum
    /** An object relationship */
    team: teams
    team_id: Scalars['uuid']
    __typename: 'team_roster'
}


/** aggregated selection of "team_roster" */
export interface team_roster_aggregate {
    aggregate: (team_roster_aggregate_fields | null)
    nodes: team_roster[]
    __typename: 'team_roster_aggregate'
}


/** aggregate fields of "team_roster" */
export interface team_roster_aggregate_fields {
    avg: (team_roster_avg_fields | null)
    count: Scalars['Int']
    max: (team_roster_max_fields | null)
    min: (team_roster_min_fields | null)
    stddev: (team_roster_stddev_fields | null)
    stddev_pop: (team_roster_stddev_pop_fields | null)
    stddev_samp: (team_roster_stddev_samp_fields | null)
    sum: (team_roster_sum_fields | null)
    var_pop: (team_roster_var_pop_fields | null)
    var_samp: (team_roster_var_samp_fields | null)
    variance: (team_roster_variance_fields | null)
    __typename: 'team_roster_aggregate_fields'
}


/** aggregate avg on columns */
export interface team_roster_avg_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_avg_fields'
}


/** unique or primary key constraints on table "team_roster" */
export type team_roster_constraint = 'team_members_pkey'


/** aggregate max on columns */
export interface team_roster_max_fields {
    player_steam_id: (Scalars['bigint'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'team_roster_max_fields'
}


/** aggregate min on columns */
export interface team_roster_min_fields {
    player_steam_id: (Scalars['bigint'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'team_roster_min_fields'
}


/** response of any mutation on the table "team_roster" */
export interface team_roster_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: team_roster[]
    __typename: 'team_roster_mutation_response'
}


/** select columns of table "team_roster" */
export type team_roster_select_column = 'player_steam_id' | 'role' | 'team_id'


/** aggregate stddev on columns */
export interface team_roster_stddev_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface team_roster_stddev_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface team_roster_stddev_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface team_roster_sum_fields {
    player_steam_id: (Scalars['bigint'] | null)
    __typename: 'team_roster_sum_fields'
}


/** update columns of table "team_roster" */
export type team_roster_update_column = 'player_steam_id' | 'role' | 'team_id'


/** aggregate var_pop on columns */
export interface team_roster_var_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface team_roster_var_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_var_samp_fields'
}


/** aggregate variance on columns */
export interface team_roster_variance_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'team_roster_variance_fields'
}


/** columns and relationships of "teams" */
export interface teams {
    /** A computed field, executes function "can_change_team_role" */
    can_change_role: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_invite_to_team" */
    can_invite: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_remove_from_team" */
    can_remove: (Scalars['Boolean'] | null)
    id: Scalars['uuid']
    /** An array relationship */
    invites: team_invites[]
    /** An aggregate relationship */
    invites_aggregate: team_invites_aggregate
    /** An array relationship */
    match_lineups: match_lineups[]
    /** An aggregate relationship */
    match_lineups_aggregate: match_lineups_aggregate
    /** A computed field, executes function "get_team_matches" */
    matches: (matches[] | null)
    name: Scalars['String']
    /** An object relationship */
    owner: players
    owner_steam_id: Scalars['bigint']
    /** An array relationship */
    roster: team_roster[]
    /** An aggregate relationship */
    roster_aggregate: team_roster_aggregate
    short_name: Scalars['String']
    /** An array relationship */
    tournament_teams: tournament_teams[]
    /** An aggregate relationship */
    tournament_teams_aggregate: tournament_teams_aggregate
    __typename: 'teams'
}


/** aggregated selection of "teams" */
export interface teams_aggregate {
    aggregate: (teams_aggregate_fields | null)
    nodes: teams[]
    __typename: 'teams_aggregate'
}


/** aggregate fields of "teams" */
export interface teams_aggregate_fields {
    avg: (teams_avg_fields | null)
    count: Scalars['Int']
    max: (teams_max_fields | null)
    min: (teams_min_fields | null)
    stddev: (teams_stddev_fields | null)
    stddev_pop: (teams_stddev_pop_fields | null)
    stddev_samp: (teams_stddev_samp_fields | null)
    sum: (teams_sum_fields | null)
    var_pop: (teams_var_pop_fields | null)
    var_samp: (teams_var_samp_fields | null)
    variance: (teams_variance_fields | null)
    __typename: 'teams_aggregate_fields'
}


/** aggregate avg on columns */
export interface teams_avg_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_avg_fields'
}


/** unique or primary key constraints on table "teams" */
export type teams_constraint = 'teams_name_key' | 'teams_pkey'


/** aggregate max on columns */
export interface teams_max_fields {
    id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    owner_steam_id: (Scalars['bigint'] | null)
    short_name: (Scalars['String'] | null)
    __typename: 'teams_max_fields'
}


/** aggregate min on columns */
export interface teams_min_fields {
    id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    owner_steam_id: (Scalars['bigint'] | null)
    short_name: (Scalars['String'] | null)
    __typename: 'teams_min_fields'
}


/** response of any mutation on the table "teams" */
export interface teams_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: teams[]
    __typename: 'teams_mutation_response'
}


/** select columns of table "teams" */
export type teams_select_column = 'id' | 'name' | 'owner_steam_id' | 'short_name'


/** aggregate stddev on columns */
export interface teams_stddev_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface teams_stddev_pop_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface teams_stddev_samp_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface teams_sum_fields {
    owner_steam_id: (Scalars['bigint'] | null)
    __typename: 'teams_sum_fields'
}


/** update columns of table "teams" */
export type teams_update_column = 'id' | 'name' | 'owner_steam_id' | 'short_name'


/** aggregate var_pop on columns */
export interface teams_var_pop_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface teams_var_samp_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_var_samp_fields'
}


/** aggregate variance on columns */
export interface teams_variance_fields {
    owner_steam_id: (Scalars['Float'] | null)
    __typename: 'teams_variance_fields'
}


/** columns and relationships of "tournament_brackets" */
export interface tournament_brackets {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    match: (matches | null)
    match_id: (Scalars['uuid'] | null)
    match_number: (Scalars['Int'] | null)
    parent_bracket_id: (Scalars['uuid'] | null)
    round: Scalars['Int']
    /** An object relationship */
    stage: tournament_stages
    /** An object relationship */
    team_1: (tournament_teams | null)
    /** An object relationship */
    team_2: (tournament_teams | null)
    tournament_stage_id: Scalars['uuid']
    tournament_team_id_1: (Scalars['uuid'] | null)
    tournament_team_id_2: (Scalars['uuid'] | null)
    __typename: 'tournament_brackets'
}


/** aggregated selection of "tournament_brackets" */
export interface tournament_brackets_aggregate {
    aggregate: (tournament_brackets_aggregate_fields | null)
    nodes: tournament_brackets[]
    __typename: 'tournament_brackets_aggregate'
}


/** aggregate fields of "tournament_brackets" */
export interface tournament_brackets_aggregate_fields {
    avg: (tournament_brackets_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_brackets_max_fields | null)
    min: (tournament_brackets_min_fields | null)
    stddev: (tournament_brackets_stddev_fields | null)
    stddev_pop: (tournament_brackets_stddev_pop_fields | null)
    stddev_samp: (tournament_brackets_stddev_samp_fields | null)
    sum: (tournament_brackets_sum_fields | null)
    var_pop: (tournament_brackets_var_pop_fields | null)
    var_samp: (tournament_brackets_var_samp_fields | null)
    variance: (tournament_brackets_variance_fields | null)
    __typename: 'tournament_brackets_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_brackets_avg_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_avg_fields'
}


/** unique or primary key constraints on table "tournament_brackets" */
export type tournament_brackets_constraint = 'touarnment_brackets_pkey' | 'tournament_brackets_id_tournament_team_id_1_tournament_team_id_'


/** aggregate max on columns */
export interface tournament_brackets_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_number: (Scalars['Int'] | null)
    parent_bracket_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    tournament_stage_id: (Scalars['uuid'] | null)
    tournament_team_id_1: (Scalars['uuid'] | null)
    tournament_team_id_2: (Scalars['uuid'] | null)
    __typename: 'tournament_brackets_max_fields'
}


/** aggregate min on columns */
export interface tournament_brackets_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    match_number: (Scalars['Int'] | null)
    parent_bracket_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    tournament_stage_id: (Scalars['uuid'] | null)
    tournament_team_id_1: (Scalars['uuid'] | null)
    tournament_team_id_2: (Scalars['uuid'] | null)
    __typename: 'tournament_brackets_min_fields'
}


/** response of any mutation on the table "tournament_brackets" */
export interface tournament_brackets_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_brackets[]
    __typename: 'tournament_brackets_mutation_response'
}


/** select columns of table "tournament_brackets" */
export type tournament_brackets_select_column = 'created_at' | 'id' | 'match_id' | 'match_number' | 'parent_bracket_id' | 'round' | 'tournament_stage_id' | 'tournament_team_id_1' | 'tournament_team_id_2'


/** aggregate stddev on columns */
export interface tournament_brackets_stddev_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_brackets_stddev_pop_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_brackets_stddev_samp_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_brackets_sum_fields {
    match_number: (Scalars['Int'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'tournament_brackets_sum_fields'
}


/** update columns of table "tournament_brackets" */
export type tournament_brackets_update_column = 'created_at' | 'id' | 'match_id' | 'match_number' | 'parent_bracket_id' | 'round' | 'tournament_stage_id' | 'tournament_team_id_1' | 'tournament_team_id_2'


/** aggregate var_pop on columns */
export interface tournament_brackets_var_pop_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_brackets_var_samp_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_brackets_variance_fields {
    match_number: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'tournament_brackets_variance_fields'
}


/** columns and relationships of "tournament_organizers" */
export interface tournament_organizers {
    /** An object relationship */
    organizer: players
    steam_id: Scalars['bigint']
    /** An object relationship */
    tournament: tournaments
    tournament_id: Scalars['uuid']
    __typename: 'tournament_organizers'
}


/** aggregated selection of "tournament_organizers" */
export interface tournament_organizers_aggregate {
    aggregate: (tournament_organizers_aggregate_fields | null)
    nodes: tournament_organizers[]
    __typename: 'tournament_organizers_aggregate'
}


/** aggregate fields of "tournament_organizers" */
export interface tournament_organizers_aggregate_fields {
    avg: (tournament_organizers_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_organizers_max_fields | null)
    min: (tournament_organizers_min_fields | null)
    stddev: (tournament_organizers_stddev_fields | null)
    stddev_pop: (tournament_organizers_stddev_pop_fields | null)
    stddev_samp: (tournament_organizers_stddev_samp_fields | null)
    sum: (tournament_organizers_sum_fields | null)
    var_pop: (tournament_organizers_var_pop_fields | null)
    var_samp: (tournament_organizers_var_samp_fields | null)
    variance: (tournament_organizers_variance_fields | null)
    __typename: 'tournament_organizers_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_organizers_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_avg_fields'
}


/** unique or primary key constraints on table "tournament_organizers" */
export type tournament_organizers_constraint = 'tournament_organizers_pkey'


/** aggregate max on columns */
export interface tournament_organizers_max_fields {
    steam_id: (Scalars['bigint'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_organizers_max_fields'
}


/** aggregate min on columns */
export interface tournament_organizers_min_fields {
    steam_id: (Scalars['bigint'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_organizers_min_fields'
}


/** response of any mutation on the table "tournament_organizers" */
export interface tournament_organizers_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_organizers[]
    __typename: 'tournament_organizers_mutation_response'
}


/** select columns of table "tournament_organizers" */
export type tournament_organizers_select_column = 'steam_id' | 'tournament_id'


/** aggregate stddev on columns */
export interface tournament_organizers_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_organizers_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_organizers_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_organizers_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'tournament_organizers_sum_fields'
}


/** update columns of table "tournament_organizers" */
export type tournament_organizers_update_column = 'steam_id' | 'tournament_id'


/** aggregate var_pop on columns */
export interface tournament_organizers_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_organizers_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_organizers_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_organizers_variance_fields'
}


/** columns and relationships of "tournament_stages" */
export interface tournament_stages {
    /** An array relationship */
    brackets: tournament_brackets[]
    /** An aggregate relationship */
    brackets_aggregate: tournament_brackets_aggregate
    /** An object relationship */
    e_tournament_stage_type: e_tournament_stage_types
    id: Scalars['uuid']
    max_teams: Scalars['Int']
    min_teams: Scalars['Int']
    order: Scalars['Int']
    settings: (Scalars['jsonb'] | null)
    /** An object relationship */
    tournament: tournaments
    tournament_id: Scalars['uuid']
    type: e_tournament_stage_types_enum
    __typename: 'tournament_stages'
}


/** aggregated selection of "tournament_stages" */
export interface tournament_stages_aggregate {
    aggregate: (tournament_stages_aggregate_fields | null)
    nodes: tournament_stages[]
    __typename: 'tournament_stages_aggregate'
}


/** aggregate fields of "tournament_stages" */
export interface tournament_stages_aggregate_fields {
    avg: (tournament_stages_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_stages_max_fields | null)
    min: (tournament_stages_min_fields | null)
    stddev: (tournament_stages_stddev_fields | null)
    stddev_pop: (tournament_stages_stddev_pop_fields | null)
    stddev_samp: (tournament_stages_stddev_samp_fields | null)
    sum: (tournament_stages_sum_fields | null)
    var_pop: (tournament_stages_var_pop_fields | null)
    var_samp: (tournament_stages_var_samp_fields | null)
    variance: (tournament_stages_variance_fields | null)
    __typename: 'tournament_stages_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_stages_avg_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_avg_fields'
}


/** unique or primary key constraints on table "tournament_stages" */
export type tournament_stages_constraint = 'tournament_stages_pkey'


/** aggregate max on columns */
export interface tournament_stages_max_fields {
    id: (Scalars['uuid'] | null)
    max_teams: (Scalars['Int'] | null)
    min_teams: (Scalars['Int'] | null)
    order: (Scalars['Int'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_stages_max_fields'
}


/** aggregate min on columns */
export interface tournament_stages_min_fields {
    id: (Scalars['uuid'] | null)
    max_teams: (Scalars['Int'] | null)
    min_teams: (Scalars['Int'] | null)
    order: (Scalars['Int'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_stages_min_fields'
}


/** response of any mutation on the table "tournament_stages" */
export interface tournament_stages_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_stages[]
    __typename: 'tournament_stages_mutation_response'
}


/** select columns of table "tournament_stages" */
export type tournament_stages_select_column = 'id' | 'max_teams' | 'min_teams' | 'order' | 'settings' | 'tournament_id' | 'type'


/** aggregate stddev on columns */
export interface tournament_stages_stddev_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_stages_stddev_pop_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_stages_stddev_samp_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_stages_sum_fields {
    max_teams: (Scalars['Int'] | null)
    min_teams: (Scalars['Int'] | null)
    order: (Scalars['Int'] | null)
    __typename: 'tournament_stages_sum_fields'
}


/** update columns of table "tournament_stages" */
export type tournament_stages_update_column = 'id' | 'max_teams' | 'min_teams' | 'order' | 'settings' | 'tournament_id' | 'type'


/** aggregate var_pop on columns */
export interface tournament_stages_var_pop_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_stages_var_samp_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_stages_variance_fields {
    max_teams: (Scalars['Float'] | null)
    min_teams: (Scalars['Float'] | null)
    order: (Scalars['Float'] | null)
    __typename: 'tournament_stages_variance_fields'
}


/** columns and relationships of "tournament_team_invites" */
export interface tournament_team_invites {
    created_at: Scalars['timestamptz']
    id: Scalars['uuid']
    /** An object relationship */
    invited_by: players
    invited_by_player_steam_id: Scalars['bigint']
    /** An object relationship */
    player: players
    steam_id: Scalars['bigint']
    /** An object relationship */
    team: tournament_teams
    tournament_team_id: Scalars['uuid']
    __typename: 'tournament_team_invites'
}


/** aggregated selection of "tournament_team_invites" */
export interface tournament_team_invites_aggregate {
    aggregate: (tournament_team_invites_aggregate_fields | null)
    nodes: tournament_team_invites[]
    __typename: 'tournament_team_invites_aggregate'
}


/** aggregate fields of "tournament_team_invites" */
export interface tournament_team_invites_aggregate_fields {
    avg: (tournament_team_invites_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_team_invites_max_fields | null)
    min: (tournament_team_invites_min_fields | null)
    stddev: (tournament_team_invites_stddev_fields | null)
    stddev_pop: (tournament_team_invites_stddev_pop_fields | null)
    stddev_samp: (tournament_team_invites_stddev_samp_fields | null)
    sum: (tournament_team_invites_sum_fields | null)
    var_pop: (tournament_team_invites_var_pop_fields | null)
    var_samp: (tournament_team_invites_var_samp_fields | null)
    variance: (tournament_team_invites_variance_fields | null)
    __typename: 'tournament_team_invites_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_team_invites_avg_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_avg_fields'
}


/** unique or primary key constraints on table "tournament_team_invites" */
export type tournament_team_invites_constraint = 'tournament_team_invites_pkey' | 'tournament_team_invites_steam_id_tournament_team_id_key'


/** aggregate max on columns */
export interface tournament_team_invites_max_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    tournament_team_id: (Scalars['uuid'] | null)
    __typename: 'tournament_team_invites_max_fields'
}


/** aggregate min on columns */
export interface tournament_team_invites_min_fields {
    created_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    tournament_team_id: (Scalars['uuid'] | null)
    __typename: 'tournament_team_invites_min_fields'
}


/** response of any mutation on the table "tournament_team_invites" */
export interface tournament_team_invites_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_team_invites[]
    __typename: 'tournament_team_invites_mutation_response'
}


/** select columns of table "tournament_team_invites" */
export type tournament_team_invites_select_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'steam_id' | 'tournament_team_id'


/** aggregate stddev on columns */
export interface tournament_team_invites_stddev_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_team_invites_stddev_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_team_invites_stddev_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_team_invites_sum_fields {
    invited_by_player_steam_id: (Scalars['bigint'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'tournament_team_invites_sum_fields'
}


/** update columns of table "tournament_team_invites" */
export type tournament_team_invites_update_column = 'created_at' | 'id' | 'invited_by_player_steam_id' | 'steam_id' | 'tournament_team_id'


/** aggregate var_pop on columns */
export interface tournament_team_invites_var_pop_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_team_invites_var_samp_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_team_invites_variance_fields {
    invited_by_player_steam_id: (Scalars['Float'] | null)
    steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_invites_variance_fields'
}


/** columns and relationships of "tournament_team_roster" */
export interface tournament_team_roster {
    /** An object relationship */
    e_team_role: e_team_roles
    /** An object relationship */
    player: players
    player_steam_id: Scalars['bigint']
    role: e_team_roles_enum
    /** An object relationship */
    tournament: tournaments
    tournament_id: Scalars['uuid']
    /** An object relationship */
    tournament_team: tournament_teams
    tournament_team_id: Scalars['uuid']
    __typename: 'tournament_team_roster'
}


/** aggregated selection of "tournament_team_roster" */
export interface tournament_team_roster_aggregate {
    aggregate: (tournament_team_roster_aggregate_fields | null)
    nodes: tournament_team_roster[]
    __typename: 'tournament_team_roster_aggregate'
}


/** aggregate fields of "tournament_team_roster" */
export interface tournament_team_roster_aggregate_fields {
    avg: (tournament_team_roster_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_team_roster_max_fields | null)
    min: (tournament_team_roster_min_fields | null)
    stddev: (tournament_team_roster_stddev_fields | null)
    stddev_pop: (tournament_team_roster_stddev_pop_fields | null)
    stddev_samp: (tournament_team_roster_stddev_samp_fields | null)
    sum: (tournament_team_roster_sum_fields | null)
    var_pop: (tournament_team_roster_var_pop_fields | null)
    var_samp: (tournament_team_roster_var_samp_fields | null)
    variance: (tournament_team_roster_variance_fields | null)
    __typename: 'tournament_team_roster_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_team_roster_avg_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_avg_fields'
}


/** unique or primary key constraints on table "tournament_team_roster" */
export type tournament_team_roster_constraint = 'tournament_roster_pkey' | 'tournament_roster_player_steam_id_tournament_id_key'


/** aggregate max on columns */
export interface tournament_team_roster_max_fields {
    player_steam_id: (Scalars['bigint'] | null)
    tournament_id: (Scalars['uuid'] | null)
    tournament_team_id: (Scalars['uuid'] | null)
    __typename: 'tournament_team_roster_max_fields'
}


/** aggregate min on columns */
export interface tournament_team_roster_min_fields {
    player_steam_id: (Scalars['bigint'] | null)
    tournament_id: (Scalars['uuid'] | null)
    tournament_team_id: (Scalars['uuid'] | null)
    __typename: 'tournament_team_roster_min_fields'
}


/** response of any mutation on the table "tournament_team_roster" */
export interface tournament_team_roster_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_team_roster[]
    __typename: 'tournament_team_roster_mutation_response'
}


/** select columns of table "tournament_team_roster" */
export type tournament_team_roster_select_column = 'player_steam_id' | 'role' | 'tournament_id' | 'tournament_team_id'


/** aggregate stddev on columns */
export interface tournament_team_roster_stddev_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_team_roster_stddev_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_team_roster_stddev_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_team_roster_sum_fields {
    player_steam_id: (Scalars['bigint'] | null)
    __typename: 'tournament_team_roster_sum_fields'
}


/** update columns of table "tournament_team_roster" */
export type tournament_team_roster_update_column = 'player_steam_id' | 'role' | 'tournament_id' | 'tournament_team_id'


/** aggregate var_pop on columns */
export interface tournament_team_roster_var_pop_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_team_roster_var_samp_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_team_roster_variance_fields {
    player_steam_id: (Scalars['Float'] | null)
    __typename: 'tournament_team_roster_variance_fields'
}


/** columns and relationships of "tournament_teams" */
export interface tournament_teams {
    /** A computed field, executes function "can_manage_tournament_team" */
    can_manage: (Scalars['Boolean'] | null)
    /** An object relationship */
    creator: players
    eligible_at: (Scalars['timestamptz'] | null)
    id: Scalars['uuid']
    /** An array relationship */
    invites: tournament_team_invites[]
    /** An aggregate relationship */
    invites_aggregate: tournament_team_invites_aggregate
    name: Scalars['String']
    owner_steam_id: Scalars['bigint']
    /** An array relationship */
    roster: tournament_team_roster[]
    /** An aggregate relationship */
    roster_aggregate: tournament_team_roster_aggregate
    seed: (Scalars['Int'] | null)
    /** An object relationship */
    team: (teams | null)
    team_id: (Scalars['uuid'] | null)
    /** An object relationship */
    tournament: tournaments
    tournament_id: Scalars['uuid']
    __typename: 'tournament_teams'
}


/** aggregated selection of "tournament_teams" */
export interface tournament_teams_aggregate {
    aggregate: (tournament_teams_aggregate_fields | null)
    nodes: tournament_teams[]
    __typename: 'tournament_teams_aggregate'
}


/** aggregate fields of "tournament_teams" */
export interface tournament_teams_aggregate_fields {
    avg: (tournament_teams_avg_fields | null)
    count: Scalars['Int']
    max: (tournament_teams_max_fields | null)
    min: (tournament_teams_min_fields | null)
    stddev: (tournament_teams_stddev_fields | null)
    stddev_pop: (tournament_teams_stddev_pop_fields | null)
    stddev_samp: (tournament_teams_stddev_samp_fields | null)
    sum: (tournament_teams_sum_fields | null)
    var_pop: (tournament_teams_var_pop_fields | null)
    var_samp: (tournament_teams_var_samp_fields | null)
    variance: (tournament_teams_variance_fields | null)
    __typename: 'tournament_teams_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournament_teams_avg_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_avg_fields'
}


/** unique or primary key constraints on table "tournament_teams" */
export type tournament_teams_constraint = 'tournament_teams_creator_steam_id_tournament_id_key' | 'tournament_teams_pkey' | 'tournament_teams_tournament_id_name_key' | 'tournament_teams_tournament_id_team_id_key'


/** aggregate max on columns */
export interface tournament_teams_max_fields {
    eligible_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    owner_steam_id: (Scalars['bigint'] | null)
    seed: (Scalars['Int'] | null)
    team_id: (Scalars['uuid'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_teams_max_fields'
}


/** aggregate min on columns */
export interface tournament_teams_min_fields {
    eligible_at: (Scalars['timestamptz'] | null)
    id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    owner_steam_id: (Scalars['bigint'] | null)
    seed: (Scalars['Int'] | null)
    team_id: (Scalars['uuid'] | null)
    tournament_id: (Scalars['uuid'] | null)
    __typename: 'tournament_teams_min_fields'
}


/** response of any mutation on the table "tournament_teams" */
export interface tournament_teams_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournament_teams[]
    __typename: 'tournament_teams_mutation_response'
}


/** select columns of table "tournament_teams" */
export type tournament_teams_select_column = 'eligible_at' | 'id' | 'name' | 'owner_steam_id' | 'seed' | 'team_id' | 'tournament_id'


/** aggregate stddev on columns */
export interface tournament_teams_stddev_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournament_teams_stddev_pop_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournament_teams_stddev_samp_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournament_teams_sum_fields {
    owner_steam_id: (Scalars['bigint'] | null)
    seed: (Scalars['Int'] | null)
    __typename: 'tournament_teams_sum_fields'
}


/** update columns of table "tournament_teams" */
export type tournament_teams_update_column = 'eligible_at' | 'id' | 'name' | 'owner_steam_id' | 'seed' | 'team_id' | 'tournament_id'


/** aggregate var_pop on columns */
export interface tournament_teams_var_pop_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournament_teams_var_samp_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournament_teams_variance_fields {
    owner_steam_id: (Scalars['Float'] | null)
    seed: (Scalars['Float'] | null)
    __typename: 'tournament_teams_variance_fields'
}


/** columns and relationships of "tournaments" */
export interface tournaments {
    /** An object relationship */
    admin: players
    /** A computed field, executes function "can_cancel_tournament" */
    can_cancel: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_close_tournament_registration" */
    can_close_registration: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_join_tournament" */
    can_join: (Scalars['Boolean'] | null)
    /** A computed field, executes function "can_open_tournament_registration" */
    can_open_registration: (Scalars['Boolean'] | null)
    description: (Scalars['String'] | null)
    /** An object relationship */
    e_tournament_status: e_tournament_status
    /** A computed field, executes function "tournament_has_min_teams" */
    has_min_teams: (Scalars['Boolean'] | null)
    id: Scalars['uuid']
    /** A computed field, executes function "is_tournament_organizer" */
    is_organizer: (Scalars['Boolean'] | null)
    match_options_id: Scalars['uuid']
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    name: Scalars['String']
    /** An object relationship */
    options: match_options
    organizer_steam_id: Scalars['bigint']
    /** An array relationship */
    organizers: tournament_organizers[]
    /** An aggregate relationship */
    organizers_aggregate: tournament_organizers_aggregate
    /** An array relationship */
    rosters: tournament_team_roster[]
    /** An aggregate relationship */
    rosters_aggregate: tournament_team_roster_aggregate
    /** An array relationship */
    stages: tournament_stages[]
    /** An aggregate relationship */
    stages_aggregate: tournament_stages_aggregate
    start: Scalars['timestamptz']
    status: e_tournament_status_enum
    /** An array relationship */
    teams: tournament_teams[]
    /** An aggregate relationship */
    teams_aggregate: tournament_teams_aggregate
    __typename: 'tournaments'
}


/** aggregated selection of "tournaments" */
export interface tournaments_aggregate {
    aggregate: (tournaments_aggregate_fields | null)
    nodes: tournaments[]
    __typename: 'tournaments_aggregate'
}


/** aggregate fields of "tournaments" */
export interface tournaments_aggregate_fields {
    avg: (tournaments_avg_fields | null)
    count: Scalars['Int']
    max: (tournaments_max_fields | null)
    min: (tournaments_min_fields | null)
    stddev: (tournaments_stddev_fields | null)
    stddev_pop: (tournaments_stddev_pop_fields | null)
    stddev_samp: (tournaments_stddev_samp_fields | null)
    sum: (tournaments_sum_fields | null)
    var_pop: (tournaments_var_pop_fields | null)
    var_samp: (tournaments_var_samp_fields | null)
    variance: (tournaments_variance_fields | null)
    __typename: 'tournaments_aggregate_fields'
}


/** aggregate avg on columns */
export interface tournaments_avg_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_avg_fields'
}


/** unique or primary key constraints on table "tournaments" */
export type tournaments_constraint = 'tournaments_match_options_id_key' | 'tournaments_pkey'


/** aggregate max on columns */
export interface tournaments_max_fields {
    description: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_options_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    name: (Scalars['String'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    start: (Scalars['timestamptz'] | null)
    __typename: 'tournaments_max_fields'
}


/** aggregate min on columns */
export interface tournaments_min_fields {
    description: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_options_id: (Scalars['uuid'] | null)
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    name: (Scalars['String'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    start: (Scalars['timestamptz'] | null)
    __typename: 'tournaments_min_fields'
}


/** response of any mutation on the table "tournaments" */
export interface tournaments_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: tournaments[]
    __typename: 'tournaments_mutation_response'
}


/** select columns of table "tournaments" */
export type tournaments_select_column = 'description' | 'id' | 'match_options_id' | 'name' | 'organizer_steam_id' | 'start' | 'status'


/** aggregate stddev on columns */
export interface tournaments_stddev_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface tournaments_stddev_pop_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface tournaments_stddev_samp_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface tournaments_sum_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['bigint'] | null)
    __typename: 'tournaments_sum_fields'
}


/** update columns of table "tournaments" */
export type tournaments_update_column = 'description' | 'id' | 'match_options_id' | 'name' | 'organizer_steam_id' | 'start' | 'status'


/** aggregate var_pop on columns */
export interface tournaments_var_pop_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface tournaments_var_samp_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_var_samp_fields'
}


/** aggregate variance on columns */
export interface tournaments_variance_fields {
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup: (Scalars['Int'] | null)
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup: (Scalars['Int'] | null)
    organizer_steam_id: (Scalars['Float'] | null)
    __typename: 'tournaments_variance_fields'
}


/** columns and relationships of "v_match_captains" */
export interface v_match_captains {
    captain: (Scalars['Boolean'] | null)
    discord_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    /** An object relationship */
    lineup: (match_lineups | null)
    match_lineup_id: (Scalars['uuid'] | null)
    placeholder_name: (Scalars['String'] | null)
    /** An object relationship */
    player: (players | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_match_captains'
}


/** aggregated selection of "v_match_captains" */
export interface v_match_captains_aggregate {
    aggregate: (v_match_captains_aggregate_fields | null)
    nodes: v_match_captains[]
    __typename: 'v_match_captains_aggregate'
}


/** aggregate fields of "v_match_captains" */
export interface v_match_captains_aggregate_fields {
    avg: (v_match_captains_avg_fields | null)
    count: Scalars['Int']
    max: (v_match_captains_max_fields | null)
    min: (v_match_captains_min_fields | null)
    stddev: (v_match_captains_stddev_fields | null)
    stddev_pop: (v_match_captains_stddev_pop_fields | null)
    stddev_samp: (v_match_captains_stddev_samp_fields | null)
    sum: (v_match_captains_sum_fields | null)
    var_pop: (v_match_captains_var_pop_fields | null)
    var_samp: (v_match_captains_var_samp_fields | null)
    variance: (v_match_captains_variance_fields | null)
    __typename: 'v_match_captains_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_match_captains_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_avg_fields'
}


/** aggregate max on columns */
export interface v_match_captains_max_fields {
    discord_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    placeholder_name: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_match_captains_max_fields'
}


/** aggregate min on columns */
export interface v_match_captains_min_fields {
    discord_id: (Scalars['String'] | null)
    id: (Scalars['uuid'] | null)
    match_lineup_id: (Scalars['uuid'] | null)
    placeholder_name: (Scalars['String'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_match_captains_min_fields'
}


/** response of any mutation on the table "v_match_captains" */
export interface v_match_captains_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: v_match_captains[]
    __typename: 'v_match_captains_mutation_response'
}


/** select columns of table "v_match_captains" */
export type v_match_captains_select_column = 'captain' | 'discord_id' | 'id' | 'match_lineup_id' | 'placeholder_name' | 'steam_id'


/** aggregate stddev on columns */
export interface v_match_captains_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_match_captains_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_match_captains_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_match_captains_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_match_captains_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_match_captains_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_match_captains_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_match_captains_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_captains_variance_fields'
}


/** columns and relationships of "v_match_lineups" */
export interface v_match_lineups {
    coach_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    /** An object relationship */
    lineup: (match_lineups | null)
    /** An object relationship */
    match: (matches | null)
    match_id: (Scalars['uuid'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'v_match_lineups'
}


/** aggregated selection of "v_match_lineups" */
export interface v_match_lineups_aggregate {
    aggregate: (v_match_lineups_aggregate_fields | null)
    nodes: v_match_lineups[]
    __typename: 'v_match_lineups_aggregate'
}


/** aggregate fields of "v_match_lineups" */
export interface v_match_lineups_aggregate_fields {
    avg: (v_match_lineups_avg_fields | null)
    count: Scalars['Int']
    max: (v_match_lineups_max_fields | null)
    min: (v_match_lineups_min_fields | null)
    stddev: (v_match_lineups_stddev_fields | null)
    stddev_pop: (v_match_lineups_stddev_pop_fields | null)
    stddev_samp: (v_match_lineups_stddev_samp_fields | null)
    sum: (v_match_lineups_sum_fields | null)
    var_pop: (v_match_lineups_var_pop_fields | null)
    var_samp: (v_match_lineups_var_samp_fields | null)
    variance: (v_match_lineups_variance_fields | null)
    __typename: 'v_match_lineups_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_match_lineups_avg_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_avg_fields'
}


/** aggregate max on columns */
export interface v_match_lineups_max_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'v_match_lineups_max_fields'
}


/** aggregate min on columns */
export interface v_match_lineups_min_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    team_id: (Scalars['uuid'] | null)
    __typename: 'v_match_lineups_min_fields'
}


/** select columns of table "v_match_lineups" */
export type v_match_lineups_select_column = 'coach_steam_id' | 'id' | 'match_id' | 'team_id'


/** aggregate stddev on columns */
export interface v_match_lineups_stddev_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_match_lineups_stddev_pop_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_match_lineups_stddev_samp_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_match_lineups_sum_fields {
    coach_steam_id: (Scalars['bigint'] | null)
    __typename: 'v_match_lineups_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_match_lineups_var_pop_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_match_lineups_var_samp_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_match_lineups_variance_fields {
    coach_steam_id: (Scalars['Float'] | null)
    __typename: 'v_match_lineups_variance_fields'
}


/** columns and relationships of "v_player_arch_nemesis" */
export interface v_player_arch_nemesis {
    attacker_id: (Scalars['bigint'] | null)
    kill_count: (Scalars['bigint'] | null)
    /** An object relationship */
    nemsis: (players | null)
    /** An object relationship */
    player: (players | null)
    victim_id: (Scalars['bigint'] | null)
    __typename: 'v_player_arch_nemesis'
}


/** aggregated selection of "v_player_arch_nemesis" */
export interface v_player_arch_nemesis_aggregate {
    aggregate: (v_player_arch_nemesis_aggregate_fields | null)
    nodes: v_player_arch_nemesis[]
    __typename: 'v_player_arch_nemesis_aggregate'
}


/** aggregate fields of "v_player_arch_nemesis" */
export interface v_player_arch_nemesis_aggregate_fields {
    avg: (v_player_arch_nemesis_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_arch_nemesis_max_fields | null)
    min: (v_player_arch_nemesis_min_fields | null)
    stddev: (v_player_arch_nemesis_stddev_fields | null)
    stddev_pop: (v_player_arch_nemesis_stddev_pop_fields | null)
    stddev_samp: (v_player_arch_nemesis_stddev_samp_fields | null)
    sum: (v_player_arch_nemesis_sum_fields | null)
    var_pop: (v_player_arch_nemesis_var_pop_fields | null)
    var_samp: (v_player_arch_nemesis_var_samp_fields | null)
    variance: (v_player_arch_nemesis_variance_fields | null)
    __typename: 'v_player_arch_nemesis_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_arch_nemesis_avg_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_avg_fields'
}


/** aggregate max on columns */
export interface v_player_arch_nemesis_max_fields {
    attacker_id: (Scalars['bigint'] | null)
    kill_count: (Scalars['bigint'] | null)
    victim_id: (Scalars['bigint'] | null)
    __typename: 'v_player_arch_nemesis_max_fields'
}


/** aggregate min on columns */
export interface v_player_arch_nemesis_min_fields {
    attacker_id: (Scalars['bigint'] | null)
    kill_count: (Scalars['bigint'] | null)
    victim_id: (Scalars['bigint'] | null)
    __typename: 'v_player_arch_nemesis_min_fields'
}


/** select columns of table "v_player_arch_nemesis" */
export type v_player_arch_nemesis_select_column = 'attacker_id' | 'kill_count' | 'victim_id'


/** aggregate stddev on columns */
export interface v_player_arch_nemesis_stddev_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_arch_nemesis_stddev_pop_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_arch_nemesis_stddev_samp_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_arch_nemesis_sum_fields {
    attacker_id: (Scalars['bigint'] | null)
    kill_count: (Scalars['bigint'] | null)
    victim_id: (Scalars['bigint'] | null)
    __typename: 'v_player_arch_nemesis_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_arch_nemesis_var_pop_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_arch_nemesis_var_samp_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_arch_nemesis_variance_fields {
    attacker_id: (Scalars['Float'] | null)
    kill_count: (Scalars['Float'] | null)
    victim_id: (Scalars['Float'] | null)
    __typename: 'v_player_arch_nemesis_variance_fields'
}


/** columns and relationships of "v_player_damage" */
export interface v_player_damage {
    avg_damage_per_round: (Scalars['bigint'] | null)
    /** An object relationship */
    player: (players | null)
    player_steam_id: (Scalars['bigint'] | null)
    total_damage: (Scalars['bigint'] | null)
    total_rounds: (Scalars['bigint'] | null)
    __typename: 'v_player_damage'
}


/** aggregated selection of "v_player_damage" */
export interface v_player_damage_aggregate {
    aggregate: (v_player_damage_aggregate_fields | null)
    nodes: v_player_damage[]
    __typename: 'v_player_damage_aggregate'
}


/** aggregate fields of "v_player_damage" */
export interface v_player_damage_aggregate_fields {
    avg: (v_player_damage_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_damage_max_fields | null)
    min: (v_player_damage_min_fields | null)
    stddev: (v_player_damage_stddev_fields | null)
    stddev_pop: (v_player_damage_stddev_pop_fields | null)
    stddev_samp: (v_player_damage_stddev_samp_fields | null)
    sum: (v_player_damage_sum_fields | null)
    var_pop: (v_player_damage_var_pop_fields | null)
    var_samp: (v_player_damage_var_samp_fields | null)
    variance: (v_player_damage_variance_fields | null)
    __typename: 'v_player_damage_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_damage_avg_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_avg_fields'
}


/** aggregate max on columns */
export interface v_player_damage_max_fields {
    avg_damage_per_round: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    total_damage: (Scalars['bigint'] | null)
    total_rounds: (Scalars['bigint'] | null)
    __typename: 'v_player_damage_max_fields'
}


/** aggregate min on columns */
export interface v_player_damage_min_fields {
    avg_damage_per_round: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    total_damage: (Scalars['bigint'] | null)
    total_rounds: (Scalars['bigint'] | null)
    __typename: 'v_player_damage_min_fields'
}


/** select columns of table "v_player_damage" */
export type v_player_damage_select_column = 'avg_damage_per_round' | 'player_steam_id' | 'total_damage' | 'total_rounds'


/** aggregate stddev on columns */
export interface v_player_damage_stddev_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_damage_stddev_pop_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_damage_stddev_samp_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_damage_sum_fields {
    avg_damage_per_round: (Scalars['bigint'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    total_damage: (Scalars['bigint'] | null)
    total_rounds: (Scalars['bigint'] | null)
    __typename: 'v_player_damage_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_damage_var_pop_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_damage_var_samp_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_damage_variance_fields {
    avg_damage_per_round: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    total_damage: (Scalars['Float'] | null)
    total_rounds: (Scalars['Float'] | null)
    __typename: 'v_player_damage_variance_fields'
}


/** columns and relationships of "v_player_elo" */
export interface v_player_elo {
    actual_score: (Scalars['float8'] | null)
    assists: (Scalars['Int'] | null)
    current_elo: (Scalars['Int'] | null)
    damage: (Scalars['Int'] | null)
    damage_percent: (Scalars['float8'] | null)
    deaths: (Scalars['Int'] | null)
    elo_change: (Scalars['Int'] | null)
    expected_score: (Scalars['float8'] | null)
    k_factor: (Scalars['Int'] | null)
    kda: (Scalars['float8'] | null)
    kills: (Scalars['Int'] | null)
    match_created_at: (Scalars['timestamptz'] | null)
    match_id: (Scalars['uuid'] | null)
    match_result: (Scalars['String'] | null)
    opponent_team_elo_avg: (Scalars['float8'] | null)
    performance_multiplier: (Scalars['float8'] | null)
    player_name: (Scalars['String'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    player_team_elo_avg: (Scalars['float8'] | null)
    team_avg_kda: (Scalars['float8'] | null)
    updated_elo: (Scalars['Int'] | null)
    __typename: 'v_player_elo'
}


/** aggregated selection of "v_player_elo" */
export interface v_player_elo_aggregate {
    aggregate: (v_player_elo_aggregate_fields | null)
    nodes: v_player_elo[]
    __typename: 'v_player_elo_aggregate'
}


/** aggregate fields of "v_player_elo" */
export interface v_player_elo_aggregate_fields {
    avg: (v_player_elo_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_elo_max_fields | null)
    min: (v_player_elo_min_fields | null)
    stddev: (v_player_elo_stddev_fields | null)
    stddev_pop: (v_player_elo_stddev_pop_fields | null)
    stddev_samp: (v_player_elo_stddev_samp_fields | null)
    sum: (v_player_elo_sum_fields | null)
    var_pop: (v_player_elo_var_pop_fields | null)
    var_samp: (v_player_elo_var_samp_fields | null)
    variance: (v_player_elo_variance_fields | null)
    __typename: 'v_player_elo_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_elo_avg_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_avg_fields'
}


/** aggregate max on columns */
export interface v_player_elo_max_fields {
    actual_score: (Scalars['float8'] | null)
    assists: (Scalars['Int'] | null)
    current_elo: (Scalars['Int'] | null)
    damage: (Scalars['Int'] | null)
    damage_percent: (Scalars['float8'] | null)
    deaths: (Scalars['Int'] | null)
    elo_change: (Scalars['Int'] | null)
    expected_score: (Scalars['float8'] | null)
    k_factor: (Scalars['Int'] | null)
    kda: (Scalars['float8'] | null)
    kills: (Scalars['Int'] | null)
    match_created_at: (Scalars['timestamptz'] | null)
    match_id: (Scalars['uuid'] | null)
    match_result: (Scalars['String'] | null)
    opponent_team_elo_avg: (Scalars['float8'] | null)
    performance_multiplier: (Scalars['float8'] | null)
    player_name: (Scalars['String'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    player_team_elo_avg: (Scalars['float8'] | null)
    team_avg_kda: (Scalars['float8'] | null)
    updated_elo: (Scalars['Int'] | null)
    __typename: 'v_player_elo_max_fields'
}


/** aggregate min on columns */
export interface v_player_elo_min_fields {
    actual_score: (Scalars['float8'] | null)
    assists: (Scalars['Int'] | null)
    current_elo: (Scalars['Int'] | null)
    damage: (Scalars['Int'] | null)
    damage_percent: (Scalars['float8'] | null)
    deaths: (Scalars['Int'] | null)
    elo_change: (Scalars['Int'] | null)
    expected_score: (Scalars['float8'] | null)
    k_factor: (Scalars['Int'] | null)
    kda: (Scalars['float8'] | null)
    kills: (Scalars['Int'] | null)
    match_created_at: (Scalars['timestamptz'] | null)
    match_id: (Scalars['uuid'] | null)
    match_result: (Scalars['String'] | null)
    opponent_team_elo_avg: (Scalars['float8'] | null)
    performance_multiplier: (Scalars['float8'] | null)
    player_name: (Scalars['String'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    player_team_elo_avg: (Scalars['float8'] | null)
    team_avg_kda: (Scalars['float8'] | null)
    updated_elo: (Scalars['Int'] | null)
    __typename: 'v_player_elo_min_fields'
}


/** select columns of table "v_player_elo" */
export type v_player_elo_select_column = 'actual_score' | 'assists' | 'current_elo' | 'damage' | 'damage_percent' | 'deaths' | 'elo_change' | 'expected_score' | 'k_factor' | 'kda' | 'kills' | 'match_created_at' | 'match_id' | 'match_result' | 'opponent_team_elo_avg' | 'performance_multiplier' | 'player_name' | 'player_steam_id' | 'player_team_elo_avg' | 'team_avg_kda' | 'updated_elo'


/** aggregate stddev on columns */
export interface v_player_elo_stddev_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_elo_stddev_pop_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_elo_stddev_samp_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_elo_sum_fields {
    actual_score: (Scalars['float8'] | null)
    assists: (Scalars['Int'] | null)
    current_elo: (Scalars['Int'] | null)
    damage: (Scalars['Int'] | null)
    damage_percent: (Scalars['float8'] | null)
    deaths: (Scalars['Int'] | null)
    elo_change: (Scalars['Int'] | null)
    expected_score: (Scalars['float8'] | null)
    k_factor: (Scalars['Int'] | null)
    kda: (Scalars['float8'] | null)
    kills: (Scalars['Int'] | null)
    opponent_team_elo_avg: (Scalars['float8'] | null)
    performance_multiplier: (Scalars['float8'] | null)
    player_steam_id: (Scalars['bigint'] | null)
    player_team_elo_avg: (Scalars['float8'] | null)
    team_avg_kda: (Scalars['float8'] | null)
    updated_elo: (Scalars['Int'] | null)
    __typename: 'v_player_elo_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_elo_var_pop_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_elo_var_samp_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_elo_variance_fields {
    actual_score: (Scalars['Float'] | null)
    assists: (Scalars['Float'] | null)
    current_elo: (Scalars['Float'] | null)
    damage: (Scalars['Float'] | null)
    damage_percent: (Scalars['Float'] | null)
    deaths: (Scalars['Float'] | null)
    elo_change: (Scalars['Float'] | null)
    expected_score: (Scalars['Float'] | null)
    k_factor: (Scalars['Float'] | null)
    kda: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    opponent_team_elo_avg: (Scalars['Float'] | null)
    performance_multiplier: (Scalars['Float'] | null)
    player_steam_id: (Scalars['Float'] | null)
    player_team_elo_avg: (Scalars['Float'] | null)
    team_avg_kda: (Scalars['Float'] | null)
    updated_elo: (Scalars['Float'] | null)
    __typename: 'v_player_elo_variance_fields'
}


/** columns and relationships of "v_player_map_losses" */
export interface v_player_map_losses {
    /** An object relationship */
    map: (maps | null)
    map_id: (Scalars['uuid'] | null)
    /** An object relationship */
    match: (matches | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_losses'
}


/** aggregated selection of "v_player_map_losses" */
export interface v_player_map_losses_aggregate {
    aggregate: (v_player_map_losses_aggregate_fields | null)
    nodes: v_player_map_losses[]
    __typename: 'v_player_map_losses_aggregate'
}


/** aggregate fields of "v_player_map_losses" */
export interface v_player_map_losses_aggregate_fields {
    avg: (v_player_map_losses_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_map_losses_max_fields | null)
    min: (v_player_map_losses_min_fields | null)
    stddev: (v_player_map_losses_stddev_fields | null)
    stddev_pop: (v_player_map_losses_stddev_pop_fields | null)
    stddev_samp: (v_player_map_losses_stddev_samp_fields | null)
    sum: (v_player_map_losses_sum_fields | null)
    var_pop: (v_player_map_losses_var_pop_fields | null)
    var_samp: (v_player_map_losses_var_samp_fields | null)
    variance: (v_player_map_losses_variance_fields | null)
    __typename: 'v_player_map_losses_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_map_losses_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_avg_fields'
}


/** aggregate max on columns */
export interface v_player_map_losses_max_fields {
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_losses_max_fields'
}


/** aggregate min on columns */
export interface v_player_map_losses_min_fields {
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_losses_min_fields'
}


/** select columns of table "v_player_map_losses" */
export type v_player_map_losses_select_column = 'map_id' | 'match_id' | 'started_at' | 'steam_id'


/** aggregate stddev on columns */
export interface v_player_map_losses_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_map_losses_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_map_losses_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_map_losses_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_losses_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_map_losses_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_map_losses_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_map_losses_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_losses_variance_fields'
}


/** columns and relationships of "v_player_map_wins" */
export interface v_player_map_wins {
    /** An object relationship */
    map: (maps | null)
    map_id: (Scalars['uuid'] | null)
    /** An object relationship */
    match: (matches | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_wins'
}


/** aggregated selection of "v_player_map_wins" */
export interface v_player_map_wins_aggregate {
    aggregate: (v_player_map_wins_aggregate_fields | null)
    nodes: v_player_map_wins[]
    __typename: 'v_player_map_wins_aggregate'
}


/** aggregate fields of "v_player_map_wins" */
export interface v_player_map_wins_aggregate_fields {
    avg: (v_player_map_wins_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_map_wins_max_fields | null)
    min: (v_player_map_wins_min_fields | null)
    stddev: (v_player_map_wins_stddev_fields | null)
    stddev_pop: (v_player_map_wins_stddev_pop_fields | null)
    stddev_samp: (v_player_map_wins_stddev_samp_fields | null)
    sum: (v_player_map_wins_sum_fields | null)
    var_pop: (v_player_map_wins_var_pop_fields | null)
    var_samp: (v_player_map_wins_var_samp_fields | null)
    variance: (v_player_map_wins_variance_fields | null)
    __typename: 'v_player_map_wins_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_map_wins_avg_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_avg_fields'
}


/** aggregate max on columns */
export interface v_player_map_wins_max_fields {
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_wins_max_fields'
}


/** aggregate min on columns */
export interface v_player_map_wins_min_fields {
    map_id: (Scalars['uuid'] | null)
    match_id: (Scalars['uuid'] | null)
    started_at: (Scalars['timestamptz'] | null)
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_wins_min_fields'
}


/** select columns of table "v_player_map_wins" */
export type v_player_map_wins_select_column = 'map_id' | 'match_id' | 'started_at' | 'steam_id'


/** aggregate stddev on columns */
export interface v_player_map_wins_stddev_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_map_wins_stddev_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_map_wins_stddev_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_map_wins_sum_fields {
    steam_id: (Scalars['bigint'] | null)
    __typename: 'v_player_map_wins_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_map_wins_var_pop_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_map_wins_var_samp_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_map_wins_variance_fields {
    steam_id: (Scalars['Float'] | null)
    __typename: 'v_player_map_wins_variance_fields'
}


/** columns and relationships of "v_player_multi_kills" */
export interface v_player_multi_kills {
    attacker_steam_id: (Scalars['bigint'] | null)
    kills: (Scalars['bigint'] | null)
    match_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'v_player_multi_kills'
}


/** aggregated selection of "v_player_multi_kills" */
export interface v_player_multi_kills_aggregate {
    aggregate: (v_player_multi_kills_aggregate_fields | null)
    nodes: v_player_multi_kills[]
    __typename: 'v_player_multi_kills_aggregate'
}


/** aggregate fields of "v_player_multi_kills" */
export interface v_player_multi_kills_aggregate_fields {
    avg: (v_player_multi_kills_avg_fields | null)
    count: Scalars['Int']
    max: (v_player_multi_kills_max_fields | null)
    min: (v_player_multi_kills_min_fields | null)
    stddev: (v_player_multi_kills_stddev_fields | null)
    stddev_pop: (v_player_multi_kills_stddev_pop_fields | null)
    stddev_samp: (v_player_multi_kills_stddev_samp_fields | null)
    sum: (v_player_multi_kills_sum_fields | null)
    var_pop: (v_player_multi_kills_var_pop_fields | null)
    var_samp: (v_player_multi_kills_var_samp_fields | null)
    variance: (v_player_multi_kills_variance_fields | null)
    __typename: 'v_player_multi_kills_aggregate_fields'
}


/** aggregate avg on columns */
export interface v_player_multi_kills_avg_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_avg_fields'
}


/** aggregate max on columns */
export interface v_player_multi_kills_max_fields {
    attacker_steam_id: (Scalars['bigint'] | null)
    kills: (Scalars['bigint'] | null)
    match_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'v_player_multi_kills_max_fields'
}


/** aggregate min on columns */
export interface v_player_multi_kills_min_fields {
    attacker_steam_id: (Scalars['bigint'] | null)
    kills: (Scalars['bigint'] | null)
    match_id: (Scalars['uuid'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'v_player_multi_kills_min_fields'
}


/** select columns of table "v_player_multi_kills" */
export type v_player_multi_kills_select_column = 'attacker_steam_id' | 'kills' | 'match_id' | 'round'


/** aggregate stddev on columns */
export interface v_player_multi_kills_stddev_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_stddev_fields'
}


/** aggregate stddev_pop on columns */
export interface v_player_multi_kills_stddev_pop_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_stddev_pop_fields'
}


/** aggregate stddev_samp on columns */
export interface v_player_multi_kills_stddev_samp_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_stddev_samp_fields'
}


/** aggregate sum on columns */
export interface v_player_multi_kills_sum_fields {
    attacker_steam_id: (Scalars['bigint'] | null)
    kills: (Scalars['bigint'] | null)
    round: (Scalars['Int'] | null)
    __typename: 'v_player_multi_kills_sum_fields'
}


/** aggregate var_pop on columns */
export interface v_player_multi_kills_var_pop_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_var_pop_fields'
}


/** aggregate var_samp on columns */
export interface v_player_multi_kills_var_samp_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_var_samp_fields'
}


/** aggregate variance on columns */
export interface v_player_multi_kills_variance_fields {
    attacker_steam_id: (Scalars['Float'] | null)
    kills: (Scalars['Float'] | null)
    round: (Scalars['Float'] | null)
    __typename: 'v_player_multi_kills_variance_fields'
}


/** columns and relationships of "v_pool_maps" */
export interface v_pool_maps {
    active_pool: (Scalars['Boolean'] | null)
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    /** An object relationship */
    map_pool: (map_pools | null)
    map_pool_id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    type: (Scalars['String'] | null)
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'v_pool_maps'
}


/** aggregated selection of "v_pool_maps" */
export interface v_pool_maps_aggregate {
    aggregate: (v_pool_maps_aggregate_fields | null)
    nodes: v_pool_maps[]
    __typename: 'v_pool_maps_aggregate'
}


/** aggregate fields of "v_pool_maps" */
export interface v_pool_maps_aggregate_fields {
    count: Scalars['Int']
    max: (v_pool_maps_max_fields | null)
    min: (v_pool_maps_min_fields | null)
    __typename: 'v_pool_maps_aggregate_fields'
}


/** aggregate max on columns */
export interface v_pool_maps_max_fields {
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    type: (Scalars['String'] | null)
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'v_pool_maps_max_fields'
}


/** aggregate min on columns */
export interface v_pool_maps_min_fields {
    id: (Scalars['uuid'] | null)
    label: (Scalars['String'] | null)
    map_pool_id: (Scalars['uuid'] | null)
    name: (Scalars['String'] | null)
    patch: (Scalars['String'] | null)
    poster: (Scalars['String'] | null)
    type: (Scalars['String'] | null)
    workshop_map_id: (Scalars['String'] | null)
    __typename: 'v_pool_maps_min_fields'
}


/** response of any mutation on the table "v_pool_maps" */
export interface v_pool_maps_mutation_response {
    /** number of rows affected by the mutation */
    affected_rows: Scalars['Int']
    /** data from the rows affected by the mutation */
    returning: v_pool_maps[]
    __typename: 'v_pool_maps_mutation_response'
}


/** select columns of table "v_pool_maps" */
export type v_pool_maps_select_column = 'active_pool' | 'id' | 'label' | 'map_pool_id' | 'name' | 'patch' | 'poster' | 'type' | 'workshop_map_id'


/** select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps" */
export type v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns = 'active_pool'


/** select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps" */
export type v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns = 'active_pool'

export type Query = query_root
export type Mutation = mutation_root
export type Subscription = subscription_root


/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export interface Boolean_comparison_exp {_eq?: (Scalars['Boolean'] | null),_gt?: (Scalars['Boolean'] | null),_gte?: (Scalars['Boolean'] | null),_in?: (Scalars['Boolean'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['Boolean'] | null),_lte?: (Scalars['Boolean'] | null),_neq?: (Scalars['Boolean'] | null),_nin?: (Scalars['Boolean'][] | null)}

export interface CpuStatGenqlSelection{
    time?: boolean | number
    total?: boolean | number
    used?: boolean | number
    window?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export interface Int_comparison_exp {_eq?: (Scalars['Int'] | null),_gt?: (Scalars['Int'] | null),_gte?: (Scalars['Int'] | null),_in?: (Scalars['Int'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['Int'] | null),_lte?: (Scalars['Int'] | null),_neq?: (Scalars['Int'] | null),_nin?: (Scalars['Int'][] | null)}

export interface MeResponseGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    discord_id?: boolean | number
    language?: boolean | number
    name?: boolean | number
    player?: playersGenqlSelection
    profile_url?: boolean | number
    role?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface MemoryStatGenqlSelection{
    time?: boolean | number
    total?: boolean | number
    used?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NodeStatsGenqlSelection{
    cpu?: CpuStatGenqlSelection
    memory?: MemoryStatGenqlSelection
    node?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface PodStatsGenqlSelection{
    cpu?: CpuStatGenqlSelection
    memory?: MemoryStatGenqlSelection
    name?: boolean | number
    node?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SetupGameServeOutputGenqlSelection{
    link?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export interface String_array_comparison_exp {
/** is the array contained in the given array value */
_contained_in?: (Scalars['String'][] | null),
/** does the array contain the given value */
_contains?: (Scalars['String'][] | null),_eq?: (Scalars['String'][] | null),_gt?: (Scalars['String'][] | null),_gte?: (Scalars['String'][] | null),_in?: (Scalars['String'][][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['String'][] | null),_lte?: (Scalars['String'][] | null),_neq?: (Scalars['String'][] | null),_nin?: (Scalars['String'][][] | null)}


/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export interface String_comparison_exp {_eq?: (Scalars['String'] | null),_gt?: (Scalars['String'] | null),_gte?: (Scalars['String'] | null),
/** does the column match the given case-insensitive pattern */
_ilike?: (Scalars['String'] | null),_in?: (Scalars['String'][] | null),
/** does the column match the given POSIX regular expression, case insensitive */
_iregex?: (Scalars['String'] | null),_is_null?: (Scalars['Boolean'] | null),
/** does the column match the given pattern */
_like?: (Scalars['String'] | null),_lt?: (Scalars['String'] | null),_lte?: (Scalars['String'] | null),_neq?: (Scalars['String'] | null),
/** does the column NOT match the given case-insensitive pattern */
_nilike?: (Scalars['String'] | null),_nin?: (Scalars['String'][] | null),
/** does the column NOT match the given POSIX regular expression, case insensitive */
_niregex?: (Scalars['String'] | null),
/** does the column NOT match the given pattern */
_nlike?: (Scalars['String'] | null),
/** does the column NOT match the given POSIX regular expression, case sensitive */
_nregex?: (Scalars['String'] | null),
/** does the column NOT match the given SQL regular expression */
_nsimilar?: (Scalars['String'] | null),
/** does the column match the given POSIX regular expression, case sensitive */
_regex?: (Scalars['String'] | null),
/** does the column match the given SQL regular expression */
_similar?: (Scalars['String'] | null)}

export interface SuccessOutputGenqlSelection{
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TelemetryStatsGenqlSelection{
    online?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "_map_pool" */
export interface _map_poolGenqlSelection{
    map_id?: boolean | number
    map_pool_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "_map_pool" */
export interface _map_pool_aggregateGenqlSelection{
    aggregate?: _map_pool_aggregate_fieldsGenqlSelection
    nodes?: _map_poolGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "_map_pool" */
export interface _map_pool_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (_map_pool_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: _map_pool_max_fieldsGenqlSelection
    min?: _map_pool_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'. */
export interface _map_pool_bool_exp {_and?: (_map_pool_bool_exp[] | null),_not?: (_map_pool_bool_exp | null),_or?: (_map_pool_bool_exp[] | null),map_id?: (uuid_comparison_exp | null),map_pool_id?: (uuid_comparison_exp | null)}


/** input type for inserting data into table "_map_pool" */
export interface _map_pool_insert_input {map_id?: (Scalars['uuid'] | null),map_pool_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface _map_pool_max_fieldsGenqlSelection{
    map_id?: boolean | number
    map_pool_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface _map_pool_min_fieldsGenqlSelection{
    map_id?: boolean | number
    map_pool_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "_map_pool" */
export interface _map_pool_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: _map_poolGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "_map_pool" */
export interface _map_pool_on_conflict {constraint: _map_pool_constraint,update_columns?: _map_pool_update_column[],where?: (_map_pool_bool_exp | null)}


/** Ordering options when selecting data from "_map_pool". */
export interface _map_pool_order_by {map_id?: (order_by | null),map_pool_id?: (order_by | null)}


/** primary key columns input for table: _map_pool */
export interface _map_pool_pk_columns_input {map_id: Scalars['uuid'],map_pool_id: Scalars['uuid']}


/** input type for updating data in table "_map_pool" */
export interface _map_pool_set_input {map_id?: (Scalars['uuid'] | null),map_pool_id?: (Scalars['uuid'] | null)}


/** Streaming cursor of the table "_map_pool" */
export interface _map_pool_stream_cursor_input {
/** Stream column input with initial value */
initial_value: _map_pool_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface _map_pool_stream_cursor_value_input {map_id?: (Scalars['uuid'] | null),map_pool_id?: (Scalars['uuid'] | null)}

export interface _map_pool_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (_map_pool_set_input | null),
/** filter the rows which have to be updated */
where: _map_pool_bool_exp}


/** columns and relationships of "abandoned_matches" */
export interface abandoned_matchesGenqlSelection{
    abandoned_at?: boolean | number
    id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "abandoned_matches" */
export interface abandoned_matches_aggregateGenqlSelection{
    aggregate?: abandoned_matches_aggregate_fieldsGenqlSelection
    nodes?: abandoned_matchesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface abandoned_matches_aggregate_bool_exp {count?: (abandoned_matches_aggregate_bool_exp_count | null)}

export interface abandoned_matches_aggregate_bool_exp_count {arguments?: (abandoned_matches_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (abandoned_matches_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "abandoned_matches" */
export interface abandoned_matches_aggregate_fieldsGenqlSelection{
    avg?: abandoned_matches_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (abandoned_matches_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: abandoned_matches_max_fieldsGenqlSelection
    min?: abandoned_matches_min_fieldsGenqlSelection
    stddev?: abandoned_matches_stddev_fieldsGenqlSelection
    stddev_pop?: abandoned_matches_stddev_pop_fieldsGenqlSelection
    stddev_samp?: abandoned_matches_stddev_samp_fieldsGenqlSelection
    sum?: abandoned_matches_sum_fieldsGenqlSelection
    var_pop?: abandoned_matches_var_pop_fieldsGenqlSelection
    var_samp?: abandoned_matches_var_samp_fieldsGenqlSelection
    variance?: abandoned_matches_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "abandoned_matches" */
export interface abandoned_matches_aggregate_order_by {avg?: (abandoned_matches_avg_order_by | null),count?: (order_by | null),max?: (abandoned_matches_max_order_by | null),min?: (abandoned_matches_min_order_by | null),stddev?: (abandoned_matches_stddev_order_by | null),stddev_pop?: (abandoned_matches_stddev_pop_order_by | null),stddev_samp?: (abandoned_matches_stddev_samp_order_by | null),sum?: (abandoned_matches_sum_order_by | null),var_pop?: (abandoned_matches_var_pop_order_by | null),var_samp?: (abandoned_matches_var_samp_order_by | null),variance?: (abandoned_matches_variance_order_by | null)}


/** input type for inserting array relation for remote table "abandoned_matches" */
export interface abandoned_matches_arr_rel_insert_input {data: abandoned_matches_insert_input[],
/** upsert condition */
on_conflict?: (abandoned_matches_on_conflict | null)}


/** aggregate avg on columns */
export interface abandoned_matches_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "abandoned_matches" */
export interface abandoned_matches_avg_order_by {steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "abandoned_matches". All fields are combined with a logical 'AND'. */
export interface abandoned_matches_bool_exp {_and?: (abandoned_matches_bool_exp[] | null),_not?: (abandoned_matches_bool_exp | null),_or?: (abandoned_matches_bool_exp[] | null),abandoned_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "abandoned_matches" */
export interface abandoned_matches_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "abandoned_matches" */
export interface abandoned_matches_insert_input {abandoned_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface abandoned_matches_max_fieldsGenqlSelection{
    abandoned_at?: boolean | number
    id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "abandoned_matches" */
export interface abandoned_matches_max_order_by {abandoned_at?: (order_by | null),id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface abandoned_matches_min_fieldsGenqlSelection{
    abandoned_at?: boolean | number
    id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "abandoned_matches" */
export interface abandoned_matches_min_order_by {abandoned_at?: (order_by | null),id?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "abandoned_matches" */
export interface abandoned_matches_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: abandoned_matchesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "abandoned_matches" */
export interface abandoned_matches_on_conflict {constraint: abandoned_matches_constraint,update_columns?: abandoned_matches_update_column[],where?: (abandoned_matches_bool_exp | null)}


/** Ordering options when selecting data from "abandoned_matches". */
export interface abandoned_matches_order_by {abandoned_at?: (order_by | null),id?: (order_by | null),steam_id?: (order_by | null)}


/** primary key columns input for table: abandoned_matches */
export interface abandoned_matches_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "abandoned_matches" */
export interface abandoned_matches_set_input {abandoned_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface abandoned_matches_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "abandoned_matches" */
export interface abandoned_matches_stddev_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface abandoned_matches_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "abandoned_matches" */
export interface abandoned_matches_stddev_pop_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface abandoned_matches_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "abandoned_matches" */
export interface abandoned_matches_stddev_samp_order_by {steam_id?: (order_by | null)}


/** Streaming cursor of the table "abandoned_matches" */
export interface abandoned_matches_stream_cursor_input {
/** Stream column input with initial value */
initial_value: abandoned_matches_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface abandoned_matches_stream_cursor_value_input {abandoned_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface abandoned_matches_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "abandoned_matches" */
export interface abandoned_matches_sum_order_by {steam_id?: (order_by | null)}

export interface abandoned_matches_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (abandoned_matches_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (abandoned_matches_set_input | null),
/** filter the rows which have to be updated */
where: abandoned_matches_bool_exp}


/** aggregate var_pop on columns */
export interface abandoned_matches_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "abandoned_matches" */
export interface abandoned_matches_var_pop_order_by {steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface abandoned_matches_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "abandoned_matches" */
export interface abandoned_matches_var_samp_order_by {steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface abandoned_matches_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "abandoned_matches" */
export interface abandoned_matches_variance_order_by {steam_id?: (order_by | null)}


/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export interface bigint_comparison_exp {_eq?: (Scalars['bigint'] | null),_gt?: (Scalars['bigint'] | null),_gte?: (Scalars['bigint'] | null),_in?: (Scalars['bigint'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['bigint'] | null),_lte?: (Scalars['bigint'] | null),_neq?: (Scalars['bigint'] | null),_nin?: (Scalars['bigint'][] | null)}


/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
export interface bytea_comparison_exp {_eq?: (Scalars['bytea'] | null),_gt?: (Scalars['bytea'] | null),_gte?: (Scalars['bytea'] | null),_in?: (Scalars['bytea'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['bytea'] | null),_lte?: (Scalars['bytea'] | null),_neq?: (Scalars['bytea'] | null),_nin?: (Scalars['bytea'][] | null)}


/** columns and relationships of "e_friend_status" */
export interface e_friend_statusGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_friend_status" */
export interface e_friend_status_aggregateGenqlSelection{
    aggregate?: e_friend_status_aggregate_fieldsGenqlSelection
    nodes?: e_friend_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_friend_status" */
export interface e_friend_status_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_friend_status_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_friend_status_max_fieldsGenqlSelection
    min?: e_friend_status_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_friend_status". All fields are combined with a logical 'AND'. */
export interface e_friend_status_bool_exp {_and?: (e_friend_status_bool_exp[] | null),_not?: (e_friend_status_bool_exp | null),_or?: (e_friend_status_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_friend_status_enum". All fields are combined with logical 'AND'. */
export interface e_friend_status_enum_comparison_exp {_eq?: (e_friend_status_enum | null),_in?: (e_friend_status_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_friend_status_enum | null),_nin?: (e_friend_status_enum[] | null)}


/** input type for inserting data into table "e_friend_status" */
export interface e_friend_status_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_friend_status_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_friend_status_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_friend_status" */
export interface e_friend_status_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_friend_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_friend_status" */
export interface e_friend_status_obj_rel_insert_input {data: e_friend_status_insert_input,
/** upsert condition */
on_conflict?: (e_friend_status_on_conflict | null)}


/** on_conflict condition type for table "e_friend_status" */
export interface e_friend_status_on_conflict {constraint: e_friend_status_constraint,update_columns?: e_friend_status_update_column[],where?: (e_friend_status_bool_exp | null)}


/** Ordering options when selecting data from "e_friend_status". */
export interface e_friend_status_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_friend_status */
export interface e_friend_status_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_friend_status" */
export interface e_friend_status_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_friend_status" */
export interface e_friend_status_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_friend_status_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_friend_status_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_friend_status_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_friend_status_set_input | null),
/** filter the rows which have to be updated */
where: e_friend_status_bool_exp}


/** columns and relationships of "e_game_server_node_statuses" */
export interface e_game_server_node_statusesGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_aggregateGenqlSelection{
    aggregate?: e_game_server_node_statuses_aggregate_fieldsGenqlSelection
    nodes?: e_game_server_node_statusesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_game_server_node_statuses_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_game_server_node_statuses_max_fieldsGenqlSelection
    min?: e_game_server_node_statuses_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_game_server_node_statuses". All fields are combined with a logical 'AND'. */
export interface e_game_server_node_statuses_bool_exp {_and?: (e_game_server_node_statuses_bool_exp[] | null),_not?: (e_game_server_node_statuses_bool_exp | null),_or?: (e_game_server_node_statuses_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_game_server_node_statuses_enum". All fields are combined with logical 'AND'. */
export interface e_game_server_node_statuses_enum_comparison_exp {_eq?: (e_game_server_node_statuses_enum | null),_in?: (e_game_server_node_statuses_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_game_server_node_statuses_enum | null),_nin?: (e_game_server_node_statuses_enum[] | null)}


/** input type for inserting data into table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_game_server_node_statuses_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_game_server_node_statuses_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_game_server_node_statusesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_obj_rel_insert_input {data: e_game_server_node_statuses_insert_input,
/** upsert condition */
on_conflict?: (e_game_server_node_statuses_on_conflict | null)}


/** on_conflict condition type for table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_on_conflict {constraint: e_game_server_node_statuses_constraint,update_columns?: e_game_server_node_statuses_update_column[],where?: (e_game_server_node_statuses_bool_exp | null)}


/** Ordering options when selecting data from "e_game_server_node_statuses". */
export interface e_game_server_node_statuses_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_game_server_node_statuses */
export interface e_game_server_node_statuses_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_game_server_node_statuses" */
export interface e_game_server_node_statuses_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_game_server_node_statuses_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_game_server_node_statuses_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_game_server_node_statuses_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_game_server_node_statuses_set_input | null),
/** filter the rows which have to be updated */
where: e_game_server_node_statuses_bool_exp}


/** columns and relationships of "e_lobby_access" */
export interface e_lobby_accessGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_lobby_access" */
export interface e_lobby_access_aggregateGenqlSelection{
    aggregate?: e_lobby_access_aggregate_fieldsGenqlSelection
    nodes?: e_lobby_accessGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_lobby_access" */
export interface e_lobby_access_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_lobby_access_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_lobby_access_max_fieldsGenqlSelection
    min?: e_lobby_access_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_lobby_access". All fields are combined with a logical 'AND'. */
export interface e_lobby_access_bool_exp {_and?: (e_lobby_access_bool_exp[] | null),_not?: (e_lobby_access_bool_exp | null),_or?: (e_lobby_access_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_lobby_access_enum". All fields are combined with logical 'AND'. */
export interface e_lobby_access_enum_comparison_exp {_eq?: (e_lobby_access_enum | null),_in?: (e_lobby_access_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_lobby_access_enum | null),_nin?: (e_lobby_access_enum[] | null)}


/** input type for inserting data into table "e_lobby_access" */
export interface e_lobby_access_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_lobby_access_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_lobby_access_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_lobby_access" */
export interface e_lobby_access_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_lobby_accessGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_lobby_access" */
export interface e_lobby_access_obj_rel_insert_input {data: e_lobby_access_insert_input,
/** upsert condition */
on_conflict?: (e_lobby_access_on_conflict | null)}


/** on_conflict condition type for table "e_lobby_access" */
export interface e_lobby_access_on_conflict {constraint: e_lobby_access_constraint,update_columns?: e_lobby_access_update_column[],where?: (e_lobby_access_bool_exp | null)}


/** Ordering options when selecting data from "e_lobby_access". */
export interface e_lobby_access_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_lobby_access */
export interface e_lobby_access_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_lobby_access" */
export interface e_lobby_access_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_lobby_access" */
export interface e_lobby_access_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_lobby_access_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_lobby_access_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_lobby_access_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_lobby_access_set_input | null),
/** filter the rows which have to be updated */
where: e_lobby_access_bool_exp}


/** columns and relationships of "e_lobby_player_status" */
export interface e_lobby_player_statusGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_lobby_player_status" */
export interface e_lobby_player_status_aggregateGenqlSelection{
    aggregate?: e_lobby_player_status_aggregate_fieldsGenqlSelection
    nodes?: e_lobby_player_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_lobby_player_status" */
export interface e_lobby_player_status_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_lobby_player_status_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_lobby_player_status_max_fieldsGenqlSelection
    min?: e_lobby_player_status_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_lobby_player_status". All fields are combined with a logical 'AND'. */
export interface e_lobby_player_status_bool_exp {_and?: (e_lobby_player_status_bool_exp[] | null),_not?: (e_lobby_player_status_bool_exp | null),_or?: (e_lobby_player_status_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_lobby_player_status_enum". All fields are combined with logical 'AND'. */
export interface e_lobby_player_status_enum_comparison_exp {_eq?: (e_lobby_player_status_enum | null),_in?: (e_lobby_player_status_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_lobby_player_status_enum | null),_nin?: (e_lobby_player_status_enum[] | null)}


/** input type for inserting data into table "e_lobby_player_status" */
export interface e_lobby_player_status_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_lobby_player_status_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_lobby_player_status_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_lobby_player_status" */
export interface e_lobby_player_status_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_lobby_player_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_lobby_player_status" */
export interface e_lobby_player_status_on_conflict {constraint: e_lobby_player_status_constraint,update_columns?: e_lobby_player_status_update_column[],where?: (e_lobby_player_status_bool_exp | null)}


/** Ordering options when selecting data from "e_lobby_player_status". */
export interface e_lobby_player_status_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_lobby_player_status */
export interface e_lobby_player_status_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_lobby_player_status" */
export interface e_lobby_player_status_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_lobby_player_status" */
export interface e_lobby_player_status_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_lobby_player_status_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_lobby_player_status_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_lobby_player_status_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_lobby_player_status_set_input | null),
/** filter the rows which have to be updated */
where: e_lobby_player_status_bool_exp}


/** columns and relationships of "e_map_pool_types" */
export interface e_map_pool_typesGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_map_pool_types" */
export interface e_map_pool_types_aggregateGenqlSelection{
    aggregate?: e_map_pool_types_aggregate_fieldsGenqlSelection
    nodes?: e_map_pool_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_map_pool_types" */
export interface e_map_pool_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_map_pool_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_map_pool_types_max_fieldsGenqlSelection
    min?: e_map_pool_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_map_pool_types". All fields are combined with a logical 'AND'. */
export interface e_map_pool_types_bool_exp {_and?: (e_map_pool_types_bool_exp[] | null),_not?: (e_map_pool_types_bool_exp | null),_or?: (e_map_pool_types_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_map_pool_types_enum". All fields are combined with logical 'AND'. */
export interface e_map_pool_types_enum_comparison_exp {_eq?: (e_map_pool_types_enum | null),_in?: (e_map_pool_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_map_pool_types_enum | null),_nin?: (e_map_pool_types_enum[] | null)}


/** input type for inserting data into table "e_map_pool_types" */
export interface e_map_pool_types_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_map_pool_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_map_pool_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_map_pool_types" */
export interface e_map_pool_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_map_pool_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_map_pool_types" */
export interface e_map_pool_types_obj_rel_insert_input {data: e_map_pool_types_insert_input,
/** upsert condition */
on_conflict?: (e_map_pool_types_on_conflict | null)}


/** on_conflict condition type for table "e_map_pool_types" */
export interface e_map_pool_types_on_conflict {constraint: e_map_pool_types_constraint,update_columns?: e_map_pool_types_update_column[],where?: (e_map_pool_types_bool_exp | null)}


/** Ordering options when selecting data from "e_map_pool_types". */
export interface e_map_pool_types_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_map_pool_types */
export interface e_map_pool_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_map_pool_types" */
export interface e_map_pool_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_map_pool_types" */
export interface e_map_pool_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_map_pool_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_map_pool_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_map_pool_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_map_pool_types_set_input | null),
/** filter the rows which have to be updated */
where: e_map_pool_types_bool_exp}


/** columns and relationships of "e_match_map_status" */
export interface e_match_map_statusGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    match_maps?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_maps_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_match_map_status" */
export interface e_match_map_status_aggregateGenqlSelection{
    aggregate?: e_match_map_status_aggregate_fieldsGenqlSelection
    nodes?: e_match_map_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_match_map_status" */
export interface e_match_map_status_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_match_map_status_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_match_map_status_max_fieldsGenqlSelection
    min?: e_match_map_status_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'. */
export interface e_match_map_status_bool_exp {_and?: (e_match_map_status_bool_exp[] | null),_not?: (e_match_map_status_bool_exp | null),_or?: (e_match_map_status_bool_exp[] | null),description?: (String_comparison_exp | null),match_maps?: (match_maps_bool_exp | null),match_maps_aggregate?: (match_maps_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'. */
export interface e_match_map_status_enum_comparison_exp {_eq?: (e_match_map_status_enum | null),_in?: (e_match_map_status_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_match_map_status_enum | null),_nin?: (e_match_map_status_enum[] | null)}


/** input type for inserting data into table "e_match_map_status" */
export interface e_match_map_status_insert_input {description?: (Scalars['String'] | null),match_maps?: (match_maps_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_match_map_status_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_match_map_status_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_match_map_status" */
export interface e_match_map_status_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_match_map_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_match_map_status" */
export interface e_match_map_status_obj_rel_insert_input {data: e_match_map_status_insert_input,
/** upsert condition */
on_conflict?: (e_match_map_status_on_conflict | null)}


/** on_conflict condition type for table "e_match_map_status" */
export interface e_match_map_status_on_conflict {constraint: e_match_map_status_constraint,update_columns?: e_match_map_status_update_column[],where?: (e_match_map_status_bool_exp | null)}


/** Ordering options when selecting data from "e_match_map_status". */
export interface e_match_map_status_order_by {description?: (order_by | null),match_maps_aggregate?: (match_maps_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_match_map_status */
export interface e_match_map_status_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_match_map_status" */
export interface e_match_map_status_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_match_map_status" */
export interface e_match_map_status_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_match_map_status_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_match_map_status_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_match_map_status_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_match_map_status_set_input | null),
/** filter the rows which have to be updated */
where: e_match_map_status_bool_exp}


/** columns and relationships of "e_match_status" */
export interface e_match_statusGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** An aggregate relationship */
    matches_aggregate?: (matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_match_status" */
export interface e_match_status_aggregateGenqlSelection{
    aggregate?: e_match_status_aggregate_fieldsGenqlSelection
    nodes?: e_match_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_match_status" */
export interface e_match_status_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_match_status_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_match_status_max_fieldsGenqlSelection
    min?: e_match_status_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'. */
export interface e_match_status_bool_exp {_and?: (e_match_status_bool_exp[] | null),_not?: (e_match_status_bool_exp | null),_or?: (e_match_status_bool_exp[] | null),description?: (String_comparison_exp | null),matches?: (matches_bool_exp | null),matches_aggregate?: (matches_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'. */
export interface e_match_status_enum_comparison_exp {_eq?: (e_match_status_enum | null),_in?: (e_match_status_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_match_status_enum | null),_nin?: (e_match_status_enum[] | null)}


/** input type for inserting data into table "e_match_status" */
export interface e_match_status_insert_input {description?: (Scalars['String'] | null),matches?: (matches_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_match_status_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_match_status_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_match_status" */
export interface e_match_status_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_match_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_match_status" */
export interface e_match_status_obj_rel_insert_input {data: e_match_status_insert_input,
/** upsert condition */
on_conflict?: (e_match_status_on_conflict | null)}


/** on_conflict condition type for table "e_match_status" */
export interface e_match_status_on_conflict {constraint: e_match_status_constraint,update_columns?: e_match_status_update_column[],where?: (e_match_status_bool_exp | null)}


/** Ordering options when selecting data from "e_match_status". */
export interface e_match_status_order_by {description?: (order_by | null),matches_aggregate?: (matches_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_match_status */
export interface e_match_status_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_match_status" */
export interface e_match_status_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_match_status" */
export interface e_match_status_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_match_status_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_match_status_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_match_status_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_match_status_set_input | null),
/** filter the rows which have to be updated */
where: e_match_status_bool_exp}


/** columns and relationships of "e_match_types" */
export interface e_match_typesGenqlSelection{
    /** An array relationship */
    config?: (match_type_cfgsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** An aggregate relationship */
    config_aggregate?: (match_type_cfgs_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    description?: boolean | number
    /** An array relationship */
    maps?: (mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** An aggregate relationship */
    maps_aggregate?: (maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_match_types" */
export interface e_match_types_aggregateGenqlSelection{
    aggregate?: e_match_types_aggregate_fieldsGenqlSelection
    nodes?: e_match_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_match_types" */
export interface e_match_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_match_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_match_types_max_fieldsGenqlSelection
    min?: e_match_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'. */
export interface e_match_types_bool_exp {_and?: (e_match_types_bool_exp[] | null),_not?: (e_match_types_bool_exp | null),_or?: (e_match_types_bool_exp[] | null),config?: (match_type_cfgs_bool_exp | null),config_aggregate?: (match_type_cfgs_aggregate_bool_exp | null),description?: (String_comparison_exp | null),maps?: (maps_bool_exp | null),maps_aggregate?: (maps_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'. */
export interface e_match_types_enum_comparison_exp {_eq?: (e_match_types_enum | null),_in?: (e_match_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_match_types_enum | null),_nin?: (e_match_types_enum[] | null)}


/** input type for inserting data into table "e_match_types" */
export interface e_match_types_insert_input {config?: (match_type_cfgs_arr_rel_insert_input | null),description?: (Scalars['String'] | null),maps?: (maps_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_match_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_match_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_match_types" */
export interface e_match_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_match_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_match_types" */
export interface e_match_types_obj_rel_insert_input {data: e_match_types_insert_input,
/** upsert condition */
on_conflict?: (e_match_types_on_conflict | null)}


/** on_conflict condition type for table "e_match_types" */
export interface e_match_types_on_conflict {constraint: e_match_types_constraint,update_columns?: e_match_types_update_column[],where?: (e_match_types_bool_exp | null)}


/** Ordering options when selecting data from "e_match_types". */
export interface e_match_types_order_by {config_aggregate?: (match_type_cfgs_aggregate_order_by | null),description?: (order_by | null),maps_aggregate?: (maps_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_match_types */
export interface e_match_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_match_types" */
export interface e_match_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_match_types" */
export interface e_match_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_match_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_match_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_match_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_match_types_set_input | null),
/** filter the rows which have to be updated */
where: e_match_types_bool_exp}


/** columns and relationships of "e_notification_types" */
export interface e_notification_typesGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_notification_types" */
export interface e_notification_types_aggregateGenqlSelection{
    aggregate?: e_notification_types_aggregate_fieldsGenqlSelection
    nodes?: e_notification_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_notification_types" */
export interface e_notification_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_notification_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_notification_types_max_fieldsGenqlSelection
    min?: e_notification_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_notification_types". All fields are combined with a logical 'AND'. */
export interface e_notification_types_bool_exp {_and?: (e_notification_types_bool_exp[] | null),_not?: (e_notification_types_bool_exp | null),_or?: (e_notification_types_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_notification_types_enum". All fields are combined with logical 'AND'. */
export interface e_notification_types_enum_comparison_exp {_eq?: (e_notification_types_enum | null),_in?: (e_notification_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_notification_types_enum | null),_nin?: (e_notification_types_enum[] | null)}


/** input type for inserting data into table "e_notification_types" */
export interface e_notification_types_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_notification_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_notification_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_notification_types" */
export interface e_notification_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_notification_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_notification_types" */
export interface e_notification_types_on_conflict {constraint: e_notification_types_constraint,update_columns?: e_notification_types_update_column[],where?: (e_notification_types_bool_exp | null)}


/** Ordering options when selecting data from "e_notification_types". */
export interface e_notification_types_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_notification_types */
export interface e_notification_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_notification_types" */
export interface e_notification_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_notification_types" */
export interface e_notification_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_notification_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_notification_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_notification_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_notification_types_set_input | null),
/** filter the rows which have to be updated */
where: e_notification_types_bool_exp}


/** columns and relationships of "e_objective_types" */
export interface e_objective_typesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    player_objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    player_objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_objective_types" */
export interface e_objective_types_aggregateGenqlSelection{
    aggregate?: e_objective_types_aggregate_fieldsGenqlSelection
    nodes?: e_objective_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_objective_types" */
export interface e_objective_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_objective_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_objective_types_max_fieldsGenqlSelection
    min?: e_objective_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'. */
export interface e_objective_types_bool_exp {_and?: (e_objective_types_bool_exp[] | null),_not?: (e_objective_types_bool_exp | null),_or?: (e_objective_types_bool_exp[] | null),description?: (String_comparison_exp | null),player_objectives?: (player_objectives_bool_exp | null),player_objectives_aggregate?: (player_objectives_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'. */
export interface e_objective_types_enum_comparison_exp {_eq?: (e_objective_types_enum | null),_in?: (e_objective_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_objective_types_enum | null),_nin?: (e_objective_types_enum[] | null)}


/** input type for inserting data into table "e_objective_types" */
export interface e_objective_types_insert_input {description?: (Scalars['String'] | null),player_objectives?: (player_objectives_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_objective_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_objective_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_objective_types" */
export interface e_objective_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_objective_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_objective_types" */
export interface e_objective_types_on_conflict {constraint: e_objective_types_constraint,update_columns?: e_objective_types_update_column[],where?: (e_objective_types_bool_exp | null)}


/** Ordering options when selecting data from "e_objective_types". */
export interface e_objective_types_order_by {description?: (order_by | null),player_objectives_aggregate?: (player_objectives_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_objective_types */
export interface e_objective_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_objective_types" */
export interface e_objective_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_objective_types" */
export interface e_objective_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_objective_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_objective_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_objective_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_objective_types_set_input | null),
/** filter the rows which have to be updated */
where: e_objective_types_bool_exp}


/** columns and relationships of "e_player_roles" */
export interface e_player_rolesGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_player_roles" */
export interface e_player_roles_aggregateGenqlSelection{
    aggregate?: e_player_roles_aggregate_fieldsGenqlSelection
    nodes?: e_player_rolesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_player_roles" */
export interface e_player_roles_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_player_roles_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_player_roles_max_fieldsGenqlSelection
    min?: e_player_roles_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_player_roles". All fields are combined with a logical 'AND'. */
export interface e_player_roles_bool_exp {_and?: (e_player_roles_bool_exp[] | null),_not?: (e_player_roles_bool_exp | null),_or?: (e_player_roles_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_player_roles_enum". All fields are combined with logical 'AND'. */
export interface e_player_roles_enum_comparison_exp {_eq?: (e_player_roles_enum | null),_in?: (e_player_roles_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_player_roles_enum | null),_nin?: (e_player_roles_enum[] | null)}


/** input type for inserting data into table "e_player_roles" */
export interface e_player_roles_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_player_roles_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_player_roles_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_player_roles" */
export interface e_player_roles_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_player_rolesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_player_roles" */
export interface e_player_roles_on_conflict {constraint: e_player_roles_constraint,update_columns?: e_player_roles_update_column[],where?: (e_player_roles_bool_exp | null)}


/** Ordering options when selecting data from "e_player_roles". */
export interface e_player_roles_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_player_roles */
export interface e_player_roles_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_player_roles" */
export interface e_player_roles_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_player_roles" */
export interface e_player_roles_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_player_roles_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_player_roles_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_player_roles_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_player_roles_set_input | null),
/** filter the rows which have to be updated */
where: e_player_roles_bool_exp}


/** columns and relationships of "e_ready_settings" */
export interface e_ready_settingsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_ready_settings" */
export interface e_ready_settings_aggregateGenqlSelection{
    aggregate?: e_ready_settings_aggregate_fieldsGenqlSelection
    nodes?: e_ready_settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_ready_settings" */
export interface e_ready_settings_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_ready_settings_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_ready_settings_max_fieldsGenqlSelection
    min?: e_ready_settings_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_ready_settings". All fields are combined with a logical 'AND'. */
export interface e_ready_settings_bool_exp {_and?: (e_ready_settings_bool_exp[] | null),_not?: (e_ready_settings_bool_exp | null),_or?: (e_ready_settings_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_ready_settings_enum". All fields are combined with logical 'AND'. */
export interface e_ready_settings_enum_comparison_exp {_eq?: (e_ready_settings_enum | null),_in?: (e_ready_settings_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_ready_settings_enum | null),_nin?: (e_ready_settings_enum[] | null)}


/** input type for inserting data into table "e_ready_settings" */
export interface e_ready_settings_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_ready_settings_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_ready_settings_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_ready_settings" */
export interface e_ready_settings_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_ready_settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_ready_settings" */
export interface e_ready_settings_on_conflict {constraint: e_ready_settings_constraint,update_columns?: e_ready_settings_update_column[],where?: (e_ready_settings_bool_exp | null)}


/** Ordering options when selecting data from "e_ready_settings". */
export interface e_ready_settings_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_ready_settings */
export interface e_ready_settings_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_ready_settings" */
export interface e_ready_settings_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_ready_settings" */
export interface e_ready_settings_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_ready_settings_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_ready_settings_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_ready_settings_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_ready_settings_set_input | null),
/** filter the rows which have to be updated */
where: e_ready_settings_bool_exp}


/** columns and relationships of "e_sanction_types" */
export interface e_sanction_typesGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_sanction_types" */
export interface e_sanction_types_aggregateGenqlSelection{
    aggregate?: e_sanction_types_aggregate_fieldsGenqlSelection
    nodes?: e_sanction_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_sanction_types" */
export interface e_sanction_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_sanction_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_sanction_types_max_fieldsGenqlSelection
    min?: e_sanction_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_sanction_types". All fields are combined with a logical 'AND'. */
export interface e_sanction_types_bool_exp {_and?: (e_sanction_types_bool_exp[] | null),_not?: (e_sanction_types_bool_exp | null),_or?: (e_sanction_types_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_sanction_types_enum". All fields are combined with logical 'AND'. */
export interface e_sanction_types_enum_comparison_exp {_eq?: (e_sanction_types_enum | null),_in?: (e_sanction_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_sanction_types_enum | null),_nin?: (e_sanction_types_enum[] | null)}


/** input type for inserting data into table "e_sanction_types" */
export interface e_sanction_types_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_sanction_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_sanction_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_sanction_types" */
export interface e_sanction_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_sanction_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_sanction_types" */
export interface e_sanction_types_obj_rel_insert_input {data: e_sanction_types_insert_input,
/** upsert condition */
on_conflict?: (e_sanction_types_on_conflict | null)}


/** on_conflict condition type for table "e_sanction_types" */
export interface e_sanction_types_on_conflict {constraint: e_sanction_types_constraint,update_columns?: e_sanction_types_update_column[],where?: (e_sanction_types_bool_exp | null)}


/** Ordering options when selecting data from "e_sanction_types". */
export interface e_sanction_types_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_sanction_types */
export interface e_sanction_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_sanction_types" */
export interface e_sanction_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_sanction_types" */
export interface e_sanction_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_sanction_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_sanction_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_sanction_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_sanction_types_set_input | null),
/** filter the rows which have to be updated */
where: e_sanction_types_bool_exp}


/** columns and relationships of "e_sides" */
export interface e_sidesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    match_map_lineup_1?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_map_lineup_1_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An array relationship */
    match_map_lineup_2?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_map_lineup_2_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_sides" */
export interface e_sides_aggregateGenqlSelection{
    aggregate?: e_sides_aggregate_fieldsGenqlSelection
    nodes?: e_sidesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_sides" */
export interface e_sides_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_sides_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_sides_max_fieldsGenqlSelection
    min?: e_sides_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'. */
export interface e_sides_bool_exp {_and?: (e_sides_bool_exp[] | null),_not?: (e_sides_bool_exp | null),_or?: (e_sides_bool_exp[] | null),description?: (String_comparison_exp | null),match_map_lineup_1?: (match_maps_bool_exp | null),match_map_lineup_1_aggregate?: (match_maps_aggregate_bool_exp | null),match_map_lineup_2?: (match_maps_bool_exp | null),match_map_lineup_2_aggregate?: (match_maps_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'. */
export interface e_sides_enum_comparison_exp {_eq?: (e_sides_enum | null),_in?: (e_sides_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_sides_enum | null),_nin?: (e_sides_enum[] | null)}


/** input type for inserting data into table "e_sides" */
export interface e_sides_insert_input {description?: (Scalars['String'] | null),match_map_lineup_1?: (match_maps_arr_rel_insert_input | null),match_map_lineup_2?: (match_maps_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_sides_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_sides_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_sides" */
export interface e_sides_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_sidesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_sides" */
export interface e_sides_on_conflict {constraint: e_sides_constraint,update_columns?: e_sides_update_column[],where?: (e_sides_bool_exp | null)}


/** Ordering options when selecting data from "e_sides". */
export interface e_sides_order_by {description?: (order_by | null),match_map_lineup_1_aggregate?: (match_maps_aggregate_order_by | null),match_map_lineup_2_aggregate?: (match_maps_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_sides */
export interface e_sides_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_sides" */
export interface e_sides_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_sides" */
export interface e_sides_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_sides_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_sides_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_sides_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_sides_set_input | null),
/** filter the rows which have to be updated */
where: e_sides_bool_exp}


/** columns and relationships of "e_team_roles" */
export interface e_team_rolesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    team_rosters?: (team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    team_rosters_aggregate?: (team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** An array relationship */
    tournament_team_rosters?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_team_rosters_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_team_roles" */
export interface e_team_roles_aggregateGenqlSelection{
    aggregate?: e_team_roles_aggregate_fieldsGenqlSelection
    nodes?: e_team_rolesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_team_roles" */
export interface e_team_roles_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_team_roles_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_team_roles_max_fieldsGenqlSelection
    min?: e_team_roles_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'. */
export interface e_team_roles_bool_exp {_and?: (e_team_roles_bool_exp[] | null),_not?: (e_team_roles_bool_exp | null),_or?: (e_team_roles_bool_exp[] | null),description?: (String_comparison_exp | null),team_rosters?: (team_roster_bool_exp | null),team_rosters_aggregate?: (team_roster_aggregate_bool_exp | null),tournament_team_rosters?: (tournament_team_roster_bool_exp | null),tournament_team_rosters_aggregate?: (tournament_team_roster_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'. */
export interface e_team_roles_enum_comparison_exp {_eq?: (e_team_roles_enum | null),_in?: (e_team_roles_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_team_roles_enum | null),_nin?: (e_team_roles_enum[] | null)}


/** input type for inserting data into table "e_team_roles" */
export interface e_team_roles_insert_input {description?: (Scalars['String'] | null),team_rosters?: (team_roster_arr_rel_insert_input | null),tournament_team_rosters?: (tournament_team_roster_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_team_roles_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_team_roles_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_team_roles" */
export interface e_team_roles_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_team_rolesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_team_roles" */
export interface e_team_roles_obj_rel_insert_input {data: e_team_roles_insert_input,
/** upsert condition */
on_conflict?: (e_team_roles_on_conflict | null)}


/** on_conflict condition type for table "e_team_roles" */
export interface e_team_roles_on_conflict {constraint: e_team_roles_constraint,update_columns?: e_team_roles_update_column[],where?: (e_team_roles_bool_exp | null)}


/** Ordering options when selecting data from "e_team_roles". */
export interface e_team_roles_order_by {description?: (order_by | null),team_rosters_aggregate?: (team_roster_aggregate_order_by | null),tournament_team_rosters_aggregate?: (tournament_team_roster_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_team_roles */
export interface e_team_roles_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_team_roles" */
export interface e_team_roles_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_team_roles" */
export interface e_team_roles_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_team_roles_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_team_roles_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_team_roles_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_team_roles_set_input | null),
/** filter the rows which have to be updated */
where: e_team_roles_bool_exp}


/** columns and relationships of "e_timeout_settings" */
export interface e_timeout_settingsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_timeout_settings" */
export interface e_timeout_settings_aggregateGenqlSelection{
    aggregate?: e_timeout_settings_aggregate_fieldsGenqlSelection
    nodes?: e_timeout_settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_timeout_settings" */
export interface e_timeout_settings_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_timeout_settings_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_timeout_settings_max_fieldsGenqlSelection
    min?: e_timeout_settings_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'. */
export interface e_timeout_settings_bool_exp {_and?: (e_timeout_settings_bool_exp[] | null),_not?: (e_timeout_settings_bool_exp | null),_or?: (e_timeout_settings_bool_exp[] | null),description?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'. */
export interface e_timeout_settings_enum_comparison_exp {_eq?: (e_timeout_settings_enum | null),_in?: (e_timeout_settings_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_timeout_settings_enum | null),_nin?: (e_timeout_settings_enum[] | null)}


/** input type for inserting data into table "e_timeout_settings" */
export interface e_timeout_settings_insert_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_timeout_settings_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_timeout_settings_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_timeout_settings" */
export interface e_timeout_settings_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_timeout_settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_timeout_settings" */
export interface e_timeout_settings_on_conflict {constraint: e_timeout_settings_constraint,update_columns?: e_timeout_settings_update_column[],where?: (e_timeout_settings_bool_exp | null)}


/** Ordering options when selecting data from "e_timeout_settings". */
export interface e_timeout_settings_order_by {description?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_timeout_settings */
export interface e_timeout_settings_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_timeout_settings" */
export interface e_timeout_settings_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_timeout_settings" */
export interface e_timeout_settings_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_timeout_settings_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_timeout_settings_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_timeout_settings_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_timeout_settings_set_input | null),
/** filter the rows which have to be updated */
where: e_timeout_settings_bool_exp}


/** columns and relationships of "e_tournament_stage_types" */
export interface e_tournament_stage_typesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    tournament_stages?: (tournament_stagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_stages_aggregate?: (tournament_stages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_tournament_stage_types" */
export interface e_tournament_stage_types_aggregateGenqlSelection{
    aggregate?: e_tournament_stage_types_aggregate_fieldsGenqlSelection
    nodes?: e_tournament_stage_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_tournament_stage_types" */
export interface e_tournament_stage_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_tournament_stage_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_tournament_stage_types_max_fieldsGenqlSelection
    min?: e_tournament_stage_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_tournament_stage_types". All fields are combined with a logical 'AND'. */
export interface e_tournament_stage_types_bool_exp {_and?: (e_tournament_stage_types_bool_exp[] | null),_not?: (e_tournament_stage_types_bool_exp | null),_or?: (e_tournament_stage_types_bool_exp[] | null),description?: (String_comparison_exp | null),tournament_stages?: (tournament_stages_bool_exp | null),tournament_stages_aggregate?: (tournament_stages_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_tournament_stage_types_enum". All fields are combined with logical 'AND'. */
export interface e_tournament_stage_types_enum_comparison_exp {_eq?: (e_tournament_stage_types_enum | null),_in?: (e_tournament_stage_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_tournament_stage_types_enum | null),_nin?: (e_tournament_stage_types_enum[] | null)}


/** input type for inserting data into table "e_tournament_stage_types" */
export interface e_tournament_stage_types_insert_input {description?: (Scalars['String'] | null),tournament_stages?: (tournament_stages_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_tournament_stage_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_tournament_stage_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_tournament_stage_types" */
export interface e_tournament_stage_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_tournament_stage_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_tournament_stage_types" */
export interface e_tournament_stage_types_obj_rel_insert_input {data: e_tournament_stage_types_insert_input,
/** upsert condition */
on_conflict?: (e_tournament_stage_types_on_conflict | null)}


/** on_conflict condition type for table "e_tournament_stage_types" */
export interface e_tournament_stage_types_on_conflict {constraint: e_tournament_stage_types_constraint,update_columns?: e_tournament_stage_types_update_column[],where?: (e_tournament_stage_types_bool_exp | null)}


/** Ordering options when selecting data from "e_tournament_stage_types". */
export interface e_tournament_stage_types_order_by {description?: (order_by | null),tournament_stages_aggregate?: (tournament_stages_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_tournament_stage_types */
export interface e_tournament_stage_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_tournament_stage_types" */
export interface e_tournament_stage_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_tournament_stage_types" */
export interface e_tournament_stage_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_tournament_stage_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_tournament_stage_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_tournament_stage_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_tournament_stage_types_set_input | null),
/** filter the rows which have to be updated */
where: e_tournament_stage_types_bool_exp}


/** columns and relationships of "e_tournament_status" */
export interface e_tournament_statusGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    tournaments?: (tournamentsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** An aggregate relationship */
    tournaments_aggregate?: (tournaments_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_tournament_status" */
export interface e_tournament_status_aggregateGenqlSelection{
    aggregate?: e_tournament_status_aggregate_fieldsGenqlSelection
    nodes?: e_tournament_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_tournament_status" */
export interface e_tournament_status_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_tournament_status_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_tournament_status_max_fieldsGenqlSelection
    min?: e_tournament_status_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_tournament_status". All fields are combined with a logical 'AND'. */
export interface e_tournament_status_bool_exp {_and?: (e_tournament_status_bool_exp[] | null),_not?: (e_tournament_status_bool_exp | null),_or?: (e_tournament_status_bool_exp[] | null),description?: (String_comparison_exp | null),tournaments?: (tournaments_bool_exp | null),tournaments_aggregate?: (tournaments_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_tournament_status_enum". All fields are combined with logical 'AND'. */
export interface e_tournament_status_enum_comparison_exp {_eq?: (e_tournament_status_enum | null),_in?: (e_tournament_status_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_tournament_status_enum | null),_nin?: (e_tournament_status_enum[] | null)}


/** input type for inserting data into table "e_tournament_status" */
export interface e_tournament_status_insert_input {description?: (Scalars['String'] | null),tournaments?: (tournaments_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_tournament_status_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_tournament_status_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_tournament_status" */
export interface e_tournament_status_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_tournament_statusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "e_tournament_status" */
export interface e_tournament_status_obj_rel_insert_input {data: e_tournament_status_insert_input,
/** upsert condition */
on_conflict?: (e_tournament_status_on_conflict | null)}


/** on_conflict condition type for table "e_tournament_status" */
export interface e_tournament_status_on_conflict {constraint: e_tournament_status_constraint,update_columns?: e_tournament_status_update_column[],where?: (e_tournament_status_bool_exp | null)}


/** Ordering options when selecting data from "e_tournament_status". */
export interface e_tournament_status_order_by {description?: (order_by | null),tournaments_aggregate?: (tournaments_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_tournament_status */
export interface e_tournament_status_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_tournament_status" */
export interface e_tournament_status_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_tournament_status" */
export interface e_tournament_status_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_tournament_status_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_tournament_status_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_tournament_status_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_tournament_status_set_input | null),
/** filter the rows which have to be updated */
where: e_tournament_status_bool_exp}


/** columns and relationships of "e_utility_types" */
export interface e_utility_typesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    player_utilities?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_utilities_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_utility_types" */
export interface e_utility_types_aggregateGenqlSelection{
    aggregate?: e_utility_types_aggregate_fieldsGenqlSelection
    nodes?: e_utility_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_utility_types" */
export interface e_utility_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_utility_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_utility_types_max_fieldsGenqlSelection
    min?: e_utility_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'. */
export interface e_utility_types_bool_exp {_and?: (e_utility_types_bool_exp[] | null),_not?: (e_utility_types_bool_exp | null),_or?: (e_utility_types_bool_exp[] | null),description?: (String_comparison_exp | null),player_utilities?: (player_utility_bool_exp | null),player_utilities_aggregate?: (player_utility_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'. */
export interface e_utility_types_enum_comparison_exp {_eq?: (e_utility_types_enum | null),_in?: (e_utility_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_utility_types_enum | null),_nin?: (e_utility_types_enum[] | null)}


/** input type for inserting data into table "e_utility_types" */
export interface e_utility_types_insert_input {description?: (Scalars['String'] | null),player_utilities?: (player_utility_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_utility_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_utility_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_utility_types" */
export interface e_utility_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_utility_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_utility_types" */
export interface e_utility_types_on_conflict {constraint: e_utility_types_constraint,update_columns?: e_utility_types_update_column[],where?: (e_utility_types_bool_exp | null)}


/** Ordering options when selecting data from "e_utility_types". */
export interface e_utility_types_order_by {description?: (order_by | null),player_utilities_aggregate?: (player_utility_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_utility_types */
export interface e_utility_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_utility_types" */
export interface e_utility_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_utility_types" */
export interface e_utility_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_utility_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_utility_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_utility_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_utility_types_set_input | null),
/** filter the rows which have to be updated */
where: e_utility_types_bool_exp}


/** columns and relationships of "e_veto_pick_types" */
export interface e_veto_pick_typesGenqlSelection{
    description?: boolean | number
    /** An array relationship */
    match_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    match_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "e_veto_pick_types" */
export interface e_veto_pick_types_aggregateGenqlSelection{
    aggregate?: e_veto_pick_types_aggregate_fieldsGenqlSelection
    nodes?: e_veto_pick_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "e_veto_pick_types" */
export interface e_veto_pick_types_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (e_veto_pick_types_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: e_veto_pick_types_max_fieldsGenqlSelection
    min?: e_veto_pick_types_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'. */
export interface e_veto_pick_types_bool_exp {_and?: (e_veto_pick_types_bool_exp[] | null),_not?: (e_veto_pick_types_bool_exp | null),_or?: (e_veto_pick_types_bool_exp[] | null),description?: (String_comparison_exp | null),match_veto_picks?: (match_map_veto_picks_bool_exp | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_bool_exp | null),value?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'. */
export interface e_veto_pick_types_enum_comparison_exp {_eq?: (e_veto_pick_types_enum | null),_in?: (e_veto_pick_types_enum[] | null),_is_null?: (Scalars['Boolean'] | null),_neq?: (e_veto_pick_types_enum | null),_nin?: (e_veto_pick_types_enum[] | null)}


/** input type for inserting data into table "e_veto_pick_types" */
export interface e_veto_pick_types_insert_input {description?: (Scalars['String'] | null),match_veto_picks?: (match_map_veto_picks_arr_rel_insert_input | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface e_veto_pick_types_max_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface e_veto_pick_types_min_fieldsGenqlSelection{
    description?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "e_veto_pick_types" */
export interface e_veto_pick_types_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: e_veto_pick_typesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "e_veto_pick_types" */
export interface e_veto_pick_types_on_conflict {constraint: e_veto_pick_types_constraint,update_columns?: e_veto_pick_types_update_column[],where?: (e_veto_pick_types_bool_exp | null)}


/** Ordering options when selecting data from "e_veto_pick_types". */
export interface e_veto_pick_types_order_by {description?: (order_by | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_order_by | null),value?: (order_by | null)}


/** primary key columns input for table: e_veto_pick_types */
export interface e_veto_pick_types_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "e_veto_pick_types" */
export interface e_veto_pick_types_set_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "e_veto_pick_types" */
export interface e_veto_pick_types_stream_cursor_input {
/** Stream column input with initial value */
initial_value: e_veto_pick_types_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface e_veto_pick_types_stream_cursor_value_input {description?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface e_veto_pick_types_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (e_veto_pick_types_set_input | null),
/** filter the rows which have to be updated */
where: e_veto_pick_types_bool_exp}


/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export interface float8_comparison_exp {_eq?: (Scalars['float8'] | null),_gt?: (Scalars['float8'] | null),_gte?: (Scalars['float8'] | null),_in?: (Scalars['float8'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['float8'] | null),_lte?: (Scalars['float8'] | null),_neq?: (Scalars['float8'] | null),_nin?: (Scalars['float8'][] | null)}


/** columns and relationships of "friends" */
export interface friendsGenqlSelection{
    /** An object relationship */
    e_status?: e_friend_statusGenqlSelection
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "friends" */
export interface friends_aggregateGenqlSelection{
    aggregate?: friends_aggregate_fieldsGenqlSelection
    nodes?: friendsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "friends" */
export interface friends_aggregate_fieldsGenqlSelection{
    avg?: friends_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (friends_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: friends_max_fieldsGenqlSelection
    min?: friends_min_fieldsGenqlSelection
    stddev?: friends_stddev_fieldsGenqlSelection
    stddev_pop?: friends_stddev_pop_fieldsGenqlSelection
    stddev_samp?: friends_stddev_samp_fieldsGenqlSelection
    sum?: friends_sum_fieldsGenqlSelection
    var_pop?: friends_var_pop_fieldsGenqlSelection
    var_samp?: friends_var_samp_fieldsGenqlSelection
    variance?: friends_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface friends_avg_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "friends". All fields are combined with a logical 'AND'. */
export interface friends_bool_exp {_and?: (friends_bool_exp[] | null),_not?: (friends_bool_exp | null),_or?: (friends_bool_exp[] | null),e_status?: (e_friend_status_bool_exp | null),other_player_steam_id?: (bigint_comparison_exp | null),player_steam_id?: (bigint_comparison_exp | null),status?: (e_friend_status_enum_comparison_exp | null)}


/** input type for incrementing numeric columns in table "friends" */
export interface friends_inc_input {other_player_steam_id?: (Scalars['bigint'] | null),player_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "friends" */
export interface friends_insert_input {e_status?: (e_friend_status_obj_rel_insert_input | null),other_player_steam_id?: (Scalars['bigint'] | null),player_steam_id?: (Scalars['bigint'] | null),status?: (e_friend_status_enum | null)}


/** aggregate max on columns */
export interface friends_max_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface friends_min_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "friends" */
export interface friends_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: friendsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "friends" */
export interface friends_on_conflict {constraint: friends_constraint,update_columns?: friends_update_column[],where?: (friends_bool_exp | null)}


/** Ordering options when selecting data from "friends". */
export interface friends_order_by {e_status?: (e_friend_status_order_by | null),other_player_steam_id?: (order_by | null),player_steam_id?: (order_by | null),status?: (order_by | null)}


/** primary key columns input for table: friends */
export interface friends_pk_columns_input {other_player_steam_id: Scalars['bigint'],player_steam_id: Scalars['bigint']}


/** input type for updating data in table "friends" */
export interface friends_set_input {other_player_steam_id?: (Scalars['bigint'] | null),player_steam_id?: (Scalars['bigint'] | null),status?: (e_friend_status_enum | null)}


/** aggregate stddev on columns */
export interface friends_stddev_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface friends_stddev_pop_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface friends_stddev_samp_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "friends" */
export interface friends_stream_cursor_input {
/** Stream column input with initial value */
initial_value: friends_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface friends_stream_cursor_value_input {other_player_steam_id?: (Scalars['bigint'] | null),player_steam_id?: (Scalars['bigint'] | null),status?: (e_friend_status_enum | null)}


/** aggregate sum on columns */
export interface friends_sum_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface friends_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (friends_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (friends_set_input | null),
/** filter the rows which have to be updated */
where: friends_bool_exp}


/** aggregate var_pop on columns */
export interface friends_var_pop_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface friends_var_samp_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface friends_variance_fieldsGenqlSelection{
    other_player_steam_id?: boolean | number
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "game_server_nodes" */
export interface game_server_nodesGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    /** An object relationship */
    e_region?: server_regionsGenqlSelection
    /** An object relationship */
    e_status?: e_game_server_node_statusesGenqlSelection
    enabled?: boolean | number
    end_port_range?: boolean | number
    id?: boolean | number
    label?: boolean | number
    lan_ip?: boolean | number
    node_ip?: boolean | number
    public_ip?: boolean | number
    region?: boolean | number
    /** An array relationship */
    servers?: (serversGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** An aggregate relationship */
    servers_aggregate?: (servers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    start_port_range?: boolean | number
    status?: boolean | number
    supports_cpu_pinning?: boolean | number
    supports_low_latency?: boolean | number
    token?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    update_status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "game_server_nodes" */
export interface game_server_nodes_aggregateGenqlSelection{
    aggregate?: game_server_nodes_aggregate_fieldsGenqlSelection
    nodes?: game_server_nodesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface game_server_nodes_aggregate_bool_exp {bool_and?: (game_server_nodes_aggregate_bool_exp_bool_and | null),bool_or?: (game_server_nodes_aggregate_bool_exp_bool_or | null),count?: (game_server_nodes_aggregate_bool_exp_count | null)}

export interface game_server_nodes_aggregate_bool_exp_bool_and {arguments: game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (game_server_nodes_bool_exp | null),predicate: Boolean_comparison_exp}

export interface game_server_nodes_aggregate_bool_exp_bool_or {arguments: game_server_nodes_select_column_game_server_nodes_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (game_server_nodes_bool_exp | null),predicate: Boolean_comparison_exp}

export interface game_server_nodes_aggregate_bool_exp_count {arguments?: (game_server_nodes_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (game_server_nodes_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "game_server_nodes" */
export interface game_server_nodes_aggregate_fieldsGenqlSelection{
    avg?: game_server_nodes_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (game_server_nodes_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: game_server_nodes_max_fieldsGenqlSelection
    min?: game_server_nodes_min_fieldsGenqlSelection
    stddev?: game_server_nodes_stddev_fieldsGenqlSelection
    stddev_pop?: game_server_nodes_stddev_pop_fieldsGenqlSelection
    stddev_samp?: game_server_nodes_stddev_samp_fieldsGenqlSelection
    sum?: game_server_nodes_sum_fieldsGenqlSelection
    var_pop?: game_server_nodes_var_pop_fieldsGenqlSelection
    var_samp?: game_server_nodes_var_samp_fieldsGenqlSelection
    variance?: game_server_nodes_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "game_server_nodes" */
export interface game_server_nodes_aggregate_order_by {avg?: (game_server_nodes_avg_order_by | null),count?: (order_by | null),max?: (game_server_nodes_max_order_by | null),min?: (game_server_nodes_min_order_by | null),stddev?: (game_server_nodes_stddev_order_by | null),stddev_pop?: (game_server_nodes_stddev_pop_order_by | null),stddev_samp?: (game_server_nodes_stddev_samp_order_by | null),sum?: (game_server_nodes_sum_order_by | null),var_pop?: (game_server_nodes_var_pop_order_by | null),var_samp?: (game_server_nodes_var_samp_order_by | null),variance?: (game_server_nodes_variance_order_by | null)}


/** input type for inserting array relation for remote table "game_server_nodes" */
export interface game_server_nodes_arr_rel_insert_input {data: game_server_nodes_insert_input[],
/** upsert condition */
on_conflict?: (game_server_nodes_on_conflict | null)}


/** aggregate avg on columns */
export interface game_server_nodes_avg_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "game_server_nodes" */
export interface game_server_nodes_avg_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** Boolean expression to filter rows from the table "game_server_nodes". All fields are combined with a logical 'AND'. */
export interface game_server_nodes_bool_exp {_and?: (game_server_nodes_bool_exp[] | null),_not?: (game_server_nodes_bool_exp | null),_or?: (game_server_nodes_bool_exp[] | null),available_server_count?: (Int_comparison_exp | null),build_id?: (Int_comparison_exp | null),e_region?: (server_regions_bool_exp | null),e_status?: (e_game_server_node_statuses_bool_exp | null),enabled?: (Boolean_comparison_exp | null),end_port_range?: (Int_comparison_exp | null),id?: (String_comparison_exp | null),label?: (String_comparison_exp | null),lan_ip?: (inet_comparison_exp | null),node_ip?: (inet_comparison_exp | null),public_ip?: (inet_comparison_exp | null),region?: (String_comparison_exp | null),servers?: (servers_bool_exp | null),servers_aggregate?: (servers_aggregate_bool_exp | null),start_port_range?: (Int_comparison_exp | null),status?: (e_game_server_node_statuses_enum_comparison_exp | null),supports_cpu_pinning?: (Boolean_comparison_exp | null),supports_low_latency?: (Boolean_comparison_exp | null),token?: (String_comparison_exp | null),total_server_count?: (Int_comparison_exp | null),update_status?: (String_comparison_exp | null)}


/** input type for incrementing numeric columns in table "game_server_nodes" */
export interface game_server_nodes_inc_input {build_id?: (Scalars['Int'] | null),end_port_range?: (Scalars['Int'] | null),start_port_range?: (Scalars['Int'] | null)}


/** input type for inserting data into table "game_server_nodes" */
export interface game_server_nodes_insert_input {build_id?: (Scalars['Int'] | null),e_region?: (server_regions_obj_rel_insert_input | null),e_status?: (e_game_server_node_statuses_obj_rel_insert_input | null),enabled?: (Scalars['Boolean'] | null),end_port_range?: (Scalars['Int'] | null),id?: (Scalars['String'] | null),label?: (Scalars['String'] | null),lan_ip?: (Scalars['inet'] | null),node_ip?: (Scalars['inet'] | null),public_ip?: (Scalars['inet'] | null),region?: (Scalars['String'] | null),servers?: (servers_arr_rel_insert_input | null),start_port_range?: (Scalars['Int'] | null),status?: (e_game_server_node_statuses_enum | null),supports_cpu_pinning?: (Scalars['Boolean'] | null),supports_low_latency?: (Scalars['Boolean'] | null),token?: (Scalars['String'] | null),update_status?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface game_server_nodes_max_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    id?: boolean | number
    label?: boolean | number
    region?: boolean | number
    start_port_range?: boolean | number
    token?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    update_status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "game_server_nodes" */
export interface game_server_nodes_max_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),id?: (order_by | null),label?: (order_by | null),region?: (order_by | null),start_port_range?: (order_by | null),token?: (order_by | null),update_status?: (order_by | null)}


/** aggregate min on columns */
export interface game_server_nodes_min_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    id?: boolean | number
    label?: boolean | number
    region?: boolean | number
    start_port_range?: boolean | number
    token?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    update_status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "game_server_nodes" */
export interface game_server_nodes_min_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),id?: (order_by | null),label?: (order_by | null),region?: (order_by | null),start_port_range?: (order_by | null),token?: (order_by | null),update_status?: (order_by | null)}


/** response of any mutation on the table "game_server_nodes" */
export interface game_server_nodes_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: game_server_nodesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "game_server_nodes" */
export interface game_server_nodes_obj_rel_insert_input {data: game_server_nodes_insert_input,
/** upsert condition */
on_conflict?: (game_server_nodes_on_conflict | null)}


/** on_conflict condition type for table "game_server_nodes" */
export interface game_server_nodes_on_conflict {constraint: game_server_nodes_constraint,update_columns?: game_server_nodes_update_column[],where?: (game_server_nodes_bool_exp | null)}


/** Ordering options when selecting data from "game_server_nodes". */
export interface game_server_nodes_order_by {available_server_count?: (order_by | null),build_id?: (order_by | null),e_region?: (server_regions_order_by | null),e_status?: (e_game_server_node_statuses_order_by | null),enabled?: (order_by | null),end_port_range?: (order_by | null),id?: (order_by | null),label?: (order_by | null),lan_ip?: (order_by | null),node_ip?: (order_by | null),public_ip?: (order_by | null),region?: (order_by | null),servers_aggregate?: (servers_aggregate_order_by | null),start_port_range?: (order_by | null),status?: (order_by | null),supports_cpu_pinning?: (order_by | null),supports_low_latency?: (order_by | null),token?: (order_by | null),total_server_count?: (order_by | null),update_status?: (order_by | null)}


/** primary key columns input for table: game_server_nodes */
export interface game_server_nodes_pk_columns_input {id: Scalars['String']}


/** input type for updating data in table "game_server_nodes" */
export interface game_server_nodes_set_input {build_id?: (Scalars['Int'] | null),enabled?: (Scalars['Boolean'] | null),end_port_range?: (Scalars['Int'] | null),id?: (Scalars['String'] | null),label?: (Scalars['String'] | null),lan_ip?: (Scalars['inet'] | null),node_ip?: (Scalars['inet'] | null),public_ip?: (Scalars['inet'] | null),region?: (Scalars['String'] | null),start_port_range?: (Scalars['Int'] | null),status?: (e_game_server_node_statuses_enum | null),supports_cpu_pinning?: (Scalars['Boolean'] | null),supports_low_latency?: (Scalars['Boolean'] | null),token?: (Scalars['String'] | null),update_status?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface game_server_nodes_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "game_server_nodes" */
export interface game_server_nodes_stddev_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface game_server_nodes_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "game_server_nodes" */
export interface game_server_nodes_stddev_pop_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface game_server_nodes_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "game_server_nodes" */
export interface game_server_nodes_stddev_samp_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** Streaming cursor of the table "game_server_nodes" */
export interface game_server_nodes_stream_cursor_input {
/** Stream column input with initial value */
initial_value: game_server_nodes_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface game_server_nodes_stream_cursor_value_input {build_id?: (Scalars['Int'] | null),enabled?: (Scalars['Boolean'] | null),end_port_range?: (Scalars['Int'] | null),id?: (Scalars['String'] | null),label?: (Scalars['String'] | null),lan_ip?: (Scalars['inet'] | null),node_ip?: (Scalars['inet'] | null),public_ip?: (Scalars['inet'] | null),region?: (Scalars['String'] | null),start_port_range?: (Scalars['Int'] | null),status?: (e_game_server_node_statuses_enum | null),supports_cpu_pinning?: (Scalars['Boolean'] | null),supports_low_latency?: (Scalars['Boolean'] | null),token?: (Scalars['String'] | null),update_status?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface game_server_nodes_sum_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "game_server_nodes" */
export interface game_server_nodes_sum_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}

export interface game_server_nodes_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (game_server_nodes_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (game_server_nodes_set_input | null),
/** filter the rows which have to be updated */
where: game_server_nodes_bool_exp}


/** aggregate var_pop on columns */
export interface game_server_nodes_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "game_server_nodes" */
export interface game_server_nodes_var_pop_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** aggregate var_samp on columns */
export interface game_server_nodes_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "game_server_nodes" */
export interface game_server_nodes_var_samp_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** aggregate variance on columns */
export interface game_server_nodes_variance_fieldsGenqlSelection{
    /** A computed field, executes function "available_node_server_count" */
    available_server_count?: boolean | number
    build_id?: boolean | number
    end_port_range?: boolean | number
    start_port_range?: boolean | number
    /** A computed field, executes function "total_node_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "game_server_nodes" */
export interface game_server_nodes_variance_order_by {build_id?: (order_by | null),end_port_range?: (order_by | null),start_port_range?: (order_by | null)}


/** Boolean expression to compare columns of type "inet". All fields are combined with logical 'AND'. */
export interface inet_comparison_exp {_eq?: (Scalars['inet'] | null),_gt?: (Scalars['inet'] | null),_gte?: (Scalars['inet'] | null),_in?: (Scalars['inet'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['inet'] | null),_lte?: (Scalars['inet'] | null),_neq?: (Scalars['inet'] | null),_nin?: (Scalars['inet'][] | null)}


/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export interface json_comparison_exp {_eq?: (Scalars['json'] | null),_gt?: (Scalars['json'] | null),_gte?: (Scalars['json'] | null),_in?: (Scalars['json'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['json'] | null),_lte?: (Scalars['json'] | null),_neq?: (Scalars['json'] | null),_nin?: (Scalars['json'][] | null)}

export interface jsonb_cast_exp {String?: (String_comparison_exp | null)}


/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export interface jsonb_comparison_exp {_cast?: (jsonb_cast_exp | null),
/** is the column contained in the given json value */
_contained_in?: (Scalars['jsonb'] | null),
/** does the column contain the given json value at the top level */
_contains?: (Scalars['jsonb'] | null),_eq?: (Scalars['jsonb'] | null),_gt?: (Scalars['jsonb'] | null),_gte?: (Scalars['jsonb'] | null),
/** does the string exist as a top-level key in the column */
_has_key?: (Scalars['String'] | null),
/** do all of these strings exist as top-level keys in the column */
_has_keys_all?: (Scalars['String'][] | null),
/** do any of these strings exist as top-level keys in the column */
_has_keys_any?: (Scalars['String'][] | null),_in?: (Scalars['jsonb'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['jsonb'] | null),_lte?: (Scalars['jsonb'] | null),_neq?: (Scalars['jsonb'] | null),_nin?: (Scalars['jsonb'][] | null)}


/** columns and relationships of "lobbies" */
export interface lobbiesGenqlSelection{
    access?: boolean | number
    created_at?: boolean | number
    /** An object relationship */
    e_lobby_access?: e_lobby_accessGenqlSelection
    id?: boolean | number
    /** An array relationship */
    players?: (lobby_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** An aggregate relationship */
    players_aggregate?: (lobby_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "lobbies" */
export interface lobbies_aggregateGenqlSelection{
    aggregate?: lobbies_aggregate_fieldsGenqlSelection
    nodes?: lobbiesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "lobbies" */
export interface lobbies_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (lobbies_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: lobbies_max_fieldsGenqlSelection
    min?: lobbies_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "lobbies". All fields are combined with a logical 'AND'. */
export interface lobbies_bool_exp {_and?: (lobbies_bool_exp[] | null),_not?: (lobbies_bool_exp | null),_or?: (lobbies_bool_exp[] | null),access?: (e_lobby_access_enum_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),e_lobby_access?: (e_lobby_access_bool_exp | null),id?: (uuid_comparison_exp | null),players?: (lobby_players_bool_exp | null),players_aggregate?: (lobby_players_aggregate_bool_exp | null)}


/** input type for inserting data into table "lobbies" */
export interface lobbies_insert_input {access?: (e_lobby_access_enum | null),created_at?: (Scalars['timestamptz'] | null),e_lobby_access?: (e_lobby_access_obj_rel_insert_input | null),id?: (Scalars['uuid'] | null),players?: (lobby_players_arr_rel_insert_input | null)}


/** aggregate max on columns */
export interface lobbies_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface lobbies_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "lobbies" */
export interface lobbies_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: lobbiesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "lobbies" */
export interface lobbies_obj_rel_insert_input {data: lobbies_insert_input,
/** upsert condition */
on_conflict?: (lobbies_on_conflict | null)}


/** on_conflict condition type for table "lobbies" */
export interface lobbies_on_conflict {constraint: lobbies_constraint,update_columns?: lobbies_update_column[],where?: (lobbies_bool_exp | null)}


/** Ordering options when selecting data from "lobbies". */
export interface lobbies_order_by {access?: (order_by | null),created_at?: (order_by | null),e_lobby_access?: (e_lobby_access_order_by | null),id?: (order_by | null),players_aggregate?: (lobby_players_aggregate_order_by | null)}


/** primary key columns input for table: lobbies */
export interface lobbies_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "lobbies" */
export interface lobbies_set_input {access?: (e_lobby_access_enum | null),created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null)}


/** Streaming cursor of the table "lobbies" */
export interface lobbies_stream_cursor_input {
/** Stream column input with initial value */
initial_value: lobbies_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface lobbies_stream_cursor_value_input {access?: (e_lobby_access_enum | null),created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null)}

export interface lobbies_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (lobbies_set_input | null),
/** filter the rows which have to be updated */
where: lobbies_bool_exp}


/** columns and relationships of "lobby_players" */
export interface lobby_playersGenqlSelection{
    captain?: boolean | number
    invited_by_steam_id?: boolean | number
    /** An object relationship */
    lobby?: lobbiesGenqlSelection
    lobby_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    status?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "lobby_players" */
export interface lobby_players_aggregateGenqlSelection{
    aggregate?: lobby_players_aggregate_fieldsGenqlSelection
    nodes?: lobby_playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface lobby_players_aggregate_bool_exp {bool_and?: (lobby_players_aggregate_bool_exp_bool_and | null),bool_or?: (lobby_players_aggregate_bool_exp_bool_or | null),count?: (lobby_players_aggregate_bool_exp_count | null)}

export interface lobby_players_aggregate_bool_exp_bool_and {arguments: lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (lobby_players_bool_exp | null),predicate: Boolean_comparison_exp}

export interface lobby_players_aggregate_bool_exp_bool_or {arguments: lobby_players_select_column_lobby_players_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (lobby_players_bool_exp | null),predicate: Boolean_comparison_exp}

export interface lobby_players_aggregate_bool_exp_count {arguments?: (lobby_players_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (lobby_players_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "lobby_players" */
export interface lobby_players_aggregate_fieldsGenqlSelection{
    avg?: lobby_players_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (lobby_players_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: lobby_players_max_fieldsGenqlSelection
    min?: lobby_players_min_fieldsGenqlSelection
    stddev?: lobby_players_stddev_fieldsGenqlSelection
    stddev_pop?: lobby_players_stddev_pop_fieldsGenqlSelection
    stddev_samp?: lobby_players_stddev_samp_fieldsGenqlSelection
    sum?: lobby_players_sum_fieldsGenqlSelection
    var_pop?: lobby_players_var_pop_fieldsGenqlSelection
    var_samp?: lobby_players_var_samp_fieldsGenqlSelection
    variance?: lobby_players_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "lobby_players" */
export interface lobby_players_aggregate_order_by {avg?: (lobby_players_avg_order_by | null),count?: (order_by | null),max?: (lobby_players_max_order_by | null),min?: (lobby_players_min_order_by | null),stddev?: (lobby_players_stddev_order_by | null),stddev_pop?: (lobby_players_stddev_pop_order_by | null),stddev_samp?: (lobby_players_stddev_samp_order_by | null),sum?: (lobby_players_sum_order_by | null),var_pop?: (lobby_players_var_pop_order_by | null),var_samp?: (lobby_players_var_samp_order_by | null),variance?: (lobby_players_variance_order_by | null)}


/** input type for inserting array relation for remote table "lobby_players" */
export interface lobby_players_arr_rel_insert_input {data: lobby_players_insert_input[],
/** upsert condition */
on_conflict?: (lobby_players_on_conflict | null)}


/** aggregate avg on columns */
export interface lobby_players_avg_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "lobby_players" */
export interface lobby_players_avg_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "lobby_players". All fields are combined with a logical 'AND'. */
export interface lobby_players_bool_exp {_and?: (lobby_players_bool_exp[] | null),_not?: (lobby_players_bool_exp | null),_or?: (lobby_players_bool_exp[] | null),captain?: (Boolean_comparison_exp | null),invited_by_steam_id?: (bigint_comparison_exp | null),lobby?: (lobbies_bool_exp | null),lobby_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),status?: (e_lobby_player_status_enum_comparison_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "lobby_players" */
export interface lobby_players_inc_input {invited_by_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "lobby_players" */
export interface lobby_players_insert_input {captain?: (Scalars['Boolean'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),lobby?: (lobbies_obj_rel_insert_input | null),lobby_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),status?: (e_lobby_player_status_enum | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface lobby_players_max_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    lobby_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "lobby_players" */
export interface lobby_players_max_order_by {invited_by_steam_id?: (order_by | null),lobby_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface lobby_players_min_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    lobby_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "lobby_players" */
export interface lobby_players_min_order_by {invited_by_steam_id?: (order_by | null),lobby_id?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "lobby_players" */
export interface lobby_players_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: lobby_playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "lobby_players" */
export interface lobby_players_on_conflict {constraint: lobby_players_constraint,update_columns?: lobby_players_update_column[],where?: (lobby_players_bool_exp | null)}


/** Ordering options when selecting data from "lobby_players". */
export interface lobby_players_order_by {captain?: (order_by | null),invited_by_steam_id?: (order_by | null),lobby?: (lobbies_order_by | null),lobby_id?: (order_by | null),player?: (players_order_by | null),status?: (order_by | null),steam_id?: (order_by | null)}


/** primary key columns input for table: lobby_players */
export interface lobby_players_pk_columns_input {lobby_id: Scalars['uuid'],steam_id: Scalars['bigint']}


/** input type for updating data in table "lobby_players" */
export interface lobby_players_set_input {captain?: (Scalars['Boolean'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),lobby_id?: (Scalars['uuid'] | null),status?: (e_lobby_player_status_enum | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface lobby_players_stddev_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "lobby_players" */
export interface lobby_players_stddev_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface lobby_players_stddev_pop_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "lobby_players" */
export interface lobby_players_stddev_pop_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface lobby_players_stddev_samp_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "lobby_players" */
export interface lobby_players_stddev_samp_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "lobby_players" */
export interface lobby_players_stream_cursor_input {
/** Stream column input with initial value */
initial_value: lobby_players_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface lobby_players_stream_cursor_value_input {captain?: (Scalars['Boolean'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),lobby_id?: (Scalars['uuid'] | null),status?: (e_lobby_player_status_enum | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface lobby_players_sum_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "lobby_players" */
export interface lobby_players_sum_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}

export interface lobby_players_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (lobby_players_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (lobby_players_set_input | null),
/** filter the rows which have to be updated */
where: lobby_players_bool_exp}


/** aggregate var_pop on columns */
export interface lobby_players_var_pop_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "lobby_players" */
export interface lobby_players_var_pop_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface lobby_players_var_samp_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "lobby_players" */
export interface lobby_players_var_samp_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface lobby_players_variance_fieldsGenqlSelection{
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "lobby_players" */
export interface lobby_players_variance_order_by {invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** columns and relationships of "map_pools" */
export interface map_poolsGenqlSelection{
    /** An object relationship */
    e_type?: e_map_pool_typesGenqlSelection
    enabled?: boolean | number
    id?: boolean | number
    /** An array relationship */
    maps?: (v_pool_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    /** An aggregate relationship */
    maps_aggregate?: (v_pool_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    seed?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "map_pools" */
export interface map_pools_aggregateGenqlSelection{
    aggregate?: map_pools_aggregate_fieldsGenqlSelection
    nodes?: map_poolsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "map_pools" */
export interface map_pools_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (map_pools_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: map_pools_max_fieldsGenqlSelection
    min?: map_pools_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'. */
export interface map_pools_bool_exp {_and?: (map_pools_bool_exp[] | null),_not?: (map_pools_bool_exp | null),_or?: (map_pools_bool_exp[] | null),e_type?: (e_map_pool_types_bool_exp | null),enabled?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),maps?: (v_pool_maps_bool_exp | null),maps_aggregate?: (v_pool_maps_aggregate_bool_exp | null),seed?: (Boolean_comparison_exp | null),type?: (e_map_pool_types_enum_comparison_exp | null)}


/** input type for inserting data into table "map_pools" */
export interface map_pools_insert_input {e_type?: (e_map_pool_types_obj_rel_insert_input | null),enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),maps?: (v_pool_maps_arr_rel_insert_input | null),seed?: (Scalars['Boolean'] | null),type?: (e_map_pool_types_enum | null)}


/** aggregate max on columns */
export interface map_pools_max_fieldsGenqlSelection{
    id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface map_pools_min_fieldsGenqlSelection{
    id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "map_pools" */
export interface map_pools_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: map_poolsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "map_pools" */
export interface map_pools_obj_rel_insert_input {data: map_pools_insert_input,
/** upsert condition */
on_conflict?: (map_pools_on_conflict | null)}


/** on_conflict condition type for table "map_pools" */
export interface map_pools_on_conflict {constraint: map_pools_constraint,update_columns?: map_pools_update_column[],where?: (map_pools_bool_exp | null)}


/** Ordering options when selecting data from "map_pools". */
export interface map_pools_order_by {e_type?: (e_map_pool_types_order_by | null),enabled?: (order_by | null),id?: (order_by | null),maps_aggregate?: (v_pool_maps_aggregate_order_by | null),seed?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: map_pools */
export interface map_pools_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "map_pools" */
export interface map_pools_set_input {enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),seed?: (Scalars['Boolean'] | null),type?: (e_map_pool_types_enum | null)}


/** Streaming cursor of the table "map_pools" */
export interface map_pools_stream_cursor_input {
/** Stream column input with initial value */
initial_value: map_pools_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface map_pools_stream_cursor_value_input {enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),seed?: (Scalars['Boolean'] | null),type?: (e_map_pool_types_enum | null)}

export interface map_pools_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (map_pools_set_input | null),
/** filter the rows which have to be updated */
where: map_pools_bool_exp}


/** columns and relationships of "maps" */
export interface mapsGenqlSelection{
    active_pool?: boolean | number
    /** An object relationship */
    e_match_type?: e_match_typesGenqlSelection
    enabled?: boolean | number
    id?: boolean | number
    label?: boolean | number
    /** An array relationship */
    match_maps?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_maps_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An array relationship */
    match_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    match_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    type?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "maps" */
export interface maps_aggregateGenqlSelection{
    aggregate?: maps_aggregate_fieldsGenqlSelection
    nodes?: mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface maps_aggregate_bool_exp {bool_and?: (maps_aggregate_bool_exp_bool_and | null),bool_or?: (maps_aggregate_bool_exp_bool_or | null),count?: (maps_aggregate_bool_exp_count | null)}

export interface maps_aggregate_bool_exp_bool_and {arguments: maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (maps_bool_exp | null),predicate: Boolean_comparison_exp}

export interface maps_aggregate_bool_exp_bool_or {arguments: maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (maps_bool_exp | null),predicate: Boolean_comparison_exp}

export interface maps_aggregate_bool_exp_count {arguments?: (maps_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (maps_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "maps" */
export interface maps_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (maps_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: maps_max_fieldsGenqlSelection
    min?: maps_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "maps" */
export interface maps_aggregate_order_by {count?: (order_by | null),max?: (maps_max_order_by | null),min?: (maps_min_order_by | null)}


/** input type for inserting array relation for remote table "maps" */
export interface maps_arr_rel_insert_input {data: maps_insert_input[],
/** upsert condition */
on_conflict?: (maps_on_conflict | null)}


/** Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'. */
export interface maps_bool_exp {_and?: (maps_bool_exp[] | null),_not?: (maps_bool_exp | null),_or?: (maps_bool_exp[] | null),active_pool?: (Boolean_comparison_exp | null),e_match_type?: (e_match_types_bool_exp | null),enabled?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),label?: (String_comparison_exp | null),match_maps?: (match_maps_bool_exp | null),match_maps_aggregate?: (match_maps_aggregate_bool_exp | null),match_veto_picks?: (match_map_veto_picks_bool_exp | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_bool_exp | null),name?: (String_comparison_exp | null),patch?: (String_comparison_exp | null),poster?: (String_comparison_exp | null),type?: (e_match_types_enum_comparison_exp | null),workshop_map_id?: (String_comparison_exp | null)}


/** input type for inserting data into table "maps" */
export interface maps_insert_input {active_pool?: (Scalars['Boolean'] | null),e_match_type?: (e_match_types_obj_rel_insert_input | null),enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),match_maps?: (match_maps_arr_rel_insert_input | null),match_veto_picks?: (match_map_veto_picks_arr_rel_insert_input | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (e_match_types_enum | null),workshop_map_id?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface maps_max_fieldsGenqlSelection{
    id?: boolean | number
    label?: boolean | number
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "maps" */
export interface maps_max_order_by {id?: (order_by | null),label?: (order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),workshop_map_id?: (order_by | null)}


/** aggregate min on columns */
export interface maps_min_fieldsGenqlSelection{
    id?: boolean | number
    label?: boolean | number
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "maps" */
export interface maps_min_order_by {id?: (order_by | null),label?: (order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),workshop_map_id?: (order_by | null)}


/** response of any mutation on the table "maps" */
export interface maps_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "maps" */
export interface maps_obj_rel_insert_input {data: maps_insert_input,
/** upsert condition */
on_conflict?: (maps_on_conflict | null)}


/** on_conflict condition type for table "maps" */
export interface maps_on_conflict {constraint: maps_constraint,update_columns?: maps_update_column[],where?: (maps_bool_exp | null)}


/** Ordering options when selecting data from "maps". */
export interface maps_order_by {active_pool?: (order_by | null),e_match_type?: (e_match_types_order_by | null),enabled?: (order_by | null),id?: (order_by | null),label?: (order_by | null),match_maps_aggregate?: (match_maps_aggregate_order_by | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),type?: (order_by | null),workshop_map_id?: (order_by | null)}


/** primary key columns input for table: maps */
export interface maps_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "maps" */
export interface maps_set_input {active_pool?: (Scalars['Boolean'] | null),enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (e_match_types_enum | null),workshop_map_id?: (Scalars['String'] | null)}


/** Streaming cursor of the table "maps" */
export interface maps_stream_cursor_input {
/** Stream column input with initial value */
initial_value: maps_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface maps_stream_cursor_value_input {active_pool?: (Scalars['Boolean'] | null),enabled?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (e_match_types_enum | null),workshop_map_id?: (Scalars['String'] | null)}

export interface maps_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (maps_set_input | null),
/** filter the rows which have to be updated */
where: maps_bool_exp}


/** columns and relationships of "match_invites" */
export interface match_invitesGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    invited_by?: playersGenqlSelection
    invited_by_player_steam_id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_invites" */
export interface match_invites_aggregateGenqlSelection{
    aggregate?: match_invites_aggregate_fieldsGenqlSelection
    nodes?: match_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_invites_aggregate_bool_exp {count?: (match_invites_aggregate_bool_exp_count | null)}

export interface match_invites_aggregate_bool_exp_count {arguments?: (match_invites_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_invites_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_invites" */
export interface match_invites_aggregate_fieldsGenqlSelection{
    avg?: match_invites_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_invites_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_invites_max_fieldsGenqlSelection
    min?: match_invites_min_fieldsGenqlSelection
    stddev?: match_invites_stddev_fieldsGenqlSelection
    stddev_pop?: match_invites_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_invites_stddev_samp_fieldsGenqlSelection
    sum?: match_invites_sum_fieldsGenqlSelection
    var_pop?: match_invites_var_pop_fieldsGenqlSelection
    var_samp?: match_invites_var_samp_fieldsGenqlSelection
    variance?: match_invites_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_invites" */
export interface match_invites_aggregate_order_by {avg?: (match_invites_avg_order_by | null),count?: (order_by | null),max?: (match_invites_max_order_by | null),min?: (match_invites_min_order_by | null),stddev?: (match_invites_stddev_order_by | null),stddev_pop?: (match_invites_stddev_pop_order_by | null),stddev_samp?: (match_invites_stddev_samp_order_by | null),sum?: (match_invites_sum_order_by | null),var_pop?: (match_invites_var_pop_order_by | null),var_samp?: (match_invites_var_samp_order_by | null),variance?: (match_invites_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_invites" */
export interface match_invites_arr_rel_insert_input {data: match_invites_insert_input[],
/** upsert condition */
on_conflict?: (match_invites_on_conflict | null)}


/** aggregate avg on columns */
export interface match_invites_avg_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_invites" */
export interface match_invites_avg_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_invites". All fields are combined with a logical 'AND'. */
export interface match_invites_bool_exp {_and?: (match_invites_bool_exp[] | null),_not?: (match_invites_bool_exp | null),_or?: (match_invites_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),invited_by?: (players_bool_exp | null),invited_by_player_steam_id?: (bigint_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_invites" */
export interface match_invites_inc_input {invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "match_invites" */
export interface match_invites_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by?: (players_obj_rel_insert_input | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface match_invites_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    match_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_invites" */
export interface match_invites_max_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),match_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface match_invites_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    match_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_invites" */
export interface match_invites_min_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),match_id?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "match_invites" */
export interface match_invites_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_invites" */
export interface match_invites_on_conflict {constraint: match_invites_constraint,update_columns?: match_invites_update_column[],where?: (match_invites_bool_exp | null)}


/** Ordering options when selecting data from "match_invites". */
export interface match_invites_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by?: (players_order_by | null),invited_by_player_steam_id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null)}


/** primary key columns input for table: match_invites */
export interface match_invites_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_invites" */
export interface match_invites_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),match_id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface match_invites_stddev_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_invites" */
export interface match_invites_stddev_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_invites_stddev_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_invites" */
export interface match_invites_stddev_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_invites_stddev_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_invites" */
export interface match_invites_stddev_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "match_invites" */
export interface match_invites_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_invites_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_invites_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),match_id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface match_invites_sum_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_invites" */
export interface match_invites_sum_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}

export interface match_invites_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_invites_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_invites_set_input | null),
/** filter the rows which have to be updated */
where: match_invites_bool_exp}


/** aggregate var_pop on columns */
export interface match_invites_var_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_invites" */
export interface match_invites_var_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_invites_var_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_invites" */
export interface match_invites_var_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface match_invites_variance_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_invites" */
export interface match_invites_variance_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** relational table for assigning a players to a match and lineup */
export interface match_lineup_playersGenqlSelection{
    captain?: boolean | number
    checked_in?: boolean | number
    discord_id?: boolean | number
    id?: boolean | number
    /** An object relationship */
    lineup?: match_lineupsGenqlSelection
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_lineup_players" */
export interface match_lineup_players_aggregateGenqlSelection{
    aggregate?: match_lineup_players_aggregate_fieldsGenqlSelection
    nodes?: match_lineup_playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_lineup_players_aggregate_bool_exp {bool_and?: (match_lineup_players_aggregate_bool_exp_bool_and | null),bool_or?: (match_lineup_players_aggregate_bool_exp_bool_or | null),count?: (match_lineup_players_aggregate_bool_exp_count | null)}

export interface match_lineup_players_aggregate_bool_exp_bool_and {arguments: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (match_lineup_players_bool_exp | null),predicate: Boolean_comparison_exp}

export interface match_lineup_players_aggregate_bool_exp_bool_or {arguments: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (match_lineup_players_bool_exp | null),predicate: Boolean_comparison_exp}

export interface match_lineup_players_aggregate_bool_exp_count {arguments?: (match_lineup_players_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_lineup_players_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_lineup_players" */
export interface match_lineup_players_aggregate_fieldsGenqlSelection{
    avg?: match_lineup_players_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_lineup_players_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_lineup_players_max_fieldsGenqlSelection
    min?: match_lineup_players_min_fieldsGenqlSelection
    stddev?: match_lineup_players_stddev_fieldsGenqlSelection
    stddev_pop?: match_lineup_players_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_lineup_players_stddev_samp_fieldsGenqlSelection
    sum?: match_lineup_players_sum_fieldsGenqlSelection
    var_pop?: match_lineup_players_var_pop_fieldsGenqlSelection
    var_samp?: match_lineup_players_var_samp_fieldsGenqlSelection
    variance?: match_lineup_players_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_lineup_players" */
export interface match_lineup_players_aggregate_order_by {avg?: (match_lineup_players_avg_order_by | null),count?: (order_by | null),max?: (match_lineup_players_max_order_by | null),min?: (match_lineup_players_min_order_by | null),stddev?: (match_lineup_players_stddev_order_by | null),stddev_pop?: (match_lineup_players_stddev_pop_order_by | null),stddev_samp?: (match_lineup_players_stddev_samp_order_by | null),sum?: (match_lineup_players_sum_order_by | null),var_pop?: (match_lineup_players_var_pop_order_by | null),var_samp?: (match_lineup_players_var_samp_order_by | null),variance?: (match_lineup_players_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_lineup_players" */
export interface match_lineup_players_arr_rel_insert_input {data: match_lineup_players_insert_input[],
/** upsert condition */
on_conflict?: (match_lineup_players_on_conflict | null)}


/** aggregate avg on columns */
export interface match_lineup_players_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_lineup_players" */
export interface match_lineup_players_avg_order_by {steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'. */
export interface match_lineup_players_bool_exp {_and?: (match_lineup_players_bool_exp[] | null),_not?: (match_lineup_players_bool_exp | null),_or?: (match_lineup_players_bool_exp[] | null),captain?: (Boolean_comparison_exp | null),checked_in?: (Boolean_comparison_exp | null),discord_id?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),lineup?: (match_lineups_bool_exp | null),match_lineup_id?: (uuid_comparison_exp | null),placeholder_name?: (String_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_lineup_players" */
export interface match_lineup_players_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "match_lineup_players" */
export interface match_lineup_players_insert_input {captain?: (Scalars['Boolean'] | null),checked_in?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),lineup?: (match_lineups_obj_rel_insert_input | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface match_lineup_players_max_fieldsGenqlSelection{
    discord_id?: boolean | number
    id?: boolean | number
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_lineup_players" */
export interface match_lineup_players_max_order_by {discord_id?: (order_by | null),id?: (order_by | null),match_lineup_id?: (order_by | null),placeholder_name?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface match_lineup_players_min_fieldsGenqlSelection{
    discord_id?: boolean | number
    id?: boolean | number
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_lineup_players" */
export interface match_lineup_players_min_order_by {discord_id?: (order_by | null),id?: (order_by | null),match_lineup_id?: (order_by | null),placeholder_name?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "match_lineup_players" */
export interface match_lineup_players_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_lineup_playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_lineup_players" */
export interface match_lineup_players_on_conflict {constraint: match_lineup_players_constraint,update_columns?: match_lineup_players_update_column[],where?: (match_lineup_players_bool_exp | null)}


/** Ordering options when selecting data from "match_lineup_players". */
export interface match_lineup_players_order_by {captain?: (order_by | null),checked_in?: (order_by | null),discord_id?: (order_by | null),id?: (order_by | null),lineup?: (match_lineups_order_by | null),match_lineup_id?: (order_by | null),placeholder_name?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null)}


/** primary key columns input for table: match_lineup_players */
export interface match_lineup_players_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_lineup_players" */
export interface match_lineup_players_set_input {captain?: (Scalars['Boolean'] | null),checked_in?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface match_lineup_players_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_lineup_players" */
export interface match_lineup_players_stddev_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_lineup_players_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_lineup_players" */
export interface match_lineup_players_stddev_pop_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_lineup_players_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_lineup_players" */
export interface match_lineup_players_stddev_samp_order_by {steam_id?: (order_by | null)}


/** Streaming cursor of the table "match_lineup_players" */
export interface match_lineup_players_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_lineup_players_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_lineup_players_stream_cursor_value_input {captain?: (Scalars['Boolean'] | null),checked_in?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface match_lineup_players_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_lineup_players" */
export interface match_lineup_players_sum_order_by {steam_id?: (order_by | null)}

export interface match_lineup_players_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_lineup_players_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_lineup_players_set_input | null),
/** filter the rows which have to be updated */
where: match_lineup_players_bool_exp}


/** aggregate var_pop on columns */
export interface match_lineup_players_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_lineup_players" */
export interface match_lineup_players_var_pop_order_by {steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_lineup_players_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_lineup_players" */
export interface match_lineup_players_var_samp_order_by {steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface match_lineup_players_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_lineup_players" */
export interface match_lineup_players_variance_order_by {steam_id?: (order_by | null)}


/** relational table for assigning a team to a match and lineup */
export interface match_lineupsGenqlSelection{
    /** A computed field, executes function "can_pick_map_veto" */
    can_pick_map_veto?: boolean | number
    /** A computed field, executes function "can_pick_region_veto" */
    can_pick_region_veto?: boolean | number
    /** A computed field, executes function "can_update_lineup" */
    can_update_lineup?: boolean | number
    /** An object relationship */
    captain?: v_match_captainsGenqlSelection
    /** An object relationship */
    coach?: playersGenqlSelection
    coach_steam_id?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "is_on_lineup" */
    is_on_lineup?: boolean | number
    /** A computed field, executes function "lineup_is_picking_map_veto" */
    is_picking_map_veto?: boolean | number
    /** A computed field, executes function "lineup_is_picking_region_veto" */
    is_picking_region_veto?: boolean | number
    /** A computed field, executes function "is_match_lineup_ready" */
    is_ready?: boolean | number
    /** An array relationship */
    lineup_players?: (match_lineup_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** An aggregate relationship */
    lineup_players_aggregate?: (match_lineup_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** An array relationship */
    match_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    match_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** A computed field, executes function "get_team_name" */
    name?: boolean | number
    /** An object relationship */
    team?: teamsGenqlSelection
    team_id?: boolean | number
    /** An object relationship */
    v_match_lineup?: v_match_lineupsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_lineups" */
export interface match_lineups_aggregateGenqlSelection{
    aggregate?: match_lineups_aggregate_fieldsGenqlSelection
    nodes?: match_lineupsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_lineups_aggregate_bool_exp {count?: (match_lineups_aggregate_bool_exp_count | null)}

export interface match_lineups_aggregate_bool_exp_count {arguments?: (match_lineups_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_lineups_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_lineups" */
export interface match_lineups_aggregate_fieldsGenqlSelection{
    avg?: match_lineups_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_lineups_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_lineups_max_fieldsGenqlSelection
    min?: match_lineups_min_fieldsGenqlSelection
    stddev?: match_lineups_stddev_fieldsGenqlSelection
    stddev_pop?: match_lineups_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_lineups_stddev_samp_fieldsGenqlSelection
    sum?: match_lineups_sum_fieldsGenqlSelection
    var_pop?: match_lineups_var_pop_fieldsGenqlSelection
    var_samp?: match_lineups_var_samp_fieldsGenqlSelection
    variance?: match_lineups_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_lineups" */
export interface match_lineups_aggregate_order_by {avg?: (match_lineups_avg_order_by | null),count?: (order_by | null),max?: (match_lineups_max_order_by | null),min?: (match_lineups_min_order_by | null),stddev?: (match_lineups_stddev_order_by | null),stddev_pop?: (match_lineups_stddev_pop_order_by | null),stddev_samp?: (match_lineups_stddev_samp_order_by | null),sum?: (match_lineups_sum_order_by | null),var_pop?: (match_lineups_var_pop_order_by | null),var_samp?: (match_lineups_var_samp_order_by | null),variance?: (match_lineups_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_lineups" */
export interface match_lineups_arr_rel_insert_input {data: match_lineups_insert_input[],
/** upsert condition */
on_conflict?: (match_lineups_on_conflict | null)}


/** aggregate avg on columns */
export interface match_lineups_avg_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_lineups" */
export interface match_lineups_avg_order_by {coach_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'. */
export interface match_lineups_bool_exp {_and?: (match_lineups_bool_exp[] | null),_not?: (match_lineups_bool_exp | null),_or?: (match_lineups_bool_exp[] | null),can_pick_map_veto?: (Boolean_comparison_exp | null),can_pick_region_veto?: (Boolean_comparison_exp | null),can_update_lineup?: (Boolean_comparison_exp | null),captain?: (v_match_captains_bool_exp | null),coach?: (players_bool_exp | null),coach_steam_id?: (bigint_comparison_exp | null),id?: (uuid_comparison_exp | null),is_on_lineup?: (Boolean_comparison_exp | null),is_picking_map_veto?: (Boolean_comparison_exp | null),is_picking_region_veto?: (Boolean_comparison_exp | null),is_ready?: (Boolean_comparison_exp | null),lineup_players?: (match_lineup_players_bool_exp | null),lineup_players_aggregate?: (match_lineup_players_aggregate_bool_exp | null),match_veto_picks?: (match_map_veto_picks_bool_exp | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_bool_exp | null),name?: (String_comparison_exp | null),team?: (teams_bool_exp | null),team_id?: (uuid_comparison_exp | null),v_match_lineup?: (v_match_lineups_bool_exp | null)}


/** input type for incrementing numeric columns in table "match_lineups" */
export interface match_lineups_inc_input {coach_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "match_lineups" */
export interface match_lineups_insert_input {captain?: (v_match_captains_obj_rel_insert_input | null),coach?: (players_obj_rel_insert_input | null),coach_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),lineup_players?: (match_lineup_players_arr_rel_insert_input | null),match_veto_picks?: (match_map_veto_picks_arr_rel_insert_input | null),team?: (teams_obj_rel_insert_input | null),team_id?: (Scalars['uuid'] | null),v_match_lineup?: (v_match_lineups_obj_rel_insert_input | null)}


/** aggregate max on columns */
export interface match_lineups_max_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "get_team_name" */
    name?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_lineups" */
export interface match_lineups_max_order_by {coach_steam_id?: (order_by | null),id?: (order_by | null),team_id?: (order_by | null)}


/** aggregate min on columns */
export interface match_lineups_min_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "get_team_name" */
    name?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_lineups" */
export interface match_lineups_min_order_by {coach_steam_id?: (order_by | null),id?: (order_by | null),team_id?: (order_by | null)}


/** response of any mutation on the table "match_lineups" */
export interface match_lineups_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_lineupsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "match_lineups" */
export interface match_lineups_obj_rel_insert_input {data: match_lineups_insert_input,
/** upsert condition */
on_conflict?: (match_lineups_on_conflict | null)}


/** on_conflict condition type for table "match_lineups" */
export interface match_lineups_on_conflict {constraint: match_lineups_constraint,update_columns?: match_lineups_update_column[],where?: (match_lineups_bool_exp | null)}


/** Ordering options when selecting data from "match_lineups". */
export interface match_lineups_order_by {can_pick_map_veto?: (order_by | null),can_pick_region_veto?: (order_by | null),can_update_lineup?: (order_by | null),captain?: (v_match_captains_order_by | null),coach?: (players_order_by | null),coach_steam_id?: (order_by | null),id?: (order_by | null),is_on_lineup?: (order_by | null),is_picking_map_veto?: (order_by | null),is_picking_region_veto?: (order_by | null),is_ready?: (order_by | null),lineup_players_aggregate?: (match_lineup_players_aggregate_order_by | null),match_veto_picks_aggregate?: (match_map_veto_picks_aggregate_order_by | null),name?: (order_by | null),team?: (teams_order_by | null),team_id?: (order_by | null),v_match_lineup?: (v_match_lineups_order_by | null)}


/** primary key columns input for table: match_lineups */
export interface match_lineups_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_lineups" */
export interface match_lineups_set_input {coach_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface match_lineups_stddev_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_lineups" */
export interface match_lineups_stddev_order_by {coach_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_lineups_stddev_pop_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_lineups" */
export interface match_lineups_stddev_pop_order_by {coach_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_lineups_stddev_samp_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_lineups" */
export interface match_lineups_stddev_samp_order_by {coach_steam_id?: (order_by | null)}


/** Streaming cursor of the table "match_lineups" */
export interface match_lineups_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_lineups_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_lineups_stream_cursor_value_input {coach_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface match_lineups_sum_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_lineups" */
export interface match_lineups_sum_order_by {coach_steam_id?: (order_by | null)}

export interface match_lineups_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_lineups_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_lineups_set_input | null),
/** filter the rows which have to be updated */
where: match_lineups_bool_exp}


/** aggregate var_pop on columns */
export interface match_lineups_var_pop_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_lineups" */
export interface match_lineups_var_pop_order_by {coach_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_lineups_var_samp_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_lineups" */
export interface match_lineups_var_samp_order_by {coach_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface match_lineups_variance_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_lineups" */
export interface match_lineups_variance_order_by {coach_steam_id?: (order_by | null)}


/** columns and relationships of "match_map_demos" */
export interface match_map_demosGenqlSelection{
    /** A computed field, executes function "demo_download_url" */
    download_url?: boolean | number
    file?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_map_demos" */
export interface match_map_demos_aggregateGenqlSelection{
    aggregate?: match_map_demos_aggregate_fieldsGenqlSelection
    nodes?: match_map_demosGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_map_demos_aggregate_bool_exp {count?: (match_map_demos_aggregate_bool_exp_count | null)}

export interface match_map_demos_aggregate_bool_exp_count {arguments?: (match_map_demos_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_map_demos_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_map_demos" */
export interface match_map_demos_aggregate_fieldsGenqlSelection{
    avg?: match_map_demos_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_map_demos_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_map_demos_max_fieldsGenqlSelection
    min?: match_map_demos_min_fieldsGenqlSelection
    stddev?: match_map_demos_stddev_fieldsGenqlSelection
    stddev_pop?: match_map_demos_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_map_demos_stddev_samp_fieldsGenqlSelection
    sum?: match_map_demos_sum_fieldsGenqlSelection
    var_pop?: match_map_demos_var_pop_fieldsGenqlSelection
    var_samp?: match_map_demos_var_samp_fieldsGenqlSelection
    variance?: match_map_demos_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_map_demos" */
export interface match_map_demos_aggregate_order_by {avg?: (match_map_demos_avg_order_by | null),count?: (order_by | null),max?: (match_map_demos_max_order_by | null),min?: (match_map_demos_min_order_by | null),stddev?: (match_map_demos_stddev_order_by | null),stddev_pop?: (match_map_demos_stddev_pop_order_by | null),stddev_samp?: (match_map_demos_stddev_samp_order_by | null),sum?: (match_map_demos_sum_order_by | null),var_pop?: (match_map_demos_var_pop_order_by | null),var_samp?: (match_map_demos_var_samp_order_by | null),variance?: (match_map_demos_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_map_demos" */
export interface match_map_demos_arr_rel_insert_input {data: match_map_demos_insert_input[],
/** upsert condition */
on_conflict?: (match_map_demos_on_conflict | null)}


/** aggregate avg on columns */
export interface match_map_demos_avg_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_map_demos" */
export interface match_map_demos_avg_order_by {size?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'. */
export interface match_map_demos_bool_exp {_and?: (match_map_demos_bool_exp[] | null),_not?: (match_map_demos_bool_exp | null),_or?: (match_map_demos_bool_exp[] | null),download_url?: (String_comparison_exp | null),file?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),size?: (Int_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_map_demos" */
export interface match_map_demos_inc_input {size?: (Scalars['Int'] | null)}


/** input type for inserting data into table "match_map_demos" */
export interface match_map_demos_insert_input {file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),size?: (Scalars['Int'] | null)}


/** aggregate max on columns */
export interface match_map_demos_max_fieldsGenqlSelection{
    /** A computed field, executes function "demo_download_url" */
    download_url?: boolean | number
    file?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_map_demos" */
export interface match_map_demos_max_order_by {file?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),size?: (order_by | null)}


/** aggregate min on columns */
export interface match_map_demos_min_fieldsGenqlSelection{
    /** A computed field, executes function "demo_download_url" */
    download_url?: boolean | number
    file?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_map_demos" */
export interface match_map_demos_min_order_by {file?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),size?: (order_by | null)}


/** response of any mutation on the table "match_map_demos" */
export interface match_map_demos_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_map_demosGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_map_demos" */
export interface match_map_demos_on_conflict {constraint: match_map_demos_constraint,update_columns?: match_map_demos_update_column[],where?: (match_map_demos_bool_exp | null)}


/** Ordering options when selecting data from "match_map_demos". */
export interface match_map_demos_order_by {download_url?: (order_by | null),file?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),size?: (order_by | null)}


/** primary key columns input for table: match_map_demos */
export interface match_map_demos_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_map_demos" */
export interface match_map_demos_set_input {file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),size?: (Scalars['Int'] | null)}


/** aggregate stddev on columns */
export interface match_map_demos_stddev_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_map_demos" */
export interface match_map_demos_stddev_order_by {size?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_map_demos_stddev_pop_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_map_demos" */
export interface match_map_demos_stddev_pop_order_by {size?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_map_demos_stddev_samp_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_map_demos" */
export interface match_map_demos_stddev_samp_order_by {size?: (order_by | null)}


/** Streaming cursor of the table "match_map_demos" */
export interface match_map_demos_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_map_demos_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_map_demos_stream_cursor_value_input {file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),size?: (Scalars['Int'] | null)}


/** aggregate sum on columns */
export interface match_map_demos_sum_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_map_demos" */
export interface match_map_demos_sum_order_by {size?: (order_by | null)}

export interface match_map_demos_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_map_demos_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_map_demos_set_input | null),
/** filter the rows which have to be updated */
where: match_map_demos_bool_exp}


/** aggregate var_pop on columns */
export interface match_map_demos_var_pop_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_map_demos" */
export interface match_map_demos_var_pop_order_by {size?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_map_demos_var_samp_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_map_demos" */
export interface match_map_demos_var_samp_order_by {size?: (order_by | null)}


/** aggregate variance on columns */
export interface match_map_demos_variance_fieldsGenqlSelection{
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_map_demos" */
export interface match_map_demos_variance_order_by {size?: (order_by | null)}


/** columns and relationships of "match_map_rounds" */
export interface match_map_roundsGenqlSelection{
    backup_file?: boolean | number
    id?: boolean | number
    /** An array relationship */
    kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_side?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_side?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    winning_side?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_map_rounds" */
export interface match_map_rounds_aggregateGenqlSelection{
    aggregate?: match_map_rounds_aggregate_fieldsGenqlSelection
    nodes?: match_map_roundsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_map_rounds_aggregate_bool_exp {count?: (match_map_rounds_aggregate_bool_exp_count | null)}

export interface match_map_rounds_aggregate_bool_exp_count {arguments?: (match_map_rounds_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_map_rounds_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_map_rounds" */
export interface match_map_rounds_aggregate_fieldsGenqlSelection{
    avg?: match_map_rounds_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_map_rounds_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_map_rounds_max_fieldsGenqlSelection
    min?: match_map_rounds_min_fieldsGenqlSelection
    stddev?: match_map_rounds_stddev_fieldsGenqlSelection
    stddev_pop?: match_map_rounds_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_map_rounds_stddev_samp_fieldsGenqlSelection
    sum?: match_map_rounds_sum_fieldsGenqlSelection
    var_pop?: match_map_rounds_var_pop_fieldsGenqlSelection
    var_samp?: match_map_rounds_var_samp_fieldsGenqlSelection
    variance?: match_map_rounds_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_map_rounds" */
export interface match_map_rounds_aggregate_order_by {avg?: (match_map_rounds_avg_order_by | null),count?: (order_by | null),max?: (match_map_rounds_max_order_by | null),min?: (match_map_rounds_min_order_by | null),stddev?: (match_map_rounds_stddev_order_by | null),stddev_pop?: (match_map_rounds_stddev_pop_order_by | null),stddev_samp?: (match_map_rounds_stddev_samp_order_by | null),sum?: (match_map_rounds_sum_order_by | null),var_pop?: (match_map_rounds_var_pop_order_by | null),var_samp?: (match_map_rounds_var_samp_order_by | null),variance?: (match_map_rounds_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_map_rounds" */
export interface match_map_rounds_arr_rel_insert_input {data: match_map_rounds_insert_input[],
/** upsert condition */
on_conflict?: (match_map_rounds_on_conflict | null)}


/** aggregate avg on columns */
export interface match_map_rounds_avg_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_map_rounds" */
export interface match_map_rounds_avg_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'. */
export interface match_map_rounds_bool_exp {_and?: (match_map_rounds_bool_exp[] | null),_not?: (match_map_rounds_bool_exp | null),_or?: (match_map_rounds_bool_exp[] | null),backup_file?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),kills?: (player_kills_bool_exp | null),kills_aggregate?: (player_kills_aggregate_bool_exp | null),lineup_1_money?: (Int_comparison_exp | null),lineup_1_score?: (Int_comparison_exp | null),lineup_1_side?: (e_sides_enum_comparison_exp | null),lineup_1_timeouts_available?: (Int_comparison_exp | null),lineup_2_money?: (Int_comparison_exp | null),lineup_2_score?: (Int_comparison_exp | null),lineup_2_side?: (e_sides_enum_comparison_exp | null),lineup_2_timeouts_available?: (Int_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),round?: (Int_comparison_exp | null),time?: (timestamptz_comparison_exp | null),winning_side?: (String_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_map_rounds" */
export interface match_map_rounds_inc_input {lineup_1_money?: (Scalars['Int'] | null),lineup_1_score?: (Scalars['Int'] | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_money?: (Scalars['Int'] | null),lineup_2_score?: (Scalars['Int'] | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "match_map_rounds" */
export interface match_map_rounds_insert_input {backup_file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),kills?: (player_kills_arr_rel_insert_input | null),lineup_1_money?: (Scalars['Int'] | null),lineup_1_score?: (Scalars['Int'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_money?: (Scalars['Int'] | null),lineup_2_score?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),winning_side?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface match_map_rounds_max_fieldsGenqlSelection{
    backup_file?: boolean | number
    id?: boolean | number
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    winning_side?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_map_rounds" */
export interface match_map_rounds_max_order_by {backup_file?: (order_by | null),id?: (order_by | null),lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),winning_side?: (order_by | null)}


/** aggregate min on columns */
export interface match_map_rounds_min_fieldsGenqlSelection{
    backup_file?: boolean | number
    id?: boolean | number
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    winning_side?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_map_rounds" */
export interface match_map_rounds_min_order_by {backup_file?: (order_by | null),id?: (order_by | null),lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),winning_side?: (order_by | null)}


/** response of any mutation on the table "match_map_rounds" */
export interface match_map_rounds_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_map_roundsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_map_rounds" */
export interface match_map_rounds_on_conflict {constraint: match_map_rounds_constraint,update_columns?: match_map_rounds_update_column[],where?: (match_map_rounds_bool_exp | null)}


/** Ordering options when selecting data from "match_map_rounds". */
export interface match_map_rounds_order_by {backup_file?: (order_by | null),id?: (order_by | null),kills_aggregate?: (player_kills_aggregate_order_by | null),lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_side?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_side?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),winning_side?: (order_by | null)}


/** primary key columns input for table: match_map_rounds */
export interface match_map_rounds_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_map_rounds" */
export interface match_map_rounds_set_input {backup_file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),lineup_1_money?: (Scalars['Int'] | null),lineup_1_score?: (Scalars['Int'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_money?: (Scalars['Int'] | null),lineup_2_score?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),winning_side?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface match_map_rounds_stddev_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_map_rounds" */
export interface match_map_rounds_stddev_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_map_rounds_stddev_pop_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_map_rounds" */
export interface match_map_rounds_stddev_pop_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_map_rounds_stddev_samp_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_map_rounds" */
export interface match_map_rounds_stddev_samp_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "match_map_rounds" */
export interface match_map_rounds_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_map_rounds_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_map_rounds_stream_cursor_value_input {backup_file?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),lineup_1_money?: (Scalars['Int'] | null),lineup_1_score?: (Scalars['Int'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_money?: (Scalars['Int'] | null),lineup_2_score?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),winning_side?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface match_map_rounds_sum_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_map_rounds" */
export interface match_map_rounds_sum_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}

export interface match_map_rounds_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_map_rounds_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_map_rounds_set_input | null),
/** filter the rows which have to be updated */
where: match_map_rounds_bool_exp}


/** aggregate var_pop on columns */
export interface match_map_rounds_var_pop_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_map_rounds" */
export interface match_map_rounds_var_pop_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_map_rounds_var_samp_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_map_rounds" */
export interface match_map_rounds_var_samp_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface match_map_rounds_variance_fieldsGenqlSelection{
    lineup_1_money?: boolean | number
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    lineup_2_money?: boolean | number
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_map_rounds" */
export interface match_map_rounds_variance_order_by {lineup_1_money?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_money?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "match_map_veto_picks" */
export interface match_map_veto_picksGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    map?: mapsGenqlSelection
    map_id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_lineup?: match_lineupsGenqlSelection
    match_lineup_id?: boolean | number
    side?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_map_veto_picks" */
export interface match_map_veto_picks_aggregateGenqlSelection{
    aggregate?: match_map_veto_picks_aggregate_fieldsGenqlSelection
    nodes?: match_map_veto_picksGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_map_veto_picks_aggregate_bool_exp {count?: (match_map_veto_picks_aggregate_bool_exp_count | null)}

export interface match_map_veto_picks_aggregate_bool_exp_count {arguments?: (match_map_veto_picks_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_map_veto_picks_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_map_veto_picks" */
export interface match_map_veto_picks_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (match_map_veto_picks_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_map_veto_picks_max_fieldsGenqlSelection
    min?: match_map_veto_picks_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_map_veto_picks" */
export interface match_map_veto_picks_aggregate_order_by {count?: (order_by | null),max?: (match_map_veto_picks_max_order_by | null),min?: (match_map_veto_picks_min_order_by | null)}


/** input type for inserting array relation for remote table "match_map_veto_picks" */
export interface match_map_veto_picks_arr_rel_insert_input {data: match_map_veto_picks_insert_input[],
/** upsert condition */
on_conflict?: (match_map_veto_picks_on_conflict | null)}


/** Boolean expression to filter rows from the table "match_map_veto_picks". All fields are combined with a logical 'AND'. */
export interface match_map_veto_picks_bool_exp {_and?: (match_map_veto_picks_bool_exp[] | null),_not?: (match_map_veto_picks_bool_exp | null),_or?: (match_map_veto_picks_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),map?: (maps_bool_exp | null),map_id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_lineup?: (match_lineups_bool_exp | null),match_lineup_id?: (uuid_comparison_exp | null),side?: (String_comparison_exp | null),type?: (e_veto_pick_types_enum_comparison_exp | null)}


/** input type for inserting data into table "match_map_veto_picks" */
export interface match_map_veto_picks_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),map?: (maps_obj_rel_insert_input | null),map_id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_lineup?: (match_lineups_obj_rel_insert_input | null),match_lineup_id?: (Scalars['uuid'] | null),side?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}


/** aggregate max on columns */
export interface match_map_veto_picks_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    map_id?: boolean | number
    match_id?: boolean | number
    match_lineup_id?: boolean | number
    side?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_map_veto_picks" */
export interface match_map_veto_picks_max_order_by {created_at?: (order_by | null),id?: (order_by | null),map_id?: (order_by | null),match_id?: (order_by | null),match_lineup_id?: (order_by | null),side?: (order_by | null)}


/** aggregate min on columns */
export interface match_map_veto_picks_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    map_id?: boolean | number
    match_id?: boolean | number
    match_lineup_id?: boolean | number
    side?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_map_veto_picks" */
export interface match_map_veto_picks_min_order_by {created_at?: (order_by | null),id?: (order_by | null),map_id?: (order_by | null),match_id?: (order_by | null),match_lineup_id?: (order_by | null),side?: (order_by | null)}


/** response of any mutation on the table "match_map_veto_picks" */
export interface match_map_veto_picks_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_map_veto_picksGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_map_veto_picks" */
export interface match_map_veto_picks_on_conflict {constraint: match_map_veto_picks_constraint,update_columns?: match_map_veto_picks_update_column[],where?: (match_map_veto_picks_bool_exp | null)}


/** Ordering options when selecting data from "match_map_veto_picks". */
export interface match_map_veto_picks_order_by {created_at?: (order_by | null),id?: (order_by | null),map?: (maps_order_by | null),map_id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_lineup?: (match_lineups_order_by | null),match_lineup_id?: (order_by | null),side?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: match_map_veto_picks */
export interface match_map_veto_picks_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_map_veto_picks" */
export interface match_map_veto_picks_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),side?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}


/** Streaming cursor of the table "match_map_veto_picks" */
export interface match_map_veto_picks_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_map_veto_picks_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_map_veto_picks_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),side?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}

export interface match_map_veto_picks_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (match_map_veto_picks_set_input | null),
/** filter the rows which have to be updated */
where: match_map_veto_picks_bool_exp}


/** columns and relationships of "match_maps" */
export interface match_mapsGenqlSelection{
    created_at?: boolean | number
    /** An array relationship */
    demos?: (match_map_demosGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** An aggregate relationship */
    demos_aggregate?: (match_map_demos_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url?: boolean | number
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** An object relationship */
    e_match_map_status?: e_match_map_statusGenqlSelection
    ended_at?: boolean | number
    /** An array relationship */
    flashes?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    flashes_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    id?: boolean | number
    /** A computed field, executes function "is_current_match_map" */
    is_current_map?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_side?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_side?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    /** An object relationship */
    map?: mapsGenqlSelection
    map_id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An array relationship */
    objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    order?: boolean | number
    /** An array relationship */
    player_assists?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    player_assists_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An array relationship */
    player_damages?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    player_damages_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An array relationship */
    player_kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    player_kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An array relationship */
    player_unused_utilities?: (player_unused_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_unused_utilities_aggregate?: (player_unused_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An array relationship */
    rounds?: (match_map_roundsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** An aggregate relationship */
    rounds_aggregate?: (match_map_rounds_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    started_at?: boolean | number
    status?: boolean | number
    /** An array relationship */
    utility?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    utility_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An array relationship */
    vetos?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    vetos_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_maps" */
export interface match_maps_aggregateGenqlSelection{
    aggregate?: match_maps_aggregate_fieldsGenqlSelection
    nodes?: match_mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_maps_aggregate_bool_exp {count?: (match_maps_aggregate_bool_exp_count | null)}

export interface match_maps_aggregate_bool_exp_count {arguments?: (match_maps_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_maps_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_maps" */
export interface match_maps_aggregate_fieldsGenqlSelection{
    avg?: match_maps_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_maps_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_maps_max_fieldsGenqlSelection
    min?: match_maps_min_fieldsGenqlSelection
    stddev?: match_maps_stddev_fieldsGenqlSelection
    stddev_pop?: match_maps_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_maps_stddev_samp_fieldsGenqlSelection
    sum?: match_maps_sum_fieldsGenqlSelection
    var_pop?: match_maps_var_pop_fieldsGenqlSelection
    var_samp?: match_maps_var_samp_fieldsGenqlSelection
    variance?: match_maps_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_maps" */
export interface match_maps_aggregate_order_by {avg?: (match_maps_avg_order_by | null),count?: (order_by | null),max?: (match_maps_max_order_by | null),min?: (match_maps_min_order_by | null),stddev?: (match_maps_stddev_order_by | null),stddev_pop?: (match_maps_stddev_pop_order_by | null),stddev_samp?: (match_maps_stddev_samp_order_by | null),sum?: (match_maps_sum_order_by | null),var_pop?: (match_maps_var_pop_order_by | null),var_samp?: (match_maps_var_samp_order_by | null),variance?: (match_maps_variance_order_by | null)}


/** input type for inserting array relation for remote table "match_maps" */
export interface match_maps_arr_rel_insert_input {data: match_maps_insert_input[],
/** upsert condition */
on_conflict?: (match_maps_on_conflict | null)}


/** aggregate avg on columns */
export interface match_maps_avg_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "match_maps" */
export interface match_maps_avg_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'. */
export interface match_maps_bool_exp {_and?: (match_maps_bool_exp[] | null),_not?: (match_maps_bool_exp | null),_or?: (match_maps_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),demos?: (match_map_demos_bool_exp | null),demos_aggregate?: (match_map_demos_aggregate_bool_exp | null),demos_download_url?: (String_comparison_exp | null),demos_total_size?: (Int_comparison_exp | null),e_match_map_status?: (e_match_map_status_bool_exp | null),ended_at?: (timestamptz_comparison_exp | null),flashes?: (player_flashes_bool_exp | null),flashes_aggregate?: (player_flashes_aggregate_bool_exp | null),id?: (uuid_comparison_exp | null),is_current_map?: (Boolean_comparison_exp | null),lineup_1_score?: (Int_comparison_exp | null),lineup_1_side?: (e_sides_enum_comparison_exp | null),lineup_1_timeouts_available?: (Int_comparison_exp | null),lineup_2_score?: (Int_comparison_exp | null),lineup_2_side?: (e_sides_enum_comparison_exp | null),lineup_2_timeouts_available?: (Int_comparison_exp | null),map?: (maps_bool_exp | null),map_id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),objectives?: (player_objectives_bool_exp | null),objectives_aggregate?: (player_objectives_aggregate_bool_exp | null),order?: (Int_comparison_exp | null),player_assists?: (player_assists_bool_exp | null),player_assists_aggregate?: (player_assists_aggregate_bool_exp | null),player_damages?: (player_damages_bool_exp | null),player_damages_aggregate?: (player_damages_aggregate_bool_exp | null),player_kills?: (player_kills_bool_exp | null),player_kills_aggregate?: (player_kills_aggregate_bool_exp | null),player_unused_utilities?: (player_unused_utility_bool_exp | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_bool_exp | null),rounds?: (match_map_rounds_bool_exp | null),rounds_aggregate?: (match_map_rounds_aggregate_bool_exp | null),started_at?: (timestamptz_comparison_exp | null),status?: (e_match_map_status_enum_comparison_exp | null),utility?: (player_utility_bool_exp | null),utility_aggregate?: (player_utility_aggregate_bool_exp | null),vetos?: (match_map_veto_picks_bool_exp | null),vetos_aggregate?: (match_map_veto_picks_aggregate_bool_exp | null),winning_lineup_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_maps" */
export interface match_maps_inc_input {lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),order?: (Scalars['Int'] | null)}


/** input type for inserting data into table "match_maps" */
export interface match_maps_insert_input {created_at?: (Scalars['timestamptz'] | null),demos?: (match_map_demos_arr_rel_insert_input | null),e_match_map_status?: (e_match_map_status_obj_rel_insert_input | null),ended_at?: (Scalars['timestamptz'] | null),flashes?: (player_flashes_arr_rel_insert_input | null),id?: (Scalars['uuid'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),map?: (maps_obj_rel_insert_input | null),map_id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),objectives?: (player_objectives_arr_rel_insert_input | null),order?: (Scalars['Int'] | null),player_assists?: (player_assists_arr_rel_insert_input | null),player_damages?: (player_damages_arr_rel_insert_input | null),player_kills?: (player_kills_arr_rel_insert_input | null),player_unused_utilities?: (player_unused_utility_arr_rel_insert_input | null),rounds?: (match_map_rounds_arr_rel_insert_input | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_map_status_enum | null),utility?: (player_utility_arr_rel_insert_input | null),vetos?: (match_map_veto_picks_arr_rel_insert_input | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface match_maps_max_fieldsGenqlSelection{
    created_at?: boolean | number
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url?: boolean | number
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    ended_at?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    map_id?: boolean | number
    match_id?: boolean | number
    order?: boolean | number
    started_at?: boolean | number
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_maps" */
export interface match_maps_max_order_by {created_at?: (order_by | null),ended_at?: (order_by | null),id?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),map_id?: (order_by | null),match_id?: (order_by | null),order?: (order_by | null),started_at?: (order_by | null),winning_lineup_id?: (order_by | null)}


/** aggregate min on columns */
export interface match_maps_min_fieldsGenqlSelection{
    created_at?: boolean | number
    /** A computed field, executes function "match_map_demo_download_url" */
    demos_download_url?: boolean | number
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    ended_at?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    map_id?: boolean | number
    match_id?: boolean | number
    order?: boolean | number
    started_at?: boolean | number
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_maps" */
export interface match_maps_min_order_by {created_at?: (order_by | null),ended_at?: (order_by | null),id?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),map_id?: (order_by | null),match_id?: (order_by | null),order?: (order_by | null),started_at?: (order_by | null),winning_lineup_id?: (order_by | null)}


/** response of any mutation on the table "match_maps" */
export interface match_maps_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "match_maps" */
export interface match_maps_obj_rel_insert_input {data: match_maps_insert_input,
/** upsert condition */
on_conflict?: (match_maps_on_conflict | null)}


/** on_conflict condition type for table "match_maps" */
export interface match_maps_on_conflict {constraint: match_maps_constraint,update_columns?: match_maps_update_column[],where?: (match_maps_bool_exp | null)}


/** Ordering options when selecting data from "match_maps". */
export interface match_maps_order_by {created_at?: (order_by | null),demos_aggregate?: (match_map_demos_aggregate_order_by | null),demos_download_url?: (order_by | null),demos_total_size?: (order_by | null),e_match_map_status?: (e_match_map_status_order_by | null),ended_at?: (order_by | null),flashes_aggregate?: (player_flashes_aggregate_order_by | null),id?: (order_by | null),is_current_map?: (order_by | null),lineup_1_score?: (order_by | null),lineup_1_side?: (order_by | null),lineup_1_timeouts_available?: (order_by | null),lineup_2_score?: (order_by | null),lineup_2_side?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),map?: (maps_order_by | null),map_id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),objectives_aggregate?: (player_objectives_aggregate_order_by | null),order?: (order_by | null),player_assists_aggregate?: (player_assists_aggregate_order_by | null),player_damages_aggregate?: (player_damages_aggregate_order_by | null),player_kills_aggregate?: (player_kills_aggregate_order_by | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_order_by | null),rounds_aggregate?: (match_map_rounds_aggregate_order_by | null),started_at?: (order_by | null),status?: (order_by | null),utility_aggregate?: (player_utility_aggregate_order_by | null),vetos_aggregate?: (match_map_veto_picks_aggregate_order_by | null),winning_lineup_id?: (order_by | null)}


/** primary key columns input for table: match_maps */
export interface match_maps_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_maps" */
export interface match_maps_set_input {created_at?: (Scalars['timestamptz'] | null),ended_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),order?: (Scalars['Int'] | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_map_status_enum | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface match_maps_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "match_maps" */
export interface match_maps_stddev_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface match_maps_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "match_maps" */
export interface match_maps_stddev_pop_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface match_maps_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "match_maps" */
export interface match_maps_stddev_samp_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** Streaming cursor of the table "match_maps" */
export interface match_maps_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_maps_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_maps_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),ended_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),lineup_1_side?: (e_sides_enum | null),lineup_1_timeouts_available?: (Scalars['Int'] | null),lineup_2_side?: (e_sides_enum | null),lineup_2_timeouts_available?: (Scalars['Int'] | null),map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),order?: (Scalars['Int'] | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_map_status_enum | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface match_maps_sum_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "match_maps" */
export interface match_maps_sum_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}

export interface match_maps_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_maps_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_maps_set_input | null),
/** filter the rows which have to be updated */
where: match_maps_bool_exp}


/** aggregate var_pop on columns */
export interface match_maps_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "match_maps" */
export interface match_maps_var_pop_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** aggregate var_samp on columns */
export interface match_maps_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "match_maps" */
export interface match_maps_var_samp_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** aggregate variance on columns */
export interface match_maps_variance_fieldsGenqlSelection{
    /** A computed field, executes function "match_map_demo_total_size" */
    demos_total_size?: boolean | number
    /** A computed field, executes function "lineup_1_score" */
    lineup_1_score?: boolean | number
    lineup_1_timeouts_available?: boolean | number
    /** A computed field, executes function "lineup_2_score" */
    lineup_2_score?: boolean | number
    lineup_2_timeouts_available?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "match_maps" */
export interface match_maps_variance_order_by {lineup_1_timeouts_available?: (order_by | null),lineup_2_timeouts_available?: (order_by | null),order?: (order_by | null)}


/** columns and relationships of "match_options" */
export interface match_optionsGenqlSelection{
    best_of?: boolean | number
    coaches?: boolean | number
    /** A computed field, executes function "has_active_matches" */
    has_active_matches?: boolean | number
    id?: boolean | number
    invite_code?: boolean | number
    knife_round?: boolean | number
    lobby_access?: boolean | number
    /** An object relationship */
    map_pool?: map_poolsGenqlSelection
    map_pool_id?: boolean | number
    map_veto?: boolean | number
    /** An array relationship */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** An aggregate relationship */
    matches_aggregate?: (matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    overtime?: boolean | number
    prefer_dedicated_server?: boolean | number
    ready_setting?: boolean | number
    region_veto?: boolean | number
    regions?: boolean | number
    tech_timeout_setting?: boolean | number
    timeout_setting?: boolean | number
    /** An object relationship */
    tournament?: tournamentsGenqlSelection
    tv_delay?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_options" */
export interface match_options_aggregateGenqlSelection{
    aggregate?: match_options_aggregate_fieldsGenqlSelection
    nodes?: match_optionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "match_options" */
export interface match_options_aggregate_fieldsGenqlSelection{
    avg?: match_options_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (match_options_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_options_max_fieldsGenqlSelection
    min?: match_options_min_fieldsGenqlSelection
    stddev?: match_options_stddev_fieldsGenqlSelection
    stddev_pop?: match_options_stddev_pop_fieldsGenqlSelection
    stddev_samp?: match_options_stddev_samp_fieldsGenqlSelection
    sum?: match_options_sum_fieldsGenqlSelection
    var_pop?: match_options_var_pop_fieldsGenqlSelection
    var_samp?: match_options_var_samp_fieldsGenqlSelection
    variance?: match_options_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface match_options_avg_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "match_options". All fields are combined with a logical 'AND'. */
export interface match_options_bool_exp {_and?: (match_options_bool_exp[] | null),_not?: (match_options_bool_exp | null),_or?: (match_options_bool_exp[] | null),best_of?: (Int_comparison_exp | null),coaches?: (Boolean_comparison_exp | null),has_active_matches?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),invite_code?: (String_comparison_exp | null),knife_round?: (Boolean_comparison_exp | null),lobby_access?: (e_lobby_access_enum_comparison_exp | null),map_pool?: (map_pools_bool_exp | null),map_pool_id?: (uuid_comparison_exp | null),map_veto?: (Boolean_comparison_exp | null),matches?: (matches_bool_exp | null),matches_aggregate?: (matches_aggregate_bool_exp | null),mr?: (Int_comparison_exp | null),number_of_substitutes?: (Int_comparison_exp | null),overtime?: (Boolean_comparison_exp | null),prefer_dedicated_server?: (Boolean_comparison_exp | null),ready_setting?: (e_ready_settings_enum_comparison_exp | null),region_veto?: (Boolean_comparison_exp | null),regions?: (String_array_comparison_exp | null),tech_timeout_setting?: (e_timeout_settings_enum_comparison_exp | null),timeout_setting?: (e_timeout_settings_enum_comparison_exp | null),tournament?: (tournaments_bool_exp | null),tv_delay?: (Int_comparison_exp | null),type?: (e_match_types_enum_comparison_exp | null)}


/** input type for incrementing numeric columns in table "match_options" */
export interface match_options_inc_input {best_of?: (Scalars['Int'] | null),mr?: (Scalars['Int'] | null),number_of_substitutes?: (Scalars['Int'] | null),tv_delay?: (Scalars['Int'] | null)}


/** input type for inserting data into table "match_options" */
export interface match_options_insert_input {best_of?: (Scalars['Int'] | null),coaches?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),invite_code?: (Scalars['String'] | null),knife_round?: (Scalars['Boolean'] | null),lobby_access?: (e_lobby_access_enum | null),map_pool?: (map_pools_obj_rel_insert_input | null),map_pool_id?: (Scalars['uuid'] | null),map_veto?: (Scalars['Boolean'] | null),matches?: (matches_arr_rel_insert_input | null),mr?: (Scalars['Int'] | null),number_of_substitutes?: (Scalars['Int'] | null),overtime?: (Scalars['Boolean'] | null),prefer_dedicated_server?: (Scalars['Boolean'] | null),ready_setting?: (e_ready_settings_enum | null),region_veto?: (Scalars['Boolean'] | null),regions?: (Scalars['String'][] | null),tech_timeout_setting?: (e_timeout_settings_enum | null),timeout_setting?: (e_timeout_settings_enum | null),tournament?: (tournaments_obj_rel_insert_input | null),tv_delay?: (Scalars['Int'] | null),type?: (e_match_types_enum | null)}


/** aggregate max on columns */
export interface match_options_max_fieldsGenqlSelection{
    best_of?: boolean | number
    id?: boolean | number
    invite_code?: boolean | number
    map_pool_id?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    regions?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface match_options_min_fieldsGenqlSelection{
    best_of?: boolean | number
    id?: boolean | number
    invite_code?: boolean | number
    map_pool_id?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    regions?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "match_options" */
export interface match_options_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_optionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "match_options" */
export interface match_options_obj_rel_insert_input {data: match_options_insert_input,
/** upsert condition */
on_conflict?: (match_options_on_conflict | null)}


/** on_conflict condition type for table "match_options" */
export interface match_options_on_conflict {constraint: match_options_constraint,update_columns?: match_options_update_column[],where?: (match_options_bool_exp | null)}


/** Ordering options when selecting data from "match_options". */
export interface match_options_order_by {best_of?: (order_by | null),coaches?: (order_by | null),has_active_matches?: (order_by | null),id?: (order_by | null),invite_code?: (order_by | null),knife_round?: (order_by | null),lobby_access?: (order_by | null),map_pool?: (map_pools_order_by | null),map_pool_id?: (order_by | null),map_veto?: (order_by | null),matches_aggregate?: (matches_aggregate_order_by | null),mr?: (order_by | null),number_of_substitutes?: (order_by | null),overtime?: (order_by | null),prefer_dedicated_server?: (order_by | null),ready_setting?: (order_by | null),region_veto?: (order_by | null),regions?: (order_by | null),tech_timeout_setting?: (order_by | null),timeout_setting?: (order_by | null),tournament?: (tournaments_order_by | null),tv_delay?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: match_options */
export interface match_options_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_options" */
export interface match_options_set_input {best_of?: (Scalars['Int'] | null),coaches?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),invite_code?: (Scalars['String'] | null),knife_round?: (Scalars['Boolean'] | null),lobby_access?: (e_lobby_access_enum | null),map_pool_id?: (Scalars['uuid'] | null),map_veto?: (Scalars['Boolean'] | null),mr?: (Scalars['Int'] | null),number_of_substitutes?: (Scalars['Int'] | null),overtime?: (Scalars['Boolean'] | null),prefer_dedicated_server?: (Scalars['Boolean'] | null),ready_setting?: (e_ready_settings_enum | null),region_veto?: (Scalars['Boolean'] | null),regions?: (Scalars['String'][] | null),tech_timeout_setting?: (e_timeout_settings_enum | null),timeout_setting?: (e_timeout_settings_enum | null),tv_delay?: (Scalars['Int'] | null),type?: (e_match_types_enum | null)}


/** aggregate stddev on columns */
export interface match_options_stddev_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface match_options_stddev_pop_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface match_options_stddev_samp_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "match_options" */
export interface match_options_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_options_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_options_stream_cursor_value_input {best_of?: (Scalars['Int'] | null),coaches?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),invite_code?: (Scalars['String'] | null),knife_round?: (Scalars['Boolean'] | null),lobby_access?: (e_lobby_access_enum | null),map_pool_id?: (Scalars['uuid'] | null),map_veto?: (Scalars['Boolean'] | null),mr?: (Scalars['Int'] | null),number_of_substitutes?: (Scalars['Int'] | null),overtime?: (Scalars['Boolean'] | null),prefer_dedicated_server?: (Scalars['Boolean'] | null),ready_setting?: (e_ready_settings_enum | null),region_veto?: (Scalars['Boolean'] | null),regions?: (Scalars['String'][] | null),tech_timeout_setting?: (e_timeout_settings_enum | null),timeout_setting?: (e_timeout_settings_enum | null),tv_delay?: (Scalars['Int'] | null),type?: (e_match_types_enum | null)}


/** aggregate sum on columns */
export interface match_options_sum_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_options_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (match_options_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (match_options_set_input | null),
/** filter the rows which have to be updated */
where: match_options_bool_exp}


/** aggregate var_pop on columns */
export interface match_options_var_pop_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface match_options_var_samp_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface match_options_variance_fieldsGenqlSelection{
    best_of?: boolean | number
    mr?: boolean | number
    number_of_substitutes?: boolean | number
    tv_delay?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "match_region_veto_picks" */
export interface match_region_veto_picksGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_lineup?: match_lineupsGenqlSelection
    match_lineup_id?: boolean | number
    region?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_region_veto_picks" */
export interface match_region_veto_picks_aggregateGenqlSelection{
    aggregate?: match_region_veto_picks_aggregate_fieldsGenqlSelection
    nodes?: match_region_veto_picksGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_region_veto_picks_aggregate_bool_exp {count?: (match_region_veto_picks_aggregate_bool_exp_count | null)}

export interface match_region_veto_picks_aggregate_bool_exp_count {arguments?: (match_region_veto_picks_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_region_veto_picks_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_region_veto_picks" */
export interface match_region_veto_picks_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (match_region_veto_picks_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_region_veto_picks_max_fieldsGenqlSelection
    min?: match_region_veto_picks_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_region_veto_picks" */
export interface match_region_veto_picks_aggregate_order_by {count?: (order_by | null),max?: (match_region_veto_picks_max_order_by | null),min?: (match_region_veto_picks_min_order_by | null)}


/** input type for inserting array relation for remote table "match_region_veto_picks" */
export interface match_region_veto_picks_arr_rel_insert_input {data: match_region_veto_picks_insert_input[],
/** upsert condition */
on_conflict?: (match_region_veto_picks_on_conflict | null)}


/** Boolean expression to filter rows from the table "match_region_veto_picks". All fields are combined with a logical 'AND'. */
export interface match_region_veto_picks_bool_exp {_and?: (match_region_veto_picks_bool_exp[] | null),_not?: (match_region_veto_picks_bool_exp | null),_or?: (match_region_veto_picks_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_lineup?: (match_lineups_bool_exp | null),match_lineup_id?: (uuid_comparison_exp | null),region?: (String_comparison_exp | null),type?: (e_veto_pick_types_enum_comparison_exp | null)}


/** input type for inserting data into table "match_region_veto_picks" */
export interface match_region_veto_picks_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_lineup?: (match_lineups_obj_rel_insert_input | null),match_lineup_id?: (Scalars['uuid'] | null),region?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}


/** aggregate max on columns */
export interface match_region_veto_picks_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_lineup_id?: boolean | number
    region?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_region_veto_picks" */
export interface match_region_veto_picks_max_order_by {created_at?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_lineup_id?: (order_by | null),region?: (order_by | null)}


/** aggregate min on columns */
export interface match_region_veto_picks_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_lineup_id?: boolean | number
    region?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_region_veto_picks" */
export interface match_region_veto_picks_min_order_by {created_at?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_lineup_id?: (order_by | null),region?: (order_by | null)}


/** response of any mutation on the table "match_region_veto_picks" */
export interface match_region_veto_picks_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_region_veto_picksGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_region_veto_picks" */
export interface match_region_veto_picks_on_conflict {constraint: match_region_veto_picks_constraint,update_columns?: match_region_veto_picks_update_column[],where?: (match_region_veto_picks_bool_exp | null)}


/** Ordering options when selecting data from "match_region_veto_picks". */
export interface match_region_veto_picks_order_by {created_at?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_lineup?: (match_lineups_order_by | null),match_lineup_id?: (order_by | null),region?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: match_region_veto_picks */
export interface match_region_veto_picks_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "match_region_veto_picks" */
export interface match_region_veto_picks_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),region?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}


/** Streaming cursor of the table "match_region_veto_picks" */
export interface match_region_veto_picks_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_region_veto_picks_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_region_veto_picks_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),region?: (Scalars['String'] | null),type?: (e_veto_pick_types_enum | null)}

export interface match_region_veto_picks_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (match_region_veto_picks_set_input | null),
/** filter the rows which have to be updated */
where: match_region_veto_picks_bool_exp}


/** columns and relationships of "match_type_cfgs" */
export interface match_type_cfgsGenqlSelection{
    cfg?: boolean | number
    /** An object relationship */
    e_match_type?: e_match_typesGenqlSelection
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "match_type_cfgs" */
export interface match_type_cfgs_aggregateGenqlSelection{
    aggregate?: match_type_cfgs_aggregate_fieldsGenqlSelection
    nodes?: match_type_cfgsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface match_type_cfgs_aggregate_bool_exp {count?: (match_type_cfgs_aggregate_bool_exp_count | null)}

export interface match_type_cfgs_aggregate_bool_exp_count {arguments?: (match_type_cfgs_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (match_type_cfgs_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "match_type_cfgs" */
export interface match_type_cfgs_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (match_type_cfgs_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: match_type_cfgs_max_fieldsGenqlSelection
    min?: match_type_cfgs_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "match_type_cfgs" */
export interface match_type_cfgs_aggregate_order_by {count?: (order_by | null),max?: (match_type_cfgs_max_order_by | null),min?: (match_type_cfgs_min_order_by | null)}


/** input type for inserting array relation for remote table "match_type_cfgs" */
export interface match_type_cfgs_arr_rel_insert_input {data: match_type_cfgs_insert_input[],
/** upsert condition */
on_conflict?: (match_type_cfgs_on_conflict | null)}


/** Boolean expression to filter rows from the table "match_type_cfgs". All fields are combined with a logical 'AND'. */
export interface match_type_cfgs_bool_exp {_and?: (match_type_cfgs_bool_exp[] | null),_not?: (match_type_cfgs_bool_exp | null),_or?: (match_type_cfgs_bool_exp[] | null),cfg?: (String_comparison_exp | null),e_match_type?: (e_match_types_bool_exp | null),type?: (e_match_types_enum_comparison_exp | null)}


/** input type for inserting data into table "match_type_cfgs" */
export interface match_type_cfgs_insert_input {cfg?: (Scalars['String'] | null),e_match_type?: (e_match_types_obj_rel_insert_input | null),type?: (e_match_types_enum | null)}


/** aggregate max on columns */
export interface match_type_cfgs_max_fieldsGenqlSelection{
    cfg?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "match_type_cfgs" */
export interface match_type_cfgs_max_order_by {cfg?: (order_by | null)}


/** aggregate min on columns */
export interface match_type_cfgs_min_fieldsGenqlSelection{
    cfg?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "match_type_cfgs" */
export interface match_type_cfgs_min_order_by {cfg?: (order_by | null)}


/** response of any mutation on the table "match_type_cfgs" */
export interface match_type_cfgs_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: match_type_cfgsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "match_type_cfgs" */
export interface match_type_cfgs_on_conflict {constraint: match_type_cfgs_constraint,update_columns?: match_type_cfgs_update_column[],where?: (match_type_cfgs_bool_exp | null)}


/** Ordering options when selecting data from "match_type_cfgs". */
export interface match_type_cfgs_order_by {cfg?: (order_by | null),e_match_type?: (e_match_types_order_by | null),type?: (order_by | null)}


/** primary key columns input for table: match_type_cfgs */
export interface match_type_cfgs_pk_columns_input {type: e_match_types_enum}


/** input type for updating data in table "match_type_cfgs" */
export interface match_type_cfgs_set_input {cfg?: (Scalars['String'] | null),type?: (e_match_types_enum | null)}


/** Streaming cursor of the table "match_type_cfgs" */
export interface match_type_cfgs_stream_cursor_input {
/** Stream column input with initial value */
initial_value: match_type_cfgs_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface match_type_cfgs_stream_cursor_value_input {cfg?: (Scalars['String'] | null),type?: (e_match_types_enum | null)}

export interface match_type_cfgs_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (match_type_cfgs_set_input | null),
/** filter the rows which have to be updated */
where: match_type_cfgs_bool_exp}


/** columns and relationships of "matches" */
export interface matchesGenqlSelection{
    /** A computed field, executes function "can_assign_server_to_match" */
    can_assign_server?: boolean | number
    /** A computed field, executes function "can_cancel_match" */
    can_cancel?: boolean | number
    /** A computed field, executes function "can_check_in" */
    can_check_in?: boolean | number
    /** A computed field, executes function "can_schedule_match" */
    can_schedule?: boolean | number
    /** A computed field, executes function "can_start_match" */
    can_start?: boolean | number
    cancels_at?: boolean | number
    /** A computed field, executes function "get_match_connection_link" */
    connection_link?: boolean | number
    /** A computed field, executes function "get_match_connection_string" */
    connection_string?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id?: boolean | number
    /** An array relationship */
    demos?: (match_map_demosGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** An aggregate relationship */
    demos_aggregate?: (match_map_demos_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** An object relationship */
    e_match_status?: e_match_statusGenqlSelection
    /** An object relationship */
    e_region?: server_regionsGenqlSelection
    ended_at?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "match_invite_code" */
    invite_code?: boolean | number
    /** An array relationship */
    invites?: (match_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** An aggregate relationship */
    invites_aggregate?: (match_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** A computed field, executes function "is_captain" */
    is_captain?: boolean | number
    /** A computed field, executes function "is_coach" */
    is_coach?: boolean | number
    /** A computed field, executes function "is_in_lineup" */
    is_in_lineup?: boolean | number
    /** A computed field, executes function "is_match_server_available" */
    is_match_server_available?: boolean | number
    /** A computed field, executes function "is_match_organizer" */
    is_organizer?: boolean | number
    /** A computed field, executes function "is_server_online" */
    is_server_online?: boolean | number
    /** A computed field, executes function "is_tournament_match" */
    is_tournament_match?: boolean | number
    label?: boolean | number
    /** An object relationship */
    lineup_1?: match_lineupsGenqlSelection
    lineup_1_id?: boolean | number
    /** An object relationship */
    lineup_2?: match_lineupsGenqlSelection
    lineup_2_id?: boolean | number
    /** A computed field, executes function "get_lineup_counts" */
    lineup_counts?: { __args: {
    /** JSON select path */
    path?: (Scalars['String'] | null)} } | boolean | number
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id?: boolean | number
    /** An array relationship */
    map_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    map_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type?: boolean | number
    /** An array relationship */
    match_maps?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_maps_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    match_options_id?: boolean | number
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    /** An object relationship */
    options?: match_optionsGenqlSelection
    /** An object relationship */
    organizer?: playersGenqlSelection
    organizer_steam_id?: boolean | number
    password?: boolean | number
    /** An array relationship */
    player_assists?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    player_assists_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An array relationship */
    player_damages?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    player_damages_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An array relationship */
    player_flashes?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    player_flashes_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An array relationship */
    player_kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    player_kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An array relationship */
    player_objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    player_objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An array relationship */
    player_unused_utilities?: (player_unused_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_unused_utilities_aggregate?: (player_unused_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An array relationship */
    player_utility?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_utility_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    region?: boolean | number
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id?: boolean | number
    /** An array relationship */
    region_veto_picks?: (match_region_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** An aggregate relationship */
    region_veto_picks_aggregate?: (match_region_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** A computed field, executes function "match_requested_organizer" */
    requested_organizer?: boolean | number
    scheduled_at?: boolean | number
    /** An object relationship */
    server?: serversGenqlSelection
    server_id?: boolean | number
    /** A computed field, executes function "get_match_server_region" */
    server_region?: boolean | number
    /** A computed field, executes function "get_match_server_type" */
    server_type?: boolean | number
    started_at?: boolean | number
    status?: boolean | number
    /** A computed field, executes function "get_match_teams" */
    teams?: (teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** An array relationship */
    tournament_brackets?: (tournament_bracketsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_brackets_aggregate?: (tournament_brackets_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link?: boolean | number
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string?: boolean | number
    /** An object relationship */
    winner?: match_lineupsGenqlSelection
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "matches" */
export interface matches_aggregateGenqlSelection{
    aggregate?: matches_aggregate_fieldsGenqlSelection
    nodes?: matchesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface matches_aggregate_bool_exp {count?: (matches_aggregate_bool_exp_count | null)}

export interface matches_aggregate_bool_exp_count {arguments?: (matches_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (matches_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "matches" */
export interface matches_aggregate_fieldsGenqlSelection{
    avg?: matches_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (matches_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: matches_max_fieldsGenqlSelection
    min?: matches_min_fieldsGenqlSelection
    stddev?: matches_stddev_fieldsGenqlSelection
    stddev_pop?: matches_stddev_pop_fieldsGenqlSelection
    stddev_samp?: matches_stddev_samp_fieldsGenqlSelection
    sum?: matches_sum_fieldsGenqlSelection
    var_pop?: matches_var_pop_fieldsGenqlSelection
    var_samp?: matches_var_samp_fieldsGenqlSelection
    variance?: matches_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "matches" */
export interface matches_aggregate_order_by {avg?: (matches_avg_order_by | null),count?: (order_by | null),max?: (matches_max_order_by | null),min?: (matches_min_order_by | null),stddev?: (matches_stddev_order_by | null),stddev_pop?: (matches_stddev_pop_order_by | null),stddev_samp?: (matches_stddev_samp_order_by | null),sum?: (matches_sum_order_by | null),var_pop?: (matches_var_pop_order_by | null),var_samp?: (matches_var_samp_order_by | null),variance?: (matches_variance_order_by | null)}


/** input type for inserting array relation for remote table "matches" */
export interface matches_arr_rel_insert_input {data: matches_insert_input[],
/** upsert condition */
on_conflict?: (matches_on_conflict | null)}


/** aggregate avg on columns */
export interface matches_avg_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "matches" */
export interface matches_avg_order_by {organizer_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'. */
export interface matches_bool_exp {_and?: (matches_bool_exp[] | null),_not?: (matches_bool_exp | null),_or?: (matches_bool_exp[] | null),can_assign_server?: (Boolean_comparison_exp | null),can_cancel?: (Boolean_comparison_exp | null),can_check_in?: (Boolean_comparison_exp | null),can_schedule?: (Boolean_comparison_exp | null),can_start?: (Boolean_comparison_exp | null),cancels_at?: (timestamptz_comparison_exp | null),connection_link?: (String_comparison_exp | null),connection_string?: (String_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),current_match_map_id?: (uuid_comparison_exp | null),demos?: (match_map_demos_bool_exp | null),demos_aggregate?: (match_map_demos_aggregate_bool_exp | null),e_match_status?: (e_match_status_bool_exp | null),e_region?: (server_regions_bool_exp | null),ended_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),invite_code?: (String_comparison_exp | null),invites?: (match_invites_bool_exp | null),invites_aggregate?: (match_invites_aggregate_bool_exp | null),is_captain?: (Boolean_comparison_exp | null),is_coach?: (Boolean_comparison_exp | null),is_in_lineup?: (Boolean_comparison_exp | null),is_match_server_available?: (Boolean_comparison_exp | null),is_organizer?: (Boolean_comparison_exp | null),is_server_online?: (Boolean_comparison_exp | null),is_tournament_match?: (Boolean_comparison_exp | null),label?: (String_comparison_exp | null),lineup_1?: (match_lineups_bool_exp | null),lineup_1_id?: (uuid_comparison_exp | null),lineup_2?: (match_lineups_bool_exp | null),lineup_2_id?: (uuid_comparison_exp | null),lineup_counts?: (json_comparison_exp | null),map_veto_picking_lineup_id?: (uuid_comparison_exp | null),map_veto_picks?: (match_map_veto_picks_bool_exp | null),map_veto_picks_aggregate?: (match_map_veto_picks_aggregate_bool_exp | null),map_veto_type?: (String_comparison_exp | null),match_maps?: (match_maps_bool_exp | null),match_maps_aggregate?: (match_maps_aggregate_bool_exp | null),match_options_id?: (uuid_comparison_exp | null),max_players_per_lineup?: (Int_comparison_exp | null),min_players_per_lineup?: (Int_comparison_exp | null),options?: (match_options_bool_exp | null),organizer?: (players_bool_exp | null),organizer_steam_id?: (bigint_comparison_exp | null),password?: (String_comparison_exp | null),player_assists?: (player_assists_bool_exp | null),player_assists_aggregate?: (player_assists_aggregate_bool_exp | null),player_damages?: (player_damages_bool_exp | null),player_damages_aggregate?: (player_damages_aggregate_bool_exp | null),player_flashes?: (player_flashes_bool_exp | null),player_flashes_aggregate?: (player_flashes_aggregate_bool_exp | null),player_kills?: (player_kills_bool_exp | null),player_kills_aggregate?: (player_kills_aggregate_bool_exp | null),player_objectives?: (player_objectives_bool_exp | null),player_objectives_aggregate?: (player_objectives_aggregate_bool_exp | null),player_unused_utilities?: (player_unused_utility_bool_exp | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_bool_exp | null),player_utility?: (player_utility_bool_exp | null),player_utility_aggregate?: (player_utility_aggregate_bool_exp | null),region?: (String_comparison_exp | null),region_veto_picking_lineup_id?: (uuid_comparison_exp | null),region_veto_picks?: (match_region_veto_picks_bool_exp | null),region_veto_picks_aggregate?: (match_region_veto_picks_aggregate_bool_exp | null),requested_organizer?: (Boolean_comparison_exp | null),scheduled_at?: (timestamptz_comparison_exp | null),server?: (servers_bool_exp | null),server_id?: (uuid_comparison_exp | null),server_region?: (String_comparison_exp | null),server_type?: (String_comparison_exp | null),started_at?: (timestamptz_comparison_exp | null),status?: (e_match_status_enum_comparison_exp | null),teams?: (teams_bool_exp | null),tournament_brackets?: (tournament_brackets_bool_exp | null),tournament_brackets_aggregate?: (tournament_brackets_aggregate_bool_exp | null),tv_connection_link?: (String_comparison_exp | null),tv_connection_string?: (String_comparison_exp | null),winner?: (match_lineups_bool_exp | null),winning_lineup_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "matches" */
export interface matches_inc_input {organizer_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "matches" */
export interface matches_insert_input {cancels_at?: (Scalars['timestamptz'] | null),created_at?: (Scalars['timestamptz'] | null),demos?: (match_map_demos_arr_rel_insert_input | null),e_match_status?: (e_match_status_obj_rel_insert_input | null),e_region?: (server_regions_obj_rel_insert_input | null),ended_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invites?: (match_invites_arr_rel_insert_input | null),label?: (Scalars['String'] | null),lineup_1?: (match_lineups_obj_rel_insert_input | null),lineup_1_id?: (Scalars['uuid'] | null),lineup_2?: (match_lineups_obj_rel_insert_input | null),lineup_2_id?: (Scalars['uuid'] | null),map_veto_picks?: (match_map_veto_picks_arr_rel_insert_input | null),match_maps?: (match_maps_arr_rel_insert_input | null),match_options_id?: (Scalars['uuid'] | null),options?: (match_options_obj_rel_insert_input | null),organizer?: (players_obj_rel_insert_input | null),organizer_steam_id?: (Scalars['bigint'] | null),password?: (Scalars['String'] | null),player_assists?: (player_assists_arr_rel_insert_input | null),player_damages?: (player_damages_arr_rel_insert_input | null),player_flashes?: (player_flashes_arr_rel_insert_input | null),player_kills?: (player_kills_arr_rel_insert_input | null),player_objectives?: (player_objectives_arr_rel_insert_input | null),player_unused_utilities?: (player_unused_utility_arr_rel_insert_input | null),player_utility?: (player_utility_arr_rel_insert_input | null),region?: (Scalars['String'] | null),region_veto_picks?: (match_region_veto_picks_arr_rel_insert_input | null),scheduled_at?: (Scalars['timestamptz'] | null),server?: (servers_obj_rel_insert_input | null),server_id?: (Scalars['uuid'] | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_status_enum | null),tournament_brackets?: (tournament_brackets_arr_rel_insert_input | null),winner?: (match_lineups_obj_rel_insert_input | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface matches_max_fieldsGenqlSelection{
    cancels_at?: boolean | number
    /** A computed field, executes function "get_match_connection_link" */
    connection_link?: boolean | number
    /** A computed field, executes function "get_match_connection_string" */
    connection_string?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id?: boolean | number
    ended_at?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "match_invite_code" */
    invite_code?: boolean | number
    label?: boolean | number
    lineup_1_id?: boolean | number
    lineup_2_id?: boolean | number
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id?: boolean | number
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type?: boolean | number
    match_options_id?: boolean | number
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    password?: boolean | number
    region?: boolean | number
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id?: boolean | number
    scheduled_at?: boolean | number
    server_id?: boolean | number
    /** A computed field, executes function "get_match_server_region" */
    server_region?: boolean | number
    /** A computed field, executes function "get_match_server_type" */
    server_type?: boolean | number
    started_at?: boolean | number
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link?: boolean | number
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string?: boolean | number
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "matches" */
export interface matches_max_order_by {cancels_at?: (order_by | null),created_at?: (order_by | null),ended_at?: (order_by | null),id?: (order_by | null),label?: (order_by | null),lineup_1_id?: (order_by | null),lineup_2_id?: (order_by | null),match_options_id?: (order_by | null),organizer_steam_id?: (order_by | null),password?: (order_by | null),region?: (order_by | null),scheduled_at?: (order_by | null),server_id?: (order_by | null),started_at?: (order_by | null),winning_lineup_id?: (order_by | null)}


/** aggregate min on columns */
export interface matches_min_fieldsGenqlSelection{
    cancels_at?: boolean | number
    /** A computed field, executes function "get_match_connection_link" */
    connection_link?: boolean | number
    /** A computed field, executes function "get_match_connection_string" */
    connection_string?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_current_match_map" */
    current_match_map_id?: boolean | number
    ended_at?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "match_invite_code" */
    invite_code?: boolean | number
    label?: boolean | number
    lineup_1_id?: boolean | number
    lineup_2_id?: boolean | number
    /** A computed field, executes function "get_map_veto_picking_lineup_id" */
    map_veto_picking_lineup_id?: boolean | number
    /** A computed field, executes function "get_map_veto_type" */
    map_veto_type?: boolean | number
    match_options_id?: boolean | number
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    password?: boolean | number
    region?: boolean | number
    /** A computed field, executes function "get_region_veto_picking_lineup_id" */
    region_veto_picking_lineup_id?: boolean | number
    scheduled_at?: boolean | number
    server_id?: boolean | number
    /** A computed field, executes function "get_match_server_region" */
    server_region?: boolean | number
    /** A computed field, executes function "get_match_server_type" */
    server_type?: boolean | number
    started_at?: boolean | number
    /** A computed field, executes function "get_match_tv_connection_link" */
    tv_connection_link?: boolean | number
    /** A computed field, executes function "get_match_tv_connection_string" */
    tv_connection_string?: boolean | number
    winning_lineup_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "matches" */
export interface matches_min_order_by {cancels_at?: (order_by | null),created_at?: (order_by | null),ended_at?: (order_by | null),id?: (order_by | null),label?: (order_by | null),lineup_1_id?: (order_by | null),lineup_2_id?: (order_by | null),match_options_id?: (order_by | null),organizer_steam_id?: (order_by | null),password?: (order_by | null),region?: (order_by | null),scheduled_at?: (order_by | null),server_id?: (order_by | null),started_at?: (order_by | null),winning_lineup_id?: (order_by | null)}


/** response of any mutation on the table "matches" */
export interface matches_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: matchesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "matches" */
export interface matches_obj_rel_insert_input {data: matches_insert_input,
/** upsert condition */
on_conflict?: (matches_on_conflict | null)}


/** on_conflict condition type for table "matches" */
export interface matches_on_conflict {constraint: matches_constraint,update_columns?: matches_update_column[],where?: (matches_bool_exp | null)}


/** Ordering options when selecting data from "matches". */
export interface matches_order_by {can_assign_server?: (order_by | null),can_cancel?: (order_by | null),can_check_in?: (order_by | null),can_schedule?: (order_by | null),can_start?: (order_by | null),cancels_at?: (order_by | null),connection_link?: (order_by | null),connection_string?: (order_by | null),created_at?: (order_by | null),current_match_map_id?: (order_by | null),demos_aggregate?: (match_map_demos_aggregate_order_by | null),e_match_status?: (e_match_status_order_by | null),e_region?: (server_regions_order_by | null),ended_at?: (order_by | null),id?: (order_by | null),invite_code?: (order_by | null),invites_aggregate?: (match_invites_aggregate_order_by | null),is_captain?: (order_by | null),is_coach?: (order_by | null),is_in_lineup?: (order_by | null),is_match_server_available?: (order_by | null),is_organizer?: (order_by | null),is_server_online?: (order_by | null),is_tournament_match?: (order_by | null),label?: (order_by | null),lineup_1?: (match_lineups_order_by | null),lineup_1_id?: (order_by | null),lineup_2?: (match_lineups_order_by | null),lineup_2_id?: (order_by | null),lineup_counts?: (order_by | null),map_veto_picking_lineup_id?: (order_by | null),map_veto_picks_aggregate?: (match_map_veto_picks_aggregate_order_by | null),map_veto_type?: (order_by | null),match_maps_aggregate?: (match_maps_aggregate_order_by | null),match_options_id?: (order_by | null),max_players_per_lineup?: (order_by | null),min_players_per_lineup?: (order_by | null),options?: (match_options_order_by | null),organizer?: (players_order_by | null),organizer_steam_id?: (order_by | null),password?: (order_by | null),player_assists_aggregate?: (player_assists_aggregate_order_by | null),player_damages_aggregate?: (player_damages_aggregate_order_by | null),player_flashes_aggregate?: (player_flashes_aggregate_order_by | null),player_kills_aggregate?: (player_kills_aggregate_order_by | null),player_objectives_aggregate?: (player_objectives_aggregate_order_by | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_order_by | null),player_utility_aggregate?: (player_utility_aggregate_order_by | null),region?: (order_by | null),region_veto_picking_lineup_id?: (order_by | null),region_veto_picks_aggregate?: (match_region_veto_picks_aggregate_order_by | null),requested_organizer?: (order_by | null),scheduled_at?: (order_by | null),server?: (servers_order_by | null),server_id?: (order_by | null),server_region?: (order_by | null),server_type?: (order_by | null),started_at?: (order_by | null),status?: (order_by | null),teams_aggregate?: (teams_aggregate_order_by | null),tournament_brackets_aggregate?: (tournament_brackets_aggregate_order_by | null),tv_connection_link?: (order_by | null),tv_connection_string?: (order_by | null),winner?: (match_lineups_order_by | null),winning_lineup_id?: (order_by | null)}


/** primary key columns input for table: matches */
export interface matches_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "matches" */
export interface matches_set_input {cancels_at?: (Scalars['timestamptz'] | null),created_at?: (Scalars['timestamptz'] | null),ended_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),lineup_1_id?: (Scalars['uuid'] | null),lineup_2_id?: (Scalars['uuid'] | null),match_options_id?: (Scalars['uuid'] | null),organizer_steam_id?: (Scalars['bigint'] | null),password?: (Scalars['String'] | null),region?: (Scalars['String'] | null),scheduled_at?: (Scalars['timestamptz'] | null),server_id?: (Scalars['uuid'] | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_status_enum | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface matches_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "matches" */
export interface matches_stddev_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface matches_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "matches" */
export interface matches_stddev_pop_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface matches_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "matches" */
export interface matches_stddev_samp_order_by {organizer_steam_id?: (order_by | null)}


/** Streaming cursor of the table "matches" */
export interface matches_stream_cursor_input {
/** Stream column input with initial value */
initial_value: matches_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface matches_stream_cursor_value_input {cancels_at?: (Scalars['timestamptz'] | null),created_at?: (Scalars['timestamptz'] | null),ended_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),lineup_1_id?: (Scalars['uuid'] | null),lineup_2_id?: (Scalars['uuid'] | null),match_options_id?: (Scalars['uuid'] | null),organizer_steam_id?: (Scalars['bigint'] | null),password?: (Scalars['String'] | null),region?: (Scalars['String'] | null),scheduled_at?: (Scalars['timestamptz'] | null),server_id?: (Scalars['uuid'] | null),started_at?: (Scalars['timestamptz'] | null),status?: (e_match_status_enum | null),winning_lineup_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface matches_sum_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "matches" */
export interface matches_sum_order_by {organizer_steam_id?: (order_by | null)}

export interface matches_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (matches_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (matches_set_input | null),
/** filter the rows which have to be updated */
where: matches_bool_exp}


/** aggregate var_pop on columns */
export interface matches_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "matches" */
export interface matches_var_pop_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface matches_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "matches" */
export interface matches_var_samp_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface matches_variance_fieldsGenqlSelection{
    /** A computed field, executes function "match_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "match_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "matches" */
export interface matches_variance_order_by {organizer_steam_id?: (order_by | null)}


/** columns and relationships of "migration_hashes.hashes" */
export interface migration_hashes_hashesGenqlSelection{
    hash?: boolean | number
    name?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "migration_hashes.hashes" */
export interface migration_hashes_hashes_aggregateGenqlSelection{
    aggregate?: migration_hashes_hashes_aggregate_fieldsGenqlSelection
    nodes?: migration_hashes_hashesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "migration_hashes.hashes" */
export interface migration_hashes_hashes_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (migration_hashes_hashes_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: migration_hashes_hashes_max_fieldsGenqlSelection
    min?: migration_hashes_hashes_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "migration_hashes.hashes". All fields are combined with a logical 'AND'. */
export interface migration_hashes_hashes_bool_exp {_and?: (migration_hashes_hashes_bool_exp[] | null),_not?: (migration_hashes_hashes_bool_exp | null),_or?: (migration_hashes_hashes_bool_exp[] | null),hash?: (String_comparison_exp | null),name?: (String_comparison_exp | null)}


/** input type for inserting data into table "migration_hashes.hashes" */
export interface migration_hashes_hashes_insert_input {hash?: (Scalars['String'] | null),name?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface migration_hashes_hashes_max_fieldsGenqlSelection{
    hash?: boolean | number
    name?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface migration_hashes_hashes_min_fieldsGenqlSelection{
    hash?: boolean | number
    name?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "migration_hashes.hashes" */
export interface migration_hashes_hashes_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: migration_hashes_hashesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "migration_hashes.hashes" */
export interface migration_hashes_hashes_on_conflict {constraint: migration_hashes_hashes_constraint,update_columns?: migration_hashes_hashes_update_column[],where?: (migration_hashes_hashes_bool_exp | null)}


/** Ordering options when selecting data from "migration_hashes.hashes". */
export interface migration_hashes_hashes_order_by {hash?: (order_by | null),name?: (order_by | null)}


/** primary key columns input for table: migration_hashes.hashes */
export interface migration_hashes_hashes_pk_columns_input {name: Scalars['String']}


/** input type for updating data in table "migration_hashes.hashes" */
export interface migration_hashes_hashes_set_input {hash?: (Scalars['String'] | null),name?: (Scalars['String'] | null)}


/** Streaming cursor of the table "migration_hashes_hashes" */
export interface migration_hashes_hashes_stream_cursor_input {
/** Stream column input with initial value */
initial_value: migration_hashes_hashes_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface migration_hashes_hashes_stream_cursor_value_input {hash?: (Scalars['String'] | null),name?: (Scalars['String'] | null)}

export interface migration_hashes_hashes_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (migration_hashes_hashes_set_input | null),
/** filter the rows which have to be updated */
where: migration_hashes_hashes_bool_exp}


/** mutation root */
export interface mutation_rootGenqlSelection{
    /** accept team invite */
    acceptInvite?: (SuccessOutputGenqlSelection & { __args: {invite_id: Scalars['uuid'], type: Scalars['String']} })
    approveNameChange?: (SuccessOutputGenqlSelection & { __args: {name: Scalars['String'], steam_id: Scalars['bigint']} })
    /** callForOrganizer */
    callForOrganizer?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['String']} })
    /** cancelMatch */
    cancelMatch?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid']} })
    /** checkIntoMatch */
    checkIntoMatch?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid']} })
    /** delete data from the table: "_map_pool" */
    delete__map_pool?: (_map_pool_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: _map_pool_bool_exp} })
    /** delete single row from the table: "_map_pool" */
    delete__map_pool_by_pk?: (_map_poolGenqlSelection & { __args: {map_id: Scalars['uuid'], map_pool_id: Scalars['uuid']} })
    /** delete data from the table: "abandoned_matches" */
    delete_abandoned_matches?: (abandoned_matches_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: abandoned_matches_bool_exp} })
    /** delete single row from the table: "abandoned_matches" */
    delete_abandoned_matches_by_pk?: (abandoned_matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "e_friend_status" */
    delete_e_friend_status?: (e_friend_status_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_friend_status_bool_exp} })
    /** delete single row from the table: "e_friend_status" */
    delete_e_friend_status_by_pk?: (e_friend_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_game_server_node_statuses" */
    delete_e_game_server_node_statuses?: (e_game_server_node_statuses_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_game_server_node_statuses_bool_exp} })
    /** delete single row from the table: "e_game_server_node_statuses" */
    delete_e_game_server_node_statuses_by_pk?: (e_game_server_node_statusesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_lobby_access" */
    delete_e_lobby_access?: (e_lobby_access_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_lobby_access_bool_exp} })
    /** delete single row from the table: "e_lobby_access" */
    delete_e_lobby_access_by_pk?: (e_lobby_accessGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_lobby_player_status" */
    delete_e_lobby_player_status?: (e_lobby_player_status_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_lobby_player_status_bool_exp} })
    /** delete single row from the table: "e_lobby_player_status" */
    delete_e_lobby_player_status_by_pk?: (e_lobby_player_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_map_pool_types" */
    delete_e_map_pool_types?: (e_map_pool_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_map_pool_types_bool_exp} })
    /** delete single row from the table: "e_map_pool_types" */
    delete_e_map_pool_types_by_pk?: (e_map_pool_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_match_map_status" */
    delete_e_match_map_status?: (e_match_map_status_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_match_map_status_bool_exp} })
    /** delete single row from the table: "e_match_map_status" */
    delete_e_match_map_status_by_pk?: (e_match_map_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_match_status" */
    delete_e_match_status?: (e_match_status_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_match_status_bool_exp} })
    /** delete single row from the table: "e_match_status" */
    delete_e_match_status_by_pk?: (e_match_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_match_types" */
    delete_e_match_types?: (e_match_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_match_types_bool_exp} })
    /** delete single row from the table: "e_match_types" */
    delete_e_match_types_by_pk?: (e_match_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_notification_types" */
    delete_e_notification_types?: (e_notification_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_notification_types_bool_exp} })
    /** delete single row from the table: "e_notification_types" */
    delete_e_notification_types_by_pk?: (e_notification_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_objective_types" */
    delete_e_objective_types?: (e_objective_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_objective_types_bool_exp} })
    /** delete single row from the table: "e_objective_types" */
    delete_e_objective_types_by_pk?: (e_objective_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_player_roles" */
    delete_e_player_roles?: (e_player_roles_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_player_roles_bool_exp} })
    /** delete single row from the table: "e_player_roles" */
    delete_e_player_roles_by_pk?: (e_player_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_ready_settings" */
    delete_e_ready_settings?: (e_ready_settings_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_ready_settings_bool_exp} })
    /** delete single row from the table: "e_ready_settings" */
    delete_e_ready_settings_by_pk?: (e_ready_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_sanction_types" */
    delete_e_sanction_types?: (e_sanction_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_sanction_types_bool_exp} })
    /** delete single row from the table: "e_sanction_types" */
    delete_e_sanction_types_by_pk?: (e_sanction_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_sides" */
    delete_e_sides?: (e_sides_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_sides_bool_exp} })
    /** delete single row from the table: "e_sides" */
    delete_e_sides_by_pk?: (e_sidesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_team_roles" */
    delete_e_team_roles?: (e_team_roles_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_team_roles_bool_exp} })
    /** delete single row from the table: "e_team_roles" */
    delete_e_team_roles_by_pk?: (e_team_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_timeout_settings" */
    delete_e_timeout_settings?: (e_timeout_settings_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_timeout_settings_bool_exp} })
    /** delete single row from the table: "e_timeout_settings" */
    delete_e_timeout_settings_by_pk?: (e_timeout_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_tournament_stage_types" */
    delete_e_tournament_stage_types?: (e_tournament_stage_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_tournament_stage_types_bool_exp} })
    /** delete single row from the table: "e_tournament_stage_types" */
    delete_e_tournament_stage_types_by_pk?: (e_tournament_stage_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_tournament_status" */
    delete_e_tournament_status?: (e_tournament_status_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_tournament_status_bool_exp} })
    /** delete single row from the table: "e_tournament_status" */
    delete_e_tournament_status_by_pk?: (e_tournament_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_utility_types" */
    delete_e_utility_types?: (e_utility_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_utility_types_bool_exp} })
    /** delete single row from the table: "e_utility_types" */
    delete_e_utility_types_by_pk?: (e_utility_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "e_veto_pick_types" */
    delete_e_veto_pick_types?: (e_veto_pick_types_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: e_veto_pick_types_bool_exp} })
    /** delete single row from the table: "e_veto_pick_types" */
    delete_e_veto_pick_types_by_pk?: (e_veto_pick_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "friends" */
    delete_friends?: (friends_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: friends_bool_exp} })
    /** delete single row from the table: "friends" */
    delete_friends_by_pk?: (friendsGenqlSelection & { __args: {other_player_steam_id: Scalars['bigint'], player_steam_id: Scalars['bigint']} })
    /** delete data from the table: "game_server_nodes" */
    delete_game_server_nodes?: (game_server_nodes_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: game_server_nodes_bool_exp} })
    /** delete single row from the table: "game_server_nodes" */
    delete_game_server_nodes_by_pk?: (game_server_nodesGenqlSelection & { __args: {id: Scalars['String']} })
    /** delete data from the table: "lobbies" */
    delete_lobbies?: (lobbies_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: lobbies_bool_exp} })
    /** delete single row from the table: "lobbies" */
    delete_lobbies_by_pk?: (lobbiesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "lobby_players" */
    delete_lobby_players?: (lobby_players_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: lobby_players_bool_exp} })
    /** delete single row from the table: "lobby_players" */
    delete_lobby_players_by_pk?: (lobby_playersGenqlSelection & { __args: {lobby_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** delete data from the table: "map_pools" */
    delete_map_pools?: (map_pools_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: map_pools_bool_exp} })
    /** delete single row from the table: "map_pools" */
    delete_map_pools_by_pk?: (map_poolsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "maps" */
    delete_maps?: (maps_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: maps_bool_exp} })
    /** delete single row from the table: "maps" */
    delete_maps_by_pk?: (mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_invites" */
    delete_match_invites?: (match_invites_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_invites_bool_exp} })
    /** delete single row from the table: "match_invites" */
    delete_match_invites_by_pk?: (match_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_lineup_players" */
    delete_match_lineup_players?: (match_lineup_players_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_lineup_players_bool_exp} })
    /** delete single row from the table: "match_lineup_players" */
    delete_match_lineup_players_by_pk?: (match_lineup_playersGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_lineups" */
    delete_match_lineups?: (match_lineups_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_lineups_bool_exp} })
    /** delete single row from the table: "match_lineups" */
    delete_match_lineups_by_pk?: (match_lineupsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_map_demos" */
    delete_match_map_demos?: (match_map_demos_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_map_demos_bool_exp} })
    /** delete single row from the table: "match_map_demos" */
    delete_match_map_demos_by_pk?: (match_map_demosGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_map_rounds" */
    delete_match_map_rounds?: (match_map_rounds_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_map_rounds_bool_exp} })
    /** delete single row from the table: "match_map_rounds" */
    delete_match_map_rounds_by_pk?: (match_map_roundsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_map_veto_picks" */
    delete_match_map_veto_picks?: (match_map_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_map_veto_picks_bool_exp} })
    /** delete single row from the table: "match_map_veto_picks" */
    delete_match_map_veto_picks_by_pk?: (match_map_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_maps" */
    delete_match_maps?: (match_maps_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_maps_bool_exp} })
    /** delete single row from the table: "match_maps" */
    delete_match_maps_by_pk?: (match_mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_options" */
    delete_match_options?: (match_options_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_options_bool_exp} })
    /** delete single row from the table: "match_options" */
    delete_match_options_by_pk?: (match_optionsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_region_veto_picks" */
    delete_match_region_veto_picks?: (match_region_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_region_veto_picks_bool_exp} })
    /** delete single row from the table: "match_region_veto_picks" */
    delete_match_region_veto_picks_by_pk?: (match_region_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "match_type_cfgs" */
    delete_match_type_cfgs?: (match_type_cfgs_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: match_type_cfgs_bool_exp} })
    /** delete single row from the table: "match_type_cfgs" */
    delete_match_type_cfgs_by_pk?: (match_type_cfgsGenqlSelection & { __args: {type: e_match_types_enum} })
    /** delete data from the table: "matches" */
    delete_matches?: (matches_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: matches_bool_exp} })
    /** delete single row from the table: "matches" */
    delete_matches_by_pk?: (matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "migration_hashes.hashes" */
    delete_migration_hashes_hashes?: (migration_hashes_hashes_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: migration_hashes_hashes_bool_exp} })
    /** delete single row from the table: "migration_hashes.hashes" */
    delete_migration_hashes_hashes_by_pk?: (migration_hashes_hashesGenqlSelection & { __args: {name: Scalars['String']} })
    /** delete data from the table: "v_my_friends" */
    delete_my_friends?: (my_friends_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: my_friends_bool_exp} })
    /** delete data from the table: "notifications" */
    delete_notifications?: (notifications_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: notifications_bool_exp} })
    /** delete single row from the table: "notifications" */
    delete_notifications_by_pk?: (notificationsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "player_assists" */
    delete_player_assists?: (player_assists_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_assists_bool_exp} })
    /** delete data from the table: "player_damages" */
    delete_player_damages?: (player_damages_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_damages_bool_exp} })
    /** delete data from the table: "player_elo" */
    delete_player_elo?: (player_elo_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_elo_bool_exp} })
    /** delete single row from the table: "player_elo" */
    delete_player_elo_by_pk?: (player_eloGenqlSelection & { __args: {match_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** delete data from the table: "player_flashes" */
    delete_player_flashes?: (player_flashes_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_flashes_bool_exp} })
    /** delete data from the table: "player_kills" */
    delete_player_kills?: (player_kills_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_kills_bool_exp} })
    /** delete single row from the table: "player_kills" */
    delete_player_kills_by_pk?: (player_killsGenqlSelection & { __args: {id: Scalars['uuid'], match_id: Scalars['uuid'], match_map_id: Scalars['uuid'], time: Scalars['timestamptz']} })
    /** delete data from the table: "player_objectives" */
    delete_player_objectives?: (player_objectives_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_objectives_bool_exp} })
    /** delete data from the table: "player_sanctions" */
    delete_player_sanctions?: (player_sanctions_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_sanctions_bool_exp} })
    /** delete data from the table: "player_unused_utility" */
    delete_player_unused_utility?: (player_unused_utility_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_unused_utility_bool_exp} })
    /** delete single row from the table: "player_unused_utility" */
    delete_player_unused_utility_by_pk?: (player_unused_utilityGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "player_utility" */
    delete_player_utility?: (player_utility_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: player_utility_bool_exp} })
    /** delete data from the table: "players" */
    delete_players?: (players_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: players_bool_exp} })
    /** delete single row from the table: "players" */
    delete_players_by_pk?: (playersGenqlSelection & { __args: {steam_id: Scalars['bigint']} })
    /** delete data from the table: "server_regions" */
    delete_server_regions?: (server_regions_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: server_regions_bool_exp} })
    /** delete single row from the table: "server_regions" */
    delete_server_regions_by_pk?: (server_regionsGenqlSelection & { __args: {value: Scalars['String']} })
    /** delete data from the table: "servers" */
    delete_servers?: (servers_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: servers_bool_exp} })
    /** delete single row from the table: "servers" */
    delete_servers_by_pk?: (serversGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "settings" */
    delete_settings?: (settings_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: settings_bool_exp} })
    /** delete single row from the table: "settings" */
    delete_settings_by_pk?: (settingsGenqlSelection & { __args: {name: Scalars['String']} })
    /** delete data from the table: "team_invites" */
    delete_team_invites?: (team_invites_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: team_invites_bool_exp} })
    /** delete single row from the table: "team_invites" */
    delete_team_invites_by_pk?: (team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "team_roster" */
    delete_team_roster?: (team_roster_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: team_roster_bool_exp} })
    /** delete single row from the table: "team_roster" */
    delete_team_roster_by_pk?: (team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], team_id: Scalars['uuid']} })
    /** delete data from the table: "teams" */
    delete_teams?: (teams_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: teams_bool_exp} })
    /** delete single row from the table: "teams" */
    delete_teams_by_pk?: (teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "tournament_brackets" */
    delete_tournament_brackets?: (tournament_brackets_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_brackets_bool_exp} })
    /** delete single row from the table: "tournament_brackets" */
    delete_tournament_brackets_by_pk?: (tournament_bracketsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "tournament_organizers" */
    delete_tournament_organizers?: (tournament_organizers_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_organizers_bool_exp} })
    /** delete single row from the table: "tournament_organizers" */
    delete_tournament_organizers_by_pk?: (tournament_organizersGenqlSelection & { __args: {steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** delete data from the table: "tournament_stages" */
    delete_tournament_stages?: (tournament_stages_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_stages_bool_exp} })
    /** delete single row from the table: "tournament_stages" */
    delete_tournament_stages_by_pk?: (tournament_stagesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "tournament_team_invites" */
    delete_tournament_team_invites?: (tournament_team_invites_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_team_invites_bool_exp} })
    /** delete single row from the table: "tournament_team_invites" */
    delete_tournament_team_invites_by_pk?: (tournament_team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "tournament_team_roster" */
    delete_tournament_team_roster?: (tournament_team_roster_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_team_roster_bool_exp} })
    /** delete single row from the table: "tournament_team_roster" */
    delete_tournament_team_roster_by_pk?: (tournament_team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** delete data from the table: "tournament_teams" */
    delete_tournament_teams?: (tournament_teams_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournament_teams_bool_exp} })
    /** delete single row from the table: "tournament_teams" */
    delete_tournament_teams_by_pk?: (tournament_teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "tournaments" */
    delete_tournaments?: (tournaments_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: tournaments_bool_exp} })
    /** delete single row from the table: "tournaments" */
    delete_tournaments_by_pk?: (tournamentsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** delete data from the table: "v_match_captains" */
    delete_v_match_captains?: (v_match_captains_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: v_match_captains_bool_exp} })
    /** delete data from the table: "v_pool_maps" */
    delete_v_pool_maps?: (v_pool_maps_mutation_responseGenqlSelection & { __args: {
    /** filter the rows which have to be deleted */
    where: v_pool_maps_bool_exp} })
    denyInvite?: (SuccessOutputGenqlSelection & { __args: {invite_id: Scalars['uuid'], type: Scalars['String']} })
    forfeitMatch?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid'], winning_lineup_id: Scalars['uuid']} })
    /** insert data into the table: "_map_pool" */
    insert__map_pool?: (_map_pool_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: _map_pool_insert_input[], 
    /** upsert condition */
    on_conflict?: (_map_pool_on_conflict | null)} })
    /** insert a single row into the table: "_map_pool" */
    insert__map_pool_one?: (_map_poolGenqlSelection & { __args: {
    /** the row to be inserted */
    object: _map_pool_insert_input, 
    /** upsert condition */
    on_conflict?: (_map_pool_on_conflict | null)} })
    /** insert data into the table: "abandoned_matches" */
    insert_abandoned_matches?: (abandoned_matches_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: abandoned_matches_insert_input[], 
    /** upsert condition */
    on_conflict?: (abandoned_matches_on_conflict | null)} })
    /** insert a single row into the table: "abandoned_matches" */
    insert_abandoned_matches_one?: (abandoned_matchesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: abandoned_matches_insert_input, 
    /** upsert condition */
    on_conflict?: (abandoned_matches_on_conflict | null)} })
    /** insert data into the table: "e_friend_status" */
    insert_e_friend_status?: (e_friend_status_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_friend_status_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_friend_status_on_conflict | null)} })
    /** insert a single row into the table: "e_friend_status" */
    insert_e_friend_status_one?: (e_friend_statusGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_friend_status_insert_input, 
    /** upsert condition */
    on_conflict?: (e_friend_status_on_conflict | null)} })
    /** insert data into the table: "e_game_server_node_statuses" */
    insert_e_game_server_node_statuses?: (e_game_server_node_statuses_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_game_server_node_statuses_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_game_server_node_statuses_on_conflict | null)} })
    /** insert a single row into the table: "e_game_server_node_statuses" */
    insert_e_game_server_node_statuses_one?: (e_game_server_node_statusesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_game_server_node_statuses_insert_input, 
    /** upsert condition */
    on_conflict?: (e_game_server_node_statuses_on_conflict | null)} })
    /** insert data into the table: "e_lobby_access" */
    insert_e_lobby_access?: (e_lobby_access_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_lobby_access_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_lobby_access_on_conflict | null)} })
    /** insert a single row into the table: "e_lobby_access" */
    insert_e_lobby_access_one?: (e_lobby_accessGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_lobby_access_insert_input, 
    /** upsert condition */
    on_conflict?: (e_lobby_access_on_conflict | null)} })
    /** insert data into the table: "e_lobby_player_status" */
    insert_e_lobby_player_status?: (e_lobby_player_status_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_lobby_player_status_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_lobby_player_status_on_conflict | null)} })
    /** insert a single row into the table: "e_lobby_player_status" */
    insert_e_lobby_player_status_one?: (e_lobby_player_statusGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_lobby_player_status_insert_input, 
    /** upsert condition */
    on_conflict?: (e_lobby_player_status_on_conflict | null)} })
    /** insert data into the table: "e_map_pool_types" */
    insert_e_map_pool_types?: (e_map_pool_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_map_pool_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_map_pool_types_on_conflict | null)} })
    /** insert a single row into the table: "e_map_pool_types" */
    insert_e_map_pool_types_one?: (e_map_pool_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_map_pool_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_map_pool_types_on_conflict | null)} })
    /** insert data into the table: "e_match_map_status" */
    insert_e_match_map_status?: (e_match_map_status_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_match_map_status_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_match_map_status_on_conflict | null)} })
    /** insert a single row into the table: "e_match_map_status" */
    insert_e_match_map_status_one?: (e_match_map_statusGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_match_map_status_insert_input, 
    /** upsert condition */
    on_conflict?: (e_match_map_status_on_conflict | null)} })
    /** insert data into the table: "e_match_status" */
    insert_e_match_status?: (e_match_status_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_match_status_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_match_status_on_conflict | null)} })
    /** insert a single row into the table: "e_match_status" */
    insert_e_match_status_one?: (e_match_statusGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_match_status_insert_input, 
    /** upsert condition */
    on_conflict?: (e_match_status_on_conflict | null)} })
    /** insert data into the table: "e_match_types" */
    insert_e_match_types?: (e_match_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_match_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_match_types_on_conflict | null)} })
    /** insert a single row into the table: "e_match_types" */
    insert_e_match_types_one?: (e_match_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_match_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_match_types_on_conflict | null)} })
    /** insert data into the table: "e_notification_types" */
    insert_e_notification_types?: (e_notification_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_notification_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_notification_types_on_conflict | null)} })
    /** insert a single row into the table: "e_notification_types" */
    insert_e_notification_types_one?: (e_notification_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_notification_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_notification_types_on_conflict | null)} })
    /** insert data into the table: "e_objective_types" */
    insert_e_objective_types?: (e_objective_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_objective_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_objective_types_on_conflict | null)} })
    /** insert a single row into the table: "e_objective_types" */
    insert_e_objective_types_one?: (e_objective_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_objective_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_objective_types_on_conflict | null)} })
    /** insert data into the table: "e_player_roles" */
    insert_e_player_roles?: (e_player_roles_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_player_roles_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_player_roles_on_conflict | null)} })
    /** insert a single row into the table: "e_player_roles" */
    insert_e_player_roles_one?: (e_player_rolesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_player_roles_insert_input, 
    /** upsert condition */
    on_conflict?: (e_player_roles_on_conflict | null)} })
    /** insert data into the table: "e_ready_settings" */
    insert_e_ready_settings?: (e_ready_settings_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_ready_settings_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_ready_settings_on_conflict | null)} })
    /** insert a single row into the table: "e_ready_settings" */
    insert_e_ready_settings_one?: (e_ready_settingsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_ready_settings_insert_input, 
    /** upsert condition */
    on_conflict?: (e_ready_settings_on_conflict | null)} })
    /** insert data into the table: "e_sanction_types" */
    insert_e_sanction_types?: (e_sanction_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_sanction_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_sanction_types_on_conflict | null)} })
    /** insert a single row into the table: "e_sanction_types" */
    insert_e_sanction_types_one?: (e_sanction_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_sanction_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_sanction_types_on_conflict | null)} })
    /** insert data into the table: "e_sides" */
    insert_e_sides?: (e_sides_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_sides_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_sides_on_conflict | null)} })
    /** insert a single row into the table: "e_sides" */
    insert_e_sides_one?: (e_sidesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_sides_insert_input, 
    /** upsert condition */
    on_conflict?: (e_sides_on_conflict | null)} })
    /** insert data into the table: "e_team_roles" */
    insert_e_team_roles?: (e_team_roles_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_team_roles_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_team_roles_on_conflict | null)} })
    /** insert a single row into the table: "e_team_roles" */
    insert_e_team_roles_one?: (e_team_rolesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_team_roles_insert_input, 
    /** upsert condition */
    on_conflict?: (e_team_roles_on_conflict | null)} })
    /** insert data into the table: "e_timeout_settings" */
    insert_e_timeout_settings?: (e_timeout_settings_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_timeout_settings_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_timeout_settings_on_conflict | null)} })
    /** insert a single row into the table: "e_timeout_settings" */
    insert_e_timeout_settings_one?: (e_timeout_settingsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_timeout_settings_insert_input, 
    /** upsert condition */
    on_conflict?: (e_timeout_settings_on_conflict | null)} })
    /** insert data into the table: "e_tournament_stage_types" */
    insert_e_tournament_stage_types?: (e_tournament_stage_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_tournament_stage_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_tournament_stage_types_on_conflict | null)} })
    /** insert a single row into the table: "e_tournament_stage_types" */
    insert_e_tournament_stage_types_one?: (e_tournament_stage_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_tournament_stage_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_tournament_stage_types_on_conflict | null)} })
    /** insert data into the table: "e_tournament_status" */
    insert_e_tournament_status?: (e_tournament_status_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_tournament_status_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_tournament_status_on_conflict | null)} })
    /** insert a single row into the table: "e_tournament_status" */
    insert_e_tournament_status_one?: (e_tournament_statusGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_tournament_status_insert_input, 
    /** upsert condition */
    on_conflict?: (e_tournament_status_on_conflict | null)} })
    /** insert data into the table: "e_utility_types" */
    insert_e_utility_types?: (e_utility_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_utility_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_utility_types_on_conflict | null)} })
    /** insert a single row into the table: "e_utility_types" */
    insert_e_utility_types_one?: (e_utility_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_utility_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_utility_types_on_conflict | null)} })
    /** insert data into the table: "e_veto_pick_types" */
    insert_e_veto_pick_types?: (e_veto_pick_types_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: e_veto_pick_types_insert_input[], 
    /** upsert condition */
    on_conflict?: (e_veto_pick_types_on_conflict | null)} })
    /** insert a single row into the table: "e_veto_pick_types" */
    insert_e_veto_pick_types_one?: (e_veto_pick_typesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: e_veto_pick_types_insert_input, 
    /** upsert condition */
    on_conflict?: (e_veto_pick_types_on_conflict | null)} })
    /** insert data into the table: "friends" */
    insert_friends?: (friends_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: friends_insert_input[], 
    /** upsert condition */
    on_conflict?: (friends_on_conflict | null)} })
    /** insert a single row into the table: "friends" */
    insert_friends_one?: (friendsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: friends_insert_input, 
    /** upsert condition */
    on_conflict?: (friends_on_conflict | null)} })
    /** insert data into the table: "game_server_nodes" */
    insert_game_server_nodes?: (game_server_nodes_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: game_server_nodes_insert_input[], 
    /** upsert condition */
    on_conflict?: (game_server_nodes_on_conflict | null)} })
    /** insert a single row into the table: "game_server_nodes" */
    insert_game_server_nodes_one?: (game_server_nodesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: game_server_nodes_insert_input, 
    /** upsert condition */
    on_conflict?: (game_server_nodes_on_conflict | null)} })
    /** insert data into the table: "lobbies" */
    insert_lobbies?: (lobbies_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: lobbies_insert_input[], 
    /** upsert condition */
    on_conflict?: (lobbies_on_conflict | null)} })
    /** insert a single row into the table: "lobbies" */
    insert_lobbies_one?: (lobbiesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: lobbies_insert_input, 
    /** upsert condition */
    on_conflict?: (lobbies_on_conflict | null)} })
    /** insert data into the table: "lobby_players" */
    insert_lobby_players?: (lobby_players_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: lobby_players_insert_input[], 
    /** upsert condition */
    on_conflict?: (lobby_players_on_conflict | null)} })
    /** insert a single row into the table: "lobby_players" */
    insert_lobby_players_one?: (lobby_playersGenqlSelection & { __args: {
    /** the row to be inserted */
    object: lobby_players_insert_input, 
    /** upsert condition */
    on_conflict?: (lobby_players_on_conflict | null)} })
    /** insert data into the table: "map_pools" */
    insert_map_pools?: (map_pools_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: map_pools_insert_input[], 
    /** upsert condition */
    on_conflict?: (map_pools_on_conflict | null)} })
    /** insert a single row into the table: "map_pools" */
    insert_map_pools_one?: (map_poolsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: map_pools_insert_input, 
    /** upsert condition */
    on_conflict?: (map_pools_on_conflict | null)} })
    /** insert data into the table: "maps" */
    insert_maps?: (maps_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: maps_insert_input[], 
    /** upsert condition */
    on_conflict?: (maps_on_conflict | null)} })
    /** insert a single row into the table: "maps" */
    insert_maps_one?: (mapsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: maps_insert_input, 
    /** upsert condition */
    on_conflict?: (maps_on_conflict | null)} })
    /** insert data into the table: "match_invites" */
    insert_match_invites?: (match_invites_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_invites_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_invites_on_conflict | null)} })
    /** insert a single row into the table: "match_invites" */
    insert_match_invites_one?: (match_invitesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_invites_insert_input, 
    /** upsert condition */
    on_conflict?: (match_invites_on_conflict | null)} })
    /** insert data into the table: "match_lineup_players" */
    insert_match_lineup_players?: (match_lineup_players_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_lineup_players_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_lineup_players_on_conflict | null)} })
    /** insert a single row into the table: "match_lineup_players" */
    insert_match_lineup_players_one?: (match_lineup_playersGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_lineup_players_insert_input, 
    /** upsert condition */
    on_conflict?: (match_lineup_players_on_conflict | null)} })
    /** insert data into the table: "match_lineups" */
    insert_match_lineups?: (match_lineups_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_lineups_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_lineups_on_conflict | null)} })
    /** insert a single row into the table: "match_lineups" */
    insert_match_lineups_one?: (match_lineupsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_lineups_insert_input, 
    /** upsert condition */
    on_conflict?: (match_lineups_on_conflict | null)} })
    /** insert data into the table: "match_map_demos" */
    insert_match_map_demos?: (match_map_demos_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_map_demos_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_map_demos_on_conflict | null)} })
    /** insert a single row into the table: "match_map_demos" */
    insert_match_map_demos_one?: (match_map_demosGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_map_demos_insert_input, 
    /** upsert condition */
    on_conflict?: (match_map_demos_on_conflict | null)} })
    /** insert data into the table: "match_map_rounds" */
    insert_match_map_rounds?: (match_map_rounds_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_map_rounds_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_map_rounds_on_conflict | null)} })
    /** insert a single row into the table: "match_map_rounds" */
    insert_match_map_rounds_one?: (match_map_roundsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_map_rounds_insert_input, 
    /** upsert condition */
    on_conflict?: (match_map_rounds_on_conflict | null)} })
    /** insert data into the table: "match_map_veto_picks" */
    insert_match_map_veto_picks?: (match_map_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_map_veto_picks_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_map_veto_picks_on_conflict | null)} })
    /** insert a single row into the table: "match_map_veto_picks" */
    insert_match_map_veto_picks_one?: (match_map_veto_picksGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_map_veto_picks_insert_input, 
    /** upsert condition */
    on_conflict?: (match_map_veto_picks_on_conflict | null)} })
    /** insert data into the table: "match_maps" */
    insert_match_maps?: (match_maps_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_maps_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_maps_on_conflict | null)} })
    /** insert a single row into the table: "match_maps" */
    insert_match_maps_one?: (match_mapsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_maps_insert_input, 
    /** upsert condition */
    on_conflict?: (match_maps_on_conflict | null)} })
    /** insert data into the table: "match_options" */
    insert_match_options?: (match_options_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_options_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_options_on_conflict | null)} })
    /** insert a single row into the table: "match_options" */
    insert_match_options_one?: (match_optionsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_options_insert_input, 
    /** upsert condition */
    on_conflict?: (match_options_on_conflict | null)} })
    /** insert data into the table: "match_region_veto_picks" */
    insert_match_region_veto_picks?: (match_region_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_region_veto_picks_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_region_veto_picks_on_conflict | null)} })
    /** insert a single row into the table: "match_region_veto_picks" */
    insert_match_region_veto_picks_one?: (match_region_veto_picksGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_region_veto_picks_insert_input, 
    /** upsert condition */
    on_conflict?: (match_region_veto_picks_on_conflict | null)} })
    /** insert data into the table: "match_type_cfgs" */
    insert_match_type_cfgs?: (match_type_cfgs_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: match_type_cfgs_insert_input[], 
    /** upsert condition */
    on_conflict?: (match_type_cfgs_on_conflict | null)} })
    /** insert a single row into the table: "match_type_cfgs" */
    insert_match_type_cfgs_one?: (match_type_cfgsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: match_type_cfgs_insert_input, 
    /** upsert condition */
    on_conflict?: (match_type_cfgs_on_conflict | null)} })
    /** insert data into the table: "matches" */
    insert_matches?: (matches_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: matches_insert_input[], 
    /** upsert condition */
    on_conflict?: (matches_on_conflict | null)} })
    /** insert a single row into the table: "matches" */
    insert_matches_one?: (matchesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: matches_insert_input, 
    /** upsert condition */
    on_conflict?: (matches_on_conflict | null)} })
    /** insert data into the table: "migration_hashes.hashes" */
    insert_migration_hashes_hashes?: (migration_hashes_hashes_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: migration_hashes_hashes_insert_input[], 
    /** upsert condition */
    on_conflict?: (migration_hashes_hashes_on_conflict | null)} })
    /** insert a single row into the table: "migration_hashes.hashes" */
    insert_migration_hashes_hashes_one?: (migration_hashes_hashesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: migration_hashes_hashes_insert_input, 
    /** upsert condition */
    on_conflict?: (migration_hashes_hashes_on_conflict | null)} })
    /** insert data into the table: "v_my_friends" */
    insert_my_friends?: (my_friends_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: my_friends_insert_input[]} })
    /** insert a single row into the table: "v_my_friends" */
    insert_my_friends_one?: (my_friendsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: my_friends_insert_input} })
    /** insert data into the table: "notifications" */
    insert_notifications?: (notifications_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: notifications_insert_input[], 
    /** upsert condition */
    on_conflict?: (notifications_on_conflict | null)} })
    /** insert a single row into the table: "notifications" */
    insert_notifications_one?: (notificationsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: notifications_insert_input, 
    /** upsert condition */
    on_conflict?: (notifications_on_conflict | null)} })
    /** insert data into the table: "player_assists" */
    insert_player_assists?: (player_assists_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_assists_insert_input[]} })
    /** insert a single row into the table: "player_assists" */
    insert_player_assists_one?: (player_assistsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_assists_insert_input} })
    /** insert data into the table: "player_damages" */
    insert_player_damages?: (player_damages_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_damages_insert_input[]} })
    /** insert a single row into the table: "player_damages" */
    insert_player_damages_one?: (player_damagesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_damages_insert_input} })
    /** insert data into the table: "player_elo" */
    insert_player_elo?: (player_elo_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_elo_insert_input[], 
    /** upsert condition */
    on_conflict?: (player_elo_on_conflict | null)} })
    /** insert a single row into the table: "player_elo" */
    insert_player_elo_one?: (player_eloGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_elo_insert_input, 
    /** upsert condition */
    on_conflict?: (player_elo_on_conflict | null)} })
    /** insert data into the table: "player_flashes" */
    insert_player_flashes?: (player_flashes_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_flashes_insert_input[]} })
    /** insert a single row into the table: "player_flashes" */
    insert_player_flashes_one?: (player_flashesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_flashes_insert_input} })
    /** insert data into the table: "player_kills" */
    insert_player_kills?: (player_kills_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_kills_insert_input[], 
    /** upsert condition */
    on_conflict?: (player_kills_on_conflict | null)} })
    /** insert a single row into the table: "player_kills" */
    insert_player_kills_one?: (player_killsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_kills_insert_input, 
    /** upsert condition */
    on_conflict?: (player_kills_on_conflict | null)} })
    /** insert data into the table: "player_objectives" */
    insert_player_objectives?: (player_objectives_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_objectives_insert_input[]} })
    /** insert a single row into the table: "player_objectives" */
    insert_player_objectives_one?: (player_objectivesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_objectives_insert_input} })
    /** insert data into the table: "player_sanctions" */
    insert_player_sanctions?: (player_sanctions_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_sanctions_insert_input[]} })
    /** insert a single row into the table: "player_sanctions" */
    insert_player_sanctions_one?: (player_sanctionsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_sanctions_insert_input} })
    /** insert data into the table: "player_unused_utility" */
    insert_player_unused_utility?: (player_unused_utility_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_unused_utility_insert_input[], 
    /** upsert condition */
    on_conflict?: (player_unused_utility_on_conflict | null)} })
    /** insert a single row into the table: "player_unused_utility" */
    insert_player_unused_utility_one?: (player_unused_utilityGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_unused_utility_insert_input, 
    /** upsert condition */
    on_conflict?: (player_unused_utility_on_conflict | null)} })
    /** insert data into the table: "player_utility" */
    insert_player_utility?: (player_utility_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: player_utility_insert_input[]} })
    /** insert a single row into the table: "player_utility" */
    insert_player_utility_one?: (player_utilityGenqlSelection & { __args: {
    /** the row to be inserted */
    object: player_utility_insert_input} })
    /** insert data into the table: "players" */
    insert_players?: (players_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: players_insert_input[], 
    /** upsert condition */
    on_conflict?: (players_on_conflict | null)} })
    /** insert a single row into the table: "players" */
    insert_players_one?: (playersGenqlSelection & { __args: {
    /** the row to be inserted */
    object: players_insert_input, 
    /** upsert condition */
    on_conflict?: (players_on_conflict | null)} })
    /** insert data into the table: "server_regions" */
    insert_server_regions?: (server_regions_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: server_regions_insert_input[], 
    /** upsert condition */
    on_conflict?: (server_regions_on_conflict | null)} })
    /** insert a single row into the table: "server_regions" */
    insert_server_regions_one?: (server_regionsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: server_regions_insert_input, 
    /** upsert condition */
    on_conflict?: (server_regions_on_conflict | null)} })
    /** insert data into the table: "servers" */
    insert_servers?: (servers_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: servers_insert_input[], 
    /** upsert condition */
    on_conflict?: (servers_on_conflict | null)} })
    /** insert a single row into the table: "servers" */
    insert_servers_one?: (serversGenqlSelection & { __args: {
    /** the row to be inserted */
    object: servers_insert_input, 
    /** upsert condition */
    on_conflict?: (servers_on_conflict | null)} })
    /** insert data into the table: "settings" */
    insert_settings?: (settings_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: settings_insert_input[], 
    /** upsert condition */
    on_conflict?: (settings_on_conflict | null)} })
    /** insert a single row into the table: "settings" */
    insert_settings_one?: (settingsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: settings_insert_input, 
    /** upsert condition */
    on_conflict?: (settings_on_conflict | null)} })
    /** insert data into the table: "team_invites" */
    insert_team_invites?: (team_invites_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: team_invites_insert_input[], 
    /** upsert condition */
    on_conflict?: (team_invites_on_conflict | null)} })
    /** insert a single row into the table: "team_invites" */
    insert_team_invites_one?: (team_invitesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: team_invites_insert_input, 
    /** upsert condition */
    on_conflict?: (team_invites_on_conflict | null)} })
    /** insert data into the table: "team_roster" */
    insert_team_roster?: (team_roster_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: team_roster_insert_input[], 
    /** upsert condition */
    on_conflict?: (team_roster_on_conflict | null)} })
    /** insert a single row into the table: "team_roster" */
    insert_team_roster_one?: (team_rosterGenqlSelection & { __args: {
    /** the row to be inserted */
    object: team_roster_insert_input, 
    /** upsert condition */
    on_conflict?: (team_roster_on_conflict | null)} })
    /** insert data into the table: "teams" */
    insert_teams?: (teams_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: teams_insert_input[], 
    /** upsert condition */
    on_conflict?: (teams_on_conflict | null)} })
    /** insert a single row into the table: "teams" */
    insert_teams_one?: (teamsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: teams_insert_input, 
    /** upsert condition */
    on_conflict?: (teams_on_conflict | null)} })
    /** insert data into the table: "tournament_brackets" */
    insert_tournament_brackets?: (tournament_brackets_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_brackets_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_brackets_on_conflict | null)} })
    /** insert a single row into the table: "tournament_brackets" */
    insert_tournament_brackets_one?: (tournament_bracketsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_brackets_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_brackets_on_conflict | null)} })
    /** insert data into the table: "tournament_organizers" */
    insert_tournament_organizers?: (tournament_organizers_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_organizers_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_organizers_on_conflict | null)} })
    /** insert a single row into the table: "tournament_organizers" */
    insert_tournament_organizers_one?: (tournament_organizersGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_organizers_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_organizers_on_conflict | null)} })
    /** insert data into the table: "tournament_stages" */
    insert_tournament_stages?: (tournament_stages_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_stages_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_stages_on_conflict | null)} })
    /** insert a single row into the table: "tournament_stages" */
    insert_tournament_stages_one?: (tournament_stagesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_stages_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_stages_on_conflict | null)} })
    /** insert data into the table: "tournament_team_invites" */
    insert_tournament_team_invites?: (tournament_team_invites_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_team_invites_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_team_invites_on_conflict | null)} })
    /** insert a single row into the table: "tournament_team_invites" */
    insert_tournament_team_invites_one?: (tournament_team_invitesGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_team_invites_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_team_invites_on_conflict | null)} })
    /** insert data into the table: "tournament_team_roster" */
    insert_tournament_team_roster?: (tournament_team_roster_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_team_roster_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_team_roster_on_conflict | null)} })
    /** insert a single row into the table: "tournament_team_roster" */
    insert_tournament_team_roster_one?: (tournament_team_rosterGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_team_roster_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_team_roster_on_conflict | null)} })
    /** insert data into the table: "tournament_teams" */
    insert_tournament_teams?: (tournament_teams_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournament_teams_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournament_teams_on_conflict | null)} })
    /** insert a single row into the table: "tournament_teams" */
    insert_tournament_teams_one?: (tournament_teamsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournament_teams_insert_input, 
    /** upsert condition */
    on_conflict?: (tournament_teams_on_conflict | null)} })
    /** insert data into the table: "tournaments" */
    insert_tournaments?: (tournaments_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: tournaments_insert_input[], 
    /** upsert condition */
    on_conflict?: (tournaments_on_conflict | null)} })
    /** insert a single row into the table: "tournaments" */
    insert_tournaments_one?: (tournamentsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: tournaments_insert_input, 
    /** upsert condition */
    on_conflict?: (tournaments_on_conflict | null)} })
    /** insert data into the table: "v_match_captains" */
    insert_v_match_captains?: (v_match_captains_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: v_match_captains_insert_input[]} })
    /** insert a single row into the table: "v_match_captains" */
    insert_v_match_captains_one?: (v_match_captainsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: v_match_captains_insert_input} })
    /** insert data into the table: "v_pool_maps" */
    insert_v_pool_maps?: (v_pool_maps_mutation_responseGenqlSelection & { __args: {
    /** the rows to be inserted */
    objects: v_pool_maps_insert_input[]} })
    /** insert a single row into the table: "v_pool_maps" */
    insert_v_pool_maps_one?: (v_pool_mapsGenqlSelection & { __args: {
    /** the row to be inserted */
    object: v_pool_maps_insert_input} })
    joinLineup?: (SuccessOutputGenqlSelection & { __args: {code?: (Scalars['String'] | null), lineup_id: Scalars['String'], match_id: Scalars['String']} })
    leaveLineup?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['String']} })
    /** logout */
    logout?: SuccessOutputGenqlSelection
    randomizeTeams?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid']} })
    registerName?: (SuccessOutputGenqlSelection & { __args: {name: Scalars['String']} })
    requestNameChange?: (SuccessOutputGenqlSelection & { __args: {name: Scalars['String'], steam_id: Scalars['bigint']} })
    /** scheduleMatch */
    scheduleMatch?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid'], time?: (Scalars['timestamptz'] | null)} })
    /** setMatchWinner */
    setMatchWinner?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid'], winning_lineup_id: Scalars['uuid']} })
    setupGameServer?: SetupGameServeOutputGenqlSelection
    /** startMatch */
    startMatch?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['uuid'], server_id?: (Scalars['uuid'] | null)} })
    switchLineup?: (SuccessOutputGenqlSelection & { __args: {match_id: Scalars['String']} })
    syncSteamFriends?: SuccessOutputGenqlSelection
    unlinkDiscord?: SuccessOutputGenqlSelection
    updateCs?: (SuccessOutputGenqlSelection & { __args?: {game_server_node_id?: (Scalars['uuid'] | null)} })
    updateServices?: SuccessOutputGenqlSelection
    /** update data of the table: "_map_pool" */
    update__map_pool?: (_map_pool_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (_map_pool_set_input | null), 
    /** filter the rows which have to be updated */
    where: _map_pool_bool_exp} })
    /** update single row of the table: "_map_pool" */
    update__map_pool_by_pk?: (_map_poolGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (_map_pool_set_input | null), pk_columns: _map_pool_pk_columns_input} })
    /** update multiples rows of table: "_map_pool" */
    update__map_pool_many?: (_map_pool_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: _map_pool_updates[]} })
    /** update data of the table: "abandoned_matches" */
    update_abandoned_matches?: (abandoned_matches_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (abandoned_matches_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (abandoned_matches_set_input | null), 
    /** filter the rows which have to be updated */
    where: abandoned_matches_bool_exp} })
    /** update single row of the table: "abandoned_matches" */
    update_abandoned_matches_by_pk?: (abandoned_matchesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (abandoned_matches_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (abandoned_matches_set_input | null), pk_columns: abandoned_matches_pk_columns_input} })
    /** update multiples rows of table: "abandoned_matches" */
    update_abandoned_matches_many?: (abandoned_matches_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: abandoned_matches_updates[]} })
    /** update data of the table: "e_friend_status" */
    update_e_friend_status?: (e_friend_status_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_friend_status_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_friend_status_bool_exp} })
    /** update single row of the table: "e_friend_status" */
    update_e_friend_status_by_pk?: (e_friend_statusGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_friend_status_set_input | null), pk_columns: e_friend_status_pk_columns_input} })
    /** update multiples rows of table: "e_friend_status" */
    update_e_friend_status_many?: (e_friend_status_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_friend_status_updates[]} })
    /** update data of the table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses?: (e_game_server_node_statuses_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_game_server_node_statuses_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_game_server_node_statuses_bool_exp} })
    /** update single row of the table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses_by_pk?: (e_game_server_node_statusesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_game_server_node_statuses_set_input | null), pk_columns: e_game_server_node_statuses_pk_columns_input} })
    /** update multiples rows of table: "e_game_server_node_statuses" */
    update_e_game_server_node_statuses_many?: (e_game_server_node_statuses_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_game_server_node_statuses_updates[]} })
    /** update data of the table: "e_lobby_access" */
    update_e_lobby_access?: (e_lobby_access_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_lobby_access_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_lobby_access_bool_exp} })
    /** update single row of the table: "e_lobby_access" */
    update_e_lobby_access_by_pk?: (e_lobby_accessGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_lobby_access_set_input | null), pk_columns: e_lobby_access_pk_columns_input} })
    /** update multiples rows of table: "e_lobby_access" */
    update_e_lobby_access_many?: (e_lobby_access_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_lobby_access_updates[]} })
    /** update data of the table: "e_lobby_player_status" */
    update_e_lobby_player_status?: (e_lobby_player_status_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_lobby_player_status_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_lobby_player_status_bool_exp} })
    /** update single row of the table: "e_lobby_player_status" */
    update_e_lobby_player_status_by_pk?: (e_lobby_player_statusGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_lobby_player_status_set_input | null), pk_columns: e_lobby_player_status_pk_columns_input} })
    /** update multiples rows of table: "e_lobby_player_status" */
    update_e_lobby_player_status_many?: (e_lobby_player_status_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_lobby_player_status_updates[]} })
    /** update data of the table: "e_map_pool_types" */
    update_e_map_pool_types?: (e_map_pool_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_map_pool_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_map_pool_types_bool_exp} })
    /** update single row of the table: "e_map_pool_types" */
    update_e_map_pool_types_by_pk?: (e_map_pool_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_map_pool_types_set_input | null), pk_columns: e_map_pool_types_pk_columns_input} })
    /** update multiples rows of table: "e_map_pool_types" */
    update_e_map_pool_types_many?: (e_map_pool_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_map_pool_types_updates[]} })
    /** update data of the table: "e_match_map_status" */
    update_e_match_map_status?: (e_match_map_status_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_map_status_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_match_map_status_bool_exp} })
    /** update single row of the table: "e_match_map_status" */
    update_e_match_map_status_by_pk?: (e_match_map_statusGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_map_status_set_input | null), pk_columns: e_match_map_status_pk_columns_input} })
    /** update multiples rows of table: "e_match_map_status" */
    update_e_match_map_status_many?: (e_match_map_status_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_match_map_status_updates[]} })
    /** update data of the table: "e_match_status" */
    update_e_match_status?: (e_match_status_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_status_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_match_status_bool_exp} })
    /** update single row of the table: "e_match_status" */
    update_e_match_status_by_pk?: (e_match_statusGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_status_set_input | null), pk_columns: e_match_status_pk_columns_input} })
    /** update multiples rows of table: "e_match_status" */
    update_e_match_status_many?: (e_match_status_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_match_status_updates[]} })
    /** update data of the table: "e_match_types" */
    update_e_match_types?: (e_match_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_match_types_bool_exp} })
    /** update single row of the table: "e_match_types" */
    update_e_match_types_by_pk?: (e_match_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_match_types_set_input | null), pk_columns: e_match_types_pk_columns_input} })
    /** update multiples rows of table: "e_match_types" */
    update_e_match_types_many?: (e_match_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_match_types_updates[]} })
    /** update data of the table: "e_notification_types" */
    update_e_notification_types?: (e_notification_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_notification_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_notification_types_bool_exp} })
    /** update single row of the table: "e_notification_types" */
    update_e_notification_types_by_pk?: (e_notification_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_notification_types_set_input | null), pk_columns: e_notification_types_pk_columns_input} })
    /** update multiples rows of table: "e_notification_types" */
    update_e_notification_types_many?: (e_notification_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_notification_types_updates[]} })
    /** update data of the table: "e_objective_types" */
    update_e_objective_types?: (e_objective_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_objective_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_objective_types_bool_exp} })
    /** update single row of the table: "e_objective_types" */
    update_e_objective_types_by_pk?: (e_objective_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_objective_types_set_input | null), pk_columns: e_objective_types_pk_columns_input} })
    /** update multiples rows of table: "e_objective_types" */
    update_e_objective_types_many?: (e_objective_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_objective_types_updates[]} })
    /** update data of the table: "e_player_roles" */
    update_e_player_roles?: (e_player_roles_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_player_roles_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_player_roles_bool_exp} })
    /** update single row of the table: "e_player_roles" */
    update_e_player_roles_by_pk?: (e_player_rolesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_player_roles_set_input | null), pk_columns: e_player_roles_pk_columns_input} })
    /** update multiples rows of table: "e_player_roles" */
    update_e_player_roles_many?: (e_player_roles_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_player_roles_updates[]} })
    /** update data of the table: "e_ready_settings" */
    update_e_ready_settings?: (e_ready_settings_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_ready_settings_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_ready_settings_bool_exp} })
    /** update single row of the table: "e_ready_settings" */
    update_e_ready_settings_by_pk?: (e_ready_settingsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_ready_settings_set_input | null), pk_columns: e_ready_settings_pk_columns_input} })
    /** update multiples rows of table: "e_ready_settings" */
    update_e_ready_settings_many?: (e_ready_settings_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_ready_settings_updates[]} })
    /** update data of the table: "e_sanction_types" */
    update_e_sanction_types?: (e_sanction_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_sanction_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_sanction_types_bool_exp} })
    /** update single row of the table: "e_sanction_types" */
    update_e_sanction_types_by_pk?: (e_sanction_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_sanction_types_set_input | null), pk_columns: e_sanction_types_pk_columns_input} })
    /** update multiples rows of table: "e_sanction_types" */
    update_e_sanction_types_many?: (e_sanction_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_sanction_types_updates[]} })
    /** update data of the table: "e_sides" */
    update_e_sides?: (e_sides_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_sides_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_sides_bool_exp} })
    /** update single row of the table: "e_sides" */
    update_e_sides_by_pk?: (e_sidesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_sides_set_input | null), pk_columns: e_sides_pk_columns_input} })
    /** update multiples rows of table: "e_sides" */
    update_e_sides_many?: (e_sides_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_sides_updates[]} })
    /** update data of the table: "e_team_roles" */
    update_e_team_roles?: (e_team_roles_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_team_roles_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_team_roles_bool_exp} })
    /** update single row of the table: "e_team_roles" */
    update_e_team_roles_by_pk?: (e_team_rolesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_team_roles_set_input | null), pk_columns: e_team_roles_pk_columns_input} })
    /** update multiples rows of table: "e_team_roles" */
    update_e_team_roles_many?: (e_team_roles_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_team_roles_updates[]} })
    /** update data of the table: "e_timeout_settings" */
    update_e_timeout_settings?: (e_timeout_settings_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_timeout_settings_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_timeout_settings_bool_exp} })
    /** update single row of the table: "e_timeout_settings" */
    update_e_timeout_settings_by_pk?: (e_timeout_settingsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_timeout_settings_set_input | null), pk_columns: e_timeout_settings_pk_columns_input} })
    /** update multiples rows of table: "e_timeout_settings" */
    update_e_timeout_settings_many?: (e_timeout_settings_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_timeout_settings_updates[]} })
    /** update data of the table: "e_tournament_stage_types" */
    update_e_tournament_stage_types?: (e_tournament_stage_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_tournament_stage_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_tournament_stage_types_bool_exp} })
    /** update single row of the table: "e_tournament_stage_types" */
    update_e_tournament_stage_types_by_pk?: (e_tournament_stage_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_tournament_stage_types_set_input | null), pk_columns: e_tournament_stage_types_pk_columns_input} })
    /** update multiples rows of table: "e_tournament_stage_types" */
    update_e_tournament_stage_types_many?: (e_tournament_stage_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_tournament_stage_types_updates[]} })
    /** update data of the table: "e_tournament_status" */
    update_e_tournament_status?: (e_tournament_status_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_tournament_status_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_tournament_status_bool_exp} })
    /** update single row of the table: "e_tournament_status" */
    update_e_tournament_status_by_pk?: (e_tournament_statusGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_tournament_status_set_input | null), pk_columns: e_tournament_status_pk_columns_input} })
    /** update multiples rows of table: "e_tournament_status" */
    update_e_tournament_status_many?: (e_tournament_status_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_tournament_status_updates[]} })
    /** update data of the table: "e_utility_types" */
    update_e_utility_types?: (e_utility_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_utility_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_utility_types_bool_exp} })
    /** update single row of the table: "e_utility_types" */
    update_e_utility_types_by_pk?: (e_utility_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_utility_types_set_input | null), pk_columns: e_utility_types_pk_columns_input} })
    /** update multiples rows of table: "e_utility_types" */
    update_e_utility_types_many?: (e_utility_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_utility_types_updates[]} })
    /** update data of the table: "e_veto_pick_types" */
    update_e_veto_pick_types?: (e_veto_pick_types_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_veto_pick_types_set_input | null), 
    /** filter the rows which have to be updated */
    where: e_veto_pick_types_bool_exp} })
    /** update single row of the table: "e_veto_pick_types" */
    update_e_veto_pick_types_by_pk?: (e_veto_pick_typesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (e_veto_pick_types_set_input | null), pk_columns: e_veto_pick_types_pk_columns_input} })
    /** update multiples rows of table: "e_veto_pick_types" */
    update_e_veto_pick_types_many?: (e_veto_pick_types_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: e_veto_pick_types_updates[]} })
    /** update data of the table: "friends" */
    update_friends?: (friends_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (friends_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (friends_set_input | null), 
    /** filter the rows which have to be updated */
    where: friends_bool_exp} })
    /** update single row of the table: "friends" */
    update_friends_by_pk?: (friendsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (friends_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (friends_set_input | null), pk_columns: friends_pk_columns_input} })
    /** update multiples rows of table: "friends" */
    update_friends_many?: (friends_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: friends_updates[]} })
    /** update data of the table: "game_server_nodes" */
    update_game_server_nodes?: (game_server_nodes_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (game_server_nodes_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (game_server_nodes_set_input | null), 
    /** filter the rows which have to be updated */
    where: game_server_nodes_bool_exp} })
    /** update single row of the table: "game_server_nodes" */
    update_game_server_nodes_by_pk?: (game_server_nodesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (game_server_nodes_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (game_server_nodes_set_input | null), pk_columns: game_server_nodes_pk_columns_input} })
    /** update multiples rows of table: "game_server_nodes" */
    update_game_server_nodes_many?: (game_server_nodes_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: game_server_nodes_updates[]} })
    /** update data of the table: "lobbies" */
    update_lobbies?: (lobbies_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (lobbies_set_input | null), 
    /** filter the rows which have to be updated */
    where: lobbies_bool_exp} })
    /** update single row of the table: "lobbies" */
    update_lobbies_by_pk?: (lobbiesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (lobbies_set_input | null), pk_columns: lobbies_pk_columns_input} })
    /** update multiples rows of table: "lobbies" */
    update_lobbies_many?: (lobbies_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: lobbies_updates[]} })
    /** update data of the table: "lobby_players" */
    update_lobby_players?: (lobby_players_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (lobby_players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (lobby_players_set_input | null), 
    /** filter the rows which have to be updated */
    where: lobby_players_bool_exp} })
    /** update single row of the table: "lobby_players" */
    update_lobby_players_by_pk?: (lobby_playersGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (lobby_players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (lobby_players_set_input | null), pk_columns: lobby_players_pk_columns_input} })
    /** update multiples rows of table: "lobby_players" */
    update_lobby_players_many?: (lobby_players_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: lobby_players_updates[]} })
    /** update data of the table: "map_pools" */
    update_map_pools?: (map_pools_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (map_pools_set_input | null), 
    /** filter the rows which have to be updated */
    where: map_pools_bool_exp} })
    /** update single row of the table: "map_pools" */
    update_map_pools_by_pk?: (map_poolsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (map_pools_set_input | null), pk_columns: map_pools_pk_columns_input} })
    /** update multiples rows of table: "map_pools" */
    update_map_pools_many?: (map_pools_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: map_pools_updates[]} })
    /** update data of the table: "maps" */
    update_maps?: (maps_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (maps_set_input | null), 
    /** filter the rows which have to be updated */
    where: maps_bool_exp} })
    /** update single row of the table: "maps" */
    update_maps_by_pk?: (mapsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (maps_set_input | null), pk_columns: maps_pk_columns_input} })
    /** update multiples rows of table: "maps" */
    update_maps_many?: (maps_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: maps_updates[]} })
    /** update data of the table: "match_invites" */
    update_match_invites?: (match_invites_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_invites_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_invites_bool_exp} })
    /** update single row of the table: "match_invites" */
    update_match_invites_by_pk?: (match_invitesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_invites_set_input | null), pk_columns: match_invites_pk_columns_input} })
    /** update multiples rows of table: "match_invites" */
    update_match_invites_many?: (match_invites_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_invites_updates[]} })
    /** update data of the table: "match_lineup_players" */
    update_match_lineup_players?: (match_lineup_players_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_lineup_players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_lineup_players_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_lineup_players_bool_exp} })
    /** update single row of the table: "match_lineup_players" */
    update_match_lineup_players_by_pk?: (match_lineup_playersGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_lineup_players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_lineup_players_set_input | null), pk_columns: match_lineup_players_pk_columns_input} })
    /** update multiples rows of table: "match_lineup_players" */
    update_match_lineup_players_many?: (match_lineup_players_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_lineup_players_updates[]} })
    /** update data of the table: "match_lineups" */
    update_match_lineups?: (match_lineups_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_lineups_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_lineups_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_lineups_bool_exp} })
    /** update single row of the table: "match_lineups" */
    update_match_lineups_by_pk?: (match_lineupsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_lineups_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_lineups_set_input | null), pk_columns: match_lineups_pk_columns_input} })
    /** update multiples rows of table: "match_lineups" */
    update_match_lineups_many?: (match_lineups_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_lineups_updates[]} })
    /** update data of the table: "match_map_demos" */
    update_match_map_demos?: (match_map_demos_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_map_demos_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_demos_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_map_demos_bool_exp} })
    /** update single row of the table: "match_map_demos" */
    update_match_map_demos_by_pk?: (match_map_demosGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_map_demos_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_demos_set_input | null), pk_columns: match_map_demos_pk_columns_input} })
    /** update multiples rows of table: "match_map_demos" */
    update_match_map_demos_many?: (match_map_demos_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_map_demos_updates[]} })
    /** update data of the table: "match_map_rounds" */
    update_match_map_rounds?: (match_map_rounds_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_map_rounds_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_rounds_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_map_rounds_bool_exp} })
    /** update single row of the table: "match_map_rounds" */
    update_match_map_rounds_by_pk?: (match_map_roundsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_map_rounds_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_rounds_set_input | null), pk_columns: match_map_rounds_pk_columns_input} })
    /** update multiples rows of table: "match_map_rounds" */
    update_match_map_rounds_many?: (match_map_rounds_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_map_rounds_updates[]} })
    /** update data of the table: "match_map_veto_picks" */
    update_match_map_veto_picks?: (match_map_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_veto_picks_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_map_veto_picks_bool_exp} })
    /** update single row of the table: "match_map_veto_picks" */
    update_match_map_veto_picks_by_pk?: (match_map_veto_picksGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_map_veto_picks_set_input | null), pk_columns: match_map_veto_picks_pk_columns_input} })
    /** update multiples rows of table: "match_map_veto_picks" */
    update_match_map_veto_picks_many?: (match_map_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_map_veto_picks_updates[]} })
    /** update data of the table: "match_maps" */
    update_match_maps?: (match_maps_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_maps_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_maps_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_maps_bool_exp} })
    /** update single row of the table: "match_maps" */
    update_match_maps_by_pk?: (match_mapsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_maps_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_maps_set_input | null), pk_columns: match_maps_pk_columns_input} })
    /** update multiples rows of table: "match_maps" */
    update_match_maps_many?: (match_maps_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_maps_updates[]} })
    /** update data of the table: "match_options" */
    update_match_options?: (match_options_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_options_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_options_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_options_bool_exp} })
    /** update single row of the table: "match_options" */
    update_match_options_by_pk?: (match_optionsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (match_options_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_options_set_input | null), pk_columns: match_options_pk_columns_input} })
    /** update multiples rows of table: "match_options" */
    update_match_options_many?: (match_options_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_options_updates[]} })
    /** update data of the table: "match_region_veto_picks" */
    update_match_region_veto_picks?: (match_region_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_region_veto_picks_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_region_veto_picks_bool_exp} })
    /** update single row of the table: "match_region_veto_picks" */
    update_match_region_veto_picks_by_pk?: (match_region_veto_picksGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_region_veto_picks_set_input | null), pk_columns: match_region_veto_picks_pk_columns_input} })
    /** update multiples rows of table: "match_region_veto_picks" */
    update_match_region_veto_picks_many?: (match_region_veto_picks_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_region_veto_picks_updates[]} })
    /** update data of the table: "match_type_cfgs" */
    update_match_type_cfgs?: (match_type_cfgs_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_type_cfgs_set_input | null), 
    /** filter the rows which have to be updated */
    where: match_type_cfgs_bool_exp} })
    /** update single row of the table: "match_type_cfgs" */
    update_match_type_cfgs_by_pk?: (match_type_cfgsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (match_type_cfgs_set_input | null), pk_columns: match_type_cfgs_pk_columns_input} })
    /** update multiples rows of table: "match_type_cfgs" */
    update_match_type_cfgs_many?: (match_type_cfgs_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: match_type_cfgs_updates[]} })
    /** update data of the table: "matches" */
    update_matches?: (matches_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (matches_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (matches_set_input | null), 
    /** filter the rows which have to be updated */
    where: matches_bool_exp} })
    /** update single row of the table: "matches" */
    update_matches_by_pk?: (matchesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (matches_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (matches_set_input | null), pk_columns: matches_pk_columns_input} })
    /** update multiples rows of table: "matches" */
    update_matches_many?: (matches_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: matches_updates[]} })
    /** update data of the table: "migration_hashes.hashes" */
    update_migration_hashes_hashes?: (migration_hashes_hashes_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (migration_hashes_hashes_set_input | null), 
    /** filter the rows which have to be updated */
    where: migration_hashes_hashes_bool_exp} })
    /** update single row of the table: "migration_hashes.hashes" */
    update_migration_hashes_hashes_by_pk?: (migration_hashes_hashesGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (migration_hashes_hashes_set_input | null), pk_columns: migration_hashes_hashes_pk_columns_input} })
    /** update multiples rows of table: "migration_hashes.hashes" */
    update_migration_hashes_hashes_many?: (migration_hashes_hashes_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: migration_hashes_hashes_updates[]} })
    /** update data of the table: "v_my_friends" */
    update_my_friends?: (my_friends_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (my_friends_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (my_friends_set_input | null), 
    /** filter the rows which have to be updated */
    where: my_friends_bool_exp} })
    /** update multiples rows of table: "v_my_friends" */
    update_my_friends_many?: (my_friends_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: my_friends_updates[]} })
    /** update data of the table: "notifications" */
    update_notifications?: (notifications_mutation_responseGenqlSelection & { __args: {
    /** append existing jsonb value of filtered columns with new jsonb value */
    _append?: (notifications_append_input | null), 
    /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
    _delete_at_path?: (notifications_delete_at_path_input | null), 
    /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
    _delete_elem?: (notifications_delete_elem_input | null), 
    /** delete key/value pair or string element. key/value pairs are matched based on their key value */
    _delete_key?: (notifications_delete_key_input | null), 
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (notifications_inc_input | null), 
    /** prepend existing jsonb value of filtered columns with new jsonb value */
    _prepend?: (notifications_prepend_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (notifications_set_input | null), 
    /** filter the rows which have to be updated */
    where: notifications_bool_exp} })
    /** update single row of the table: "notifications" */
    update_notifications_by_pk?: (notificationsGenqlSelection & { __args: {
    /** append existing jsonb value of filtered columns with new jsonb value */
    _append?: (notifications_append_input | null), 
    /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
    _delete_at_path?: (notifications_delete_at_path_input | null), 
    /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
    _delete_elem?: (notifications_delete_elem_input | null), 
    /** delete key/value pair or string element. key/value pairs are matched based on their key value */
    _delete_key?: (notifications_delete_key_input | null), 
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (notifications_inc_input | null), 
    /** prepend existing jsonb value of filtered columns with new jsonb value */
    _prepend?: (notifications_prepend_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (notifications_set_input | null), pk_columns: notifications_pk_columns_input} })
    /** update multiples rows of table: "notifications" */
    update_notifications_many?: (notifications_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: notifications_updates[]} })
    /** update data of the table: "player_assists" */
    update_player_assists?: (player_assists_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_assists_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_assists_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_assists_bool_exp} })
    /** update multiples rows of table: "player_assists" */
    update_player_assists_many?: (player_assists_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_assists_updates[]} })
    /** update data of the table: "player_damages" */
    update_player_damages?: (player_damages_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_damages_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_damages_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_damages_bool_exp} })
    /** update multiples rows of table: "player_damages" */
    update_player_damages_many?: (player_damages_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_damages_updates[]} })
    /** update data of the table: "player_elo" */
    update_player_elo?: (player_elo_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_elo_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_elo_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_elo_bool_exp} })
    /** update single row of the table: "player_elo" */
    update_player_elo_by_pk?: (player_eloGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_elo_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_elo_set_input | null), pk_columns: player_elo_pk_columns_input} })
    /** update multiples rows of table: "player_elo" */
    update_player_elo_many?: (player_elo_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_elo_updates[]} })
    /** update data of the table: "player_flashes" */
    update_player_flashes?: (player_flashes_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_flashes_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_flashes_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_flashes_bool_exp} })
    /** update multiples rows of table: "player_flashes" */
    update_player_flashes_many?: (player_flashes_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_flashes_updates[]} })
    /** update data of the table: "player_kills" */
    update_player_kills?: (player_kills_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_kills_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_kills_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_kills_bool_exp} })
    /** update single row of the table: "player_kills" */
    update_player_kills_by_pk?: (player_killsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_kills_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_kills_set_input | null), pk_columns: player_kills_pk_columns_input} })
    /** update multiples rows of table: "player_kills" */
    update_player_kills_many?: (player_kills_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_kills_updates[]} })
    /** update data of the table: "player_objectives" */
    update_player_objectives?: (player_objectives_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_objectives_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_objectives_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_objectives_bool_exp} })
    /** update multiples rows of table: "player_objectives" */
    update_player_objectives_many?: (player_objectives_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_objectives_updates[]} })
    /** update data of the table: "player_sanctions" */
    update_player_sanctions?: (player_sanctions_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_sanctions_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_sanctions_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_sanctions_bool_exp} })
    /** update multiples rows of table: "player_sanctions" */
    update_player_sanctions_many?: (player_sanctions_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_sanctions_updates[]} })
    /** update data of the table: "player_unused_utility" */
    update_player_unused_utility?: (player_unused_utility_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_unused_utility_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_unused_utility_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_unused_utility_bool_exp} })
    /** update single row of the table: "player_unused_utility" */
    update_player_unused_utility_by_pk?: (player_unused_utilityGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_unused_utility_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_unused_utility_set_input | null), pk_columns: player_unused_utility_pk_columns_input} })
    /** update multiples rows of table: "player_unused_utility" */
    update_player_unused_utility_many?: (player_unused_utility_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_unused_utility_updates[]} })
    /** update data of the table: "player_utility" */
    update_player_utility?: (player_utility_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (player_utility_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (player_utility_set_input | null), 
    /** filter the rows which have to be updated */
    where: player_utility_bool_exp} })
    /** update multiples rows of table: "player_utility" */
    update_player_utility_many?: (player_utility_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: player_utility_updates[]} })
    /** update data of the table: "players" */
    update_players?: (players_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (players_set_input | null), 
    /** filter the rows which have to be updated */
    where: players_bool_exp} })
    /** update single row of the table: "players" */
    update_players_by_pk?: (playersGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (players_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (players_set_input | null), pk_columns: players_pk_columns_input} })
    /** update multiples rows of table: "players" */
    update_players_many?: (players_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: players_updates[]} })
    /** update data of the table: "server_regions" */
    update_server_regions?: (server_regions_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (server_regions_set_input | null), 
    /** filter the rows which have to be updated */
    where: server_regions_bool_exp} })
    /** update single row of the table: "server_regions" */
    update_server_regions_by_pk?: (server_regionsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (server_regions_set_input | null), pk_columns: server_regions_pk_columns_input} })
    /** update multiples rows of table: "server_regions" */
    update_server_regions_many?: (server_regions_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: server_regions_updates[]} })
    /** update data of the table: "servers" */
    update_servers?: (servers_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (servers_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (servers_set_input | null), 
    /** filter the rows which have to be updated */
    where: servers_bool_exp} })
    /** update single row of the table: "servers" */
    update_servers_by_pk?: (serversGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (servers_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (servers_set_input | null), pk_columns: servers_pk_columns_input} })
    /** update multiples rows of table: "servers" */
    update_servers_many?: (servers_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: servers_updates[]} })
    /** update data of the table: "settings" */
    update_settings?: (settings_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (settings_set_input | null), 
    /** filter the rows which have to be updated */
    where: settings_bool_exp} })
    /** update single row of the table: "settings" */
    update_settings_by_pk?: (settingsGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (settings_set_input | null), pk_columns: settings_pk_columns_input} })
    /** update multiples rows of table: "settings" */
    update_settings_many?: (settings_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: settings_updates[]} })
    /** update data of the table: "team_invites" */
    update_team_invites?: (team_invites_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (team_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (team_invites_set_input | null), 
    /** filter the rows which have to be updated */
    where: team_invites_bool_exp} })
    /** update single row of the table: "team_invites" */
    update_team_invites_by_pk?: (team_invitesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (team_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (team_invites_set_input | null), pk_columns: team_invites_pk_columns_input} })
    /** update multiples rows of table: "team_invites" */
    update_team_invites_many?: (team_invites_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: team_invites_updates[]} })
    /** update data of the table: "team_roster" */
    update_team_roster?: (team_roster_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (team_roster_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (team_roster_set_input | null), 
    /** filter the rows which have to be updated */
    where: team_roster_bool_exp} })
    /** update single row of the table: "team_roster" */
    update_team_roster_by_pk?: (team_rosterGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (team_roster_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (team_roster_set_input | null), pk_columns: team_roster_pk_columns_input} })
    /** update multiples rows of table: "team_roster" */
    update_team_roster_many?: (team_roster_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: team_roster_updates[]} })
    /** update data of the table: "teams" */
    update_teams?: (teams_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (teams_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (teams_set_input | null), 
    /** filter the rows which have to be updated */
    where: teams_bool_exp} })
    /** update single row of the table: "teams" */
    update_teams_by_pk?: (teamsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (teams_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (teams_set_input | null), pk_columns: teams_pk_columns_input} })
    /** update multiples rows of table: "teams" */
    update_teams_many?: (teams_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: teams_updates[]} })
    /** update data of the table: "tournament_brackets" */
    update_tournament_brackets?: (tournament_brackets_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_brackets_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_brackets_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_brackets_bool_exp} })
    /** update single row of the table: "tournament_brackets" */
    update_tournament_brackets_by_pk?: (tournament_bracketsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_brackets_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_brackets_set_input | null), pk_columns: tournament_brackets_pk_columns_input} })
    /** update multiples rows of table: "tournament_brackets" */
    update_tournament_brackets_many?: (tournament_brackets_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_brackets_updates[]} })
    /** update data of the table: "tournament_organizers" */
    update_tournament_organizers?: (tournament_organizers_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_organizers_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_organizers_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_organizers_bool_exp} })
    /** update single row of the table: "tournament_organizers" */
    update_tournament_organizers_by_pk?: (tournament_organizersGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_organizers_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_organizers_set_input | null), pk_columns: tournament_organizers_pk_columns_input} })
    /** update multiples rows of table: "tournament_organizers" */
    update_tournament_organizers_many?: (tournament_organizers_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_organizers_updates[]} })
    /** update data of the table: "tournament_stages" */
    update_tournament_stages?: (tournament_stages_mutation_responseGenqlSelection & { __args: {
    /** append existing jsonb value of filtered columns with new jsonb value */
    _append?: (tournament_stages_append_input | null), 
    /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
    _delete_at_path?: (tournament_stages_delete_at_path_input | null), 
    /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
    _delete_elem?: (tournament_stages_delete_elem_input | null), 
    /** delete key/value pair or string element. key/value pairs are matched based on their key value */
    _delete_key?: (tournament_stages_delete_key_input | null), 
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_stages_inc_input | null), 
    /** prepend existing jsonb value of filtered columns with new jsonb value */
    _prepend?: (tournament_stages_prepend_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_stages_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_stages_bool_exp} })
    /** update single row of the table: "tournament_stages" */
    update_tournament_stages_by_pk?: (tournament_stagesGenqlSelection & { __args: {
    /** append existing jsonb value of filtered columns with new jsonb value */
    _append?: (tournament_stages_append_input | null), 
    /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
    _delete_at_path?: (tournament_stages_delete_at_path_input | null), 
    /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
    _delete_elem?: (tournament_stages_delete_elem_input | null), 
    /** delete key/value pair or string element. key/value pairs are matched based on their key value */
    _delete_key?: (tournament_stages_delete_key_input | null), 
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_stages_inc_input | null), 
    /** prepend existing jsonb value of filtered columns with new jsonb value */
    _prepend?: (tournament_stages_prepend_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_stages_set_input | null), pk_columns: tournament_stages_pk_columns_input} })
    /** update multiples rows of table: "tournament_stages" */
    update_tournament_stages_many?: (tournament_stages_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_stages_updates[]} })
    /** update data of the table: "tournament_team_invites" */
    update_tournament_team_invites?: (tournament_team_invites_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_team_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_team_invites_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_team_invites_bool_exp} })
    /** update single row of the table: "tournament_team_invites" */
    update_tournament_team_invites_by_pk?: (tournament_team_invitesGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_team_invites_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_team_invites_set_input | null), pk_columns: tournament_team_invites_pk_columns_input} })
    /** update multiples rows of table: "tournament_team_invites" */
    update_tournament_team_invites_many?: (tournament_team_invites_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_team_invites_updates[]} })
    /** update data of the table: "tournament_team_roster" */
    update_tournament_team_roster?: (tournament_team_roster_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_team_roster_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_team_roster_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_team_roster_bool_exp} })
    /** update single row of the table: "tournament_team_roster" */
    update_tournament_team_roster_by_pk?: (tournament_team_rosterGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_team_roster_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_team_roster_set_input | null), pk_columns: tournament_team_roster_pk_columns_input} })
    /** update multiples rows of table: "tournament_team_roster" */
    update_tournament_team_roster_many?: (tournament_team_roster_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_team_roster_updates[]} })
    /** update data of the table: "tournament_teams" */
    update_tournament_teams?: (tournament_teams_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_teams_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_teams_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournament_teams_bool_exp} })
    /** update single row of the table: "tournament_teams" */
    update_tournament_teams_by_pk?: (tournament_teamsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournament_teams_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournament_teams_set_input | null), pk_columns: tournament_teams_pk_columns_input} })
    /** update multiples rows of table: "tournament_teams" */
    update_tournament_teams_many?: (tournament_teams_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournament_teams_updates[]} })
    /** update data of the table: "tournaments" */
    update_tournaments?: (tournaments_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournaments_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournaments_set_input | null), 
    /** filter the rows which have to be updated */
    where: tournaments_bool_exp} })
    /** update single row of the table: "tournaments" */
    update_tournaments_by_pk?: (tournamentsGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (tournaments_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (tournaments_set_input | null), pk_columns: tournaments_pk_columns_input} })
    /** update multiples rows of table: "tournaments" */
    update_tournaments_many?: (tournaments_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: tournaments_updates[]} })
    /** update data of the table: "v_match_captains" */
    update_v_match_captains?: (v_match_captains_mutation_responseGenqlSelection & { __args: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: (v_match_captains_inc_input | null), 
    /** sets the columns of the filtered rows to the given values */
    _set?: (v_match_captains_set_input | null), 
    /** filter the rows which have to be updated */
    where: v_match_captains_bool_exp} })
    /** update multiples rows of table: "v_match_captains" */
    update_v_match_captains_many?: (v_match_captains_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: v_match_captains_updates[]} })
    /** update data of the table: "v_pool_maps" */
    update_v_pool_maps?: (v_pool_maps_mutation_responseGenqlSelection & { __args: {
    /** sets the columns of the filtered rows to the given values */
    _set?: (v_pool_maps_set_input | null), 
    /** filter the rows which have to be updated */
    where: v_pool_maps_bool_exp} })
    /** update multiples rows of table: "v_pool_maps" */
    update_v_pool_maps_many?: (v_pool_maps_mutation_responseGenqlSelection & { __args: {
    /** updates to execute, in order */
    updates: v_pool_maps_updates[]} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_my_friends" */
export interface my_friendsGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    created_at?: boolean | number
    discord_id?: boolean | number
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    name?: boolean | number
    name_registered?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    profile_url?: boolean | number
    role?: boolean | number
    status?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_my_friends" */
export interface my_friends_aggregateGenqlSelection{
    aggregate?: my_friends_aggregate_fieldsGenqlSelection
    nodes?: my_friendsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface my_friends_aggregate_bool_exp {bool_and?: (my_friends_aggregate_bool_exp_bool_and | null),bool_or?: (my_friends_aggregate_bool_exp_bool_or | null),count?: (my_friends_aggregate_bool_exp_count | null)}

export interface my_friends_aggregate_bool_exp_bool_and {arguments: my_friends_select_column_my_friends_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (my_friends_bool_exp | null),predicate: Boolean_comparison_exp}

export interface my_friends_aggregate_bool_exp_bool_or {arguments: my_friends_select_column_my_friends_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (my_friends_bool_exp | null),predicate: Boolean_comparison_exp}

export interface my_friends_aggregate_bool_exp_count {arguments?: (my_friends_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (my_friends_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "v_my_friends" */
export interface my_friends_aggregate_fieldsGenqlSelection{
    avg?: my_friends_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (my_friends_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: my_friends_max_fieldsGenqlSelection
    min?: my_friends_min_fieldsGenqlSelection
    stddev?: my_friends_stddev_fieldsGenqlSelection
    stddev_pop?: my_friends_stddev_pop_fieldsGenqlSelection
    stddev_samp?: my_friends_stddev_samp_fieldsGenqlSelection
    sum?: my_friends_sum_fieldsGenqlSelection
    var_pop?: my_friends_var_pop_fieldsGenqlSelection
    var_samp?: my_friends_var_samp_fieldsGenqlSelection
    variance?: my_friends_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "v_my_friends" */
export interface my_friends_aggregate_order_by {avg?: (my_friends_avg_order_by | null),count?: (order_by | null),max?: (my_friends_max_order_by | null),min?: (my_friends_min_order_by | null),stddev?: (my_friends_stddev_order_by | null),stddev_pop?: (my_friends_stddev_pop_order_by | null),stddev_samp?: (my_friends_stddev_samp_order_by | null),sum?: (my_friends_sum_order_by | null),var_pop?: (my_friends_var_pop_order_by | null),var_samp?: (my_friends_var_samp_order_by | null),variance?: (my_friends_variance_order_by | null)}


/** input type for inserting array relation for remote table "v_my_friends" */
export interface my_friends_arr_rel_insert_input {data: my_friends_insert_input[]}


/** aggregate avg on columns */
export interface my_friends_avg_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "v_my_friends" */
export interface my_friends_avg_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "v_my_friends". All fields are combined with a logical 'AND'. */
export interface my_friends_bool_exp {_and?: (my_friends_bool_exp[] | null),_not?: (my_friends_bool_exp | null),_or?: (my_friends_bool_exp[] | null),avatar_url?: (String_comparison_exp | null),country?: (String_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),discord_id?: (String_comparison_exp | null),elo?: (numeric_comparison_exp | null),friend_steam_id?: (bigint_comparison_exp | null),invited_by_steam_id?: (bigint_comparison_exp | null),name?: (String_comparison_exp | null),name_registered?: (Boolean_comparison_exp | null),player?: (players_bool_exp | null),profile_url?: (String_comparison_exp | null),role?: (String_comparison_exp | null),status?: (String_comparison_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "v_my_friends" */
export interface my_friends_inc_input {elo?: (Scalars['numeric'] | null),friend_steam_id?: (Scalars['bigint'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "v_my_friends" */
export interface my_friends_insert_input {avatar_url?: (Scalars['String'] | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),discord_id?: (Scalars['String'] | null),elo?: (Scalars['numeric'] | null),friend_steam_id?: (Scalars['bigint'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),player?: (players_obj_rel_insert_input | null),profile_url?: (Scalars['String'] | null),role?: (Scalars['String'] | null),status?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface my_friends_max_fieldsGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    created_at?: boolean | number
    discord_id?: boolean | number
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    name?: boolean | number
    profile_url?: boolean | number
    role?: boolean | number
    status?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "v_my_friends" */
export interface my_friends_max_order_by {avatar_url?: (order_by | null),country?: (order_by | null),created_at?: (order_by | null),discord_id?: (order_by | null),elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),name?: (order_by | null),profile_url?: (order_by | null),role?: (order_by | null),status?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface my_friends_min_fieldsGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    created_at?: boolean | number
    discord_id?: boolean | number
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    name?: boolean | number
    profile_url?: boolean | number
    role?: boolean | number
    status?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "v_my_friends" */
export interface my_friends_min_order_by {avatar_url?: (order_by | null),country?: (order_by | null),created_at?: (order_by | null),discord_id?: (order_by | null),elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),name?: (order_by | null),profile_url?: (order_by | null),role?: (order_by | null),status?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "v_my_friends" */
export interface my_friends_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: my_friendsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_my_friends". */
export interface my_friends_order_by {avatar_url?: (order_by | null),country?: (order_by | null),created_at?: (order_by | null),discord_id?: (order_by | null),elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),name?: (order_by | null),name_registered?: (order_by | null),player?: (players_order_by | null),profile_url?: (order_by | null),role?: (order_by | null),status?: (order_by | null),steam_id?: (order_by | null)}


/** input type for updating data in table "v_my_friends" */
export interface my_friends_set_input {avatar_url?: (Scalars['String'] | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),discord_id?: (Scalars['String'] | null),elo?: (Scalars['numeric'] | null),friend_steam_id?: (Scalars['bigint'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),profile_url?: (Scalars['String'] | null),role?: (Scalars['String'] | null),status?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface my_friends_stddev_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "v_my_friends" */
export interface my_friends_stddev_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface my_friends_stddev_pop_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "v_my_friends" */
export interface my_friends_stddev_pop_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface my_friends_stddev_samp_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "v_my_friends" */
export interface my_friends_stddev_samp_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "my_friends" */
export interface my_friends_stream_cursor_input {
/** Stream column input with initial value */
initial_value: my_friends_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface my_friends_stream_cursor_value_input {avatar_url?: (Scalars['String'] | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),discord_id?: (Scalars['String'] | null),elo?: (Scalars['numeric'] | null),friend_steam_id?: (Scalars['bigint'] | null),invited_by_steam_id?: (Scalars['bigint'] | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),profile_url?: (Scalars['String'] | null),role?: (Scalars['String'] | null),status?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface my_friends_sum_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "v_my_friends" */
export interface my_friends_sum_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}

export interface my_friends_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (my_friends_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (my_friends_set_input | null),
/** filter the rows which have to be updated */
where: my_friends_bool_exp}


/** aggregate var_pop on columns */
export interface my_friends_var_pop_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "v_my_friends" */
export interface my_friends_var_pop_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface my_friends_var_samp_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "v_my_friends" */
export interface my_friends_var_samp_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface my_friends_variance_fieldsGenqlSelection{
    elo?: boolean | number
    friend_steam_id?: boolean | number
    invited_by_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "v_my_friends" */
export interface my_friends_variance_order_by {elo?: (order_by | null),friend_steam_id?: (order_by | null),invited_by_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** columns and relationships of "notifications" */
export interface notificationsGenqlSelection{
    actions?: { __args: {
    /** JSON select path */
    path?: (Scalars['String'] | null)} } | boolean | number
    created_at?: boolean | number
    deleted_at?: boolean | number
    entity_id?: boolean | number
    id?: boolean | number
    is_read?: boolean | number
    message?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    role?: boolean | number
    steam_id?: boolean | number
    title?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "notifications" */
export interface notifications_aggregateGenqlSelection{
    aggregate?: notifications_aggregate_fieldsGenqlSelection
    nodes?: notificationsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface notifications_aggregate_bool_exp {bool_and?: (notifications_aggregate_bool_exp_bool_and | null),bool_or?: (notifications_aggregate_bool_exp_bool_or | null),count?: (notifications_aggregate_bool_exp_count | null)}

export interface notifications_aggregate_bool_exp_bool_and {arguments: notifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (notifications_bool_exp | null),predicate: Boolean_comparison_exp}

export interface notifications_aggregate_bool_exp_bool_or {arguments: notifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (notifications_bool_exp | null),predicate: Boolean_comparison_exp}

export interface notifications_aggregate_bool_exp_count {arguments?: (notifications_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (notifications_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "notifications" */
export interface notifications_aggregate_fieldsGenqlSelection{
    avg?: notifications_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (notifications_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: notifications_max_fieldsGenqlSelection
    min?: notifications_min_fieldsGenqlSelection
    stddev?: notifications_stddev_fieldsGenqlSelection
    stddev_pop?: notifications_stddev_pop_fieldsGenqlSelection
    stddev_samp?: notifications_stddev_samp_fieldsGenqlSelection
    sum?: notifications_sum_fieldsGenqlSelection
    var_pop?: notifications_var_pop_fieldsGenqlSelection
    var_samp?: notifications_var_samp_fieldsGenqlSelection
    variance?: notifications_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "notifications" */
export interface notifications_aggregate_order_by {avg?: (notifications_avg_order_by | null),count?: (order_by | null),max?: (notifications_max_order_by | null),min?: (notifications_min_order_by | null),stddev?: (notifications_stddev_order_by | null),stddev_pop?: (notifications_stddev_pop_order_by | null),stddev_samp?: (notifications_stddev_samp_order_by | null),sum?: (notifications_sum_order_by | null),var_pop?: (notifications_var_pop_order_by | null),var_samp?: (notifications_var_samp_order_by | null),variance?: (notifications_variance_order_by | null)}


/** append existing jsonb value of filtered columns with new jsonb value */
export interface notifications_append_input {actions?: (Scalars['jsonb'] | null)}


/** input type for inserting array relation for remote table "notifications" */
export interface notifications_arr_rel_insert_input {data: notifications_insert_input[],
/** upsert condition */
on_conflict?: (notifications_on_conflict | null)}


/** aggregate avg on columns */
export interface notifications_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "notifications" */
export interface notifications_avg_order_by {steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'. */
export interface notifications_bool_exp {_and?: (notifications_bool_exp[] | null),_not?: (notifications_bool_exp | null),_or?: (notifications_bool_exp[] | null),actions?: (jsonb_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),deleted_at?: (timestamptz_comparison_exp | null),entity_id?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),is_read?: (Boolean_comparison_exp | null),message?: (String_comparison_exp | null),player?: (players_bool_exp | null),role?: (e_player_roles_enum_comparison_exp | null),steam_id?: (bigint_comparison_exp | null),title?: (String_comparison_exp | null),type?: (e_notification_types_enum_comparison_exp | null)}


/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export interface notifications_delete_at_path_input {actions?: (Scalars['String'][] | null)}


/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export interface notifications_delete_elem_input {actions?: (Scalars['Int'] | null)}


/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export interface notifications_delete_key_input {actions?: (Scalars['String'] | null)}


/** input type for incrementing numeric columns in table "notifications" */
export interface notifications_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "notifications" */
export interface notifications_insert_input {actions?: (Scalars['jsonb'] | null),created_at?: (Scalars['timestamptz'] | null),deleted_at?: (Scalars['timestamptz'] | null),entity_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),is_read?: (Scalars['Boolean'] | null),message?: (Scalars['String'] | null),player?: (players_obj_rel_insert_input | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null),title?: (Scalars['String'] | null),type?: (e_notification_types_enum | null)}


/** aggregate max on columns */
export interface notifications_max_fieldsGenqlSelection{
    created_at?: boolean | number
    deleted_at?: boolean | number
    entity_id?: boolean | number
    id?: boolean | number
    message?: boolean | number
    steam_id?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "notifications" */
export interface notifications_max_order_by {created_at?: (order_by | null),deleted_at?: (order_by | null),entity_id?: (order_by | null),id?: (order_by | null),message?: (order_by | null),steam_id?: (order_by | null),title?: (order_by | null)}


/** aggregate min on columns */
export interface notifications_min_fieldsGenqlSelection{
    created_at?: boolean | number
    deleted_at?: boolean | number
    entity_id?: boolean | number
    id?: boolean | number
    message?: boolean | number
    steam_id?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "notifications" */
export interface notifications_min_order_by {created_at?: (order_by | null),deleted_at?: (order_by | null),entity_id?: (order_by | null),id?: (order_by | null),message?: (order_by | null),steam_id?: (order_by | null),title?: (order_by | null)}


/** response of any mutation on the table "notifications" */
export interface notifications_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: notificationsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "notifications" */
export interface notifications_on_conflict {constraint: notifications_constraint,update_columns?: notifications_update_column[],where?: (notifications_bool_exp | null)}


/** Ordering options when selecting data from "notifications". */
export interface notifications_order_by {actions?: (order_by | null),created_at?: (order_by | null),deleted_at?: (order_by | null),entity_id?: (order_by | null),id?: (order_by | null),is_read?: (order_by | null),message?: (order_by | null),player?: (players_order_by | null),role?: (order_by | null),steam_id?: (order_by | null),title?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: notifications */
export interface notifications_pk_columns_input {id: Scalars['uuid']}


/** prepend existing jsonb value of filtered columns with new jsonb value */
export interface notifications_prepend_input {actions?: (Scalars['jsonb'] | null)}


/** input type for updating data in table "notifications" */
export interface notifications_set_input {actions?: (Scalars['jsonb'] | null),created_at?: (Scalars['timestamptz'] | null),deleted_at?: (Scalars['timestamptz'] | null),entity_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),is_read?: (Scalars['Boolean'] | null),message?: (Scalars['String'] | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null),title?: (Scalars['String'] | null),type?: (e_notification_types_enum | null)}


/** aggregate stddev on columns */
export interface notifications_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "notifications" */
export interface notifications_stddev_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface notifications_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "notifications" */
export interface notifications_stddev_pop_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface notifications_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "notifications" */
export interface notifications_stddev_samp_order_by {steam_id?: (order_by | null)}


/** Streaming cursor of the table "notifications" */
export interface notifications_stream_cursor_input {
/** Stream column input with initial value */
initial_value: notifications_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface notifications_stream_cursor_value_input {actions?: (Scalars['jsonb'] | null),created_at?: (Scalars['timestamptz'] | null),deleted_at?: (Scalars['timestamptz'] | null),entity_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),is_read?: (Scalars['Boolean'] | null),message?: (Scalars['String'] | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null),title?: (Scalars['String'] | null),type?: (e_notification_types_enum | null)}


/** aggregate sum on columns */
export interface notifications_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "notifications" */
export interface notifications_sum_order_by {steam_id?: (order_by | null)}

export interface notifications_updates {
/** append existing jsonb value of filtered columns with new jsonb value */
_append?: (notifications_append_input | null),
/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
_delete_at_path?: (notifications_delete_at_path_input | null),
/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
_delete_elem?: (notifications_delete_elem_input | null),
/** delete key/value pair or string element. key/value pairs are matched based on their key value */
_delete_key?: (notifications_delete_key_input | null),
/** increments the numeric columns with given value of the filtered values */
_inc?: (notifications_inc_input | null),
/** prepend existing jsonb value of filtered columns with new jsonb value */
_prepend?: (notifications_prepend_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (notifications_set_input | null),
/** filter the rows which have to be updated */
where: notifications_bool_exp}


/** aggregate var_pop on columns */
export interface notifications_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "notifications" */
export interface notifications_var_pop_order_by {steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface notifications_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "notifications" */
export interface notifications_var_samp_order_by {steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface notifications_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "notifications" */
export interface notifications_variance_order_by {steam_id?: (order_by | null)}


/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export interface numeric_comparison_exp {_eq?: (Scalars['numeric'] | null),_gt?: (Scalars['numeric'] | null),_gte?: (Scalars['numeric'] | null),_in?: (Scalars['numeric'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['numeric'] | null),_lte?: (Scalars['numeric'] | null),_neq?: (Scalars['numeric'] | null),_nin?: (Scalars['numeric'][] | null)}


/** columns and relationships of "player_assists" */
export interface player_assistsGenqlSelection{
    /** An object relationship */
    attacked_player?: playersGenqlSelection
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    flash?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "is_team_assist" */
    is_team_assist?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_assists" */
export interface player_assists_aggregateGenqlSelection{
    aggregate?: player_assists_aggregate_fieldsGenqlSelection
    nodes?: player_assistsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_assists_aggregate_bool_exp {bool_and?: (player_assists_aggregate_bool_exp_bool_and | null),bool_or?: (player_assists_aggregate_bool_exp_bool_or | null),count?: (player_assists_aggregate_bool_exp_count | null)}

export interface player_assists_aggregate_bool_exp_bool_and {arguments: player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_assists_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_assists_aggregate_bool_exp_bool_or {arguments: player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_assists_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_assists_aggregate_bool_exp_count {arguments?: (player_assists_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_assists_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_assists" */
export interface player_assists_aggregate_fieldsGenqlSelection{
    avg?: player_assists_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_assists_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_assists_max_fieldsGenqlSelection
    min?: player_assists_min_fieldsGenqlSelection
    stddev?: player_assists_stddev_fieldsGenqlSelection
    stddev_pop?: player_assists_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_assists_stddev_samp_fieldsGenqlSelection
    sum?: player_assists_sum_fieldsGenqlSelection
    var_pop?: player_assists_var_pop_fieldsGenqlSelection
    var_samp?: player_assists_var_samp_fieldsGenqlSelection
    variance?: player_assists_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_assists" */
export interface player_assists_aggregate_order_by {avg?: (player_assists_avg_order_by | null),count?: (order_by | null),max?: (player_assists_max_order_by | null),min?: (player_assists_min_order_by | null),stddev?: (player_assists_stddev_order_by | null),stddev_pop?: (player_assists_stddev_pop_order_by | null),stddev_samp?: (player_assists_stddev_samp_order_by | null),sum?: (player_assists_sum_order_by | null),var_pop?: (player_assists_var_pop_order_by | null),var_samp?: (player_assists_var_samp_order_by | null),variance?: (player_assists_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_assists" */
export interface player_assists_arr_rel_insert_input {data: player_assists_insert_input[]}


/** aggregate avg on columns */
export interface player_assists_avg_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_assists" */
export interface player_assists_avg_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'. */
export interface player_assists_bool_exp {_and?: (player_assists_bool_exp[] | null),_not?: (player_assists_bool_exp | null),_or?: (player_assists_bool_exp[] | null),attacked_player?: (players_bool_exp | null),attacked_steam_id?: (bigint_comparison_exp | null),attacked_team?: (String_comparison_exp | null),attacker_steam_id?: (bigint_comparison_exp | null),attacker_team?: (String_comparison_exp | null),flash?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),is_team_assist?: (Boolean_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),round?: (Int_comparison_exp | null),time?: (timestamptz_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_assists" */
export interface player_assists_inc_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_assists" */
export interface player_assists_insert_input {attacked_player?: (players_obj_rel_insert_input | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),flash?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate max on columns */
export interface player_assists_max_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_assists" */
export interface player_assists_max_order_by {attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** aggregate min on columns */
export interface player_assists_min_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_assists" */
export interface player_assists_min_order_by {attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** response of any mutation on the table "player_assists" */
export interface player_assists_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_assistsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_assists". */
export interface player_assists_order_by {attacked_player?: (players_order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),flash?: (order_by | null),id?: (order_by | null),is_team_assist?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),player?: (players_order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** input type for updating data in table "player_assists" */
export interface player_assists_set_input {attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),flash?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate stddev on columns */
export interface player_assists_stddev_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_assists" */
export interface player_assists_stddev_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_assists_stddev_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_assists" */
export interface player_assists_stddev_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_assists_stddev_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_assists" */
export interface player_assists_stddev_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_assists" */
export interface player_assists_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_assists_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_assists_stream_cursor_value_input {attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),flash?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate sum on columns */
export interface player_assists_sum_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_assists" */
export interface player_assists_sum_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}

export interface player_assists_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_assists_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_assists_set_input | null),
/** filter the rows which have to be updated */
where: player_assists_bool_exp}


/** aggregate var_pop on columns */
export interface player_assists_var_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_assists" */
export interface player_assists_var_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_assists_var_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_assists" */
export interface player_assists_var_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_assists_variance_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_assists" */
export interface player_assists_variance_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "player_damages" */
export interface player_damagesGenqlSelection{
    armor?: boolean | number
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    /** An object relationship */
    attacked_player?: playersGenqlSelection
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    round?: boolean | number
    /** A computed field, executes function "is_team_damage" */
    team_damage?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_damages" */
export interface player_damages_aggregateGenqlSelection{
    aggregate?: player_damages_aggregate_fieldsGenqlSelection
    nodes?: player_damagesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_damages_aggregate_bool_exp {count?: (player_damages_aggregate_bool_exp_count | null)}

export interface player_damages_aggregate_bool_exp_count {arguments?: (player_damages_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_damages_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_damages" */
export interface player_damages_aggregate_fieldsGenqlSelection{
    avg?: player_damages_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_damages_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_damages_max_fieldsGenqlSelection
    min?: player_damages_min_fieldsGenqlSelection
    stddev?: player_damages_stddev_fieldsGenqlSelection
    stddev_pop?: player_damages_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_damages_stddev_samp_fieldsGenqlSelection
    sum?: player_damages_sum_fieldsGenqlSelection
    var_pop?: player_damages_var_pop_fieldsGenqlSelection
    var_samp?: player_damages_var_samp_fieldsGenqlSelection
    variance?: player_damages_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_damages" */
export interface player_damages_aggregate_order_by {avg?: (player_damages_avg_order_by | null),count?: (order_by | null),max?: (player_damages_max_order_by | null),min?: (player_damages_min_order_by | null),stddev?: (player_damages_stddev_order_by | null),stddev_pop?: (player_damages_stddev_pop_order_by | null),stddev_samp?: (player_damages_stddev_samp_order_by | null),sum?: (player_damages_sum_order_by | null),var_pop?: (player_damages_var_pop_order_by | null),var_samp?: (player_damages_var_samp_order_by | null),variance?: (player_damages_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_damages" */
export interface player_damages_arr_rel_insert_input {data: player_damages_insert_input[]}


/** aggregate avg on columns */
export interface player_damages_avg_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_damages" */
export interface player_damages_avg_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'. */
export interface player_damages_bool_exp {_and?: (player_damages_bool_exp[] | null),_not?: (player_damages_bool_exp | null),_or?: (player_damages_bool_exp[] | null),armor?: (Int_comparison_exp | null),attacked_location?: (String_comparison_exp | null),attacked_location_coordinates?: (String_comparison_exp | null),attacked_player?: (players_bool_exp | null),attacked_steam_id?: (bigint_comparison_exp | null),attacked_team?: (String_comparison_exp | null),attacker_location?: (String_comparison_exp | null),attacker_location_coordinates?: (String_comparison_exp | null),attacker_steam_id?: (bigint_comparison_exp | null),attacker_team?: (String_comparison_exp | null),damage?: (Int_comparison_exp | null),damage_armor?: (Int_comparison_exp | null),health?: (Int_comparison_exp | null),hitgroup?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),round?: (numeric_comparison_exp | null),team_damage?: (Boolean_comparison_exp | null),time?: (timestamptz_comparison_exp | null),with?: (String_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_damages" */
export interface player_damages_inc_input {armor?: (Scalars['Int'] | null),attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),damage?: (Scalars['Int'] | null),damage_armor?: (Scalars['Int'] | null),health?: (Scalars['Int'] | null),round?: (Scalars['numeric'] | null)}


/** input type for inserting data into table "player_damages" */
export interface player_damages_insert_input {armor?: (Scalars['Int'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_player?: (players_obj_rel_insert_input | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),damage?: (Scalars['Int'] | null),damage_armor?: (Scalars['Int'] | null),health?: (Scalars['Int'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),round?: (Scalars['numeric'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface player_damages_max_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_damages" */
export interface player_damages_max_order_by {armor?: (order_by | null),attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** aggregate min on columns */
export interface player_damages_min_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_damages" */
export interface player_damages_min_order_by {armor?: (order_by | null),attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** response of any mutation on the table "player_damages" */
export interface player_damages_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_damagesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_damages". */
export interface player_damages_order_by {armor?: (order_by | null),attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_player?: (players_order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),player?: (players_order_by | null),round?: (order_by | null),team_damage?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** input type for updating data in table "player_damages" */
export interface player_damages_set_input {armor?: (Scalars['Int'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),damage?: (Scalars['Int'] | null),damage_armor?: (Scalars['Int'] | null),health?: (Scalars['Int'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['numeric'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface player_damages_stddev_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_damages" */
export interface player_damages_stddev_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_damages_stddev_pop_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_damages" */
export interface player_damages_stddev_pop_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_damages_stddev_samp_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_damages" */
export interface player_damages_stddev_samp_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_damages" */
export interface player_damages_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_damages_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_damages_stream_cursor_value_input {armor?: (Scalars['Int'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),damage?: (Scalars['Int'] | null),damage_armor?: (Scalars['Int'] | null),health?: (Scalars['Int'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['numeric'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface player_damages_sum_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_damages" */
export interface player_damages_sum_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}

export interface player_damages_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_damages_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_damages_set_input | null),
/** filter the rows which have to be updated */
where: player_damages_bool_exp}


/** aggregate var_pop on columns */
export interface player_damages_var_pop_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_damages" */
export interface player_damages_var_pop_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_damages_var_samp_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_damages" */
export interface player_damages_var_samp_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_damages_variance_fieldsGenqlSelection{
    armor?: boolean | number
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    damage?: boolean | number
    damage_armor?: boolean | number
    health?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_damages" */
export interface player_damages_variance_order_by {armor?: (order_by | null),attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),damage?: (order_by | null),damage_armor?: (order_by | null),health?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "player_elo" */
export interface player_eloGenqlSelection{
    change?: boolean | number
    created_at?: boolean | number
    current?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_elo" */
export interface player_elo_aggregateGenqlSelection{
    aggregate?: player_elo_aggregate_fieldsGenqlSelection
    nodes?: player_eloGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_elo_aggregate_bool_exp {count?: (player_elo_aggregate_bool_exp_count | null)}

export interface player_elo_aggregate_bool_exp_count {arguments?: (player_elo_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_elo_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_elo" */
export interface player_elo_aggregate_fieldsGenqlSelection{
    avg?: player_elo_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_elo_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_elo_max_fieldsGenqlSelection
    min?: player_elo_min_fieldsGenqlSelection
    stddev?: player_elo_stddev_fieldsGenqlSelection
    stddev_pop?: player_elo_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_elo_stddev_samp_fieldsGenqlSelection
    sum?: player_elo_sum_fieldsGenqlSelection
    var_pop?: player_elo_var_pop_fieldsGenqlSelection
    var_samp?: player_elo_var_samp_fieldsGenqlSelection
    variance?: player_elo_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_elo" */
export interface player_elo_aggregate_order_by {avg?: (player_elo_avg_order_by | null),count?: (order_by | null),max?: (player_elo_max_order_by | null),min?: (player_elo_min_order_by | null),stddev?: (player_elo_stddev_order_by | null),stddev_pop?: (player_elo_stddev_pop_order_by | null),stddev_samp?: (player_elo_stddev_samp_order_by | null),sum?: (player_elo_sum_order_by | null),var_pop?: (player_elo_var_pop_order_by | null),var_samp?: (player_elo_var_samp_order_by | null),variance?: (player_elo_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_elo" */
export interface player_elo_arr_rel_insert_input {data: player_elo_insert_input[],
/** upsert condition */
on_conflict?: (player_elo_on_conflict | null)}


/** aggregate avg on columns */
export interface player_elo_avg_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_elo" */
export interface player_elo_avg_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_elo". All fields are combined with a logical 'AND'. */
export interface player_elo_bool_exp {_and?: (player_elo_bool_exp[] | null),_not?: (player_elo_bool_exp | null),_or?: (player_elo_bool_exp[] | null),change?: (numeric_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),current?: (numeric_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_elo" */
export interface player_elo_inc_input {change?: (Scalars['numeric'] | null),current?: (Scalars['numeric'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "player_elo" */
export interface player_elo_insert_input {change?: (Scalars['numeric'] | null),created_at?: (Scalars['timestamptz'] | null),current?: (Scalars['numeric'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface player_elo_max_fieldsGenqlSelection{
    change?: boolean | number
    created_at?: boolean | number
    current?: boolean | number
    match_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_elo" */
export interface player_elo_max_order_by {change?: (order_by | null),created_at?: (order_by | null),current?: (order_by | null),match_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate min on columns */
export interface player_elo_min_fieldsGenqlSelection{
    change?: boolean | number
    created_at?: boolean | number
    current?: boolean | number
    match_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_elo" */
export interface player_elo_min_order_by {change?: (order_by | null),created_at?: (order_by | null),current?: (order_by | null),match_id?: (order_by | null),steam_id?: (order_by | null)}


/** response of any mutation on the table "player_elo" */
export interface player_elo_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_eloGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "player_elo" */
export interface player_elo_on_conflict {constraint: player_elo_constraint,update_columns?: player_elo_update_column[],where?: (player_elo_bool_exp | null)}


/** Ordering options when selecting data from "player_elo". */
export interface player_elo_order_by {change?: (order_by | null),created_at?: (order_by | null),current?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null)}


/** primary key columns input for table: player_elo */
export interface player_elo_pk_columns_input {match_id: Scalars['uuid'],steam_id: Scalars['bigint']}


/** input type for updating data in table "player_elo" */
export interface player_elo_set_input {change?: (Scalars['numeric'] | null),created_at?: (Scalars['timestamptz'] | null),current?: (Scalars['numeric'] | null),match_id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface player_elo_stddev_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_elo" */
export interface player_elo_stddev_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_elo_stddev_pop_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_elo" */
export interface player_elo_stddev_pop_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_elo_stddev_samp_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_elo" */
export interface player_elo_stddev_samp_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "player_elo" */
export interface player_elo_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_elo_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_elo_stream_cursor_value_input {change?: (Scalars['numeric'] | null),created_at?: (Scalars['timestamptz'] | null),current?: (Scalars['numeric'] | null),match_id?: (Scalars['uuid'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface player_elo_sum_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_elo" */
export interface player_elo_sum_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}

export interface player_elo_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_elo_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_elo_set_input | null),
/** filter the rows which have to be updated */
where: player_elo_bool_exp}


/** aggregate var_pop on columns */
export interface player_elo_var_pop_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_elo" */
export interface player_elo_var_pop_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_elo_var_samp_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_elo" */
export interface player_elo_var_samp_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface player_elo_variance_fieldsGenqlSelection{
    change?: boolean | number
    current?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_elo" */
export interface player_elo_variance_order_by {change?: (order_by | null),current?: (order_by | null),steam_id?: (order_by | null)}


/** columns and relationships of "player_flashes" */
export interface player_flashesGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    /** An object relationship */
    blinded?: playersGenqlSelection
    duration?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    round?: boolean | number
    team_flash?: boolean | number
    /** An object relationship */
    thrown_by?: playersGenqlSelection
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_flashes" */
export interface player_flashes_aggregateGenqlSelection{
    aggregate?: player_flashes_aggregate_fieldsGenqlSelection
    nodes?: player_flashesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_flashes_aggregate_bool_exp {bool_and?: (player_flashes_aggregate_bool_exp_bool_and | null),bool_or?: (player_flashes_aggregate_bool_exp_bool_or | null),count?: (player_flashes_aggregate_bool_exp_count | null)}

export interface player_flashes_aggregate_bool_exp_bool_and {arguments: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_flashes_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_flashes_aggregate_bool_exp_bool_or {arguments: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_flashes_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_flashes_aggregate_bool_exp_count {arguments?: (player_flashes_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_flashes_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_flashes" */
export interface player_flashes_aggregate_fieldsGenqlSelection{
    avg?: player_flashes_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_flashes_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_flashes_max_fieldsGenqlSelection
    min?: player_flashes_min_fieldsGenqlSelection
    stddev?: player_flashes_stddev_fieldsGenqlSelection
    stddev_pop?: player_flashes_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_flashes_stddev_samp_fieldsGenqlSelection
    sum?: player_flashes_sum_fieldsGenqlSelection
    var_pop?: player_flashes_var_pop_fieldsGenqlSelection
    var_samp?: player_flashes_var_samp_fieldsGenqlSelection
    variance?: player_flashes_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_flashes" */
export interface player_flashes_aggregate_order_by {avg?: (player_flashes_avg_order_by | null),count?: (order_by | null),max?: (player_flashes_max_order_by | null),min?: (player_flashes_min_order_by | null),stddev?: (player_flashes_stddev_order_by | null),stddev_pop?: (player_flashes_stddev_pop_order_by | null),stddev_samp?: (player_flashes_stddev_samp_order_by | null),sum?: (player_flashes_sum_order_by | null),var_pop?: (player_flashes_var_pop_order_by | null),var_samp?: (player_flashes_var_samp_order_by | null),variance?: (player_flashes_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_flashes" */
export interface player_flashes_arr_rel_insert_input {data: player_flashes_insert_input[]}


/** aggregate avg on columns */
export interface player_flashes_avg_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_flashes" */
export interface player_flashes_avg_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'. */
export interface player_flashes_bool_exp {_and?: (player_flashes_bool_exp[] | null),_not?: (player_flashes_bool_exp | null),_or?: (player_flashes_bool_exp[] | null),attacked_steam_id?: (bigint_comparison_exp | null),attacker_steam_id?: (bigint_comparison_exp | null),blinded?: (players_bool_exp | null),duration?: (numeric_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),round?: (Int_comparison_exp | null),team_flash?: (Boolean_comparison_exp | null),thrown_by?: (players_bool_exp | null),time?: (timestamptz_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_flashes" */
export interface player_flashes_inc_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),duration?: (Scalars['numeric'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_flashes" */
export interface player_flashes_insert_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),blinded?: (players_obj_rel_insert_input | null),duration?: (Scalars['numeric'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),team_flash?: (Scalars['Boolean'] | null),thrown_by?: (players_obj_rel_insert_input | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate max on columns */
export interface player_flashes_max_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_flashes" */
export interface player_flashes_max_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** aggregate min on columns */
export interface player_flashes_min_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_flashes" */
export interface player_flashes_min_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** response of any mutation on the table "player_flashes" */
export interface player_flashes_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_flashesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_flashes". */
export interface player_flashes_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),blinded?: (players_order_by | null),duration?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),team_flash?: (order_by | null),thrown_by?: (players_order_by | null),time?: (order_by | null)}


/** input type for updating data in table "player_flashes" */
export interface player_flashes_set_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),duration?: (Scalars['numeric'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),team_flash?: (Scalars['Boolean'] | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate stddev on columns */
export interface player_flashes_stddev_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_flashes" */
export interface player_flashes_stddev_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_flashes_stddev_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_flashes" */
export interface player_flashes_stddev_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_flashes_stddev_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_flashes" */
export interface player_flashes_stddev_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_flashes" */
export interface player_flashes_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_flashes_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_flashes_stream_cursor_value_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),duration?: (Scalars['numeric'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),team_flash?: (Scalars['Boolean'] | null),time?: (Scalars['timestamptz'] | null)}


/** aggregate sum on columns */
export interface player_flashes_sum_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_flashes" */
export interface player_flashes_sum_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}

export interface player_flashes_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_flashes_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_flashes_set_input | null),
/** filter the rows which have to be updated */
where: player_flashes_bool_exp}


/** aggregate var_pop on columns */
export interface player_flashes_var_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_flashes" */
export interface player_flashes_var_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_flashes_var_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_flashes" */
export interface player_flashes_var_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_flashes_variance_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    duration?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_flashes" */
export interface player_flashes_variance_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),duration?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "player_kills" */
export interface player_killsGenqlSelection{
    assisted?: boolean | number
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    /** An object relationship */
    attacked_player?: playersGenqlSelection
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    blinded?: boolean | number
    headshot?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    in_air?: boolean | number
    /** A computed field, executes function "is_suicide" */
    is_suicide?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    no_scope?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    round?: boolean | number
    /** A computed field, executes function "is_team_kill" */
    team_kill?: boolean | number
    thru_smoke?: boolean | number
    thru_wall?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_kills" */
export interface player_kills_aggregateGenqlSelection{
    aggregate?: player_kills_aggregate_fieldsGenqlSelection
    nodes?: player_killsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_kills_aggregate_bool_exp {bool_and?: (player_kills_aggregate_bool_exp_bool_and | null),bool_or?: (player_kills_aggregate_bool_exp_bool_or | null),count?: (player_kills_aggregate_bool_exp_count | null)}

export interface player_kills_aggregate_bool_exp_bool_and {arguments: player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_kills_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_kills_aggregate_bool_exp_bool_or {arguments: player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (player_kills_bool_exp | null),predicate: Boolean_comparison_exp}

export interface player_kills_aggregate_bool_exp_count {arguments?: (player_kills_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_kills_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_kills" */
export interface player_kills_aggregate_fieldsGenqlSelection{
    avg?: player_kills_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_kills_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_kills_max_fieldsGenqlSelection
    min?: player_kills_min_fieldsGenqlSelection
    stddev?: player_kills_stddev_fieldsGenqlSelection
    stddev_pop?: player_kills_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_kills_stddev_samp_fieldsGenqlSelection
    sum?: player_kills_sum_fieldsGenqlSelection
    var_pop?: player_kills_var_pop_fieldsGenqlSelection
    var_samp?: player_kills_var_samp_fieldsGenqlSelection
    variance?: player_kills_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_kills" */
export interface player_kills_aggregate_order_by {avg?: (player_kills_avg_order_by | null),count?: (order_by | null),max?: (player_kills_max_order_by | null),min?: (player_kills_min_order_by | null),stddev?: (player_kills_stddev_order_by | null),stddev_pop?: (player_kills_stddev_pop_order_by | null),stddev_samp?: (player_kills_stddev_samp_order_by | null),sum?: (player_kills_sum_order_by | null),var_pop?: (player_kills_var_pop_order_by | null),var_samp?: (player_kills_var_samp_order_by | null),variance?: (player_kills_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_kills" */
export interface player_kills_arr_rel_insert_input {data: player_kills_insert_input[],
/** upsert condition */
on_conflict?: (player_kills_on_conflict | null)}


/** aggregate avg on columns */
export interface player_kills_avg_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_kills" */
export interface player_kills_avg_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'. */
export interface player_kills_bool_exp {_and?: (player_kills_bool_exp[] | null),_not?: (player_kills_bool_exp | null),_or?: (player_kills_bool_exp[] | null),assisted?: (Boolean_comparison_exp | null),attacked_location?: (String_comparison_exp | null),attacked_location_coordinates?: (String_comparison_exp | null),attacked_player?: (players_bool_exp | null),attacked_steam_id?: (bigint_comparison_exp | null),attacked_team?: (String_comparison_exp | null),attacker_location?: (String_comparison_exp | null),attacker_location_coordinates?: (String_comparison_exp | null),attacker_steam_id?: (bigint_comparison_exp | null),attacker_team?: (String_comparison_exp | null),blinded?: (Boolean_comparison_exp | null),headshot?: (Boolean_comparison_exp | null),hitgroup?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),in_air?: (Boolean_comparison_exp | null),is_suicide?: (Boolean_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),no_scope?: (Boolean_comparison_exp | null),player?: (players_bool_exp | null),round?: (Int_comparison_exp | null),team_kill?: (Boolean_comparison_exp | null),thru_smoke?: (Boolean_comparison_exp | null),thru_wall?: (Boolean_comparison_exp | null),time?: (timestamptz_comparison_exp | null),with?: (String_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_kills" */
export interface player_kills_inc_input {attacked_steam_id?: (Scalars['bigint'] | null),attacker_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_kills" */
export interface player_kills_insert_input {assisted?: (Scalars['Boolean'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_player?: (players_obj_rel_insert_input | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),blinded?: (Scalars['Boolean'] | null),headshot?: (Scalars['Boolean'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),in_air?: (Scalars['Boolean'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),no_scope?: (Scalars['Boolean'] | null),player?: (players_obj_rel_insert_input | null),round?: (Scalars['Int'] | null),thru_smoke?: (Scalars['Boolean'] | null),thru_wall?: (Scalars['Boolean'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface player_kills_max_fieldsGenqlSelection{
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_kills" */
export interface player_kills_max_order_by {attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** aggregate min on columns */
export interface player_kills_min_fieldsGenqlSelection{
    attacked_location?: boolean | number
    attacked_location_coordinates?: boolean | number
    attacked_steam_id?: boolean | number
    attacked_team?: boolean | number
    attacker_location?: boolean | number
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    attacker_team?: boolean | number
    hitgroup?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    with?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_kills" */
export interface player_kills_min_order_by {attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** response of any mutation on the table "player_kills" */
export interface player_kills_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_killsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "player_kills" */
export interface player_kills_on_conflict {constraint: player_kills_constraint,update_columns?: player_kills_update_column[],where?: (player_kills_bool_exp | null)}


/** Ordering options when selecting data from "player_kills". */
export interface player_kills_order_by {assisted?: (order_by | null),attacked_location?: (order_by | null),attacked_location_coordinates?: (order_by | null),attacked_player?: (players_order_by | null),attacked_steam_id?: (order_by | null),attacked_team?: (order_by | null),attacker_location?: (order_by | null),attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),attacker_team?: (order_by | null),blinded?: (order_by | null),headshot?: (order_by | null),hitgroup?: (order_by | null),id?: (order_by | null),in_air?: (order_by | null),is_suicide?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),no_scope?: (order_by | null),player?: (players_order_by | null),round?: (order_by | null),team_kill?: (order_by | null),thru_smoke?: (order_by | null),thru_wall?: (order_by | null),time?: (order_by | null),with?: (order_by | null)}


/** primary key columns input for table: player_kills */
export interface player_kills_pk_columns_input {id: Scalars['uuid'],match_id: Scalars['uuid'],match_map_id: Scalars['uuid'],time: Scalars['timestamptz']}


/** input type for updating data in table "player_kills" */
export interface player_kills_set_input {assisted?: (Scalars['Boolean'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),blinded?: (Scalars['Boolean'] | null),headshot?: (Scalars['Boolean'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),in_air?: (Scalars['Boolean'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),no_scope?: (Scalars['Boolean'] | null),round?: (Scalars['Int'] | null),thru_smoke?: (Scalars['Boolean'] | null),thru_wall?: (Scalars['Boolean'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface player_kills_stddev_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_kills" */
export interface player_kills_stddev_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_kills_stddev_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_kills" */
export interface player_kills_stddev_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_kills_stddev_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_kills" */
export interface player_kills_stddev_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_kills" */
export interface player_kills_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_kills_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_kills_stream_cursor_value_input {assisted?: (Scalars['Boolean'] | null),attacked_location?: (Scalars['String'] | null),attacked_location_coordinates?: (Scalars['String'] | null),attacked_steam_id?: (Scalars['bigint'] | null),attacked_team?: (Scalars['String'] | null),attacker_location?: (Scalars['String'] | null),attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),attacker_team?: (Scalars['String'] | null),blinded?: (Scalars['Boolean'] | null),headshot?: (Scalars['Boolean'] | null),hitgroup?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),in_air?: (Scalars['Boolean'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),no_scope?: (Scalars['Boolean'] | null),round?: (Scalars['Int'] | null),thru_smoke?: (Scalars['Boolean'] | null),thru_wall?: (Scalars['Boolean'] | null),time?: (Scalars['timestamptz'] | null),with?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface player_kills_sum_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_kills" */
export interface player_kills_sum_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}

export interface player_kills_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_kills_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_kills_set_input | null),
/** filter the rows which have to be updated */
where: player_kills_bool_exp}


/** aggregate var_pop on columns */
export interface player_kills_var_pop_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_kills" */
export interface player_kills_var_pop_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_kills_var_samp_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_kills" */
export interface player_kills_var_samp_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_kills_variance_fieldsGenqlSelection{
    attacked_steam_id?: boolean | number
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_kills" */
export interface player_kills_variance_order_by {attacked_steam_id?: (order_by | null),attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "player_objectives" */
export interface player_objectivesGenqlSelection{
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_objectives" */
export interface player_objectives_aggregateGenqlSelection{
    aggregate?: player_objectives_aggregate_fieldsGenqlSelection
    nodes?: player_objectivesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_objectives_aggregate_bool_exp {count?: (player_objectives_aggregate_bool_exp_count | null)}

export interface player_objectives_aggregate_bool_exp_count {arguments?: (player_objectives_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_objectives_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_objectives" */
export interface player_objectives_aggregate_fieldsGenqlSelection{
    avg?: player_objectives_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_objectives_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_objectives_max_fieldsGenqlSelection
    min?: player_objectives_min_fieldsGenqlSelection
    stddev?: player_objectives_stddev_fieldsGenqlSelection
    stddev_pop?: player_objectives_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_objectives_stddev_samp_fieldsGenqlSelection
    sum?: player_objectives_sum_fieldsGenqlSelection
    var_pop?: player_objectives_var_pop_fieldsGenqlSelection
    var_samp?: player_objectives_var_samp_fieldsGenqlSelection
    variance?: player_objectives_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_objectives" */
export interface player_objectives_aggregate_order_by {avg?: (player_objectives_avg_order_by | null),count?: (order_by | null),max?: (player_objectives_max_order_by | null),min?: (player_objectives_min_order_by | null),stddev?: (player_objectives_stddev_order_by | null),stddev_pop?: (player_objectives_stddev_pop_order_by | null),stddev_samp?: (player_objectives_stddev_samp_order_by | null),sum?: (player_objectives_sum_order_by | null),var_pop?: (player_objectives_var_pop_order_by | null),var_samp?: (player_objectives_var_samp_order_by | null),variance?: (player_objectives_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_objectives" */
export interface player_objectives_arr_rel_insert_input {data: player_objectives_insert_input[]}


/** aggregate avg on columns */
export interface player_objectives_avg_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_objectives" */
export interface player_objectives_avg_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'. */
export interface player_objectives_bool_exp {_and?: (player_objectives_bool_exp[] | null),_not?: (player_objectives_bool_exp | null),_or?: (player_objectives_bool_exp[] | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),round?: (Int_comparison_exp | null),time?: (timestamptz_comparison_exp | null),type?: (e_objective_types_enum_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_objectives" */
export interface player_objectives_inc_input {player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_objectives" */
export interface player_objectives_insert_input {id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_objective_types_enum | null)}


/** aggregate max on columns */
export interface player_objectives_max_fieldsGenqlSelection{
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    player_steam_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_objectives" */
export interface player_objectives_max_order_by {id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** aggregate min on columns */
export interface player_objectives_min_fieldsGenqlSelection{
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    player_steam_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_objectives" */
export interface player_objectives_min_order_by {id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** response of any mutation on the table "player_objectives" */
export interface player_objectives_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_objectivesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_objectives". */
export interface player_objectives_order_by {id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),player?: (players_order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null),type?: (order_by | null)}


/** input type for updating data in table "player_objectives" */
export interface player_objectives_set_input {id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_objective_types_enum | null)}


/** aggregate stddev on columns */
export interface player_objectives_stddev_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_objectives" */
export interface player_objectives_stddev_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_objectives_stddev_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_objectives" */
export interface player_objectives_stddev_pop_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_objectives_stddev_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_objectives" */
export interface player_objectives_stddev_samp_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_objectives" */
export interface player_objectives_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_objectives_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_objectives_stream_cursor_value_input {id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_objective_types_enum | null)}


/** aggregate sum on columns */
export interface player_objectives_sum_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_objectives" */
export interface player_objectives_sum_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}

export interface player_objectives_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_objectives_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_objectives_set_input | null),
/** filter the rows which have to be updated */
where: player_objectives_bool_exp}


/** aggregate var_pop on columns */
export interface player_objectives_var_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_objectives" */
export interface player_objectives_var_pop_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_objectives_var_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_objectives" */
export interface player_objectives_var_samp_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_objectives_variance_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_objectives" */
export interface player_objectives_variance_order_by {player_steam_id?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "player_sanctions" */
export interface player_sanctionsGenqlSelection{
    created_at?: boolean | number
    /** An object relationship */
    e_sanction_type?: e_sanction_typesGenqlSelection
    id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    reason?: boolean | number
    remove_sanction_date?: boolean | number
    /** An object relationship */
    sanctioned_by?: playersGenqlSelection
    sanctioned_by_steam_id?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_sanctions" */
export interface player_sanctions_aggregateGenqlSelection{
    aggregate?: player_sanctions_aggregate_fieldsGenqlSelection
    nodes?: player_sanctionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "player_sanctions" */
export interface player_sanctions_aggregate_fieldsGenqlSelection{
    avg?: player_sanctions_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_sanctions_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_sanctions_max_fieldsGenqlSelection
    min?: player_sanctions_min_fieldsGenqlSelection
    stddev?: player_sanctions_stddev_fieldsGenqlSelection
    stddev_pop?: player_sanctions_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_sanctions_stddev_samp_fieldsGenqlSelection
    sum?: player_sanctions_sum_fieldsGenqlSelection
    var_pop?: player_sanctions_var_pop_fieldsGenqlSelection
    var_samp?: player_sanctions_var_samp_fieldsGenqlSelection
    variance?: player_sanctions_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface player_sanctions_avg_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "player_sanctions". All fields are combined with a logical 'AND'. */
export interface player_sanctions_bool_exp {_and?: (player_sanctions_bool_exp[] | null),_not?: (player_sanctions_bool_exp | null),_or?: (player_sanctions_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),e_sanction_type?: (e_sanction_types_bool_exp | null),id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),reason?: (String_comparison_exp | null),remove_sanction_date?: (timestamptz_comparison_exp | null),sanctioned_by?: (players_bool_exp | null),sanctioned_by_steam_id?: (bigint_comparison_exp | null),type?: (e_sanction_types_enum_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_sanctions" */
export interface player_sanctions_inc_input {player_steam_id?: (Scalars['bigint'] | null),sanctioned_by_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "player_sanctions" */
export interface player_sanctions_insert_input {created_at?: (Scalars['timestamptz'] | null),e_sanction_type?: (e_sanction_types_obj_rel_insert_input | null),id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),player_steam_id?: (Scalars['bigint'] | null),reason?: (Scalars['String'] | null),remove_sanction_date?: (Scalars['timestamptz'] | null),sanctioned_by?: (players_obj_rel_insert_input | null),sanctioned_by_steam_id?: (Scalars['bigint'] | null),type?: (e_sanction_types_enum | null)}


/** aggregate max on columns */
export interface player_sanctions_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    player_steam_id?: boolean | number
    reason?: boolean | number
    remove_sanction_date?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface player_sanctions_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    player_steam_id?: boolean | number
    reason?: boolean | number
    remove_sanction_date?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "player_sanctions" */
export interface player_sanctions_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_sanctionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_sanctions". */
export interface player_sanctions_order_by {created_at?: (order_by | null),e_sanction_type?: (e_sanction_types_order_by | null),id?: (order_by | null),player?: (players_order_by | null),player_steam_id?: (order_by | null),reason?: (order_by | null),remove_sanction_date?: (order_by | null),sanctioned_by?: (players_order_by | null),sanctioned_by_steam_id?: (order_by | null),type?: (order_by | null)}


/** input type for updating data in table "player_sanctions" */
export interface player_sanctions_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),reason?: (Scalars['String'] | null),remove_sanction_date?: (Scalars['timestamptz'] | null),sanctioned_by_steam_id?: (Scalars['bigint'] | null),type?: (e_sanction_types_enum | null)}


/** aggregate stddev on columns */
export interface player_sanctions_stddev_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface player_sanctions_stddev_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface player_sanctions_stddev_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "player_sanctions" */
export interface player_sanctions_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_sanctions_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_sanctions_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),reason?: (Scalars['String'] | null),remove_sanction_date?: (Scalars['timestamptz'] | null),sanctioned_by_steam_id?: (Scalars['bigint'] | null),type?: (e_sanction_types_enum | null)}


/** aggregate sum on columns */
export interface player_sanctions_sum_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_sanctions_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_sanctions_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_sanctions_set_input | null),
/** filter the rows which have to be updated */
where: player_sanctions_bool_exp}


/** aggregate var_pop on columns */
export interface player_sanctions_var_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface player_sanctions_var_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface player_sanctions_variance_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    sanctioned_by_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "player_unused_utility" */
export interface player_unused_utilityGenqlSelection{
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_unused_utility" */
export interface player_unused_utility_aggregateGenqlSelection{
    aggregate?: player_unused_utility_aggregate_fieldsGenqlSelection
    nodes?: player_unused_utilityGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_unused_utility_aggregate_bool_exp {count?: (player_unused_utility_aggregate_bool_exp_count | null)}

export interface player_unused_utility_aggregate_bool_exp_count {arguments?: (player_unused_utility_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_unused_utility_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_unused_utility" */
export interface player_unused_utility_aggregate_fieldsGenqlSelection{
    avg?: player_unused_utility_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_unused_utility_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_unused_utility_max_fieldsGenqlSelection
    min?: player_unused_utility_min_fieldsGenqlSelection
    stddev?: player_unused_utility_stddev_fieldsGenqlSelection
    stddev_pop?: player_unused_utility_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_unused_utility_stddev_samp_fieldsGenqlSelection
    sum?: player_unused_utility_sum_fieldsGenqlSelection
    var_pop?: player_unused_utility_var_pop_fieldsGenqlSelection
    var_samp?: player_unused_utility_var_samp_fieldsGenqlSelection
    variance?: player_unused_utility_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_unused_utility" */
export interface player_unused_utility_aggregate_order_by {avg?: (player_unused_utility_avg_order_by | null),count?: (order_by | null),max?: (player_unused_utility_max_order_by | null),min?: (player_unused_utility_min_order_by | null),stddev?: (player_unused_utility_stddev_order_by | null),stddev_pop?: (player_unused_utility_stddev_pop_order_by | null),stddev_samp?: (player_unused_utility_stddev_samp_order_by | null),sum?: (player_unused_utility_sum_order_by | null),var_pop?: (player_unused_utility_var_pop_order_by | null),var_samp?: (player_unused_utility_var_samp_order_by | null),variance?: (player_unused_utility_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_unused_utility" */
export interface player_unused_utility_arr_rel_insert_input {data: player_unused_utility_insert_input[],
/** upsert condition */
on_conflict?: (player_unused_utility_on_conflict | null)}


/** aggregate avg on columns */
export interface player_unused_utility_avg_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_unused_utility" */
export interface player_unused_utility_avg_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'. */
export interface player_unused_utility_bool_exp {_and?: (player_unused_utility_bool_exp[] | null),_not?: (player_unused_utility_bool_exp | null),_or?: (player_unused_utility_bool_exp[] | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),round?: (Int_comparison_exp | null),unused?: (Int_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_unused_utility" */
export interface player_unused_utility_inc_input {player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),unused?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_unused_utility" */
export interface player_unused_utility_insert_input {id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),unused?: (Scalars['Int'] | null)}


/** aggregate max on columns */
export interface player_unused_utility_max_fieldsGenqlSelection{
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_unused_utility" */
export interface player_unused_utility_max_order_by {id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** aggregate min on columns */
export interface player_unused_utility_min_fieldsGenqlSelection{
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_unused_utility" */
export interface player_unused_utility_min_order_by {id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** response of any mutation on the table "player_unused_utility" */
export interface player_unused_utility_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_unused_utilityGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "player_unused_utility" */
export interface player_unused_utility_on_conflict {constraint: player_unused_utility_constraint,update_columns?: player_unused_utility_update_column[],where?: (player_unused_utility_bool_exp | null)}


/** Ordering options when selecting data from "player_unused_utility". */
export interface player_unused_utility_order_by {id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),player?: (players_order_by | null),player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** primary key columns input for table: player_unused_utility */
export interface player_unused_utility_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "player_unused_utility" */
export interface player_unused_utility_set_input {id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),unused?: (Scalars['Int'] | null)}


/** aggregate stddev on columns */
export interface player_unused_utility_stddev_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_unused_utility" */
export interface player_unused_utility_stddev_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_unused_utility_stddev_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_unused_utility" */
export interface player_unused_utility_stddev_pop_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_unused_utility_stddev_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_unused_utility" */
export interface player_unused_utility_stddev_samp_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** Streaming cursor of the table "player_unused_utility" */
export interface player_unused_utility_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_unused_utility_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_unused_utility_stream_cursor_value_input {id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),player_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null),unused?: (Scalars['Int'] | null)}


/** aggregate sum on columns */
export interface player_unused_utility_sum_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_unused_utility" */
export interface player_unused_utility_sum_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}

export interface player_unused_utility_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_unused_utility_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_unused_utility_set_input | null),
/** filter the rows which have to be updated */
where: player_unused_utility_bool_exp}


/** aggregate var_pop on columns */
export interface player_unused_utility_var_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_unused_utility" */
export interface player_unused_utility_var_pop_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_unused_utility_var_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_unused_utility" */
export interface player_unused_utility_var_samp_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** aggregate variance on columns */
export interface player_unused_utility_variance_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    round?: boolean | number
    unused?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_unused_utility" */
export interface player_unused_utility_variance_order_by {player_steam_id?: (order_by | null),round?: (order_by | null),unused?: (order_by | null)}


/** columns and relationships of "player_utility" */
export interface player_utilityGenqlSelection{
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    /** An object relationship */
    match_map?: match_mapsGenqlSelection
    match_map_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    round?: boolean | number
    time?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "player_utility" */
export interface player_utility_aggregateGenqlSelection{
    aggregate?: player_utility_aggregate_fieldsGenqlSelection
    nodes?: player_utilityGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface player_utility_aggregate_bool_exp {count?: (player_utility_aggregate_bool_exp_count | null)}

export interface player_utility_aggregate_bool_exp_count {arguments?: (player_utility_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (player_utility_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "player_utility" */
export interface player_utility_aggregate_fieldsGenqlSelection{
    avg?: player_utility_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (player_utility_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: player_utility_max_fieldsGenqlSelection
    min?: player_utility_min_fieldsGenqlSelection
    stddev?: player_utility_stddev_fieldsGenqlSelection
    stddev_pop?: player_utility_stddev_pop_fieldsGenqlSelection
    stddev_samp?: player_utility_stddev_samp_fieldsGenqlSelection
    sum?: player_utility_sum_fieldsGenqlSelection
    var_pop?: player_utility_var_pop_fieldsGenqlSelection
    var_samp?: player_utility_var_samp_fieldsGenqlSelection
    variance?: player_utility_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "player_utility" */
export interface player_utility_aggregate_order_by {avg?: (player_utility_avg_order_by | null),count?: (order_by | null),max?: (player_utility_max_order_by | null),min?: (player_utility_min_order_by | null),stddev?: (player_utility_stddev_order_by | null),stddev_pop?: (player_utility_stddev_pop_order_by | null),stddev_samp?: (player_utility_stddev_samp_order_by | null),sum?: (player_utility_sum_order_by | null),var_pop?: (player_utility_var_pop_order_by | null),var_samp?: (player_utility_var_samp_order_by | null),variance?: (player_utility_variance_order_by | null)}


/** input type for inserting array relation for remote table "player_utility" */
export interface player_utility_arr_rel_insert_input {data: player_utility_insert_input[]}


/** aggregate avg on columns */
export interface player_utility_avg_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "player_utility" */
export interface player_utility_avg_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'. */
export interface player_utility_bool_exp {_and?: (player_utility_bool_exp[] | null),_not?: (player_utility_bool_exp | null),_or?: (player_utility_bool_exp[] | null),attacker_location_coordinates?: (String_comparison_exp | null),attacker_steam_id?: (bigint_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_map?: (match_maps_bool_exp | null),match_map_id?: (uuid_comparison_exp | null),player?: (players_bool_exp | null),round?: (Int_comparison_exp | null),time?: (timestamptz_comparison_exp | null),type?: (e_utility_types_enum_comparison_exp | null)}


/** input type for incrementing numeric columns in table "player_utility" */
export interface player_utility_inc_input {attacker_steam_id?: (Scalars['bigint'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "player_utility" */
export interface player_utility_insert_input {attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_map?: (match_maps_obj_rel_insert_input | null),match_map_id?: (Scalars['uuid'] | null),player?: (players_obj_rel_insert_input | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_utility_types_enum | null)}


/** aggregate max on columns */
export interface player_utility_max_fieldsGenqlSelection{
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "player_utility" */
export interface player_utility_max_order_by {attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** aggregate min on columns */
export interface player_utility_min_fieldsGenqlSelection{
    attacker_location_coordinates?: boolean | number
    attacker_steam_id?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_map_id?: boolean | number
    round?: boolean | number
    time?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "player_utility" */
export interface player_utility_min_order_by {attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_map_id?: (order_by | null),round?: (order_by | null),time?: (order_by | null)}


/** response of any mutation on the table "player_utility" */
export interface player_utility_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: player_utilityGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "player_utility". */
export interface player_utility_order_by {attacker_location_coordinates?: (order_by | null),attacker_steam_id?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_map?: (match_maps_order_by | null),match_map_id?: (order_by | null),player?: (players_order_by | null),round?: (order_by | null),time?: (order_by | null),type?: (order_by | null)}


/** input type for updating data in table "player_utility" */
export interface player_utility_set_input {attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_utility_types_enum | null)}


/** aggregate stddev on columns */
export interface player_utility_stddev_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "player_utility" */
export interface player_utility_stddev_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface player_utility_stddev_pop_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "player_utility" */
export interface player_utility_stddev_pop_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface player_utility_stddev_samp_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "player_utility" */
export interface player_utility_stddev_samp_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "player_utility" */
export interface player_utility_stream_cursor_input {
/** Stream column input with initial value */
initial_value: player_utility_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface player_utility_stream_cursor_value_input {attacker_location_coordinates?: (Scalars['String'] | null),attacker_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_map_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),time?: (Scalars['timestamptz'] | null),type?: (e_utility_types_enum | null)}


/** aggregate sum on columns */
export interface player_utility_sum_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "player_utility" */
export interface player_utility_sum_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}

export interface player_utility_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (player_utility_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (player_utility_set_input | null),
/** filter the rows which have to be updated */
where: player_utility_bool_exp}


/** aggregate var_pop on columns */
export interface player_utility_var_pop_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "player_utility" */
export interface player_utility_var_pop_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface player_utility_var_samp_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "player_utility" */
export interface player_utility_var_samp_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface player_utility_variance_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "player_utility" */
export interface player_utility_variance_order_by {attacker_steam_id?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "players" */
export interface playersGenqlSelection{
    /** An array relationship */
    abandoned_matches?: (abandoned_matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** An aggregate relationship */
    abandoned_matches_aggregate?: (abandoned_matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** An array relationship */
    assists?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    assists_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An array relationship */
    assited_by_players?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    assited_by_players_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    avatar_url?: boolean | number
    /** An array relationship */
    coach_lineups?: (match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** An aggregate relationship */
    coach_lineups_aggregate?: (match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    country?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id?: boolean | number
    /** An array relationship */
    damage_dealt?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    damage_dealt_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An array relationship */
    damage_taken?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    damage_taken_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An array relationship */
    deaths?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    deaths_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    discord_id?: boolean | number
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    /** An array relationship */
    elo_history?: (player_eloGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** An aggregate relationship */
    elo_history_aggregate?: (player_elo_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** An array relationship */
    flashed_by_players?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    flashed_by_players_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An array relationship */
    flashed_players?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    flashed_players_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An array relationship */
    friends?: (my_friendsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** An aggregate relationship */
    friends_aggregate?: (my_friends_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** An array relationship */
    invited_players?: (team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    invited_players_aggregate?: (team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** A computed field, executes function "is_banned" */
    is_banned?: boolean | number
    /** A computed field, executes function "is_gagged" */
    is_gagged?: boolean | number
    /** A computed field, executes function "is_in_another_match" */
    is_in_another_match?: boolean | number
    /** A computed field, executes function "is_muted" */
    is_muted?: boolean | number
    /** An array relationship */
    kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    language?: boolean | number
    /** An array relationship */
    lobby_players?: (lobby_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** An aggregate relationship */
    lobby_players_aggregate?: (lobby_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** A computed field, executes function "get_player_matches" */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown?: boolean | number
    /** An array relationship */
    multi_kills?: (v_player_multi_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** An aggregate relationship */
    multi_kills_aggregate?: (v_player_multi_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    name?: boolean | number
    name_registered?: boolean | number
    /** An array relationship */
    notifications?: (notificationsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** An aggregate relationship */
    notifications_aggregate?: (notifications_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** An array relationship */
    objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An array relationship */
    owned_teams?: (teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** An aggregate relationship */
    owned_teams_aggregate?: (teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** An array relationship */
    player_lineup?: (match_lineup_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** An aggregate relationship */
    player_lineup_aggregate?: (match_lineup_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** An array relationship */
    player_unused_utilities?: (player_unused_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_unused_utilities_aggregate?: (player_unused_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    profile_url?: boolean | number
    role?: boolean | number
    steam_id?: boolean | number
    /** An array relationship */
    team_invites?: (team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    team_invites_aggregate?: (team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An array relationship */
    team_members?: (team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    team_members_aggregate?: (team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** A computed field, executes function "get_player_teams" */
    teams?: (teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    /** An array relationship */
    tournament_organizers?: (tournament_organizersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_organizers_aggregate?: (tournament_organizers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An array relationship */
    tournament_rosters?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_rosters_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An array relationship */
    tournaments?: (tournamentsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** An aggregate relationship */
    tournaments_aggregate?: (tournaments_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** An array relationship */
    utility_thrown?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    utility_thrown_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "players" */
export interface players_aggregateGenqlSelection{
    aggregate?: players_aggregate_fieldsGenqlSelection
    nodes?: playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "players" */
export interface players_aggregate_fieldsGenqlSelection{
    avg?: players_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (players_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: players_max_fieldsGenqlSelection
    min?: players_min_fieldsGenqlSelection
    stddev?: players_stddev_fieldsGenqlSelection
    stddev_pop?: players_stddev_pop_fieldsGenqlSelection
    stddev_samp?: players_stddev_samp_fieldsGenqlSelection
    sum?: players_sum_fieldsGenqlSelection
    var_pop?: players_var_pop_fieldsGenqlSelection
    var_samp?: players_var_samp_fieldsGenqlSelection
    variance?: players_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface players_avg_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'. */
export interface players_bool_exp {_and?: (players_bool_exp[] | null),_not?: (players_bool_exp | null),_or?: (players_bool_exp[] | null),abandoned_matches?: (abandoned_matches_bool_exp | null),abandoned_matches_aggregate?: (abandoned_matches_aggregate_bool_exp | null),assists?: (player_assists_bool_exp | null),assists_aggregate?: (player_assists_aggregate_bool_exp | null),assited_by_players?: (player_assists_bool_exp | null),assited_by_players_aggregate?: (player_assists_aggregate_bool_exp | null),avatar_url?: (String_comparison_exp | null),coach_lineups?: (match_lineups_bool_exp | null),coach_lineups_aggregate?: (match_lineups_aggregate_bool_exp | null),country?: (String_comparison_exp | null),created_at?: (timestamptz_comparison_exp | null),current_lobby_id?: (uuid_comparison_exp | null),damage_dealt?: (player_damages_bool_exp | null),damage_dealt_aggregate?: (player_damages_aggregate_bool_exp | null),damage_taken?: (player_damages_bool_exp | null),damage_taken_aggregate?: (player_damages_aggregate_bool_exp | null),deaths?: (player_kills_bool_exp | null),deaths_aggregate?: (player_kills_aggregate_bool_exp | null),discord_id?: (String_comparison_exp | null),elo?: (numeric_comparison_exp | null),elo_history?: (player_elo_bool_exp | null),elo_history_aggregate?: (player_elo_aggregate_bool_exp | null),flashed_by_players?: (player_flashes_bool_exp | null),flashed_by_players_aggregate?: (player_flashes_aggregate_bool_exp | null),flashed_players?: (player_flashes_bool_exp | null),flashed_players_aggregate?: (player_flashes_aggregate_bool_exp | null),friends?: (my_friends_bool_exp | null),friends_aggregate?: (my_friends_aggregate_bool_exp | null),invited_players?: (team_invites_bool_exp | null),invited_players_aggregate?: (team_invites_aggregate_bool_exp | null),is_banned?: (Boolean_comparison_exp | null),is_gagged?: (Boolean_comparison_exp | null),is_in_another_match?: (Boolean_comparison_exp | null),is_muted?: (Boolean_comparison_exp | null),kills?: (player_kills_bool_exp | null),kills_aggregate?: (player_kills_aggregate_bool_exp | null),language?: (String_comparison_exp | null),lobby_players?: (lobby_players_bool_exp | null),lobby_players_aggregate?: (lobby_players_aggregate_bool_exp | null),matches?: (matches_bool_exp | null),matchmaking_cooldown?: (timestamptz_comparison_exp | null),multi_kills?: (v_player_multi_kills_bool_exp | null),multi_kills_aggregate?: (v_player_multi_kills_aggregate_bool_exp | null),name?: (String_comparison_exp | null),name_registered?: (Boolean_comparison_exp | null),notifications?: (notifications_bool_exp | null),notifications_aggregate?: (notifications_aggregate_bool_exp | null),objectives?: (player_objectives_bool_exp | null),objectives_aggregate?: (player_objectives_aggregate_bool_exp | null),owned_teams?: (teams_bool_exp | null),owned_teams_aggregate?: (teams_aggregate_bool_exp | null),player_lineup?: (match_lineup_players_bool_exp | null),player_lineup_aggregate?: (match_lineup_players_aggregate_bool_exp | null),player_unused_utilities?: (player_unused_utility_bool_exp | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_bool_exp | null),profile_url?: (String_comparison_exp | null),role?: (e_player_roles_enum_comparison_exp | null),steam_id?: (bigint_comparison_exp | null),team_invites?: (team_invites_bool_exp | null),team_invites_aggregate?: (team_invites_aggregate_bool_exp | null),team_members?: (team_roster_bool_exp | null),team_members_aggregate?: (team_roster_aggregate_bool_exp | null),teams?: (teams_bool_exp | null),total_matches?: (Int_comparison_exp | null),tournament_organizers?: (tournament_organizers_bool_exp | null),tournament_organizers_aggregate?: (tournament_organizers_aggregate_bool_exp | null),tournament_rosters?: (tournament_team_roster_bool_exp | null),tournament_rosters_aggregate?: (tournament_team_roster_aggregate_bool_exp | null),tournaments?: (tournaments_bool_exp | null),tournaments_aggregate?: (tournaments_aggregate_bool_exp | null),utility_thrown?: (player_utility_bool_exp | null),utility_thrown_aggregate?: (player_utility_aggregate_bool_exp | null)}


/** input type for incrementing numeric columns in table "players" */
export interface players_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "players" */
export interface players_insert_input {abandoned_matches?: (abandoned_matches_arr_rel_insert_input | null),assists?: (player_assists_arr_rel_insert_input | null),assited_by_players?: (player_assists_arr_rel_insert_input | null),avatar_url?: (Scalars['String'] | null),coach_lineups?: (match_lineups_arr_rel_insert_input | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),damage_dealt?: (player_damages_arr_rel_insert_input | null),damage_taken?: (player_damages_arr_rel_insert_input | null),deaths?: (player_kills_arr_rel_insert_input | null),discord_id?: (Scalars['String'] | null),elo_history?: (player_elo_arr_rel_insert_input | null),flashed_by_players?: (player_flashes_arr_rel_insert_input | null),flashed_players?: (player_flashes_arr_rel_insert_input | null),friends?: (my_friends_arr_rel_insert_input | null),invited_players?: (team_invites_arr_rel_insert_input | null),kills?: (player_kills_arr_rel_insert_input | null),language?: (Scalars['String'] | null),lobby_players?: (lobby_players_arr_rel_insert_input | null),multi_kills?: (v_player_multi_kills_arr_rel_insert_input | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),notifications?: (notifications_arr_rel_insert_input | null),objectives?: (player_objectives_arr_rel_insert_input | null),owned_teams?: (teams_arr_rel_insert_input | null),player_lineup?: (match_lineup_players_arr_rel_insert_input | null),player_unused_utilities?: (player_unused_utility_arr_rel_insert_input | null),profile_url?: (Scalars['String'] | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null),team_invites?: (team_invites_arr_rel_insert_input | null),team_members?: (team_roster_arr_rel_insert_input | null),tournament_organizers?: (tournament_organizers_arr_rel_insert_input | null),tournament_rosters?: (tournament_team_roster_arr_rel_insert_input | null),tournaments?: (tournaments_arr_rel_insert_input | null),utility_thrown?: (player_utility_arr_rel_insert_input | null)}


/** aggregate max on columns */
export interface players_max_fieldsGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id?: boolean | number
    discord_id?: boolean | number
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    language?: boolean | number
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown?: boolean | number
    name?: boolean | number
    profile_url?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface players_min_fieldsGenqlSelection{
    avatar_url?: boolean | number
    country?: boolean | number
    created_at?: boolean | number
    /** A computed field, executes function "get_player_current_lobby_id" */
    current_lobby_id?: boolean | number
    discord_id?: boolean | number
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    language?: boolean | number
    /** A computed field, executes function "get_player_matchmaking_cooldown" */
    matchmaking_cooldown?: boolean | number
    name?: boolean | number
    profile_url?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "players" */
export interface players_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: playersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "players" */
export interface players_obj_rel_insert_input {data: players_insert_input,
/** upsert condition */
on_conflict?: (players_on_conflict | null)}


/** on_conflict condition type for table "players" */
export interface players_on_conflict {constraint: players_constraint,update_columns?: players_update_column[],where?: (players_bool_exp | null)}


/** Ordering options when selecting data from "players". */
export interface players_order_by {abandoned_matches_aggregate?: (abandoned_matches_aggregate_order_by | null),assists_aggregate?: (player_assists_aggregate_order_by | null),assited_by_players_aggregate?: (player_assists_aggregate_order_by | null),avatar_url?: (order_by | null),coach_lineups_aggregate?: (match_lineups_aggregate_order_by | null),country?: (order_by | null),created_at?: (order_by | null),current_lobby_id?: (order_by | null),damage_dealt_aggregate?: (player_damages_aggregate_order_by | null),damage_taken_aggregate?: (player_damages_aggregate_order_by | null),deaths_aggregate?: (player_kills_aggregate_order_by | null),discord_id?: (order_by | null),elo?: (order_by | null),elo_history_aggregate?: (player_elo_aggregate_order_by | null),flashed_by_players_aggregate?: (player_flashes_aggregate_order_by | null),flashed_players_aggregate?: (player_flashes_aggregate_order_by | null),friends_aggregate?: (my_friends_aggregate_order_by | null),invited_players_aggregate?: (team_invites_aggregate_order_by | null),is_banned?: (order_by | null),is_gagged?: (order_by | null),is_in_another_match?: (order_by | null),is_muted?: (order_by | null),kills_aggregate?: (player_kills_aggregate_order_by | null),language?: (order_by | null),lobby_players_aggregate?: (lobby_players_aggregate_order_by | null),matches_aggregate?: (matches_aggregate_order_by | null),matchmaking_cooldown?: (order_by | null),multi_kills_aggregate?: (v_player_multi_kills_aggregate_order_by | null),name?: (order_by | null),name_registered?: (order_by | null),notifications_aggregate?: (notifications_aggregate_order_by | null),objectives_aggregate?: (player_objectives_aggregate_order_by | null),owned_teams_aggregate?: (teams_aggregate_order_by | null),player_lineup_aggregate?: (match_lineup_players_aggregate_order_by | null),player_unused_utilities_aggregate?: (player_unused_utility_aggregate_order_by | null),profile_url?: (order_by | null),role?: (order_by | null),steam_id?: (order_by | null),team_invites_aggregate?: (team_invites_aggregate_order_by | null),team_members_aggregate?: (team_roster_aggregate_order_by | null),teams_aggregate?: (teams_aggregate_order_by | null),total_matches?: (order_by | null),tournament_organizers_aggregate?: (tournament_organizers_aggregate_order_by | null),tournament_rosters_aggregate?: (tournament_team_roster_aggregate_order_by | null),tournaments_aggregate?: (tournaments_aggregate_order_by | null),utility_thrown_aggregate?: (player_utility_aggregate_order_by | null)}


/** primary key columns input for table: players */
export interface players_pk_columns_input {steam_id: Scalars['bigint']}


/** input type for updating data in table "players" */
export interface players_set_input {avatar_url?: (Scalars['String'] | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),discord_id?: (Scalars['String'] | null),language?: (Scalars['String'] | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),profile_url?: (Scalars['String'] | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface players_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface players_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface players_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "players" */
export interface players_stream_cursor_input {
/** Stream column input with initial value */
initial_value: players_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface players_stream_cursor_value_input {avatar_url?: (Scalars['String'] | null),country?: (Scalars['String'] | null),created_at?: (Scalars['timestamptz'] | null),discord_id?: (Scalars['String'] | null),language?: (Scalars['String'] | null),name?: (Scalars['String'] | null),name_registered?: (Scalars['Boolean'] | null),profile_url?: (Scalars['String'] | null),role?: (e_player_roles_enum | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface players_sum_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface players_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (players_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (players_set_input | null),
/** filter the rows which have to be updated */
where: players_bool_exp}


/** aggregate var_pop on columns */
export interface players_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface players_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface players_variance_fieldsGenqlSelection{
    /** A computed field, executes function "get_player_elo" */
    elo?: boolean | number
    steam_id?: boolean | number
    /** A computed field, executes function "get_total_player_matches" */
    total_matches?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface query_rootGenqlSelection{
    /** fetch data from the table: "_map_pool" */
    _map_pool?: (_map_poolGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (_map_pool_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (_map_pool_order_by[] | null), 
    /** filter the rows returned */
    where?: (_map_pool_bool_exp | null)} })
    /** fetch aggregated fields from the table: "_map_pool" */
    _map_pool_aggregate?: (_map_pool_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (_map_pool_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (_map_pool_order_by[] | null), 
    /** filter the rows returned */
    where?: (_map_pool_bool_exp | null)} })
    /** fetch data from the table: "_map_pool" using primary key columns */
    _map_pool_by_pk?: (_map_poolGenqlSelection & { __args: {map_id: Scalars['uuid'], map_pool_id: Scalars['uuid']} })
    /** An array relationship */
    abandoned_matches?: (abandoned_matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** An aggregate relationship */
    abandoned_matches_aggregate?: (abandoned_matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** fetch data from the table: "abandoned_matches" using primary key columns */
    abandoned_matches_by_pk?: (abandoned_matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "e_friend_status" */
    e_friend_status?: (e_friend_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_friend_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_friend_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_friend_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_friend_status" */
    e_friend_status_aggregate?: (e_friend_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_friend_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_friend_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_friend_status_bool_exp | null)} })
    /** fetch data from the table: "e_friend_status" using primary key columns */
    e_friend_status_by_pk?: (e_friend_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses?: (e_game_server_node_statusesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_game_server_node_statuses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_game_server_node_statuses_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_game_server_node_statuses_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses_aggregate?: (e_game_server_node_statuses_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_game_server_node_statuses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_game_server_node_statuses_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_game_server_node_statuses_bool_exp | null)} })
    /** fetch data from the table: "e_game_server_node_statuses" using primary key columns */
    e_game_server_node_statuses_by_pk?: (e_game_server_node_statusesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_lobby_access" */
    e_lobby_access?: (e_lobby_accessGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_access_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_access_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_access_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_lobby_access" */
    e_lobby_access_aggregate?: (e_lobby_access_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_access_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_access_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_access_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_access" using primary key columns */
    e_lobby_access_by_pk?: (e_lobby_accessGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_lobby_player_status" */
    e_lobby_player_status?: (e_lobby_player_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_player_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_player_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_player_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_lobby_player_status" */
    e_lobby_player_status_aggregate?: (e_lobby_player_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_player_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_player_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_player_status_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_player_status" using primary key columns */
    e_lobby_player_status_by_pk?: (e_lobby_player_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_map_pool_types" */
    e_map_pool_types?: (e_map_pool_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_map_pool_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_map_pool_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_map_pool_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_map_pool_types" */
    e_map_pool_types_aggregate?: (e_map_pool_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_map_pool_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_map_pool_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_map_pool_types_bool_exp | null)} })
    /** fetch data from the table: "e_map_pool_types" using primary key columns */
    e_map_pool_types_by_pk?: (e_map_pool_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_match_map_status" */
    e_match_map_status?: (e_match_map_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_map_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_map_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_map_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_map_status" */
    e_match_map_status_aggregate?: (e_match_map_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_map_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_map_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_map_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_map_status" using primary key columns */
    e_match_map_status_by_pk?: (e_match_map_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_match_status" */
    e_match_status?: (e_match_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_status" */
    e_match_status_aggregate?: (e_match_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_status" using primary key columns */
    e_match_status_by_pk?: (e_match_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_match_types" */
    e_match_types?: (e_match_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_types" */
    e_match_types_aggregate?: (e_match_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_types_bool_exp | null)} })
    /** fetch data from the table: "e_match_types" using primary key columns */
    e_match_types_by_pk?: (e_match_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_notification_types" */
    e_notification_types?: (e_notification_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_notification_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_notification_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_notification_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_notification_types" */
    e_notification_types_aggregate?: (e_notification_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_notification_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_notification_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_notification_types_bool_exp | null)} })
    /** fetch data from the table: "e_notification_types" using primary key columns */
    e_notification_types_by_pk?: (e_notification_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_objective_types" */
    e_objective_types?: (e_objective_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_objective_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_objective_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_objective_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_objective_types" */
    e_objective_types_aggregate?: (e_objective_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_objective_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_objective_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_objective_types_bool_exp | null)} })
    /** fetch data from the table: "e_objective_types" using primary key columns */
    e_objective_types_by_pk?: (e_objective_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_player_roles" */
    e_player_roles?: (e_player_rolesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_player_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_player_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_player_roles_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_player_roles" */
    e_player_roles_aggregate?: (e_player_roles_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_player_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_player_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_player_roles_bool_exp | null)} })
    /** fetch data from the table: "e_player_roles" using primary key columns */
    e_player_roles_by_pk?: (e_player_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_ready_settings" */
    e_ready_settings?: (e_ready_settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_ready_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_ready_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_ready_settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_ready_settings" */
    e_ready_settings_aggregate?: (e_ready_settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_ready_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_ready_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_ready_settings_bool_exp | null)} })
    /** fetch data from the table: "e_ready_settings" using primary key columns */
    e_ready_settings_by_pk?: (e_ready_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_sanction_types" */
    e_sanction_types?: (e_sanction_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sanction_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sanction_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sanction_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_sanction_types" */
    e_sanction_types_aggregate?: (e_sanction_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sanction_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sanction_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sanction_types_bool_exp | null)} })
    /** fetch data from the table: "e_sanction_types" using primary key columns */
    e_sanction_types_by_pk?: (e_sanction_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_sides" */
    e_sides?: (e_sidesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sides_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sides_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sides_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_sides" */
    e_sides_aggregate?: (e_sides_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sides_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sides_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sides_bool_exp | null)} })
    /** fetch data from the table: "e_sides" using primary key columns */
    e_sides_by_pk?: (e_sidesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_team_roles" */
    e_team_roles?: (e_team_rolesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_team_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_team_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_team_roles_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_team_roles" */
    e_team_roles_aggregate?: (e_team_roles_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_team_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_team_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_team_roles_bool_exp | null)} })
    /** fetch data from the table: "e_team_roles" using primary key columns */
    e_team_roles_by_pk?: (e_team_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_timeout_settings" */
    e_timeout_settings?: (e_timeout_settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_timeout_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_timeout_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_timeout_settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_timeout_settings" */
    e_timeout_settings_aggregate?: (e_timeout_settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_timeout_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_timeout_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_timeout_settings_bool_exp | null)} })
    /** fetch data from the table: "e_timeout_settings" using primary key columns */
    e_timeout_settings_by_pk?: (e_timeout_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_tournament_stage_types" */
    e_tournament_stage_types?: (e_tournament_stage_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_stage_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_stage_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_stage_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_tournament_stage_types" */
    e_tournament_stage_types_aggregate?: (e_tournament_stage_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_stage_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_stage_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_stage_types_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_stage_types" using primary key columns */
    e_tournament_stage_types_by_pk?: (e_tournament_stage_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_tournament_status" */
    e_tournament_status?: (e_tournament_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_tournament_status" */
    e_tournament_status_aggregate?: (e_tournament_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_status_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_status" using primary key columns */
    e_tournament_status_by_pk?: (e_tournament_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_utility_types" */
    e_utility_types?: (e_utility_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_utility_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_utility_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_utility_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_utility_types" */
    e_utility_types_aggregate?: (e_utility_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_utility_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_utility_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_utility_types_bool_exp | null)} })
    /** fetch data from the table: "e_utility_types" using primary key columns */
    e_utility_types_by_pk?: (e_utility_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "e_veto_pick_types" */
    e_veto_pick_types?: (e_veto_pick_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_veto_pick_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_veto_pick_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_veto_pick_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_veto_pick_types" */
    e_veto_pick_types_aggregate?: (e_veto_pick_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_veto_pick_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_veto_pick_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_veto_pick_types_bool_exp | null)} })
    /** fetch data from the table: "e_veto_pick_types" using primary key columns */
    e_veto_pick_types_by_pk?: (e_veto_pick_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table: "friends" */
    friends?: (friendsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (friends_bool_exp | null)} })
    /** fetch aggregated fields from the table: "friends" */
    friends_aggregate?: (friends_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (friends_bool_exp | null)} })
    /** fetch data from the table: "friends" using primary key columns */
    friends_by_pk?: (friendsGenqlSelection & { __args: {other_player_steam_id: Scalars['bigint'], player_steam_id: Scalars['bigint']} })
    /** An array relationship */
    game_server_nodes?: (game_server_nodesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** An aggregate relationship */
    game_server_nodes_aggregate?: (game_server_nodes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** fetch data from the table: "game_server_nodes" using primary key columns */
    game_server_nodes_by_pk?: (game_server_nodesGenqlSelection & { __args: {id: Scalars['String']} })
    getNodeStats?: NodeStatsGenqlSelection
    getServiceStats?: PodStatsGenqlSelection
    /** fetch data from the table: "lobbies" */
    lobbies?: (lobbiesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobbies_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobbies_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobbies_bool_exp | null)} })
    /** fetch aggregated fields from the table: "lobbies" */
    lobbies_aggregate?: (lobbies_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobbies_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobbies_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobbies_bool_exp | null)} })
    /** fetch data from the table: "lobbies" using primary key columns */
    lobbies_by_pk?: (lobbiesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    lobby_players?: (lobby_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** An aggregate relationship */
    lobby_players_aggregate?: (lobby_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** fetch data from the table: "lobby_players" using primary key columns */
    lobby_players_by_pk?: (lobby_playersGenqlSelection & { __args: {lobby_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** fetch data from the table: "map_pools" */
    map_pools?: (map_poolsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (map_pools_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (map_pools_order_by[] | null), 
    /** filter the rows returned */
    where?: (map_pools_bool_exp | null)} })
    /** fetch aggregated fields from the table: "map_pools" */
    map_pools_aggregate?: (map_pools_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (map_pools_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (map_pools_order_by[] | null), 
    /** filter the rows returned */
    where?: (map_pools_bool_exp | null)} })
    /** fetch data from the table: "map_pools" using primary key columns */
    map_pools_by_pk?: (map_poolsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    maps?: (mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** An aggregate relationship */
    maps_aggregate?: (maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** fetch data from the table: "maps" using primary key columns */
    maps_by_pk?: (mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_invites" */
    match_invites?: (match_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_invites" */
    match_invites_aggregate?: (match_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** fetch data from the table: "match_invites" using primary key columns */
    match_invites_by_pk?: (match_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_lineup_players" */
    match_lineup_players?: (match_lineup_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_lineup_players" */
    match_lineup_players_aggregate?: (match_lineup_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** fetch data from the table: "match_lineup_players" using primary key columns */
    match_lineup_players_by_pk?: (match_lineup_playersGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    match_lineups?: (match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** An aggregate relationship */
    match_lineups_aggregate?: (match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** fetch data from the table: "match_lineups" using primary key columns */
    match_lineups_by_pk?: (match_lineupsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_map_demos" */
    match_map_demos?: (match_map_demosGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_demos" */
    match_map_demos_aggregate?: (match_map_demos_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** fetch data from the table: "match_map_demos" using primary key columns */
    match_map_demos_by_pk?: (match_map_demosGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_map_rounds" */
    match_map_rounds?: (match_map_roundsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_rounds" */
    match_map_rounds_aggregate?: (match_map_rounds_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** fetch data from the table: "match_map_rounds" using primary key columns */
    match_map_rounds_by_pk?: (match_map_roundsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_map_veto_picks" */
    match_map_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_veto_picks" */
    match_map_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** fetch data from the table: "match_map_veto_picks" using primary key columns */
    match_map_veto_picks_by_pk?: (match_map_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    match_maps?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_maps_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** fetch data from the table: "match_maps" using primary key columns */
    match_maps_by_pk?: (match_mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_options" */
    match_options?: (match_optionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_options_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_options_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_options_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_options" */
    match_options_aggregate?: (match_options_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_options_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_options_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_options_bool_exp | null)} })
    /** fetch data from the table: "match_options" using primary key columns */
    match_options_by_pk?: (match_optionsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_region_veto_picks" */
    match_region_veto_picks?: (match_region_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_region_veto_picks" */
    match_region_veto_picks_aggregate?: (match_region_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** fetch data from the table: "match_region_veto_picks" using primary key columns */
    match_region_veto_picks_by_pk?: (match_region_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "match_type_cfgs" */
    match_type_cfgs?: (match_type_cfgsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_type_cfgs" */
    match_type_cfgs_aggregate?: (match_type_cfgs_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** fetch data from the table: "match_type_cfgs" using primary key columns */
    match_type_cfgs_by_pk?: (match_type_cfgsGenqlSelection & { __args: {type: e_match_types_enum} })
    /** An array relationship */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** An aggregate relationship */
    matches_aggregate?: (matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** fetch data from the table: "matches" using primary key columns */
    matches_by_pk?: (matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** Gets Current User */
    me?: MeResponseGenqlSelection
    /** fetch data from the table: "migration_hashes.hashes" */
    migration_hashes_hashes?: (migration_hashes_hashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (migration_hashes_hashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (migration_hashes_hashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (migration_hashes_hashes_bool_exp | null)} })
    /** fetch aggregated fields from the table: "migration_hashes.hashes" */
    migration_hashes_hashes_aggregate?: (migration_hashes_hashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (migration_hashes_hashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (migration_hashes_hashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (migration_hashes_hashes_bool_exp | null)} })
    /** fetch data from the table: "migration_hashes.hashes" using primary key columns */
    migration_hashes_hashes_by_pk?: (migration_hashes_hashesGenqlSelection & { __args: {name: Scalars['String']} })
    /** fetch data from the table: "v_my_friends" */
    my_friends?: (my_friendsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_my_friends" */
    my_friends_aggregate?: (my_friends_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** An array relationship */
    notifications?: (notificationsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** An aggregate relationship */
    notifications_aggregate?: (notifications_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** fetch data from the table: "notifications" using primary key columns */
    notifications_by_pk?: (notificationsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    player_assists?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    player_assists_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An array relationship */
    player_damages?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    player_damages_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** fetch data from the table: "player_elo" */
    player_elo?: (player_eloGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_elo" */
    player_elo_aggregate?: (player_elo_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** fetch data from the table: "player_elo" using primary key columns */
    player_elo_by_pk?: (player_eloGenqlSelection & { __args: {match_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** An array relationship */
    player_flashes?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    player_flashes_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An array relationship */
    player_kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    player_kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** fetch data from the table: "player_kills" using primary key columns */
    player_kills_by_pk?: (player_killsGenqlSelection & { __args: {id: Scalars['uuid'], match_id: Scalars['uuid'], match_map_id: Scalars['uuid'], time: Scalars['timestamptz']} })
    /** An array relationship */
    player_objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    player_objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** fetch data from the table: "player_sanctions" */
    player_sanctions?: (player_sanctionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_sanctions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_sanctions_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_sanctions_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_sanctions" */
    player_sanctions_aggregate?: (player_sanctions_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_sanctions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_sanctions_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_sanctions_bool_exp | null)} })
    /** fetch data from the table: "player_unused_utility" */
    player_unused_utility?: (player_unused_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_unused_utility" */
    player_unused_utility_aggregate?: (player_unused_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** fetch data from the table: "player_unused_utility" using primary key columns */
    player_unused_utility_by_pk?: (player_unused_utilityGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    player_utility?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_utility_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** fetch data from the table: "players" */
    players?: (playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (players_order_by[] | null), 
    /** filter the rows returned */
    where?: (players_bool_exp | null)} })
    /** fetch aggregated fields from the table: "players" */
    players_aggregate?: (players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (players_order_by[] | null), 
    /** filter the rows returned */
    where?: (players_bool_exp | null)} })
    /** fetch data from the table: "players" using primary key columns */
    players_by_pk?: (playersGenqlSelection & { __args: {steam_id: Scalars['bigint']} })
    /** fetch data from the table: "server_regions" */
    server_regions?: (server_regionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (server_regions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (server_regions_order_by[] | null), 
    /** filter the rows returned */
    where?: (server_regions_bool_exp | null)} })
    /** fetch aggregated fields from the table: "server_regions" */
    server_regions_aggregate?: (server_regions_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (server_regions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (server_regions_order_by[] | null), 
    /** filter the rows returned */
    where?: (server_regions_bool_exp | null)} })
    /** fetch data from the table: "server_regions" using primary key columns */
    server_regions_by_pk?: (server_regionsGenqlSelection & { __args: {value: Scalars['String']} })
    /** An array relationship */
    servers?: (serversGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** An aggregate relationship */
    servers_aggregate?: (servers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** fetch data from the table: "servers" using primary key columns */
    servers_by_pk?: (serversGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "settings" */
    settings?: (settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "settings" */
    settings_aggregate?: (settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (settings_bool_exp | null)} })
    /** fetch data from the table: "settings" using primary key columns */
    settings_by_pk?: (settingsGenqlSelection & { __args: {name: Scalars['String']} })
    /** An array relationship */
    team_invites?: (team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    team_invites_aggregate?: (team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** fetch data from the table: "team_invites" using primary key columns */
    team_invites_by_pk?: (team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "team_roster" */
    team_roster?: (team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** fetch aggregated fields from the table: "team_roster" */
    team_roster_aggregate?: (team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** fetch data from the table: "team_roster" using primary key columns */
    team_roster_by_pk?: (team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], team_id: Scalars['uuid']} })
    /** fetch data from the table: "teams" */
    teams?: (teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** fetch aggregated fields from the table: "teams" */
    teams_aggregate?: (teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** fetch data from the table: "teams" using primary key columns */
    teams_by_pk?: (teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    telemetryStats?: TelemetryStatsGenqlSelection
    /** An array relationship */
    tournament_brackets?: (tournament_bracketsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_brackets_aggregate?: (tournament_brackets_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** fetch data from the table: "tournament_brackets" using primary key columns */
    tournament_brackets_by_pk?: (tournament_bracketsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    tournament_organizers?: (tournament_organizersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_organizers_aggregate?: (tournament_organizers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** fetch data from the table: "tournament_organizers" using primary key columns */
    tournament_organizers_by_pk?: (tournament_organizersGenqlSelection & { __args: {steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** An array relationship */
    tournament_stages?: (tournament_stagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_stages_aggregate?: (tournament_stages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** fetch data from the table: "tournament_stages" using primary key columns */
    tournament_stages_by_pk?: (tournament_stagesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "tournament_team_invites" */
    tournament_team_invites?: (tournament_team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** fetch aggregated fields from the table: "tournament_team_invites" */
    tournament_team_invites_aggregate?: (tournament_team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_invites" using primary key columns */
    tournament_team_invites_by_pk?: (tournament_team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "tournament_team_roster" */
    tournament_team_roster?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** fetch aggregated fields from the table: "tournament_team_roster" */
    tournament_team_roster_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_roster" using primary key columns */
    tournament_team_roster_by_pk?: (tournament_team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** An array relationship */
    tournament_teams?: (tournament_teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_teams_aggregate?: (tournament_teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** fetch data from the table: "tournament_teams" using primary key columns */
    tournament_teams_by_pk?: (tournament_teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** An array relationship */
    tournaments?: (tournamentsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** An aggregate relationship */
    tournaments_aggregate?: (tournaments_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** fetch data from the table: "tournaments" using primary key columns */
    tournaments_by_pk?: (tournamentsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table: "v_match_captains" */
    v_match_captains?: (v_match_captainsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_captains_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_captains_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_captains_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_match_captains" */
    v_match_captains_aggregate?: (v_match_captains_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_captains_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_captains_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_captains_bool_exp | null)} })
    /** fetch data from the table: "v_match_lineups" */
    v_match_lineups?: (v_match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_lineups_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_match_lineups" */
    v_match_lineups_aggregate?: (v_match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_lineups_bool_exp | null)} })
    /** fetch data from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis?: (v_player_arch_nemesisGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_arch_nemesis_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_arch_nemesis_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_arch_nemesis_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis_aggregate?: (v_player_arch_nemesis_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_arch_nemesis_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_arch_nemesis_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_arch_nemesis_bool_exp | null)} })
    /** fetch data from the table: "v_player_damage" */
    v_player_damage?: (v_player_damageGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_damage_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_damage_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_damage_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_damage" */
    v_player_damage_aggregate?: (v_player_damage_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_damage_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_damage_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_damage_bool_exp | null)} })
    /** fetch data from the table: "v_player_elo" */
    v_player_elo?: (v_player_eloGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_elo_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_elo" */
    v_player_elo_aggregate?: (v_player_elo_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_elo_bool_exp | null)} })
    /** fetch data from the table: "v_player_map_losses" */
    v_player_map_losses?: (v_player_map_lossesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_losses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_losses_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_losses_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_map_losses" */
    v_player_map_losses_aggregate?: (v_player_map_losses_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_losses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_losses_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_losses_bool_exp | null)} })
    /** fetch data from the table: "v_player_map_wins" */
    v_player_map_wins?: (v_player_map_winsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_wins_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_wins_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_wins_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_map_wins" */
    v_player_map_wins_aggregate?: (v_player_map_wins_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_wins_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_wins_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_wins_bool_exp | null)} })
    /** fetch data from the table: "v_player_multi_kills" */
    v_player_multi_kills?: (v_player_multi_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_multi_kills" */
    v_player_multi_kills_aggregate?: (v_player_multi_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** fetch data from the table: "v_pool_maps" */
    v_pool_maps?: (v_pool_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_pool_maps" */
    v_pool_maps_aggregate?: (v_pool_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "server_regions" */
export interface server_regionsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    description?: boolean | number
    /** An array relationship */
    game_server_nodes?: (game_server_nodesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** An aggregate relationship */
    game_server_nodes_aggregate?: (game_server_nodes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    is_lan?: boolean | number
    /** A computed field, executes function "region_status" */
    status?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "server_regions" */
export interface server_regions_aggregateGenqlSelection{
    aggregate?: server_regions_aggregate_fieldsGenqlSelection
    nodes?: server_regionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "server_regions" */
export interface server_regions_aggregate_fieldsGenqlSelection{
    avg?: server_regions_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (server_regions_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: server_regions_max_fieldsGenqlSelection
    min?: server_regions_min_fieldsGenqlSelection
    stddev?: server_regions_stddev_fieldsGenqlSelection
    stddev_pop?: server_regions_stddev_pop_fieldsGenqlSelection
    stddev_samp?: server_regions_stddev_samp_fieldsGenqlSelection
    sum?: server_regions_sum_fieldsGenqlSelection
    var_pop?: server_regions_var_pop_fieldsGenqlSelection
    var_samp?: server_regions_var_samp_fieldsGenqlSelection
    variance?: server_regions_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface server_regions_avg_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "server_regions". All fields are combined with a logical 'AND'. */
export interface server_regions_bool_exp {_and?: (server_regions_bool_exp[] | null),_not?: (server_regions_bool_exp | null),_or?: (server_regions_bool_exp[] | null),available_server_count?: (Int_comparison_exp | null),description?: (String_comparison_exp | null),game_server_nodes?: (game_server_nodes_bool_exp | null),game_server_nodes_aggregate?: (game_server_nodes_aggregate_bool_exp | null),is_lan?: (Boolean_comparison_exp | null),status?: (String_comparison_exp | null),total_server_count?: (Int_comparison_exp | null),value?: (String_comparison_exp | null)}


/** input type for inserting data into table "server_regions" */
export interface server_regions_insert_input {description?: (Scalars['String'] | null),game_server_nodes?: (game_server_nodes_arr_rel_insert_input | null),is_lan?: (Scalars['Boolean'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface server_regions_max_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    description?: boolean | number
    /** A computed field, executes function "region_status" */
    status?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface server_regions_min_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    description?: boolean | number
    /** A computed field, executes function "region_status" */
    status?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "server_regions" */
export interface server_regions_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: server_regionsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "server_regions" */
export interface server_regions_obj_rel_insert_input {data: server_regions_insert_input,
/** upsert condition */
on_conflict?: (server_regions_on_conflict | null)}


/** on_conflict condition type for table "server_regions" */
export interface server_regions_on_conflict {constraint: server_regions_constraint,update_columns?: server_regions_update_column[],where?: (server_regions_bool_exp | null)}


/** Ordering options when selecting data from "server_regions". */
export interface server_regions_order_by {available_server_count?: (order_by | null),description?: (order_by | null),game_server_nodes_aggregate?: (game_server_nodes_aggregate_order_by | null),is_lan?: (order_by | null),status?: (order_by | null),total_server_count?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: server_regions */
export interface server_regions_pk_columns_input {value: Scalars['String']}


/** input type for updating data in table "server_regions" */
export interface server_regions_set_input {description?: (Scalars['String'] | null),is_lan?: (Scalars['Boolean'] | null),value?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface server_regions_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface server_regions_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface server_regions_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "server_regions" */
export interface server_regions_stream_cursor_input {
/** Stream column input with initial value */
initial_value: server_regions_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface server_regions_stream_cursor_value_input {description?: (Scalars['String'] | null),is_lan?: (Scalars['Boolean'] | null),value?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface server_regions_sum_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface server_regions_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (server_regions_set_input | null),
/** filter the rows which have to be updated */
where: server_regions_bool_exp}


/** aggregate var_pop on columns */
export interface server_regions_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface server_regions_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface server_regions_variance_fieldsGenqlSelection{
    /** A computed field, executes function "available_region_server_count" */
    available_server_count?: boolean | number
    /** A computed field, executes function "total_region_server_count" */
    total_server_count?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "servers" */
export interface serversGenqlSelection{
    api_password?: boolean | number
    connected?: boolean | number
    /** An object relationship */
    current_match?: matchesGenqlSelection
    enabled?: boolean | number
    /** An object relationship */
    game_server_node?: game_server_nodesGenqlSelection
    game_server_node_id?: boolean | number
    host?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "is_dedicated_server" */
    is_dedicated?: boolean | number
    label?: boolean | number
    /** An array relationship */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** An aggregate relationship */
    matches_aggregate?: (matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    port?: boolean | number
    rcon_password?: boolean | number
    rcon_status?: boolean | number
    region?: boolean | number
    reserved_by_match_id?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "servers" */
export interface servers_aggregateGenqlSelection{
    aggregate?: servers_aggregate_fieldsGenqlSelection
    nodes?: serversGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface servers_aggregate_bool_exp {bool_and?: (servers_aggregate_bool_exp_bool_and | null),bool_or?: (servers_aggregate_bool_exp_bool_or | null),count?: (servers_aggregate_bool_exp_count | null)}

export interface servers_aggregate_bool_exp_bool_and {arguments: servers_select_column_servers_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (servers_bool_exp | null),predicate: Boolean_comparison_exp}

export interface servers_aggregate_bool_exp_bool_or {arguments: servers_select_column_servers_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (servers_bool_exp | null),predicate: Boolean_comparison_exp}

export interface servers_aggregate_bool_exp_count {arguments?: (servers_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (servers_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "servers" */
export interface servers_aggregate_fieldsGenqlSelection{
    avg?: servers_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (servers_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: servers_max_fieldsGenqlSelection
    min?: servers_min_fieldsGenqlSelection
    stddev?: servers_stddev_fieldsGenqlSelection
    stddev_pop?: servers_stddev_pop_fieldsGenqlSelection
    stddev_samp?: servers_stddev_samp_fieldsGenqlSelection
    sum?: servers_sum_fieldsGenqlSelection
    var_pop?: servers_var_pop_fieldsGenqlSelection
    var_samp?: servers_var_samp_fieldsGenqlSelection
    variance?: servers_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "servers" */
export interface servers_aggregate_order_by {avg?: (servers_avg_order_by | null),count?: (order_by | null),max?: (servers_max_order_by | null),min?: (servers_min_order_by | null),stddev?: (servers_stddev_order_by | null),stddev_pop?: (servers_stddev_pop_order_by | null),stddev_samp?: (servers_stddev_samp_order_by | null),sum?: (servers_sum_order_by | null),var_pop?: (servers_var_pop_order_by | null),var_samp?: (servers_var_samp_order_by | null),variance?: (servers_variance_order_by | null)}


/** input type for inserting array relation for remote table "servers" */
export interface servers_arr_rel_insert_input {data: servers_insert_input[],
/** upsert condition */
on_conflict?: (servers_on_conflict | null)}


/** aggregate avg on columns */
export interface servers_avg_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "servers" */
export interface servers_avg_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'. */
export interface servers_bool_exp {_and?: (servers_bool_exp[] | null),_not?: (servers_bool_exp | null),_or?: (servers_bool_exp[] | null),api_password?: (uuid_comparison_exp | null),connected?: (Boolean_comparison_exp | null),current_match?: (matches_bool_exp | null),enabled?: (Boolean_comparison_exp | null),game_server_node?: (game_server_nodes_bool_exp | null),game_server_node_id?: (String_comparison_exp | null),host?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),is_dedicated?: (Boolean_comparison_exp | null),label?: (String_comparison_exp | null),matches?: (matches_bool_exp | null),matches_aggregate?: (matches_aggregate_bool_exp | null),port?: (Int_comparison_exp | null),rcon_password?: (bytea_comparison_exp | null),rcon_status?: (Boolean_comparison_exp | null),region?: (String_comparison_exp | null),reserved_by_match_id?: (uuid_comparison_exp | null),tv_port?: (Int_comparison_exp | null)}


/** input type for incrementing numeric columns in table "servers" */
export interface servers_inc_input {port?: (Scalars['Int'] | null),tv_port?: (Scalars['Int'] | null)}


/** input type for inserting data into table "servers" */
export interface servers_insert_input {api_password?: (Scalars['uuid'] | null),connected?: (Scalars['Boolean'] | null),current_match?: (matches_obj_rel_insert_input | null),enabled?: (Scalars['Boolean'] | null),game_server_node?: (game_server_nodes_obj_rel_insert_input | null),game_server_node_id?: (Scalars['String'] | null),host?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),matches?: (matches_arr_rel_insert_input | null),port?: (Scalars['Int'] | null),rcon_password?: (Scalars['bytea'] | null),rcon_status?: (Scalars['Boolean'] | null),region?: (Scalars['String'] | null),reserved_by_match_id?: (Scalars['uuid'] | null),tv_port?: (Scalars['Int'] | null)}


/** aggregate max on columns */
export interface servers_max_fieldsGenqlSelection{
    api_password?: boolean | number
    game_server_node_id?: boolean | number
    host?: boolean | number
    id?: boolean | number
    label?: boolean | number
    port?: boolean | number
    region?: boolean | number
    reserved_by_match_id?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "servers" */
export interface servers_max_order_by {api_password?: (order_by | null),game_server_node_id?: (order_by | null),host?: (order_by | null),id?: (order_by | null),label?: (order_by | null),port?: (order_by | null),region?: (order_by | null),reserved_by_match_id?: (order_by | null),tv_port?: (order_by | null)}


/** aggregate min on columns */
export interface servers_min_fieldsGenqlSelection{
    api_password?: boolean | number
    game_server_node_id?: boolean | number
    host?: boolean | number
    id?: boolean | number
    label?: boolean | number
    port?: boolean | number
    region?: boolean | number
    reserved_by_match_id?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "servers" */
export interface servers_min_order_by {api_password?: (order_by | null),game_server_node_id?: (order_by | null),host?: (order_by | null),id?: (order_by | null),label?: (order_by | null),port?: (order_by | null),region?: (order_by | null),reserved_by_match_id?: (order_by | null),tv_port?: (order_by | null)}


/** response of any mutation on the table "servers" */
export interface servers_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: serversGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "servers" */
export interface servers_obj_rel_insert_input {data: servers_insert_input,
/** upsert condition */
on_conflict?: (servers_on_conflict | null)}


/** on_conflict condition type for table "servers" */
export interface servers_on_conflict {constraint: servers_constraint,update_columns?: servers_update_column[],where?: (servers_bool_exp | null)}


/** Ordering options when selecting data from "servers". */
export interface servers_order_by {api_password?: (order_by | null),connected?: (order_by | null),current_match?: (matches_order_by | null),enabled?: (order_by | null),game_server_node?: (game_server_nodes_order_by | null),game_server_node_id?: (order_by | null),host?: (order_by | null),id?: (order_by | null),is_dedicated?: (order_by | null),label?: (order_by | null),matches_aggregate?: (matches_aggregate_order_by | null),port?: (order_by | null),rcon_password?: (order_by | null),rcon_status?: (order_by | null),region?: (order_by | null),reserved_by_match_id?: (order_by | null),tv_port?: (order_by | null)}


/** primary key columns input for table: servers */
export interface servers_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "servers" */
export interface servers_set_input {api_password?: (Scalars['uuid'] | null),connected?: (Scalars['Boolean'] | null),enabled?: (Scalars['Boolean'] | null),game_server_node_id?: (Scalars['String'] | null),host?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),port?: (Scalars['Int'] | null),rcon_password?: (Scalars['bytea'] | null),rcon_status?: (Scalars['Boolean'] | null),region?: (Scalars['String'] | null),reserved_by_match_id?: (Scalars['uuid'] | null),tv_port?: (Scalars['Int'] | null)}


/** aggregate stddev on columns */
export interface servers_stddev_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "servers" */
export interface servers_stddev_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface servers_stddev_pop_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "servers" */
export interface servers_stddev_pop_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface servers_stddev_samp_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "servers" */
export interface servers_stddev_samp_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** Streaming cursor of the table "servers" */
export interface servers_stream_cursor_input {
/** Stream column input with initial value */
initial_value: servers_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface servers_stream_cursor_value_input {api_password?: (Scalars['uuid'] | null),connected?: (Scalars['Boolean'] | null),enabled?: (Scalars['Boolean'] | null),game_server_node_id?: (Scalars['String'] | null),host?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),port?: (Scalars['Int'] | null),rcon_password?: (Scalars['bytea'] | null),rcon_status?: (Scalars['Boolean'] | null),region?: (Scalars['String'] | null),reserved_by_match_id?: (Scalars['uuid'] | null),tv_port?: (Scalars['Int'] | null)}


/** aggregate sum on columns */
export interface servers_sum_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "servers" */
export interface servers_sum_order_by {port?: (order_by | null),tv_port?: (order_by | null)}

export interface servers_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (servers_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (servers_set_input | null),
/** filter the rows which have to be updated */
where: servers_bool_exp}


/** aggregate var_pop on columns */
export interface servers_var_pop_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "servers" */
export interface servers_var_pop_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** aggregate var_samp on columns */
export interface servers_var_samp_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "servers" */
export interface servers_var_samp_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** aggregate variance on columns */
export interface servers_variance_fieldsGenqlSelection{
    port?: boolean | number
    tv_port?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "servers" */
export interface servers_variance_order_by {port?: (order_by | null),tv_port?: (order_by | null)}


/** columns and relationships of "settings" */
export interface settingsGenqlSelection{
    name?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "settings" */
export interface settings_aggregateGenqlSelection{
    aggregate?: settings_aggregate_fieldsGenqlSelection
    nodes?: settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "settings" */
export interface settings_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (settings_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: settings_max_fieldsGenqlSelection
    min?: settings_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'. */
export interface settings_bool_exp {_and?: (settings_bool_exp[] | null),_not?: (settings_bool_exp | null),_or?: (settings_bool_exp[] | null),name?: (String_comparison_exp | null),value?: (String_comparison_exp | null)}


/** input type for inserting data into table "settings" */
export interface settings_insert_input {name?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface settings_max_fieldsGenqlSelection{
    name?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface settings_min_fieldsGenqlSelection{
    name?: boolean | number
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "settings" */
export interface settings_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: settingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "settings" */
export interface settings_on_conflict {constraint: settings_constraint,update_columns?: settings_update_column[],where?: (settings_bool_exp | null)}


/** Ordering options when selecting data from "settings". */
export interface settings_order_by {name?: (order_by | null),value?: (order_by | null)}


/** primary key columns input for table: settings */
export interface settings_pk_columns_input {name: Scalars['String']}


/** input type for updating data in table "settings" */
export interface settings_set_input {name?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}


/** Streaming cursor of the table "settings" */
export interface settings_stream_cursor_input {
/** Stream column input with initial value */
initial_value: settings_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface settings_stream_cursor_value_input {name?: (Scalars['String'] | null),value?: (Scalars['String'] | null)}

export interface settings_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (settings_set_input | null),
/** filter the rows which have to be updated */
where: settings_bool_exp}

export interface subscription_rootGenqlSelection{
    /** fetch data from the table: "_map_pool" */
    _map_pool?: (_map_poolGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (_map_pool_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (_map_pool_order_by[] | null), 
    /** filter the rows returned */
    where?: (_map_pool_bool_exp | null)} })
    /** fetch aggregated fields from the table: "_map_pool" */
    _map_pool_aggregate?: (_map_pool_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (_map_pool_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (_map_pool_order_by[] | null), 
    /** filter the rows returned */
    where?: (_map_pool_bool_exp | null)} })
    /** fetch data from the table: "_map_pool" using primary key columns */
    _map_pool_by_pk?: (_map_poolGenqlSelection & { __args: {map_id: Scalars['uuid'], map_pool_id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "_map_pool" */
    _map_pool_stream?: (_map_poolGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (_map_pool_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (_map_pool_bool_exp | null)} })
    /** An array relationship */
    abandoned_matches?: (abandoned_matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** An aggregate relationship */
    abandoned_matches_aggregate?: (abandoned_matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (abandoned_matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (abandoned_matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** fetch data from the table: "abandoned_matches" using primary key columns */
    abandoned_matches_by_pk?: (abandoned_matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "abandoned_matches" */
    abandoned_matches_stream?: (abandoned_matchesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (abandoned_matches_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (abandoned_matches_bool_exp | null)} })
    /** fetch data from the table: "e_friend_status" */
    e_friend_status?: (e_friend_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_friend_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_friend_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_friend_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_friend_status" */
    e_friend_status_aggregate?: (e_friend_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_friend_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_friend_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_friend_status_bool_exp | null)} })
    /** fetch data from the table: "e_friend_status" using primary key columns */
    e_friend_status_by_pk?: (e_friend_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_friend_status" */
    e_friend_status_stream?: (e_friend_statusGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_friend_status_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_friend_status_bool_exp | null)} })
    /** fetch data from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses?: (e_game_server_node_statusesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_game_server_node_statuses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_game_server_node_statuses_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_game_server_node_statuses_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_game_server_node_statuses" */
    e_game_server_node_statuses_aggregate?: (e_game_server_node_statuses_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_game_server_node_statuses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_game_server_node_statuses_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_game_server_node_statuses_bool_exp | null)} })
    /** fetch data from the table: "e_game_server_node_statuses" using primary key columns */
    e_game_server_node_statuses_by_pk?: (e_game_server_node_statusesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_game_server_node_statuses" */
    e_game_server_node_statuses_stream?: (e_game_server_node_statusesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_game_server_node_statuses_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_game_server_node_statuses_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_access" */
    e_lobby_access?: (e_lobby_accessGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_access_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_access_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_access_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_lobby_access" */
    e_lobby_access_aggregate?: (e_lobby_access_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_access_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_access_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_access_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_access" using primary key columns */
    e_lobby_access_by_pk?: (e_lobby_accessGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_lobby_access" */
    e_lobby_access_stream?: (e_lobby_accessGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_lobby_access_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_lobby_access_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_player_status" */
    e_lobby_player_status?: (e_lobby_player_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_player_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_player_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_player_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_lobby_player_status" */
    e_lobby_player_status_aggregate?: (e_lobby_player_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_lobby_player_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_lobby_player_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_lobby_player_status_bool_exp | null)} })
    /** fetch data from the table: "e_lobby_player_status" using primary key columns */
    e_lobby_player_status_by_pk?: (e_lobby_player_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_lobby_player_status" */
    e_lobby_player_status_stream?: (e_lobby_player_statusGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_lobby_player_status_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_lobby_player_status_bool_exp | null)} })
    /** fetch data from the table: "e_map_pool_types" */
    e_map_pool_types?: (e_map_pool_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_map_pool_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_map_pool_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_map_pool_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_map_pool_types" */
    e_map_pool_types_aggregate?: (e_map_pool_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_map_pool_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_map_pool_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_map_pool_types_bool_exp | null)} })
    /** fetch data from the table: "e_map_pool_types" using primary key columns */
    e_map_pool_types_by_pk?: (e_map_pool_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_map_pool_types" */
    e_map_pool_types_stream?: (e_map_pool_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_map_pool_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_map_pool_types_bool_exp | null)} })
    /** fetch data from the table: "e_match_map_status" */
    e_match_map_status?: (e_match_map_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_map_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_map_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_map_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_map_status" */
    e_match_map_status_aggregate?: (e_match_map_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_map_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_map_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_map_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_map_status" using primary key columns */
    e_match_map_status_by_pk?: (e_match_map_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_match_map_status" */
    e_match_map_status_stream?: (e_match_map_statusGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_match_map_status_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_match_map_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_status" */
    e_match_status?: (e_match_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_status" */
    e_match_status_aggregate?: (e_match_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_status" using primary key columns */
    e_match_status_by_pk?: (e_match_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_match_status" */
    e_match_status_stream?: (e_match_statusGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_match_status_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_match_status_bool_exp | null)} })
    /** fetch data from the table: "e_match_types" */
    e_match_types?: (e_match_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_match_types" */
    e_match_types_aggregate?: (e_match_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_match_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_match_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_match_types_bool_exp | null)} })
    /** fetch data from the table: "e_match_types" using primary key columns */
    e_match_types_by_pk?: (e_match_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_match_types" */
    e_match_types_stream?: (e_match_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_match_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_match_types_bool_exp | null)} })
    /** fetch data from the table: "e_notification_types" */
    e_notification_types?: (e_notification_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_notification_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_notification_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_notification_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_notification_types" */
    e_notification_types_aggregate?: (e_notification_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_notification_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_notification_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_notification_types_bool_exp | null)} })
    /** fetch data from the table: "e_notification_types" using primary key columns */
    e_notification_types_by_pk?: (e_notification_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_notification_types" */
    e_notification_types_stream?: (e_notification_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_notification_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_notification_types_bool_exp | null)} })
    /** fetch data from the table: "e_objective_types" */
    e_objective_types?: (e_objective_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_objective_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_objective_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_objective_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_objective_types" */
    e_objective_types_aggregate?: (e_objective_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_objective_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_objective_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_objective_types_bool_exp | null)} })
    /** fetch data from the table: "e_objective_types" using primary key columns */
    e_objective_types_by_pk?: (e_objective_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_objective_types" */
    e_objective_types_stream?: (e_objective_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_objective_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_objective_types_bool_exp | null)} })
    /** fetch data from the table: "e_player_roles" */
    e_player_roles?: (e_player_rolesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_player_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_player_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_player_roles_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_player_roles" */
    e_player_roles_aggregate?: (e_player_roles_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_player_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_player_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_player_roles_bool_exp | null)} })
    /** fetch data from the table: "e_player_roles" using primary key columns */
    e_player_roles_by_pk?: (e_player_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_player_roles" */
    e_player_roles_stream?: (e_player_rolesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_player_roles_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_player_roles_bool_exp | null)} })
    /** fetch data from the table: "e_ready_settings" */
    e_ready_settings?: (e_ready_settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_ready_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_ready_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_ready_settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_ready_settings" */
    e_ready_settings_aggregate?: (e_ready_settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_ready_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_ready_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_ready_settings_bool_exp | null)} })
    /** fetch data from the table: "e_ready_settings" using primary key columns */
    e_ready_settings_by_pk?: (e_ready_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_ready_settings" */
    e_ready_settings_stream?: (e_ready_settingsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_ready_settings_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_ready_settings_bool_exp | null)} })
    /** fetch data from the table: "e_sanction_types" */
    e_sanction_types?: (e_sanction_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sanction_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sanction_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sanction_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_sanction_types" */
    e_sanction_types_aggregate?: (e_sanction_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sanction_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sanction_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sanction_types_bool_exp | null)} })
    /** fetch data from the table: "e_sanction_types" using primary key columns */
    e_sanction_types_by_pk?: (e_sanction_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_sanction_types" */
    e_sanction_types_stream?: (e_sanction_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_sanction_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_sanction_types_bool_exp | null)} })
    /** fetch data from the table: "e_sides" */
    e_sides?: (e_sidesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sides_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sides_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sides_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_sides" */
    e_sides_aggregate?: (e_sides_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_sides_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_sides_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_sides_bool_exp | null)} })
    /** fetch data from the table: "e_sides" using primary key columns */
    e_sides_by_pk?: (e_sidesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_sides" */
    e_sides_stream?: (e_sidesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_sides_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_sides_bool_exp | null)} })
    /** fetch data from the table: "e_team_roles" */
    e_team_roles?: (e_team_rolesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_team_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_team_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_team_roles_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_team_roles" */
    e_team_roles_aggregate?: (e_team_roles_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_team_roles_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_team_roles_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_team_roles_bool_exp | null)} })
    /** fetch data from the table: "e_team_roles" using primary key columns */
    e_team_roles_by_pk?: (e_team_rolesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_team_roles" */
    e_team_roles_stream?: (e_team_rolesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_team_roles_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_team_roles_bool_exp | null)} })
    /** fetch data from the table: "e_timeout_settings" */
    e_timeout_settings?: (e_timeout_settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_timeout_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_timeout_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_timeout_settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_timeout_settings" */
    e_timeout_settings_aggregate?: (e_timeout_settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_timeout_settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_timeout_settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_timeout_settings_bool_exp | null)} })
    /** fetch data from the table: "e_timeout_settings" using primary key columns */
    e_timeout_settings_by_pk?: (e_timeout_settingsGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_timeout_settings" */
    e_timeout_settings_stream?: (e_timeout_settingsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_timeout_settings_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_timeout_settings_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_stage_types" */
    e_tournament_stage_types?: (e_tournament_stage_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_stage_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_stage_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_stage_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_tournament_stage_types" */
    e_tournament_stage_types_aggregate?: (e_tournament_stage_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_stage_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_stage_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_stage_types_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_stage_types" using primary key columns */
    e_tournament_stage_types_by_pk?: (e_tournament_stage_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_tournament_stage_types" */
    e_tournament_stage_types_stream?: (e_tournament_stage_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_tournament_stage_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_tournament_stage_types_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_status" */
    e_tournament_status?: (e_tournament_statusGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_status_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_tournament_status" */
    e_tournament_status_aggregate?: (e_tournament_status_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_tournament_status_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_tournament_status_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_tournament_status_bool_exp | null)} })
    /** fetch data from the table: "e_tournament_status" using primary key columns */
    e_tournament_status_by_pk?: (e_tournament_statusGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_tournament_status" */
    e_tournament_status_stream?: (e_tournament_statusGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_tournament_status_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_tournament_status_bool_exp | null)} })
    /** fetch data from the table: "e_utility_types" */
    e_utility_types?: (e_utility_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_utility_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_utility_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_utility_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_utility_types" */
    e_utility_types_aggregate?: (e_utility_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_utility_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_utility_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_utility_types_bool_exp | null)} })
    /** fetch data from the table: "e_utility_types" using primary key columns */
    e_utility_types_by_pk?: (e_utility_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_utility_types" */
    e_utility_types_stream?: (e_utility_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_utility_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_utility_types_bool_exp | null)} })
    /** fetch data from the table: "e_veto_pick_types" */
    e_veto_pick_types?: (e_veto_pick_typesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_veto_pick_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_veto_pick_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_veto_pick_types_bool_exp | null)} })
    /** fetch aggregated fields from the table: "e_veto_pick_types" */
    e_veto_pick_types_aggregate?: (e_veto_pick_types_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (e_veto_pick_types_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (e_veto_pick_types_order_by[] | null), 
    /** filter the rows returned */
    where?: (e_veto_pick_types_bool_exp | null)} })
    /** fetch data from the table: "e_veto_pick_types" using primary key columns */
    e_veto_pick_types_by_pk?: (e_veto_pick_typesGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "e_veto_pick_types" */
    e_veto_pick_types_stream?: (e_veto_pick_typesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (e_veto_pick_types_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (e_veto_pick_types_bool_exp | null)} })
    /** fetch data from the table: "friends" */
    friends?: (friendsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (friends_bool_exp | null)} })
    /** fetch aggregated fields from the table: "friends" */
    friends_aggregate?: (friends_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (friends_bool_exp | null)} })
    /** fetch data from the table: "friends" using primary key columns */
    friends_by_pk?: (friendsGenqlSelection & { __args: {other_player_steam_id: Scalars['bigint'], player_steam_id: Scalars['bigint']} })
    /** fetch data from the table in a streaming manner: "friends" */
    friends_stream?: (friendsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (friends_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (friends_bool_exp | null)} })
    /** An array relationship */
    game_server_nodes?: (game_server_nodesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** An aggregate relationship */
    game_server_nodes_aggregate?: (game_server_nodes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (game_server_nodes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (game_server_nodes_order_by[] | null), 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** fetch data from the table: "game_server_nodes" using primary key columns */
    game_server_nodes_by_pk?: (game_server_nodesGenqlSelection & { __args: {id: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "game_server_nodes" */
    game_server_nodes_stream?: (game_server_nodesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (game_server_nodes_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (game_server_nodes_bool_exp | null)} })
    /** fetch data from the table: "lobbies" */
    lobbies?: (lobbiesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobbies_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobbies_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobbies_bool_exp | null)} })
    /** fetch aggregated fields from the table: "lobbies" */
    lobbies_aggregate?: (lobbies_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobbies_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobbies_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobbies_bool_exp | null)} })
    /** fetch data from the table: "lobbies" using primary key columns */
    lobbies_by_pk?: (lobbiesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "lobbies" */
    lobbies_stream?: (lobbiesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (lobbies_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (lobbies_bool_exp | null)} })
    /** An array relationship */
    lobby_players?: (lobby_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** An aggregate relationship */
    lobby_players_aggregate?: (lobby_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (lobby_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (lobby_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** fetch data from the table: "lobby_players" using primary key columns */
    lobby_players_by_pk?: (lobby_playersGenqlSelection & { __args: {lobby_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** fetch data from the table in a streaming manner: "lobby_players" */
    lobby_players_stream?: (lobby_playersGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (lobby_players_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (lobby_players_bool_exp | null)} })
    /** fetch data from the table: "map_pools" */
    map_pools?: (map_poolsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (map_pools_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (map_pools_order_by[] | null), 
    /** filter the rows returned */
    where?: (map_pools_bool_exp | null)} })
    /** fetch aggregated fields from the table: "map_pools" */
    map_pools_aggregate?: (map_pools_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (map_pools_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (map_pools_order_by[] | null), 
    /** filter the rows returned */
    where?: (map_pools_bool_exp | null)} })
    /** fetch data from the table: "map_pools" using primary key columns */
    map_pools_by_pk?: (map_poolsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "map_pools" */
    map_pools_stream?: (map_poolsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (map_pools_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (map_pools_bool_exp | null)} })
    /** An array relationship */
    maps?: (mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** An aggregate relationship */
    maps_aggregate?: (maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** fetch data from the table: "maps" using primary key columns */
    maps_by_pk?: (mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "maps" */
    maps_stream?: (mapsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (maps_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (maps_bool_exp | null)} })
    /** fetch data from the table: "match_invites" */
    match_invites?: (match_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_invites" */
    match_invites_aggregate?: (match_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** fetch data from the table: "match_invites" using primary key columns */
    match_invites_by_pk?: (match_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_invites" */
    match_invites_stream?: (match_invitesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_invites_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_invites_bool_exp | null)} })
    /** fetch data from the table: "match_lineup_players" */
    match_lineup_players?: (match_lineup_playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_lineup_players" */
    match_lineup_players_aggregate?: (match_lineup_players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineup_players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineup_players_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** fetch data from the table: "match_lineup_players" using primary key columns */
    match_lineup_players_by_pk?: (match_lineup_playersGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_lineup_players" */
    match_lineup_players_stream?: (match_lineup_playersGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_lineup_players_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_lineup_players_bool_exp | null)} })
    /** An array relationship */
    match_lineups?: (match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** An aggregate relationship */
    match_lineups_aggregate?: (match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** fetch data from the table: "match_lineups" using primary key columns */
    match_lineups_by_pk?: (match_lineupsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_lineups" */
    match_lineups_stream?: (match_lineupsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_lineups_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** fetch data from the table: "match_map_demos" */
    match_map_demos?: (match_map_demosGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_demos" */
    match_map_demos_aggregate?: (match_map_demos_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_demos_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_demos_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** fetch data from the table: "match_map_demos" using primary key columns */
    match_map_demos_by_pk?: (match_map_demosGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_map_demos" */
    match_map_demos_stream?: (match_map_demosGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_map_demos_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_map_demos_bool_exp | null)} })
    /** fetch data from the table: "match_map_rounds" */
    match_map_rounds?: (match_map_roundsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_rounds" */
    match_map_rounds_aggregate?: (match_map_rounds_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_rounds_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_rounds_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** fetch data from the table: "match_map_rounds" using primary key columns */
    match_map_rounds_by_pk?: (match_map_roundsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_map_rounds" */
    match_map_rounds_stream?: (match_map_roundsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_map_rounds_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_map_rounds_bool_exp | null)} })
    /** fetch data from the table: "match_map_veto_picks" */
    match_map_veto_picks?: (match_map_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_map_veto_picks" */
    match_map_veto_picks_aggregate?: (match_map_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_map_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_map_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** fetch data from the table: "match_map_veto_picks" using primary key columns */
    match_map_veto_picks_by_pk?: (match_map_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_map_veto_picks" */
    match_map_veto_picks_stream?: (match_map_veto_picksGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_map_veto_picks_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_map_veto_picks_bool_exp | null)} })
    /** An array relationship */
    match_maps?: (match_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** An aggregate relationship */
    match_maps_aggregate?: (match_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** fetch data from the table: "match_maps" using primary key columns */
    match_maps_by_pk?: (match_mapsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_maps" */
    match_maps_stream?: (match_mapsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_maps_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_maps_bool_exp | null)} })
    /** fetch data from the table: "match_options" */
    match_options?: (match_optionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_options_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_options_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_options_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_options" */
    match_options_aggregate?: (match_options_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_options_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_options_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_options_bool_exp | null)} })
    /** fetch data from the table: "match_options" using primary key columns */
    match_options_by_pk?: (match_optionsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_options" */
    match_options_stream?: (match_optionsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_options_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_options_bool_exp | null)} })
    /** fetch data from the table: "match_region_veto_picks" */
    match_region_veto_picks?: (match_region_veto_picksGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_region_veto_picks" */
    match_region_veto_picks_aggregate?: (match_region_veto_picks_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_region_veto_picks_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_region_veto_picks_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** fetch data from the table: "match_region_veto_picks" using primary key columns */
    match_region_veto_picks_by_pk?: (match_region_veto_picksGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "match_region_veto_picks" */
    match_region_veto_picks_stream?: (match_region_veto_picksGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_region_veto_picks_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_region_veto_picks_bool_exp | null)} })
    /** fetch data from the table: "match_type_cfgs" */
    match_type_cfgs?: (match_type_cfgsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** fetch aggregated fields from the table: "match_type_cfgs" */
    match_type_cfgs_aggregate?: (match_type_cfgs_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_type_cfgs_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_type_cfgs_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** fetch data from the table: "match_type_cfgs" using primary key columns */
    match_type_cfgs_by_pk?: (match_type_cfgsGenqlSelection & { __args: {type: e_match_types_enum} })
    /** fetch data from the table in a streaming manner: "match_type_cfgs" */
    match_type_cfgs_stream?: (match_type_cfgsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (match_type_cfgs_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (match_type_cfgs_bool_exp | null)} })
    /** An array relationship */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** An aggregate relationship */
    matches_aggregate?: (matches_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** fetch data from the table: "matches" using primary key columns */
    matches_by_pk?: (matchesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "matches" */
    matches_stream?: (matchesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (matches_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    /** fetch data from the table: "migration_hashes.hashes" */
    migration_hashes_hashes?: (migration_hashes_hashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (migration_hashes_hashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (migration_hashes_hashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (migration_hashes_hashes_bool_exp | null)} })
    /** fetch aggregated fields from the table: "migration_hashes.hashes" */
    migration_hashes_hashes_aggregate?: (migration_hashes_hashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (migration_hashes_hashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (migration_hashes_hashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (migration_hashes_hashes_bool_exp | null)} })
    /** fetch data from the table: "migration_hashes.hashes" using primary key columns */
    migration_hashes_hashes_by_pk?: (migration_hashes_hashesGenqlSelection & { __args: {name: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "migration_hashes.hashes" */
    migration_hashes_hashes_stream?: (migration_hashes_hashesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (migration_hashes_hashes_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (migration_hashes_hashes_bool_exp | null)} })
    /** fetch data from the table: "v_my_friends" */
    my_friends?: (my_friendsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_my_friends" */
    my_friends_aggregate?: (my_friends_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (my_friends_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (my_friends_order_by[] | null), 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_my_friends" */
    my_friends_stream?: (my_friendsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (my_friends_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (my_friends_bool_exp | null)} })
    /** An array relationship */
    notifications?: (notificationsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** An aggregate relationship */
    notifications_aggregate?: (notifications_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (notifications_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (notifications_order_by[] | null), 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** fetch data from the table: "notifications" using primary key columns */
    notifications_by_pk?: (notificationsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "notifications" */
    notifications_stream?: (notificationsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (notifications_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (notifications_bool_exp | null)} })
    /** An array relationship */
    player_assists?: (player_assistsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An aggregate relationship */
    player_assists_aggregate?: (player_assists_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_assists_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_assists_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_assists" */
    player_assists_stream?: (player_assistsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_assists_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_assists_bool_exp | null)} })
    /** An array relationship */
    player_damages?: (player_damagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** An aggregate relationship */
    player_damages_aggregate?: (player_damages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_damages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_damages_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_damages" */
    player_damages_stream?: (player_damagesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_damages_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_damages_bool_exp | null)} })
    /** fetch data from the table: "player_elo" */
    player_elo?: (player_eloGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_elo" */
    player_elo_aggregate?: (player_elo_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** fetch data from the table: "player_elo" using primary key columns */
    player_elo_by_pk?: (player_eloGenqlSelection & { __args: {match_id: Scalars['uuid'], steam_id: Scalars['bigint']} })
    /** fetch data from the table in a streaming manner: "player_elo" */
    player_elo_stream?: (player_eloGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_elo_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_elo_bool_exp | null)} })
    /** An array relationship */
    player_flashes?: (player_flashesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An aggregate relationship */
    player_flashes_aggregate?: (player_flashes_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_flashes_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_flashes_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_flashes" */
    player_flashes_stream?: (player_flashesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_flashes_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_flashes_bool_exp | null)} })
    /** An array relationship */
    player_kills?: (player_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An aggregate relationship */
    player_kills_aggregate?: (player_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** fetch data from the table: "player_kills" using primary key columns */
    player_kills_by_pk?: (player_killsGenqlSelection & { __args: {id: Scalars['uuid'], match_id: Scalars['uuid'], match_map_id: Scalars['uuid'], time: Scalars['timestamptz']} })
    /** fetch data from the table in a streaming manner: "player_kills" */
    player_kills_stream?: (player_killsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_kills_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_kills_bool_exp | null)} })
    /** An array relationship */
    player_objectives?: (player_objectivesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** An aggregate relationship */
    player_objectives_aggregate?: (player_objectives_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_objectives_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_objectives_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_objectives" */
    player_objectives_stream?: (player_objectivesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_objectives_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_objectives_bool_exp | null)} })
    /** fetch data from the table: "player_sanctions" */
    player_sanctions?: (player_sanctionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_sanctions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_sanctions_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_sanctions_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_sanctions" */
    player_sanctions_aggregate?: (player_sanctions_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_sanctions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_sanctions_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_sanctions_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_sanctions" */
    player_sanctions_stream?: (player_sanctionsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_sanctions_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_sanctions_bool_exp | null)} })
    /** fetch data from the table: "player_unused_utility" */
    player_unused_utility?: (player_unused_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** fetch aggregated fields from the table: "player_unused_utility" */
    player_unused_utility_aggregate?: (player_unused_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_unused_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_unused_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** fetch data from the table: "player_unused_utility" using primary key columns */
    player_unused_utility_by_pk?: (player_unused_utilityGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "player_unused_utility" */
    player_unused_utility_stream?: (player_unused_utilityGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_unused_utility_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_unused_utility_bool_exp | null)} })
    /** An array relationship */
    player_utility?: (player_utilityGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** An aggregate relationship */
    player_utility_aggregate?: (player_utility_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (player_utility_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (player_utility_order_by[] | null), 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "player_utility" */
    player_utility_stream?: (player_utilityGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (player_utility_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (player_utility_bool_exp | null)} })
    /** fetch data from the table: "players" */
    players?: (playersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (players_order_by[] | null), 
    /** filter the rows returned */
    where?: (players_bool_exp | null)} })
    /** fetch aggregated fields from the table: "players" */
    players_aggregate?: (players_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (players_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (players_order_by[] | null), 
    /** filter the rows returned */
    where?: (players_bool_exp | null)} })
    /** fetch data from the table: "players" using primary key columns */
    players_by_pk?: (playersGenqlSelection & { __args: {steam_id: Scalars['bigint']} })
    /** fetch data from the table in a streaming manner: "players" */
    players_stream?: (playersGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (players_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (players_bool_exp | null)} })
    /** fetch data from the table: "server_regions" */
    server_regions?: (server_regionsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (server_regions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (server_regions_order_by[] | null), 
    /** filter the rows returned */
    where?: (server_regions_bool_exp | null)} })
    /** fetch aggregated fields from the table: "server_regions" */
    server_regions_aggregate?: (server_regions_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (server_regions_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (server_regions_order_by[] | null), 
    /** filter the rows returned */
    where?: (server_regions_bool_exp | null)} })
    /** fetch data from the table: "server_regions" using primary key columns */
    server_regions_by_pk?: (server_regionsGenqlSelection & { __args: {value: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "server_regions" */
    server_regions_stream?: (server_regionsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (server_regions_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (server_regions_bool_exp | null)} })
    /** An array relationship */
    servers?: (serversGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** An aggregate relationship */
    servers_aggregate?: (servers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (servers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (servers_order_by[] | null), 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** fetch data from the table: "servers" using primary key columns */
    servers_by_pk?: (serversGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "servers" */
    servers_stream?: (serversGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (servers_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (servers_bool_exp | null)} })
    /** fetch data from the table: "settings" */
    settings?: (settingsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (settings_bool_exp | null)} })
    /** fetch aggregated fields from the table: "settings" */
    settings_aggregate?: (settings_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (settings_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (settings_order_by[] | null), 
    /** filter the rows returned */
    where?: (settings_bool_exp | null)} })
    /** fetch data from the table: "settings" using primary key columns */
    settings_by_pk?: (settingsGenqlSelection & { __args: {name: Scalars['String']} })
    /** fetch data from the table in a streaming manner: "settings" */
    settings_stream?: (settingsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (settings_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (settings_bool_exp | null)} })
    /** An array relationship */
    team_invites?: (team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    team_invites_aggregate?: (team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** fetch data from the table: "team_invites" using primary key columns */
    team_invites_by_pk?: (team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "team_invites" */
    team_invites_stream?: (team_invitesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (team_invites_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** fetch data from the table: "team_roster" */
    team_roster?: (team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** fetch aggregated fields from the table: "team_roster" */
    team_roster_aggregate?: (team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** fetch data from the table: "team_roster" using primary key columns */
    team_roster_by_pk?: (team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], team_id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "team_roster" */
    team_roster_stream?: (team_rosterGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (team_roster_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** fetch data from the table: "teams" */
    teams?: (teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** fetch aggregated fields from the table: "teams" */
    teams_aggregate?: (teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** fetch data from the table: "teams" using primary key columns */
    teams_by_pk?: (teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "teams" */
    teams_stream?: (teamsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (teams_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (teams_bool_exp | null)} })
    /** An array relationship */
    tournament_brackets?: (tournament_bracketsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_brackets_aggregate?: (tournament_brackets_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** fetch data from the table: "tournament_brackets" using primary key columns */
    tournament_brackets_by_pk?: (tournament_bracketsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_brackets" */
    tournament_brackets_stream?: (tournament_bracketsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_brackets_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An array relationship */
    tournament_organizers?: (tournament_organizersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_organizers_aggregate?: (tournament_organizers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** fetch data from the table: "tournament_organizers" using primary key columns */
    tournament_organizers_by_pk?: (tournament_organizersGenqlSelection & { __args: {steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_organizers" */
    tournament_organizers_stream?: (tournament_organizersGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_organizers_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An array relationship */
    tournament_stages?: (tournament_stagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_stages_aggregate?: (tournament_stages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** fetch data from the table: "tournament_stages" using primary key columns */
    tournament_stages_by_pk?: (tournament_stagesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_stages" */
    tournament_stages_stream?: (tournament_stagesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_stages_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_invites" */
    tournament_team_invites?: (tournament_team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** fetch aggregated fields from the table: "tournament_team_invites" */
    tournament_team_invites_aggregate?: (tournament_team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_invites" using primary key columns */
    tournament_team_invites_by_pk?: (tournament_team_invitesGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_team_invites" */
    tournament_team_invites_stream?: (tournament_team_invitesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_team_invites_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_roster" */
    tournament_team_roster?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** fetch aggregated fields from the table: "tournament_team_roster" */
    tournament_team_roster_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** fetch data from the table: "tournament_team_roster" using primary key columns */
    tournament_team_roster_by_pk?: (tournament_team_rosterGenqlSelection & { __args: {player_steam_id: Scalars['bigint'], tournament_id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_team_roster" */
    tournament_team_roster_stream?: (tournament_team_rosterGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_team_roster_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An array relationship */
    tournament_teams?: (tournament_teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_teams_aggregate?: (tournament_teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** fetch data from the table: "tournament_teams" using primary key columns */
    tournament_teams_by_pk?: (tournament_teamsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournament_teams" */
    tournament_teams_stream?: (tournament_teamsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournament_teams_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** An array relationship */
    tournaments?: (tournamentsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** An aggregate relationship */
    tournaments_aggregate?: (tournaments_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournaments_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournaments_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** fetch data from the table: "tournaments" using primary key columns */
    tournaments_by_pk?: (tournamentsGenqlSelection & { __args: {id: Scalars['uuid']} })
    /** fetch data from the table in a streaming manner: "tournaments" */
    tournaments_stream?: (tournamentsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (tournaments_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (tournaments_bool_exp | null)} })
    /** fetch data from the table: "v_match_captains" */
    v_match_captains?: (v_match_captainsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_captains_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_captains_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_captains_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_match_captains" */
    v_match_captains_aggregate?: (v_match_captains_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_captains_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_captains_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_captains_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_match_captains" */
    v_match_captains_stream?: (v_match_captainsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_match_captains_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_match_captains_bool_exp | null)} })
    /** fetch data from the table: "v_match_lineups" */
    v_match_lineups?: (v_match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_lineups_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_match_lineups" */
    v_match_lineups_aggregate?: (v_match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_match_lineups_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_match_lineups" */
    v_match_lineups_stream?: (v_match_lineupsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_match_lineups_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_match_lineups_bool_exp | null)} })
    /** fetch data from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis?: (v_player_arch_nemesisGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_arch_nemesis_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_arch_nemesis_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_arch_nemesis_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_arch_nemesis" */
    v_player_arch_nemesis_aggregate?: (v_player_arch_nemesis_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_arch_nemesis_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_arch_nemesis_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_arch_nemesis_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_arch_nemesis" */
    v_player_arch_nemesis_stream?: (v_player_arch_nemesisGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_arch_nemesis_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_arch_nemesis_bool_exp | null)} })
    /** fetch data from the table: "v_player_damage" */
    v_player_damage?: (v_player_damageGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_damage_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_damage_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_damage_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_damage" */
    v_player_damage_aggregate?: (v_player_damage_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_damage_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_damage_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_damage_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_damage" */
    v_player_damage_stream?: (v_player_damageGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_damage_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_damage_bool_exp | null)} })
    /** fetch data from the table: "v_player_elo" */
    v_player_elo?: (v_player_eloGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_elo_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_elo" */
    v_player_elo_aggregate?: (v_player_elo_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_elo_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_elo_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_elo_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_elo" */
    v_player_elo_stream?: (v_player_eloGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_elo_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_elo_bool_exp | null)} })
    /** fetch data from the table: "v_player_map_losses" */
    v_player_map_losses?: (v_player_map_lossesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_losses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_losses_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_losses_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_map_losses" */
    v_player_map_losses_aggregate?: (v_player_map_losses_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_losses_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_losses_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_losses_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_map_losses" */
    v_player_map_losses_stream?: (v_player_map_lossesGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_map_losses_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_map_losses_bool_exp | null)} })
    /** fetch data from the table: "v_player_map_wins" */
    v_player_map_wins?: (v_player_map_winsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_wins_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_wins_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_wins_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_map_wins" */
    v_player_map_wins_aggregate?: (v_player_map_wins_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_map_wins_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_map_wins_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_map_wins_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_map_wins" */
    v_player_map_wins_stream?: (v_player_map_winsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_map_wins_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_map_wins_bool_exp | null)} })
    /** fetch data from the table: "v_player_multi_kills" */
    v_player_multi_kills?: (v_player_multi_killsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_player_multi_kills" */
    v_player_multi_kills_aggregate?: (v_player_multi_kills_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_player_multi_kills_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_player_multi_kills_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_player_multi_kills" */
    v_player_multi_kills_stream?: (v_player_multi_killsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_player_multi_kills_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_player_multi_kills_bool_exp | null)} })
    /** fetch data from the table: "v_pool_maps" */
    v_pool_maps?: (v_pool_mapsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    /** fetch aggregated fields from the table: "v_pool_maps" */
    v_pool_maps_aggregate?: (v_pool_maps_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (v_pool_maps_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (v_pool_maps_order_by[] | null), 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    /** fetch data from the table in a streaming manner: "v_pool_maps" */
    v_pool_maps_stream?: (v_pool_mapsGenqlSelection & { __args: {
    /** maximum number of rows returned in a single batch */
    batch_size: Scalars['Int'], 
    /** cursor to stream the results returned by the query */
    cursor: (v_pool_maps_stream_cursor_input | null)[], 
    /** filter the rows returned */
    where?: (v_pool_maps_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "team_invites" */
export interface team_invitesGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    invited_by?: playersGenqlSelection
    invited_by_player_steam_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    /** An object relationship */
    team?: teamsGenqlSelection
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "team_invites" */
export interface team_invites_aggregateGenqlSelection{
    aggregate?: team_invites_aggregate_fieldsGenqlSelection
    nodes?: team_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface team_invites_aggregate_bool_exp {count?: (team_invites_aggregate_bool_exp_count | null)}

export interface team_invites_aggregate_bool_exp_count {arguments?: (team_invites_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (team_invites_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "team_invites" */
export interface team_invites_aggregate_fieldsGenqlSelection{
    avg?: team_invites_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (team_invites_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: team_invites_max_fieldsGenqlSelection
    min?: team_invites_min_fieldsGenqlSelection
    stddev?: team_invites_stddev_fieldsGenqlSelection
    stddev_pop?: team_invites_stddev_pop_fieldsGenqlSelection
    stddev_samp?: team_invites_stddev_samp_fieldsGenqlSelection
    sum?: team_invites_sum_fieldsGenqlSelection
    var_pop?: team_invites_var_pop_fieldsGenqlSelection
    var_samp?: team_invites_var_samp_fieldsGenqlSelection
    variance?: team_invites_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "team_invites" */
export interface team_invites_aggregate_order_by {avg?: (team_invites_avg_order_by | null),count?: (order_by | null),max?: (team_invites_max_order_by | null),min?: (team_invites_min_order_by | null),stddev?: (team_invites_stddev_order_by | null),stddev_pop?: (team_invites_stddev_pop_order_by | null),stddev_samp?: (team_invites_stddev_samp_order_by | null),sum?: (team_invites_sum_order_by | null),var_pop?: (team_invites_var_pop_order_by | null),var_samp?: (team_invites_var_samp_order_by | null),variance?: (team_invites_variance_order_by | null)}


/** input type for inserting array relation for remote table "team_invites" */
export interface team_invites_arr_rel_insert_input {data: team_invites_insert_input[],
/** upsert condition */
on_conflict?: (team_invites_on_conflict | null)}


/** aggregate avg on columns */
export interface team_invites_avg_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "team_invites" */
export interface team_invites_avg_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'. */
export interface team_invites_bool_exp {_and?: (team_invites_bool_exp[] | null),_not?: (team_invites_bool_exp | null),_or?: (team_invites_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),invited_by?: (players_bool_exp | null),invited_by_player_steam_id?: (bigint_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null),team?: (teams_bool_exp | null),team_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "team_invites" */
export interface team_invites_inc_input {invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "team_invites" */
export interface team_invites_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by?: (players_obj_rel_insert_input | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null),team?: (teams_obj_rel_insert_input | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface team_invites_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "team_invites" */
export interface team_invites_max_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null),team_id?: (order_by | null)}


/** aggregate min on columns */
export interface team_invites_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "team_invites" */
export interface team_invites_min_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null),team_id?: (order_by | null)}


/** response of any mutation on the table "team_invites" */
export interface team_invites_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: team_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "team_invites" */
export interface team_invites_on_conflict {constraint: team_invites_constraint,update_columns?: team_invites_update_column[],where?: (team_invites_bool_exp | null)}


/** Ordering options when selecting data from "team_invites". */
export interface team_invites_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by?: (players_order_by | null),invited_by_player_steam_id?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null),team?: (teams_order_by | null),team_id?: (order_by | null)}


/** primary key columns input for table: team_invites */
export interface team_invites_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "team_invites" */
export interface team_invites_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface team_invites_stddev_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "team_invites" */
export interface team_invites_stddev_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface team_invites_stddev_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "team_invites" */
export interface team_invites_stddev_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface team_invites_stddev_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "team_invites" */
export interface team_invites_stddev_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "team_invites" */
export interface team_invites_stream_cursor_input {
/** Stream column input with initial value */
initial_value: team_invites_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface team_invites_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface team_invites_sum_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "team_invites" */
export interface team_invites_sum_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}

export interface team_invites_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (team_invites_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (team_invites_set_input | null),
/** filter the rows which have to be updated */
where: team_invites_bool_exp}


/** aggregate var_pop on columns */
export interface team_invites_var_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "team_invites" */
export interface team_invites_var_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface team_invites_var_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "team_invites" */
export interface team_invites_var_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface team_invites_variance_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "team_invites" */
export interface team_invites_variance_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** columns and relationships of "team_roster" */
export interface team_rosterGenqlSelection{
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    role?: boolean | number
    /** An object relationship */
    team?: teamsGenqlSelection
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "team_roster" */
export interface team_roster_aggregateGenqlSelection{
    aggregate?: team_roster_aggregate_fieldsGenqlSelection
    nodes?: team_rosterGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface team_roster_aggregate_bool_exp {count?: (team_roster_aggregate_bool_exp_count | null)}

export interface team_roster_aggregate_bool_exp_count {arguments?: (team_roster_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (team_roster_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "team_roster" */
export interface team_roster_aggregate_fieldsGenqlSelection{
    avg?: team_roster_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (team_roster_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: team_roster_max_fieldsGenqlSelection
    min?: team_roster_min_fieldsGenqlSelection
    stddev?: team_roster_stddev_fieldsGenqlSelection
    stddev_pop?: team_roster_stddev_pop_fieldsGenqlSelection
    stddev_samp?: team_roster_stddev_samp_fieldsGenqlSelection
    sum?: team_roster_sum_fieldsGenqlSelection
    var_pop?: team_roster_var_pop_fieldsGenqlSelection
    var_samp?: team_roster_var_samp_fieldsGenqlSelection
    variance?: team_roster_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "team_roster" */
export interface team_roster_aggregate_order_by {avg?: (team_roster_avg_order_by | null),count?: (order_by | null),max?: (team_roster_max_order_by | null),min?: (team_roster_min_order_by | null),stddev?: (team_roster_stddev_order_by | null),stddev_pop?: (team_roster_stddev_pop_order_by | null),stddev_samp?: (team_roster_stddev_samp_order_by | null),sum?: (team_roster_sum_order_by | null),var_pop?: (team_roster_var_pop_order_by | null),var_samp?: (team_roster_var_samp_order_by | null),variance?: (team_roster_variance_order_by | null)}


/** input type for inserting array relation for remote table "team_roster" */
export interface team_roster_arr_rel_insert_input {data: team_roster_insert_input[],
/** upsert condition */
on_conflict?: (team_roster_on_conflict | null)}


/** aggregate avg on columns */
export interface team_roster_avg_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "team_roster" */
export interface team_roster_avg_order_by {player_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'. */
export interface team_roster_bool_exp {_and?: (team_roster_bool_exp[] | null),_not?: (team_roster_bool_exp | null),_or?: (team_roster_bool_exp[] | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),role?: (e_team_roles_enum_comparison_exp | null),team?: (teams_bool_exp | null),team_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "team_roster" */
export interface team_roster_inc_input {player_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "team_roster" */
export interface team_roster_insert_input {player?: (players_obj_rel_insert_input | null),player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),team?: (teams_obj_rel_insert_input | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface team_roster_max_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "team_roster" */
export interface team_roster_max_order_by {player_steam_id?: (order_by | null),team_id?: (order_by | null)}


/** aggregate min on columns */
export interface team_roster_min_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "team_roster" */
export interface team_roster_min_order_by {player_steam_id?: (order_by | null),team_id?: (order_by | null)}


/** response of any mutation on the table "team_roster" */
export interface team_roster_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: team_rosterGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "team_roster" */
export interface team_roster_on_conflict {constraint: team_roster_constraint,update_columns?: team_roster_update_column[],where?: (team_roster_bool_exp | null)}


/** Ordering options when selecting data from "team_roster". */
export interface team_roster_order_by {player?: (players_order_by | null),player_steam_id?: (order_by | null),role?: (order_by | null),team?: (teams_order_by | null),team_id?: (order_by | null)}


/** primary key columns input for table: team_roster */
export interface team_roster_pk_columns_input {player_steam_id: Scalars['bigint'],team_id: Scalars['uuid']}


/** input type for updating data in table "team_roster" */
export interface team_roster_set_input {player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface team_roster_stddev_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "team_roster" */
export interface team_roster_stddev_order_by {player_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface team_roster_stddev_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "team_roster" */
export interface team_roster_stddev_pop_order_by {player_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface team_roster_stddev_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "team_roster" */
export interface team_roster_stddev_samp_order_by {player_steam_id?: (order_by | null)}


/** Streaming cursor of the table "team_roster" */
export interface team_roster_stream_cursor_input {
/** Stream column input with initial value */
initial_value: team_roster_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface team_roster_stream_cursor_value_input {player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface team_roster_sum_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "team_roster" */
export interface team_roster_sum_order_by {player_steam_id?: (order_by | null)}

export interface team_roster_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (team_roster_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (team_roster_set_input | null),
/** filter the rows which have to be updated */
where: team_roster_bool_exp}


/** aggregate var_pop on columns */
export interface team_roster_var_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "team_roster" */
export interface team_roster_var_pop_order_by {player_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface team_roster_var_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "team_roster" */
export interface team_roster_var_samp_order_by {player_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface team_roster_variance_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "team_roster" */
export interface team_roster_variance_order_by {player_steam_id?: (order_by | null)}


/** columns and relationships of "teams" */
export interface teamsGenqlSelection{
    /** A computed field, executes function "can_change_team_role" */
    can_change_role?: boolean | number
    /** A computed field, executes function "can_invite_to_team" */
    can_invite?: boolean | number
    /** A computed field, executes function "can_remove_from_team" */
    can_remove?: boolean | number
    id?: boolean | number
    /** An array relationship */
    invites?: (team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    invites_aggregate?: (team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_invites_bool_exp | null)} })
    /** An array relationship */
    match_lineups?: (match_lineupsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** An aggregate relationship */
    match_lineups_aggregate?: (match_lineups_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (match_lineups_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (match_lineups_order_by[] | null), 
    /** filter the rows returned */
    where?: (match_lineups_bool_exp | null)} })
    /** A computed field, executes function "get_team_matches" */
    matches?: (matchesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (matches_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (matches_order_by[] | null), 
    /** filter the rows returned */
    where?: (matches_bool_exp | null)} })
    name?: boolean | number
    /** An object relationship */
    owner?: playersGenqlSelection
    owner_steam_id?: boolean | number
    /** An array relationship */
    roster?: (team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    roster_aggregate?: (team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (team_roster_bool_exp | null)} })
    short_name?: boolean | number
    /** An array relationship */
    tournament_teams?: (tournament_teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** An aggregate relationship */
    tournament_teams_aggregate?: (tournament_teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "teams" */
export interface teams_aggregateGenqlSelection{
    aggregate?: teams_aggregate_fieldsGenqlSelection
    nodes?: teamsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface teams_aggregate_bool_exp {count?: (teams_aggregate_bool_exp_count | null)}

export interface teams_aggregate_bool_exp_count {arguments?: (teams_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (teams_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "teams" */
export interface teams_aggregate_fieldsGenqlSelection{
    avg?: teams_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (teams_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: teams_max_fieldsGenqlSelection
    min?: teams_min_fieldsGenqlSelection
    stddev?: teams_stddev_fieldsGenqlSelection
    stddev_pop?: teams_stddev_pop_fieldsGenqlSelection
    stddev_samp?: teams_stddev_samp_fieldsGenqlSelection
    sum?: teams_sum_fieldsGenqlSelection
    var_pop?: teams_var_pop_fieldsGenqlSelection
    var_samp?: teams_var_samp_fieldsGenqlSelection
    variance?: teams_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "teams" */
export interface teams_aggregate_order_by {avg?: (teams_avg_order_by | null),count?: (order_by | null),max?: (teams_max_order_by | null),min?: (teams_min_order_by | null),stddev?: (teams_stddev_order_by | null),stddev_pop?: (teams_stddev_pop_order_by | null),stddev_samp?: (teams_stddev_samp_order_by | null),sum?: (teams_sum_order_by | null),var_pop?: (teams_var_pop_order_by | null),var_samp?: (teams_var_samp_order_by | null),variance?: (teams_variance_order_by | null)}


/** input type for inserting array relation for remote table "teams" */
export interface teams_arr_rel_insert_input {data: teams_insert_input[],
/** upsert condition */
on_conflict?: (teams_on_conflict | null)}


/** aggregate avg on columns */
export interface teams_avg_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "teams" */
export interface teams_avg_order_by {owner_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
export interface teams_bool_exp {_and?: (teams_bool_exp[] | null),_not?: (teams_bool_exp | null),_or?: (teams_bool_exp[] | null),can_change_role?: (Boolean_comparison_exp | null),can_invite?: (Boolean_comparison_exp | null),can_remove?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),invites?: (team_invites_bool_exp | null),invites_aggregate?: (team_invites_aggregate_bool_exp | null),match_lineups?: (match_lineups_bool_exp | null),match_lineups_aggregate?: (match_lineups_aggregate_bool_exp | null),matches?: (matches_bool_exp | null),name?: (String_comparison_exp | null),owner?: (players_bool_exp | null),owner_steam_id?: (bigint_comparison_exp | null),roster?: (team_roster_bool_exp | null),roster_aggregate?: (team_roster_aggregate_bool_exp | null),short_name?: (String_comparison_exp | null),tournament_teams?: (tournament_teams_bool_exp | null),tournament_teams_aggregate?: (tournament_teams_aggregate_bool_exp | null)}


/** input type for incrementing numeric columns in table "teams" */
export interface teams_inc_input {owner_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "teams" */
export interface teams_insert_input {id?: (Scalars['uuid'] | null),invites?: (team_invites_arr_rel_insert_input | null),match_lineups?: (match_lineups_arr_rel_insert_input | null),name?: (Scalars['String'] | null),owner?: (players_obj_rel_insert_input | null),owner_steam_id?: (Scalars['bigint'] | null),roster?: (team_roster_arr_rel_insert_input | null),short_name?: (Scalars['String'] | null),tournament_teams?: (tournament_teams_arr_rel_insert_input | null)}


/** aggregate max on columns */
export interface teams_max_fieldsGenqlSelection{
    id?: boolean | number
    name?: boolean | number
    owner_steam_id?: boolean | number
    short_name?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "teams" */
export interface teams_max_order_by {id?: (order_by | null),name?: (order_by | null),owner_steam_id?: (order_by | null),short_name?: (order_by | null)}


/** aggregate min on columns */
export interface teams_min_fieldsGenqlSelection{
    id?: boolean | number
    name?: boolean | number
    owner_steam_id?: boolean | number
    short_name?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "teams" */
export interface teams_min_order_by {id?: (order_by | null),name?: (order_by | null),owner_steam_id?: (order_by | null),short_name?: (order_by | null)}


/** response of any mutation on the table "teams" */
export interface teams_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: teamsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "teams" */
export interface teams_obj_rel_insert_input {data: teams_insert_input,
/** upsert condition */
on_conflict?: (teams_on_conflict | null)}


/** on_conflict condition type for table "teams" */
export interface teams_on_conflict {constraint: teams_constraint,update_columns?: teams_update_column[],where?: (teams_bool_exp | null)}


/** Ordering options when selecting data from "teams". */
export interface teams_order_by {can_change_role?: (order_by | null),can_invite?: (order_by | null),can_remove?: (order_by | null),id?: (order_by | null),invites_aggregate?: (team_invites_aggregate_order_by | null),match_lineups_aggregate?: (match_lineups_aggregate_order_by | null),matches_aggregate?: (matches_aggregate_order_by | null),name?: (order_by | null),owner?: (players_order_by | null),owner_steam_id?: (order_by | null),roster_aggregate?: (team_roster_aggregate_order_by | null),short_name?: (order_by | null),tournament_teams_aggregate?: (tournament_teams_aggregate_order_by | null)}


/** primary key columns input for table: teams */
export interface teams_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "teams" */
export interface teams_set_input {id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),owner_steam_id?: (Scalars['bigint'] | null),short_name?: (Scalars['String'] | null)}


/** aggregate stddev on columns */
export interface teams_stddev_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "teams" */
export interface teams_stddev_order_by {owner_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface teams_stddev_pop_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "teams" */
export interface teams_stddev_pop_order_by {owner_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface teams_stddev_samp_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "teams" */
export interface teams_stddev_samp_order_by {owner_steam_id?: (order_by | null)}


/** Streaming cursor of the table "teams" */
export interface teams_stream_cursor_input {
/** Stream column input with initial value */
initial_value: teams_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface teams_stream_cursor_value_input {id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),owner_steam_id?: (Scalars['bigint'] | null),short_name?: (Scalars['String'] | null)}


/** aggregate sum on columns */
export interface teams_sum_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "teams" */
export interface teams_sum_order_by {owner_steam_id?: (order_by | null)}

export interface teams_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (teams_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (teams_set_input | null),
/** filter the rows which have to be updated */
where: teams_bool_exp}


/** aggregate var_pop on columns */
export interface teams_var_pop_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "teams" */
export interface teams_var_pop_order_by {owner_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface teams_var_samp_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "teams" */
export interface teams_var_samp_order_by {owner_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface teams_variance_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "teams" */
export interface teams_variance_order_by {owner_steam_id?: (order_by | null)}


/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export interface timestamptz_comparison_exp {_eq?: (Scalars['timestamptz'] | null),_gt?: (Scalars['timestamptz'] | null),_gte?: (Scalars['timestamptz'] | null),_in?: (Scalars['timestamptz'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['timestamptz'] | null),_lte?: (Scalars['timestamptz'] | null),_neq?: (Scalars['timestamptz'] | null),_nin?: (Scalars['timestamptz'][] | null)}


/** columns and relationships of "tournament_brackets" */
export interface tournament_bracketsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    match_number?: boolean | number
    parent_bracket_id?: boolean | number
    round?: boolean | number
    /** An object relationship */
    stage?: tournament_stagesGenqlSelection
    /** An object relationship */
    team_1?: tournament_teamsGenqlSelection
    /** An object relationship */
    team_2?: tournament_teamsGenqlSelection
    tournament_stage_id?: boolean | number
    tournament_team_id_1?: boolean | number
    tournament_team_id_2?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_brackets" */
export interface tournament_brackets_aggregateGenqlSelection{
    aggregate?: tournament_brackets_aggregate_fieldsGenqlSelection
    nodes?: tournament_bracketsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_brackets_aggregate_bool_exp {count?: (tournament_brackets_aggregate_bool_exp_count | null)}

export interface tournament_brackets_aggregate_bool_exp_count {arguments?: (tournament_brackets_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_brackets_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_brackets" */
export interface tournament_brackets_aggregate_fieldsGenqlSelection{
    avg?: tournament_brackets_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_brackets_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_brackets_max_fieldsGenqlSelection
    min?: tournament_brackets_min_fieldsGenqlSelection
    stddev?: tournament_brackets_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_brackets_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_brackets_stddev_samp_fieldsGenqlSelection
    sum?: tournament_brackets_sum_fieldsGenqlSelection
    var_pop?: tournament_brackets_var_pop_fieldsGenqlSelection
    var_samp?: tournament_brackets_var_samp_fieldsGenqlSelection
    variance?: tournament_brackets_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_brackets" */
export interface tournament_brackets_aggregate_order_by {avg?: (tournament_brackets_avg_order_by | null),count?: (order_by | null),max?: (tournament_brackets_max_order_by | null),min?: (tournament_brackets_min_order_by | null),stddev?: (tournament_brackets_stddev_order_by | null),stddev_pop?: (tournament_brackets_stddev_pop_order_by | null),stddev_samp?: (tournament_brackets_stddev_samp_order_by | null),sum?: (tournament_brackets_sum_order_by | null),var_pop?: (tournament_brackets_var_pop_order_by | null),var_samp?: (tournament_brackets_var_samp_order_by | null),variance?: (tournament_brackets_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournament_brackets" */
export interface tournament_brackets_arr_rel_insert_input {data: tournament_brackets_insert_input[],
/** upsert condition */
on_conflict?: (tournament_brackets_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_brackets_avg_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_brackets" */
export interface tournament_brackets_avg_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_brackets". All fields are combined with a logical 'AND'. */
export interface tournament_brackets_bool_exp {_and?: (tournament_brackets_bool_exp[] | null),_not?: (tournament_brackets_bool_exp | null),_or?: (tournament_brackets_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),match_number?: (Int_comparison_exp | null),parent_bracket_id?: (uuid_comparison_exp | null),round?: (Int_comparison_exp | null),stage?: (tournament_stages_bool_exp | null),team_1?: (tournament_teams_bool_exp | null),team_2?: (tournament_teams_bool_exp | null),tournament_stage_id?: (uuid_comparison_exp | null),tournament_team_id_1?: (uuid_comparison_exp | null),tournament_team_id_2?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "tournament_brackets" */
export interface tournament_brackets_inc_input {match_number?: (Scalars['Int'] | null),round?: (Scalars['Int'] | null)}


/** input type for inserting data into table "tournament_brackets" */
export interface tournament_brackets_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),match_number?: (Scalars['Int'] | null),parent_bracket_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),stage?: (tournament_stages_obj_rel_insert_input | null),team_1?: (tournament_teams_obj_rel_insert_input | null),team_2?: (tournament_teams_obj_rel_insert_input | null),tournament_stage_id?: (Scalars['uuid'] | null),tournament_team_id_1?: (Scalars['uuid'] | null),tournament_team_id_2?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface tournament_brackets_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_number?: boolean | number
    parent_bracket_id?: boolean | number
    round?: boolean | number
    tournament_stage_id?: boolean | number
    tournament_team_id_1?: boolean | number
    tournament_team_id_2?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_brackets" */
export interface tournament_brackets_max_order_by {created_at?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_number?: (order_by | null),parent_bracket_id?: (order_by | null),round?: (order_by | null),tournament_stage_id?: (order_by | null),tournament_team_id_1?: (order_by | null),tournament_team_id_2?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_brackets_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    match_number?: boolean | number
    parent_bracket_id?: boolean | number
    round?: boolean | number
    tournament_stage_id?: boolean | number
    tournament_team_id_1?: boolean | number
    tournament_team_id_2?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_brackets" */
export interface tournament_brackets_min_order_by {created_at?: (order_by | null),id?: (order_by | null),match_id?: (order_by | null),match_number?: (order_by | null),parent_bracket_id?: (order_by | null),round?: (order_by | null),tournament_stage_id?: (order_by | null),tournament_team_id_1?: (order_by | null),tournament_team_id_2?: (order_by | null)}


/** response of any mutation on the table "tournament_brackets" */
export interface tournament_brackets_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_bracketsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "tournament_brackets" */
export interface tournament_brackets_on_conflict {constraint: tournament_brackets_constraint,update_columns?: tournament_brackets_update_column[],where?: (tournament_brackets_bool_exp | null)}


/** Ordering options when selecting data from "tournament_brackets". */
export interface tournament_brackets_order_by {created_at?: (order_by | null),id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),match_number?: (order_by | null),parent_bracket_id?: (order_by | null),round?: (order_by | null),stage?: (tournament_stages_order_by | null),team_1?: (tournament_teams_order_by | null),team_2?: (tournament_teams_order_by | null),tournament_stage_id?: (order_by | null),tournament_team_id_1?: (order_by | null),tournament_team_id_2?: (order_by | null)}


/** primary key columns input for table: tournament_brackets */
export interface tournament_brackets_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "tournament_brackets" */
export interface tournament_brackets_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_number?: (Scalars['Int'] | null),parent_bracket_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),tournament_stage_id?: (Scalars['uuid'] | null),tournament_team_id_1?: (Scalars['uuid'] | null),tournament_team_id_2?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface tournament_brackets_stddev_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_brackets" */
export interface tournament_brackets_stddev_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_brackets_stddev_pop_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_brackets" */
export interface tournament_brackets_stddev_pop_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_brackets_stddev_samp_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_brackets" */
export interface tournament_brackets_stddev_samp_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "tournament_brackets" */
export interface tournament_brackets_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_brackets_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_brackets_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),match_number?: (Scalars['Int'] | null),parent_bracket_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null),tournament_stage_id?: (Scalars['uuid'] | null),tournament_team_id_1?: (Scalars['uuid'] | null),tournament_team_id_2?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface tournament_brackets_sum_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_brackets" */
export interface tournament_brackets_sum_order_by {match_number?: (order_by | null),round?: (order_by | null)}

export interface tournament_brackets_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_brackets_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_brackets_set_input | null),
/** filter the rows which have to be updated */
where: tournament_brackets_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_brackets_var_pop_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_brackets" */
export interface tournament_brackets_var_pop_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_brackets_var_samp_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_brackets" */
export interface tournament_brackets_var_samp_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_brackets_variance_fieldsGenqlSelection{
    match_number?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_brackets" */
export interface tournament_brackets_variance_order_by {match_number?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "tournament_organizers" */
export interface tournament_organizersGenqlSelection{
    /** An object relationship */
    organizer?: playersGenqlSelection
    steam_id?: boolean | number
    /** An object relationship */
    tournament?: tournamentsGenqlSelection
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_organizers" */
export interface tournament_organizers_aggregateGenqlSelection{
    aggregate?: tournament_organizers_aggregate_fieldsGenqlSelection
    nodes?: tournament_organizersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_organizers_aggregate_bool_exp {count?: (tournament_organizers_aggregate_bool_exp_count | null)}

export interface tournament_organizers_aggregate_bool_exp_count {arguments?: (tournament_organizers_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_organizers_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_organizers" */
export interface tournament_organizers_aggregate_fieldsGenqlSelection{
    avg?: tournament_organizers_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_organizers_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_organizers_max_fieldsGenqlSelection
    min?: tournament_organizers_min_fieldsGenqlSelection
    stddev?: tournament_organizers_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_organizers_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_organizers_stddev_samp_fieldsGenqlSelection
    sum?: tournament_organizers_sum_fieldsGenqlSelection
    var_pop?: tournament_organizers_var_pop_fieldsGenqlSelection
    var_samp?: tournament_organizers_var_samp_fieldsGenqlSelection
    variance?: tournament_organizers_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_organizers" */
export interface tournament_organizers_aggregate_order_by {avg?: (tournament_organizers_avg_order_by | null),count?: (order_by | null),max?: (tournament_organizers_max_order_by | null),min?: (tournament_organizers_min_order_by | null),stddev?: (tournament_organizers_stddev_order_by | null),stddev_pop?: (tournament_organizers_stddev_pop_order_by | null),stddev_samp?: (tournament_organizers_stddev_samp_order_by | null),sum?: (tournament_organizers_sum_order_by | null),var_pop?: (tournament_organizers_var_pop_order_by | null),var_samp?: (tournament_organizers_var_samp_order_by | null),variance?: (tournament_organizers_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournament_organizers" */
export interface tournament_organizers_arr_rel_insert_input {data: tournament_organizers_insert_input[],
/** upsert condition */
on_conflict?: (tournament_organizers_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_organizers_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_organizers" */
export interface tournament_organizers_avg_order_by {steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'. */
export interface tournament_organizers_bool_exp {_and?: (tournament_organizers_bool_exp[] | null),_not?: (tournament_organizers_bool_exp | null),_or?: (tournament_organizers_bool_exp[] | null),organizer?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null),tournament?: (tournaments_bool_exp | null),tournament_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "tournament_organizers" */
export interface tournament_organizers_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "tournament_organizers" */
export interface tournament_organizers_insert_input {organizer?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null),tournament?: (tournaments_obj_rel_insert_input | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface tournament_organizers_max_fieldsGenqlSelection{
    steam_id?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_organizers" */
export interface tournament_organizers_max_order_by {steam_id?: (order_by | null),tournament_id?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_organizers_min_fieldsGenqlSelection{
    steam_id?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_organizers" */
export interface tournament_organizers_min_order_by {steam_id?: (order_by | null),tournament_id?: (order_by | null)}


/** response of any mutation on the table "tournament_organizers" */
export interface tournament_organizers_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_organizersGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "tournament_organizers" */
export interface tournament_organizers_on_conflict {constraint: tournament_organizers_constraint,update_columns?: tournament_organizers_update_column[],where?: (tournament_organizers_bool_exp | null)}


/** Ordering options when selecting data from "tournament_organizers". */
export interface tournament_organizers_order_by {organizer?: (players_order_by | null),steam_id?: (order_by | null),tournament?: (tournaments_order_by | null),tournament_id?: (order_by | null)}


/** primary key columns input for table: tournament_organizers */
export interface tournament_organizers_pk_columns_input {steam_id: Scalars['bigint'],tournament_id: Scalars['uuid']}


/** input type for updating data in table "tournament_organizers" */
export interface tournament_organizers_set_input {steam_id?: (Scalars['bigint'] | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface tournament_organizers_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_organizers" */
export interface tournament_organizers_stddev_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_organizers_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_organizers" */
export interface tournament_organizers_stddev_pop_order_by {steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_organizers_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_organizers" */
export interface tournament_organizers_stddev_samp_order_by {steam_id?: (order_by | null)}


/** Streaming cursor of the table "tournament_organizers" */
export interface tournament_organizers_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_organizers_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_organizers_stream_cursor_value_input {steam_id?: (Scalars['bigint'] | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface tournament_organizers_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_organizers" */
export interface tournament_organizers_sum_order_by {steam_id?: (order_by | null)}

export interface tournament_organizers_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_organizers_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_organizers_set_input | null),
/** filter the rows which have to be updated */
where: tournament_organizers_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_organizers_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_organizers" */
export interface tournament_organizers_var_pop_order_by {steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_organizers_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_organizers" */
export interface tournament_organizers_var_samp_order_by {steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_organizers_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_organizers" */
export interface tournament_organizers_variance_order_by {steam_id?: (order_by | null)}


/** columns and relationships of "tournament_stages" */
export interface tournament_stagesGenqlSelection{
    /** An array relationship */
    brackets?: (tournament_bracketsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An aggregate relationship */
    brackets_aggregate?: (tournament_brackets_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_brackets_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_brackets_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_brackets_bool_exp | null)} })
    /** An object relationship */
    e_tournament_stage_type?: e_tournament_stage_typesGenqlSelection
    id?: boolean | number
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    settings?: { __args: {
    /** JSON select path */
    path?: (Scalars['String'] | null)} } | boolean | number
    /** An object relationship */
    tournament?: tournamentsGenqlSelection
    tournament_id?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_stages" */
export interface tournament_stages_aggregateGenqlSelection{
    aggregate?: tournament_stages_aggregate_fieldsGenqlSelection
    nodes?: tournament_stagesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_stages_aggregate_bool_exp {count?: (tournament_stages_aggregate_bool_exp_count | null)}

export interface tournament_stages_aggregate_bool_exp_count {arguments?: (tournament_stages_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_stages_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_stages" */
export interface tournament_stages_aggregate_fieldsGenqlSelection{
    avg?: tournament_stages_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_stages_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_stages_max_fieldsGenqlSelection
    min?: tournament_stages_min_fieldsGenqlSelection
    stddev?: tournament_stages_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_stages_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_stages_stddev_samp_fieldsGenqlSelection
    sum?: tournament_stages_sum_fieldsGenqlSelection
    var_pop?: tournament_stages_var_pop_fieldsGenqlSelection
    var_samp?: tournament_stages_var_samp_fieldsGenqlSelection
    variance?: tournament_stages_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_stages" */
export interface tournament_stages_aggregate_order_by {avg?: (tournament_stages_avg_order_by | null),count?: (order_by | null),max?: (tournament_stages_max_order_by | null),min?: (tournament_stages_min_order_by | null),stddev?: (tournament_stages_stddev_order_by | null),stddev_pop?: (tournament_stages_stddev_pop_order_by | null),stddev_samp?: (tournament_stages_stddev_samp_order_by | null),sum?: (tournament_stages_sum_order_by | null),var_pop?: (tournament_stages_var_pop_order_by | null),var_samp?: (tournament_stages_var_samp_order_by | null),variance?: (tournament_stages_variance_order_by | null)}


/** append existing jsonb value of filtered columns with new jsonb value */
export interface tournament_stages_append_input {settings?: (Scalars['jsonb'] | null)}


/** input type for inserting array relation for remote table "tournament_stages" */
export interface tournament_stages_arr_rel_insert_input {data: tournament_stages_insert_input[],
/** upsert condition */
on_conflict?: (tournament_stages_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_stages_avg_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_stages" */
export interface tournament_stages_avg_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'. */
export interface tournament_stages_bool_exp {_and?: (tournament_stages_bool_exp[] | null),_not?: (tournament_stages_bool_exp | null),_or?: (tournament_stages_bool_exp[] | null),brackets?: (tournament_brackets_bool_exp | null),brackets_aggregate?: (tournament_brackets_aggregate_bool_exp | null),e_tournament_stage_type?: (e_tournament_stage_types_bool_exp | null),id?: (uuid_comparison_exp | null),max_teams?: (Int_comparison_exp | null),min_teams?: (Int_comparison_exp | null),order?: (Int_comparison_exp | null),settings?: (jsonb_comparison_exp | null),tournament?: (tournaments_bool_exp | null),tournament_id?: (uuid_comparison_exp | null),type?: (e_tournament_stage_types_enum_comparison_exp | null)}


/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export interface tournament_stages_delete_at_path_input {settings?: (Scalars['String'][] | null)}


/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export interface tournament_stages_delete_elem_input {settings?: (Scalars['Int'] | null)}


/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export interface tournament_stages_delete_key_input {settings?: (Scalars['String'] | null)}


/** input type for incrementing numeric columns in table "tournament_stages" */
export interface tournament_stages_inc_input {max_teams?: (Scalars['Int'] | null),min_teams?: (Scalars['Int'] | null),order?: (Scalars['Int'] | null)}


/** input type for inserting data into table "tournament_stages" */
export interface tournament_stages_insert_input {brackets?: (tournament_brackets_arr_rel_insert_input | null),e_tournament_stage_type?: (e_tournament_stage_types_obj_rel_insert_input | null),id?: (Scalars['uuid'] | null),max_teams?: (Scalars['Int'] | null),min_teams?: (Scalars['Int'] | null),order?: (Scalars['Int'] | null),settings?: (Scalars['jsonb'] | null),tournament?: (tournaments_obj_rel_insert_input | null),tournament_id?: (Scalars['uuid'] | null),type?: (e_tournament_stage_types_enum | null)}


/** aggregate max on columns */
export interface tournament_stages_max_fieldsGenqlSelection{
    id?: boolean | number
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_stages" */
export interface tournament_stages_max_order_by {id?: (order_by | null),max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null),tournament_id?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_stages_min_fieldsGenqlSelection{
    id?: boolean | number
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_stages" */
export interface tournament_stages_min_order_by {id?: (order_by | null),max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null),tournament_id?: (order_by | null)}


/** response of any mutation on the table "tournament_stages" */
export interface tournament_stages_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_stagesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "tournament_stages" */
export interface tournament_stages_obj_rel_insert_input {data: tournament_stages_insert_input,
/** upsert condition */
on_conflict?: (tournament_stages_on_conflict | null)}


/** on_conflict condition type for table "tournament_stages" */
export interface tournament_stages_on_conflict {constraint: tournament_stages_constraint,update_columns?: tournament_stages_update_column[],where?: (tournament_stages_bool_exp | null)}


/** Ordering options when selecting data from "tournament_stages". */
export interface tournament_stages_order_by {brackets_aggregate?: (tournament_brackets_aggregate_order_by | null),e_tournament_stage_type?: (e_tournament_stage_types_order_by | null),id?: (order_by | null),max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null),settings?: (order_by | null),tournament?: (tournaments_order_by | null),tournament_id?: (order_by | null),type?: (order_by | null)}


/** primary key columns input for table: tournament_stages */
export interface tournament_stages_pk_columns_input {id: Scalars['uuid']}


/** prepend existing jsonb value of filtered columns with new jsonb value */
export interface tournament_stages_prepend_input {settings?: (Scalars['jsonb'] | null)}


/** input type for updating data in table "tournament_stages" */
export interface tournament_stages_set_input {id?: (Scalars['uuid'] | null),max_teams?: (Scalars['Int'] | null),min_teams?: (Scalars['Int'] | null),order?: (Scalars['Int'] | null),settings?: (Scalars['jsonb'] | null),tournament_id?: (Scalars['uuid'] | null),type?: (e_tournament_stage_types_enum | null)}


/** aggregate stddev on columns */
export interface tournament_stages_stddev_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_stages" */
export interface tournament_stages_stddev_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_stages_stddev_pop_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_stages" */
export interface tournament_stages_stddev_pop_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_stages_stddev_samp_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_stages" */
export interface tournament_stages_stddev_samp_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** Streaming cursor of the table "tournament_stages" */
export interface tournament_stages_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_stages_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_stages_stream_cursor_value_input {id?: (Scalars['uuid'] | null),max_teams?: (Scalars['Int'] | null),min_teams?: (Scalars['Int'] | null),order?: (Scalars['Int'] | null),settings?: (Scalars['jsonb'] | null),tournament_id?: (Scalars['uuid'] | null),type?: (e_tournament_stage_types_enum | null)}


/** aggregate sum on columns */
export interface tournament_stages_sum_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_stages" */
export interface tournament_stages_sum_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}

export interface tournament_stages_updates {
/** append existing jsonb value of filtered columns with new jsonb value */
_append?: (tournament_stages_append_input | null),
/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
_delete_at_path?: (tournament_stages_delete_at_path_input | null),
/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
_delete_elem?: (tournament_stages_delete_elem_input | null),
/** delete key/value pair or string element. key/value pairs are matched based on their key value */
_delete_key?: (tournament_stages_delete_key_input | null),
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_stages_inc_input | null),
/** prepend existing jsonb value of filtered columns with new jsonb value */
_prepend?: (tournament_stages_prepend_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_stages_set_input | null),
/** filter the rows which have to be updated */
where: tournament_stages_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_stages_var_pop_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_stages" */
export interface tournament_stages_var_pop_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_stages_var_samp_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_stages" */
export interface tournament_stages_var_samp_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_stages_variance_fieldsGenqlSelection{
    max_teams?: boolean | number
    min_teams?: boolean | number
    order?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_stages" */
export interface tournament_stages_variance_order_by {max_teams?: (order_by | null),min_teams?: (order_by | null),order?: (order_by | null)}


/** columns and relationships of "tournament_team_invites" */
export interface tournament_team_invitesGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    /** An object relationship */
    invited_by?: playersGenqlSelection
    invited_by_player_steam_id?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    /** An object relationship */
    team?: tournament_teamsGenqlSelection
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_team_invites" */
export interface tournament_team_invites_aggregateGenqlSelection{
    aggregate?: tournament_team_invites_aggregate_fieldsGenqlSelection
    nodes?: tournament_team_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_team_invites_aggregate_bool_exp {count?: (tournament_team_invites_aggregate_bool_exp_count | null)}

export interface tournament_team_invites_aggregate_bool_exp_count {arguments?: (tournament_team_invites_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_team_invites_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_team_invites" */
export interface tournament_team_invites_aggregate_fieldsGenqlSelection{
    avg?: tournament_team_invites_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_team_invites_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_team_invites_max_fieldsGenqlSelection
    min?: tournament_team_invites_min_fieldsGenqlSelection
    stddev?: tournament_team_invites_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_team_invites_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_team_invites_stddev_samp_fieldsGenqlSelection
    sum?: tournament_team_invites_sum_fieldsGenqlSelection
    var_pop?: tournament_team_invites_var_pop_fieldsGenqlSelection
    var_samp?: tournament_team_invites_var_samp_fieldsGenqlSelection
    variance?: tournament_team_invites_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_team_invites" */
export interface tournament_team_invites_aggregate_order_by {avg?: (tournament_team_invites_avg_order_by | null),count?: (order_by | null),max?: (tournament_team_invites_max_order_by | null),min?: (tournament_team_invites_min_order_by | null),stddev?: (tournament_team_invites_stddev_order_by | null),stddev_pop?: (tournament_team_invites_stddev_pop_order_by | null),stddev_samp?: (tournament_team_invites_stddev_samp_order_by | null),sum?: (tournament_team_invites_sum_order_by | null),var_pop?: (tournament_team_invites_var_pop_order_by | null),var_samp?: (tournament_team_invites_var_samp_order_by | null),variance?: (tournament_team_invites_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournament_team_invites" */
export interface tournament_team_invites_arr_rel_insert_input {data: tournament_team_invites_insert_input[],
/** upsert condition */
on_conflict?: (tournament_team_invites_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_team_invites_avg_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_avg_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_team_invites". All fields are combined with a logical 'AND'. */
export interface tournament_team_invites_bool_exp {_and?: (tournament_team_invites_bool_exp[] | null),_not?: (tournament_team_invites_bool_exp | null),_or?: (tournament_team_invites_bool_exp[] | null),created_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),invited_by?: (players_bool_exp | null),invited_by_player_steam_id?: (bigint_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null),team?: (tournament_teams_bool_exp | null),tournament_team_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "tournament_team_invites" */
export interface tournament_team_invites_inc_input {invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "tournament_team_invites" */
export interface tournament_team_invites_insert_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by?: (players_obj_rel_insert_input | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null),team?: (tournament_teams_obj_rel_insert_input | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface tournament_team_invites_max_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_max_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null),tournament_team_id?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_team_invites_min_fieldsGenqlSelection{
    created_at?: boolean | number
    id?: boolean | number
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_min_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null),tournament_team_id?: (order_by | null)}


/** response of any mutation on the table "tournament_team_invites" */
export interface tournament_team_invites_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_team_invitesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "tournament_team_invites" */
export interface tournament_team_invites_on_conflict {constraint: tournament_team_invites_constraint,update_columns?: tournament_team_invites_update_column[],where?: (tournament_team_invites_bool_exp | null)}


/** Ordering options when selecting data from "tournament_team_invites". */
export interface tournament_team_invites_order_by {created_at?: (order_by | null),id?: (order_by | null),invited_by?: (players_order_by | null),invited_by_player_steam_id?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null),team?: (tournament_teams_order_by | null),tournament_team_id?: (order_by | null)}


/** primary key columns input for table: tournament_team_invites */
export interface tournament_team_invites_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "tournament_team_invites" */
export interface tournament_team_invites_set_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface tournament_team_invites_stddev_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_stddev_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_team_invites_stddev_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_stddev_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_team_invites_stddev_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_stddev_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** Streaming cursor of the table "tournament_team_invites" */
export interface tournament_team_invites_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_team_invites_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_team_invites_stream_cursor_value_input {created_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invited_by_player_steam_id?: (Scalars['bigint'] | null),steam_id?: (Scalars['bigint'] | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface tournament_team_invites_sum_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_sum_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}

export interface tournament_team_invites_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_team_invites_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_team_invites_set_input | null),
/** filter the rows which have to be updated */
where: tournament_team_invites_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_team_invites_var_pop_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_var_pop_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_team_invites_var_samp_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_var_samp_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_team_invites_variance_fieldsGenqlSelection{
    invited_by_player_steam_id?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_team_invites" */
export interface tournament_team_invites_variance_order_by {invited_by_player_steam_id?: (order_by | null),steam_id?: (order_by | null)}


/** columns and relationships of "tournament_team_roster" */
export interface tournament_team_rosterGenqlSelection{
    /** An object relationship */
    e_team_role?: e_team_rolesGenqlSelection
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    role?: boolean | number
    /** An object relationship */
    tournament?: tournamentsGenqlSelection
    tournament_id?: boolean | number
    /** An object relationship */
    tournament_team?: tournament_teamsGenqlSelection
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_team_roster" */
export interface tournament_team_roster_aggregateGenqlSelection{
    aggregate?: tournament_team_roster_aggregate_fieldsGenqlSelection
    nodes?: tournament_team_rosterGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_team_roster_aggregate_bool_exp {count?: (tournament_team_roster_aggregate_bool_exp_count | null)}

export interface tournament_team_roster_aggregate_bool_exp_count {arguments?: (tournament_team_roster_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_team_roster_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_team_roster" */
export interface tournament_team_roster_aggregate_fieldsGenqlSelection{
    avg?: tournament_team_roster_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_team_roster_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_team_roster_max_fieldsGenqlSelection
    min?: tournament_team_roster_min_fieldsGenqlSelection
    stddev?: tournament_team_roster_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_team_roster_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_team_roster_stddev_samp_fieldsGenqlSelection
    sum?: tournament_team_roster_sum_fieldsGenqlSelection
    var_pop?: tournament_team_roster_var_pop_fieldsGenqlSelection
    var_samp?: tournament_team_roster_var_samp_fieldsGenqlSelection
    variance?: tournament_team_roster_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_team_roster" */
export interface tournament_team_roster_aggregate_order_by {avg?: (tournament_team_roster_avg_order_by | null),count?: (order_by | null),max?: (tournament_team_roster_max_order_by | null),min?: (tournament_team_roster_min_order_by | null),stddev?: (tournament_team_roster_stddev_order_by | null),stddev_pop?: (tournament_team_roster_stddev_pop_order_by | null),stddev_samp?: (tournament_team_roster_stddev_samp_order_by | null),sum?: (tournament_team_roster_sum_order_by | null),var_pop?: (tournament_team_roster_var_pop_order_by | null),var_samp?: (tournament_team_roster_var_samp_order_by | null),variance?: (tournament_team_roster_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournament_team_roster" */
export interface tournament_team_roster_arr_rel_insert_input {data: tournament_team_roster_insert_input[],
/** upsert condition */
on_conflict?: (tournament_team_roster_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_team_roster_avg_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_avg_order_by {player_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_team_roster". All fields are combined with a logical 'AND'. */
export interface tournament_team_roster_bool_exp {_and?: (tournament_team_roster_bool_exp[] | null),_not?: (tournament_team_roster_bool_exp | null),_or?: (tournament_team_roster_bool_exp[] | null),e_team_role?: (e_team_roles_bool_exp | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),role?: (e_team_roles_enum_comparison_exp | null),tournament?: (tournaments_bool_exp | null),tournament_id?: (uuid_comparison_exp | null),tournament_team?: (tournament_teams_bool_exp | null),tournament_team_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "tournament_team_roster" */
export interface tournament_team_roster_inc_input {player_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "tournament_team_roster" */
export interface tournament_team_roster_insert_input {e_team_role?: (e_team_roles_obj_rel_insert_input | null),player?: (players_obj_rel_insert_input | null),player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),tournament?: (tournaments_obj_rel_insert_input | null),tournament_id?: (Scalars['uuid'] | null),tournament_team?: (tournament_teams_obj_rel_insert_input | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface tournament_team_roster_max_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    tournament_id?: boolean | number
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_max_order_by {player_steam_id?: (order_by | null),tournament_id?: (order_by | null),tournament_team_id?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_team_roster_min_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    tournament_id?: boolean | number
    tournament_team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_min_order_by {player_steam_id?: (order_by | null),tournament_id?: (order_by | null),tournament_team_id?: (order_by | null)}


/** response of any mutation on the table "tournament_team_roster" */
export interface tournament_team_roster_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_team_rosterGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** on_conflict condition type for table "tournament_team_roster" */
export interface tournament_team_roster_on_conflict {constraint: tournament_team_roster_constraint,update_columns?: tournament_team_roster_update_column[],where?: (tournament_team_roster_bool_exp | null)}


/** Ordering options when selecting data from "tournament_team_roster". */
export interface tournament_team_roster_order_by {e_team_role?: (e_team_roles_order_by | null),player?: (players_order_by | null),player_steam_id?: (order_by | null),role?: (order_by | null),tournament?: (tournaments_order_by | null),tournament_id?: (order_by | null),tournament_team?: (tournament_teams_order_by | null),tournament_team_id?: (order_by | null)}


/** primary key columns input for table: tournament_team_roster */
export interface tournament_team_roster_pk_columns_input {player_steam_id: Scalars['bigint'],tournament_id: Scalars['uuid']}


/** input type for updating data in table "tournament_team_roster" */
export interface tournament_team_roster_set_input {player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),tournament_id?: (Scalars['uuid'] | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface tournament_team_roster_stddev_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_stddev_order_by {player_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_team_roster_stddev_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_stddev_pop_order_by {player_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_team_roster_stddev_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_stddev_samp_order_by {player_steam_id?: (order_by | null)}


/** Streaming cursor of the table "tournament_team_roster" */
export interface tournament_team_roster_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_team_roster_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_team_roster_stream_cursor_value_input {player_steam_id?: (Scalars['bigint'] | null),role?: (e_team_roles_enum | null),tournament_id?: (Scalars['uuid'] | null),tournament_team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface tournament_team_roster_sum_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_sum_order_by {player_steam_id?: (order_by | null)}

export interface tournament_team_roster_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_team_roster_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_team_roster_set_input | null),
/** filter the rows which have to be updated */
where: tournament_team_roster_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_team_roster_var_pop_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_var_pop_order_by {player_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_team_roster_var_samp_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_var_samp_order_by {player_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_team_roster_variance_fieldsGenqlSelection{
    player_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_team_roster" */
export interface tournament_team_roster_variance_order_by {player_steam_id?: (order_by | null)}


/** columns and relationships of "tournament_teams" */
export interface tournament_teamsGenqlSelection{
    /** A computed field, executes function "can_manage_tournament_team" */
    can_manage?: boolean | number
    /** An object relationship */
    creator?: playersGenqlSelection
    eligible_at?: boolean | number
    id?: boolean | number
    /** An array relationship */
    invites?: (tournament_team_invitesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    /** An aggregate relationship */
    invites_aggregate?: (tournament_team_invites_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_invites_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_invites_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_invites_bool_exp | null)} })
    name?: boolean | number
    owner_steam_id?: boolean | number
    /** An array relationship */
    roster?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    roster_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    seed?: boolean | number
    /** An object relationship */
    team?: teamsGenqlSelection
    team_id?: boolean | number
    /** An object relationship */
    tournament?: tournamentsGenqlSelection
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournament_teams" */
export interface tournament_teams_aggregateGenqlSelection{
    aggregate?: tournament_teams_aggregate_fieldsGenqlSelection
    nodes?: tournament_teamsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournament_teams_aggregate_bool_exp {count?: (tournament_teams_aggregate_bool_exp_count | null)}

export interface tournament_teams_aggregate_bool_exp_count {arguments?: (tournament_teams_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournament_teams_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournament_teams" */
export interface tournament_teams_aggregate_fieldsGenqlSelection{
    avg?: tournament_teams_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournament_teams_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournament_teams_max_fieldsGenqlSelection
    min?: tournament_teams_min_fieldsGenqlSelection
    stddev?: tournament_teams_stddev_fieldsGenqlSelection
    stddev_pop?: tournament_teams_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournament_teams_stddev_samp_fieldsGenqlSelection
    sum?: tournament_teams_sum_fieldsGenqlSelection
    var_pop?: tournament_teams_var_pop_fieldsGenqlSelection
    var_samp?: tournament_teams_var_samp_fieldsGenqlSelection
    variance?: tournament_teams_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournament_teams" */
export interface tournament_teams_aggregate_order_by {avg?: (tournament_teams_avg_order_by | null),count?: (order_by | null),max?: (tournament_teams_max_order_by | null),min?: (tournament_teams_min_order_by | null),stddev?: (tournament_teams_stddev_order_by | null),stddev_pop?: (tournament_teams_stddev_pop_order_by | null),stddev_samp?: (tournament_teams_stddev_samp_order_by | null),sum?: (tournament_teams_sum_order_by | null),var_pop?: (tournament_teams_var_pop_order_by | null),var_samp?: (tournament_teams_var_samp_order_by | null),variance?: (tournament_teams_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournament_teams" */
export interface tournament_teams_arr_rel_insert_input {data: tournament_teams_insert_input[],
/** upsert condition */
on_conflict?: (tournament_teams_on_conflict | null)}


/** aggregate avg on columns */
export interface tournament_teams_avg_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournament_teams" */
export interface tournament_teams_avg_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'. */
export interface tournament_teams_bool_exp {_and?: (tournament_teams_bool_exp[] | null),_not?: (tournament_teams_bool_exp | null),_or?: (tournament_teams_bool_exp[] | null),can_manage?: (Boolean_comparison_exp | null),creator?: (players_bool_exp | null),eligible_at?: (timestamptz_comparison_exp | null),id?: (uuid_comparison_exp | null),invites?: (tournament_team_invites_bool_exp | null),invites_aggregate?: (tournament_team_invites_aggregate_bool_exp | null),name?: (String_comparison_exp | null),owner_steam_id?: (bigint_comparison_exp | null),roster?: (tournament_team_roster_bool_exp | null),roster_aggregate?: (tournament_team_roster_aggregate_bool_exp | null),seed?: (Int_comparison_exp | null),team?: (teams_bool_exp | null),team_id?: (uuid_comparison_exp | null),tournament?: (tournaments_bool_exp | null),tournament_id?: (uuid_comparison_exp | null)}


/** input type for incrementing numeric columns in table "tournament_teams" */
export interface tournament_teams_inc_input {owner_steam_id?: (Scalars['bigint'] | null),seed?: (Scalars['Int'] | null)}


/** input type for inserting data into table "tournament_teams" */
export interface tournament_teams_insert_input {creator?: (players_obj_rel_insert_input | null),eligible_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),invites?: (tournament_team_invites_arr_rel_insert_input | null),name?: (Scalars['String'] | null),owner_steam_id?: (Scalars['bigint'] | null),roster?: (tournament_team_roster_arr_rel_insert_input | null),seed?: (Scalars['Int'] | null),team?: (teams_obj_rel_insert_input | null),team_id?: (Scalars['uuid'] | null),tournament?: (tournaments_obj_rel_insert_input | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface tournament_teams_max_fieldsGenqlSelection{
    eligible_at?: boolean | number
    id?: boolean | number
    name?: boolean | number
    owner_steam_id?: boolean | number
    seed?: boolean | number
    team_id?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournament_teams" */
export interface tournament_teams_max_order_by {eligible_at?: (order_by | null),id?: (order_by | null),name?: (order_by | null),owner_steam_id?: (order_by | null),seed?: (order_by | null),team_id?: (order_by | null),tournament_id?: (order_by | null)}


/** aggregate min on columns */
export interface tournament_teams_min_fieldsGenqlSelection{
    eligible_at?: boolean | number
    id?: boolean | number
    name?: boolean | number
    owner_steam_id?: boolean | number
    seed?: boolean | number
    team_id?: boolean | number
    tournament_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournament_teams" */
export interface tournament_teams_min_order_by {eligible_at?: (order_by | null),id?: (order_by | null),name?: (order_by | null),owner_steam_id?: (order_by | null),seed?: (order_by | null),team_id?: (order_by | null),tournament_id?: (order_by | null)}


/** response of any mutation on the table "tournament_teams" */
export interface tournament_teams_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournament_teamsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "tournament_teams" */
export interface tournament_teams_obj_rel_insert_input {data: tournament_teams_insert_input,
/** upsert condition */
on_conflict?: (tournament_teams_on_conflict | null)}


/** on_conflict condition type for table "tournament_teams" */
export interface tournament_teams_on_conflict {constraint: tournament_teams_constraint,update_columns?: tournament_teams_update_column[],where?: (tournament_teams_bool_exp | null)}


/** Ordering options when selecting data from "tournament_teams". */
export interface tournament_teams_order_by {can_manage?: (order_by | null),creator?: (players_order_by | null),eligible_at?: (order_by | null),id?: (order_by | null),invites_aggregate?: (tournament_team_invites_aggregate_order_by | null),name?: (order_by | null),owner_steam_id?: (order_by | null),roster_aggregate?: (tournament_team_roster_aggregate_order_by | null),seed?: (order_by | null),team?: (teams_order_by | null),team_id?: (order_by | null),tournament?: (tournaments_order_by | null),tournament_id?: (order_by | null)}


/** primary key columns input for table: tournament_teams */
export interface tournament_teams_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "tournament_teams" */
export interface tournament_teams_set_input {eligible_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),owner_steam_id?: (Scalars['bigint'] | null),seed?: (Scalars['Int'] | null),team_id?: (Scalars['uuid'] | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate stddev on columns */
export interface tournament_teams_stddev_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournament_teams" */
export interface tournament_teams_stddev_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournament_teams_stddev_pop_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournament_teams" */
export interface tournament_teams_stddev_pop_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournament_teams_stddev_samp_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournament_teams" */
export interface tournament_teams_stddev_samp_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** Streaming cursor of the table "tournament_teams" */
export interface tournament_teams_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournament_teams_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournament_teams_stream_cursor_value_input {eligible_at?: (Scalars['timestamptz'] | null),id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),owner_steam_id?: (Scalars['bigint'] | null),seed?: (Scalars['Int'] | null),team_id?: (Scalars['uuid'] | null),tournament_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface tournament_teams_sum_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournament_teams" */
export interface tournament_teams_sum_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}

export interface tournament_teams_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournament_teams_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournament_teams_set_input | null),
/** filter the rows which have to be updated */
where: tournament_teams_bool_exp}


/** aggregate var_pop on columns */
export interface tournament_teams_var_pop_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournament_teams" */
export interface tournament_teams_var_pop_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournament_teams_var_samp_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournament_teams" */
export interface tournament_teams_var_samp_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** aggregate variance on columns */
export interface tournament_teams_variance_fieldsGenqlSelection{
    owner_steam_id?: boolean | number
    seed?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournament_teams" */
export interface tournament_teams_variance_order_by {owner_steam_id?: (order_by | null),seed?: (order_by | null)}


/** columns and relationships of "tournaments" */
export interface tournamentsGenqlSelection{
    /** An object relationship */
    admin?: playersGenqlSelection
    /** A computed field, executes function "can_cancel_tournament" */
    can_cancel?: boolean | number
    /** A computed field, executes function "can_close_tournament_registration" */
    can_close_registration?: boolean | number
    /** A computed field, executes function "can_join_tournament" */
    can_join?: boolean | number
    /** A computed field, executes function "can_open_tournament_registration" */
    can_open_registration?: boolean | number
    description?: boolean | number
    /** An object relationship */
    e_tournament_status?: e_tournament_statusGenqlSelection
    /** A computed field, executes function "tournament_has_min_teams" */
    has_min_teams?: boolean | number
    id?: boolean | number
    /** A computed field, executes function "is_tournament_organizer" */
    is_organizer?: boolean | number
    match_options_id?: boolean | number
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    name?: boolean | number
    /** An object relationship */
    options?: match_optionsGenqlSelection
    organizer_steam_id?: boolean | number
    /** An array relationship */
    organizers?: (tournament_organizersGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An aggregate relationship */
    organizers_aggregate?: (tournament_organizers_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_organizers_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_organizers_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_organizers_bool_exp | null)} })
    /** An array relationship */
    rosters?: (tournament_team_rosterGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An aggregate relationship */
    rosters_aggregate?: (tournament_team_roster_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_team_roster_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_team_roster_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_team_roster_bool_exp | null)} })
    /** An array relationship */
    stages?: (tournament_stagesGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    /** An aggregate relationship */
    stages_aggregate?: (tournament_stages_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_stages_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_stages_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_stages_bool_exp | null)} })
    start?: boolean | number
    status?: boolean | number
    /** An array relationship */
    teams?: (tournament_teamsGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    /** An aggregate relationship */
    teams_aggregate?: (tournament_teams_aggregateGenqlSelection & { __args?: {
    /** distinct select on columns */
    distinct_on?: (tournament_teams_select_column[] | null), 
    /** limit the number of rows returned */
    limit?: (Scalars['Int'] | null), 
    /** skip the first n rows. Use only with order_by */
    offset?: (Scalars['Int'] | null), 
    /** sort the rows by one or more columns */
    order_by?: (tournament_teams_order_by[] | null), 
    /** filter the rows returned */
    where?: (tournament_teams_bool_exp | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "tournaments" */
export interface tournaments_aggregateGenqlSelection{
    aggregate?: tournaments_aggregate_fieldsGenqlSelection
    nodes?: tournamentsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface tournaments_aggregate_bool_exp {count?: (tournaments_aggregate_bool_exp_count | null)}

export interface tournaments_aggregate_bool_exp_count {arguments?: (tournaments_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (tournaments_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "tournaments" */
export interface tournaments_aggregate_fieldsGenqlSelection{
    avg?: tournaments_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (tournaments_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: tournaments_max_fieldsGenqlSelection
    min?: tournaments_min_fieldsGenqlSelection
    stddev?: tournaments_stddev_fieldsGenqlSelection
    stddev_pop?: tournaments_stddev_pop_fieldsGenqlSelection
    stddev_samp?: tournaments_stddev_samp_fieldsGenqlSelection
    sum?: tournaments_sum_fieldsGenqlSelection
    var_pop?: tournaments_var_pop_fieldsGenqlSelection
    var_samp?: tournaments_var_samp_fieldsGenqlSelection
    variance?: tournaments_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "tournaments" */
export interface tournaments_aggregate_order_by {avg?: (tournaments_avg_order_by | null),count?: (order_by | null),max?: (tournaments_max_order_by | null),min?: (tournaments_min_order_by | null),stddev?: (tournaments_stddev_order_by | null),stddev_pop?: (tournaments_stddev_pop_order_by | null),stddev_samp?: (tournaments_stddev_samp_order_by | null),sum?: (tournaments_sum_order_by | null),var_pop?: (tournaments_var_pop_order_by | null),var_samp?: (tournaments_var_samp_order_by | null),variance?: (tournaments_variance_order_by | null)}


/** input type for inserting array relation for remote table "tournaments" */
export interface tournaments_arr_rel_insert_input {data: tournaments_insert_input[],
/** upsert condition */
on_conflict?: (tournaments_on_conflict | null)}


/** aggregate avg on columns */
export interface tournaments_avg_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "tournaments" */
export interface tournaments_avg_order_by {organizer_steam_id?: (order_by | null)}


/** Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'. */
export interface tournaments_bool_exp {_and?: (tournaments_bool_exp[] | null),_not?: (tournaments_bool_exp | null),_or?: (tournaments_bool_exp[] | null),admin?: (players_bool_exp | null),can_cancel?: (Boolean_comparison_exp | null),can_close_registration?: (Boolean_comparison_exp | null),can_join?: (Boolean_comparison_exp | null),can_open_registration?: (Boolean_comparison_exp | null),description?: (String_comparison_exp | null),e_tournament_status?: (e_tournament_status_bool_exp | null),has_min_teams?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),is_organizer?: (Boolean_comparison_exp | null),match_options_id?: (uuid_comparison_exp | null),max_players_per_lineup?: (Int_comparison_exp | null),min_players_per_lineup?: (Int_comparison_exp | null),name?: (String_comparison_exp | null),options?: (match_options_bool_exp | null),organizer_steam_id?: (bigint_comparison_exp | null),organizers?: (tournament_organizers_bool_exp | null),organizers_aggregate?: (tournament_organizers_aggregate_bool_exp | null),rosters?: (tournament_team_roster_bool_exp | null),rosters_aggregate?: (tournament_team_roster_aggregate_bool_exp | null),stages?: (tournament_stages_bool_exp | null),stages_aggregate?: (tournament_stages_aggregate_bool_exp | null),start?: (timestamptz_comparison_exp | null),status?: (e_tournament_status_enum_comparison_exp | null),teams?: (tournament_teams_bool_exp | null),teams_aggregate?: (tournament_teams_aggregate_bool_exp | null)}


/** input type for incrementing numeric columns in table "tournaments" */
export interface tournaments_inc_input {organizer_steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "tournaments" */
export interface tournaments_insert_input {admin?: (players_obj_rel_insert_input | null),description?: (Scalars['String'] | null),e_tournament_status?: (e_tournament_status_obj_rel_insert_input | null),id?: (Scalars['uuid'] | null),match_options_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),options?: (match_options_obj_rel_insert_input | null),organizer_steam_id?: (Scalars['bigint'] | null),organizers?: (tournament_organizers_arr_rel_insert_input | null),rosters?: (tournament_team_roster_arr_rel_insert_input | null),stages?: (tournament_stages_arr_rel_insert_input | null),start?: (Scalars['timestamptz'] | null),status?: (e_tournament_status_enum | null),teams?: (tournament_teams_arr_rel_insert_input | null)}


/** aggregate max on columns */
export interface tournaments_max_fieldsGenqlSelection{
    description?: boolean | number
    id?: boolean | number
    match_options_id?: boolean | number
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    name?: boolean | number
    organizer_steam_id?: boolean | number
    start?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "tournaments" */
export interface tournaments_max_order_by {description?: (order_by | null),id?: (order_by | null),match_options_id?: (order_by | null),name?: (order_by | null),organizer_steam_id?: (order_by | null),start?: (order_by | null)}


/** aggregate min on columns */
export interface tournaments_min_fieldsGenqlSelection{
    description?: boolean | number
    id?: boolean | number
    match_options_id?: boolean | number
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    name?: boolean | number
    organizer_steam_id?: boolean | number
    start?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "tournaments" */
export interface tournaments_min_order_by {description?: (order_by | null),id?: (order_by | null),match_options_id?: (order_by | null),name?: (order_by | null),organizer_steam_id?: (order_by | null),start?: (order_by | null)}


/** response of any mutation on the table "tournaments" */
export interface tournaments_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: tournamentsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "tournaments" */
export interface tournaments_obj_rel_insert_input {data: tournaments_insert_input,
/** upsert condition */
on_conflict?: (tournaments_on_conflict | null)}


/** on_conflict condition type for table "tournaments" */
export interface tournaments_on_conflict {constraint: tournaments_constraint,update_columns?: tournaments_update_column[],where?: (tournaments_bool_exp | null)}


/** Ordering options when selecting data from "tournaments". */
export interface tournaments_order_by {admin?: (players_order_by | null),can_cancel?: (order_by | null),can_close_registration?: (order_by | null),can_join?: (order_by | null),can_open_registration?: (order_by | null),description?: (order_by | null),e_tournament_status?: (e_tournament_status_order_by | null),has_min_teams?: (order_by | null),id?: (order_by | null),is_organizer?: (order_by | null),match_options_id?: (order_by | null),max_players_per_lineup?: (order_by | null),min_players_per_lineup?: (order_by | null),name?: (order_by | null),options?: (match_options_order_by | null),organizer_steam_id?: (order_by | null),organizers_aggregate?: (tournament_organizers_aggregate_order_by | null),rosters_aggregate?: (tournament_team_roster_aggregate_order_by | null),stages_aggregate?: (tournament_stages_aggregate_order_by | null),start?: (order_by | null),status?: (order_by | null),teams_aggregate?: (tournament_teams_aggregate_order_by | null)}


/** primary key columns input for table: tournaments */
export interface tournaments_pk_columns_input {id: Scalars['uuid']}


/** input type for updating data in table "tournaments" */
export interface tournaments_set_input {description?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_options_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),organizer_steam_id?: (Scalars['bigint'] | null),start?: (Scalars['timestamptz'] | null),status?: (e_tournament_status_enum | null)}


/** aggregate stddev on columns */
export interface tournaments_stddev_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "tournaments" */
export interface tournaments_stddev_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface tournaments_stddev_pop_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "tournaments" */
export interface tournaments_stddev_pop_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface tournaments_stddev_samp_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "tournaments" */
export interface tournaments_stddev_samp_order_by {organizer_steam_id?: (order_by | null)}


/** Streaming cursor of the table "tournaments" */
export interface tournaments_stream_cursor_input {
/** Stream column input with initial value */
initial_value: tournaments_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface tournaments_stream_cursor_value_input {description?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_options_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),organizer_steam_id?: (Scalars['bigint'] | null),start?: (Scalars['timestamptz'] | null),status?: (e_tournament_status_enum | null)}


/** aggregate sum on columns */
export interface tournaments_sum_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "tournaments" */
export interface tournaments_sum_order_by {organizer_steam_id?: (order_by | null)}

export interface tournaments_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (tournaments_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (tournaments_set_input | null),
/** filter the rows which have to be updated */
where: tournaments_bool_exp}


/** aggregate var_pop on columns */
export interface tournaments_var_pop_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "tournaments" */
export interface tournaments_var_pop_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate var_samp on columns */
export interface tournaments_var_samp_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "tournaments" */
export interface tournaments_var_samp_order_by {organizer_steam_id?: (order_by | null)}


/** aggregate variance on columns */
export interface tournaments_variance_fieldsGenqlSelection{
    /** A computed field, executes function "tournament_max_players_per_lineup" */
    max_players_per_lineup?: boolean | number
    /** A computed field, executes function "tournament_min_players_per_lineup" */
    min_players_per_lineup?: boolean | number
    organizer_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "tournaments" */
export interface tournaments_variance_order_by {organizer_steam_id?: (order_by | null)}


/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export interface uuid_comparison_exp {_eq?: (Scalars['uuid'] | null),_gt?: (Scalars['uuid'] | null),_gte?: (Scalars['uuid'] | null),_in?: (Scalars['uuid'][] | null),_is_null?: (Scalars['Boolean'] | null),_lt?: (Scalars['uuid'] | null),_lte?: (Scalars['uuid'] | null),_neq?: (Scalars['uuid'] | null),_nin?: (Scalars['uuid'][] | null)}


/** columns and relationships of "v_match_captains" */
export interface v_match_captainsGenqlSelection{
    captain?: boolean | number
    discord_id?: boolean | number
    id?: boolean | number
    /** An object relationship */
    lineup?: match_lineupsGenqlSelection
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_match_captains" */
export interface v_match_captains_aggregateGenqlSelection{
    aggregate?: v_match_captains_aggregate_fieldsGenqlSelection
    nodes?: v_match_captainsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_match_captains" */
export interface v_match_captains_aggregate_fieldsGenqlSelection{
    avg?: v_match_captains_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_match_captains_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_match_captains_max_fieldsGenqlSelection
    min?: v_match_captains_min_fieldsGenqlSelection
    stddev?: v_match_captains_stddev_fieldsGenqlSelection
    stddev_pop?: v_match_captains_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_match_captains_stddev_samp_fieldsGenqlSelection
    sum?: v_match_captains_sum_fieldsGenqlSelection
    var_pop?: v_match_captains_var_pop_fieldsGenqlSelection
    var_samp?: v_match_captains_var_samp_fieldsGenqlSelection
    variance?: v_match_captains_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_match_captains_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'. */
export interface v_match_captains_bool_exp {_and?: (v_match_captains_bool_exp[] | null),_not?: (v_match_captains_bool_exp | null),_or?: (v_match_captains_bool_exp[] | null),captain?: (Boolean_comparison_exp | null),discord_id?: (String_comparison_exp | null),id?: (uuid_comparison_exp | null),lineup?: (match_lineups_bool_exp | null),match_lineup_id?: (uuid_comparison_exp | null),placeholder_name?: (String_comparison_exp | null),player?: (players_bool_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** input type for incrementing numeric columns in table "v_match_captains" */
export interface v_match_captains_inc_input {steam_id?: (Scalars['bigint'] | null)}


/** input type for inserting data into table "v_match_captains" */
export interface v_match_captains_insert_input {captain?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),lineup?: (match_lineups_obj_rel_insert_input | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),player?: (players_obj_rel_insert_input | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate max on columns */
export interface v_match_captains_max_fieldsGenqlSelection{
    discord_id?: boolean | number
    id?: boolean | number
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_match_captains_min_fieldsGenqlSelection{
    discord_id?: boolean | number
    id?: boolean | number
    match_lineup_id?: boolean | number
    placeholder_name?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** response of any mutation on the table "v_match_captains" */
export interface v_match_captains_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: v_match_captainsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "v_match_captains" */
export interface v_match_captains_obj_rel_insert_input {data: v_match_captains_insert_input}


/** Ordering options when selecting data from "v_match_captains". */
export interface v_match_captains_order_by {captain?: (order_by | null),discord_id?: (order_by | null),id?: (order_by | null),lineup?: (match_lineups_order_by | null),match_lineup_id?: (order_by | null),placeholder_name?: (order_by | null),player?: (players_order_by | null),steam_id?: (order_by | null)}


/** input type for updating data in table "v_match_captains" */
export interface v_match_captains_set_input {captain?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate stddev on columns */
export interface v_match_captains_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_match_captains_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_match_captains_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_match_captains" */
export interface v_match_captains_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_match_captains_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_match_captains_stream_cursor_value_input {captain?: (Scalars['Boolean'] | null),discord_id?: (Scalars['String'] | null),id?: (Scalars['uuid'] | null),match_lineup_id?: (Scalars['uuid'] | null),placeholder_name?: (Scalars['String'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface v_match_captains_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface v_match_captains_updates {
/** increments the numeric columns with given value of the filtered values */
_inc?: (v_match_captains_inc_input | null),
/** sets the columns of the filtered rows to the given values */
_set?: (v_match_captains_set_input | null),
/** filter the rows which have to be updated */
where: v_match_captains_bool_exp}


/** aggregate var_pop on columns */
export interface v_match_captains_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_match_captains_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_match_captains_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_match_lineups" */
export interface v_match_lineupsGenqlSelection{
    coach_steam_id?: boolean | number
    id?: boolean | number
    /** An object relationship */
    lineup?: match_lineupsGenqlSelection
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_match_lineups" */
export interface v_match_lineups_aggregateGenqlSelection{
    aggregate?: v_match_lineups_aggregate_fieldsGenqlSelection
    nodes?: v_match_lineupsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_match_lineups" */
export interface v_match_lineups_aggregate_fieldsGenqlSelection{
    avg?: v_match_lineups_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_match_lineups_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_match_lineups_max_fieldsGenqlSelection
    min?: v_match_lineups_min_fieldsGenqlSelection
    stddev?: v_match_lineups_stddev_fieldsGenqlSelection
    stddev_pop?: v_match_lineups_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_match_lineups_stddev_samp_fieldsGenqlSelection
    sum?: v_match_lineups_sum_fieldsGenqlSelection
    var_pop?: v_match_lineups_var_pop_fieldsGenqlSelection
    var_samp?: v_match_lineups_var_samp_fieldsGenqlSelection
    variance?: v_match_lineups_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_match_lineups_avg_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_match_lineups". All fields are combined with a logical 'AND'. */
export interface v_match_lineups_bool_exp {_and?: (v_match_lineups_bool_exp[] | null),_not?: (v_match_lineups_bool_exp | null),_or?: (v_match_lineups_bool_exp[] | null),coach_steam_id?: (bigint_comparison_exp | null),id?: (uuid_comparison_exp | null),lineup?: (match_lineups_bool_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),team_id?: (uuid_comparison_exp | null)}


/** input type for inserting data into table "v_match_lineups" */
export interface v_match_lineups_insert_input {coach_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),lineup?: (match_lineups_obj_rel_insert_input | null),match?: (matches_obj_rel_insert_input | null),match_id?: (Scalars['uuid'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate max on columns */
export interface v_match_lineups_max_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_match_lineups_min_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    id?: boolean | number
    match_id?: boolean | number
    team_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** input type for inserting object relation for remote table "v_match_lineups" */
export interface v_match_lineups_obj_rel_insert_input {data: v_match_lineups_insert_input}


/** Ordering options when selecting data from "v_match_lineups". */
export interface v_match_lineups_order_by {coach_steam_id?: (order_by | null),id?: (order_by | null),lineup?: (match_lineups_order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),team_id?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_match_lineups_stddev_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_match_lineups_stddev_pop_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_match_lineups_stddev_samp_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_match_lineups" */
export interface v_match_lineups_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_match_lineups_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_match_lineups_stream_cursor_value_input {coach_steam_id?: (Scalars['bigint'] | null),id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),team_id?: (Scalars['uuid'] | null)}


/** aggregate sum on columns */
export interface v_match_lineups_sum_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_match_lineups_var_pop_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_match_lineups_var_samp_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_match_lineups_variance_fieldsGenqlSelection{
    coach_steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_arch_nemesis" */
export interface v_player_arch_nemesisGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    /** An object relationship */
    nemsis?: playersGenqlSelection
    /** An object relationship */
    player?: playersGenqlSelection
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_arch_nemesis" */
export interface v_player_arch_nemesis_aggregateGenqlSelection{
    aggregate?: v_player_arch_nemesis_aggregate_fieldsGenqlSelection
    nodes?: v_player_arch_nemesisGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_player_arch_nemesis" */
export interface v_player_arch_nemesis_aggregate_fieldsGenqlSelection{
    avg?: v_player_arch_nemesis_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_arch_nemesis_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_arch_nemesis_max_fieldsGenqlSelection
    min?: v_player_arch_nemesis_min_fieldsGenqlSelection
    stddev?: v_player_arch_nemesis_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_arch_nemesis_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_arch_nemesis_stddev_samp_fieldsGenqlSelection
    sum?: v_player_arch_nemesis_sum_fieldsGenqlSelection
    var_pop?: v_player_arch_nemesis_var_pop_fieldsGenqlSelection
    var_samp?: v_player_arch_nemesis_var_samp_fieldsGenqlSelection
    variance?: v_player_arch_nemesis_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_player_arch_nemesis_avg_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'. */
export interface v_player_arch_nemesis_bool_exp {_and?: (v_player_arch_nemesis_bool_exp[] | null),_not?: (v_player_arch_nemesis_bool_exp | null),_or?: (v_player_arch_nemesis_bool_exp[] | null),attacker_id?: (bigint_comparison_exp | null),kill_count?: (bigint_comparison_exp | null),nemsis?: (players_bool_exp | null),player?: (players_bool_exp | null),victim_id?: (bigint_comparison_exp | null)}


/** aggregate max on columns */
export interface v_player_arch_nemesis_max_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_player_arch_nemesis_min_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_player_arch_nemesis". */
export interface v_player_arch_nemesis_order_by {attacker_id?: (order_by | null),kill_count?: (order_by | null),nemsis?: (players_order_by | null),player?: (players_order_by | null),victim_id?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_arch_nemesis_stddev_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_player_arch_nemesis_stddev_pop_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_player_arch_nemesis_stddev_samp_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_player_arch_nemesis" */
export interface v_player_arch_nemesis_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_arch_nemesis_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_arch_nemesis_stream_cursor_value_input {attacker_id?: (Scalars['bigint'] | null),kill_count?: (Scalars['bigint'] | null),victim_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface v_player_arch_nemesis_sum_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_player_arch_nemesis_var_pop_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_player_arch_nemesis_var_samp_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_player_arch_nemesis_variance_fieldsGenqlSelection{
    attacker_id?: boolean | number
    kill_count?: boolean | number
    victim_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_damage" */
export interface v_player_damageGenqlSelection{
    avg_damage_per_round?: boolean | number
    /** An object relationship */
    player?: playersGenqlSelection
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_damage" */
export interface v_player_damage_aggregateGenqlSelection{
    aggregate?: v_player_damage_aggregate_fieldsGenqlSelection
    nodes?: v_player_damageGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_player_damage" */
export interface v_player_damage_aggregate_fieldsGenqlSelection{
    avg?: v_player_damage_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_damage_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_damage_max_fieldsGenqlSelection
    min?: v_player_damage_min_fieldsGenqlSelection
    stddev?: v_player_damage_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_damage_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_damage_stddev_samp_fieldsGenqlSelection
    sum?: v_player_damage_sum_fieldsGenqlSelection
    var_pop?: v_player_damage_var_pop_fieldsGenqlSelection
    var_samp?: v_player_damage_var_samp_fieldsGenqlSelection
    variance?: v_player_damage_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_player_damage_avg_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'. */
export interface v_player_damage_bool_exp {_and?: (v_player_damage_bool_exp[] | null),_not?: (v_player_damage_bool_exp | null),_or?: (v_player_damage_bool_exp[] | null),avg_damage_per_round?: (bigint_comparison_exp | null),player?: (players_bool_exp | null),player_steam_id?: (bigint_comparison_exp | null),total_damage?: (bigint_comparison_exp | null),total_rounds?: (bigint_comparison_exp | null)}


/** aggregate max on columns */
export interface v_player_damage_max_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_player_damage_min_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_player_damage". */
export interface v_player_damage_order_by {avg_damage_per_round?: (order_by | null),player?: (players_order_by | null),player_steam_id?: (order_by | null),total_damage?: (order_by | null),total_rounds?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_damage_stddev_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_player_damage_stddev_pop_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_player_damage_stddev_samp_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_player_damage" */
export interface v_player_damage_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_damage_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_damage_stream_cursor_value_input {avg_damage_per_round?: (Scalars['bigint'] | null),player_steam_id?: (Scalars['bigint'] | null),total_damage?: (Scalars['bigint'] | null),total_rounds?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface v_player_damage_sum_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_player_damage_var_pop_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_player_damage_var_samp_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_player_damage_variance_fieldsGenqlSelection{
    avg_damage_per_round?: boolean | number
    player_steam_id?: boolean | number
    total_damage?: boolean | number
    total_rounds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_elo" */
export interface v_player_eloGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    match_created_at?: boolean | number
    match_id?: boolean | number
    match_result?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_name?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_elo" */
export interface v_player_elo_aggregateGenqlSelection{
    aggregate?: v_player_elo_aggregate_fieldsGenqlSelection
    nodes?: v_player_eloGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_player_elo" */
export interface v_player_elo_aggregate_fieldsGenqlSelection{
    avg?: v_player_elo_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_elo_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_elo_max_fieldsGenqlSelection
    min?: v_player_elo_min_fieldsGenqlSelection
    stddev?: v_player_elo_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_elo_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_elo_stddev_samp_fieldsGenqlSelection
    sum?: v_player_elo_sum_fieldsGenqlSelection
    var_pop?: v_player_elo_var_pop_fieldsGenqlSelection
    var_samp?: v_player_elo_var_samp_fieldsGenqlSelection
    variance?: v_player_elo_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_player_elo_avg_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_player_elo". All fields are combined with a logical 'AND'. */
export interface v_player_elo_bool_exp {_and?: (v_player_elo_bool_exp[] | null),_not?: (v_player_elo_bool_exp | null),_or?: (v_player_elo_bool_exp[] | null),actual_score?: (float8_comparison_exp | null),assists?: (Int_comparison_exp | null),current_elo?: (Int_comparison_exp | null),damage?: (Int_comparison_exp | null),damage_percent?: (float8_comparison_exp | null),deaths?: (Int_comparison_exp | null),elo_change?: (Int_comparison_exp | null),expected_score?: (float8_comparison_exp | null),k_factor?: (Int_comparison_exp | null),kda?: (float8_comparison_exp | null),kills?: (Int_comparison_exp | null),match_created_at?: (timestamptz_comparison_exp | null),match_id?: (uuid_comparison_exp | null),match_result?: (String_comparison_exp | null),opponent_team_elo_avg?: (float8_comparison_exp | null),performance_multiplier?: (float8_comparison_exp | null),player_name?: (String_comparison_exp | null),player_steam_id?: (bigint_comparison_exp | null),player_team_elo_avg?: (float8_comparison_exp | null),team_avg_kda?: (float8_comparison_exp | null),updated_elo?: (Int_comparison_exp | null)}


/** aggregate max on columns */
export interface v_player_elo_max_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    match_created_at?: boolean | number
    match_id?: boolean | number
    match_result?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_name?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_player_elo_min_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    match_created_at?: boolean | number
    match_id?: boolean | number
    match_result?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_name?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_player_elo". */
export interface v_player_elo_order_by {actual_score?: (order_by | null),assists?: (order_by | null),current_elo?: (order_by | null),damage?: (order_by | null),damage_percent?: (order_by | null),deaths?: (order_by | null),elo_change?: (order_by | null),expected_score?: (order_by | null),k_factor?: (order_by | null),kda?: (order_by | null),kills?: (order_by | null),match_created_at?: (order_by | null),match_id?: (order_by | null),match_result?: (order_by | null),opponent_team_elo_avg?: (order_by | null),performance_multiplier?: (order_by | null),player_name?: (order_by | null),player_steam_id?: (order_by | null),player_team_elo_avg?: (order_by | null),team_avg_kda?: (order_by | null),updated_elo?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_elo_stddev_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_player_elo_stddev_pop_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_player_elo_stddev_samp_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_player_elo" */
export interface v_player_elo_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_elo_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_elo_stream_cursor_value_input {actual_score?: (Scalars['float8'] | null),assists?: (Scalars['Int'] | null),current_elo?: (Scalars['Int'] | null),damage?: (Scalars['Int'] | null),damage_percent?: (Scalars['float8'] | null),deaths?: (Scalars['Int'] | null),elo_change?: (Scalars['Int'] | null),expected_score?: (Scalars['float8'] | null),k_factor?: (Scalars['Int'] | null),kda?: (Scalars['float8'] | null),kills?: (Scalars['Int'] | null),match_created_at?: (Scalars['timestamptz'] | null),match_id?: (Scalars['uuid'] | null),match_result?: (Scalars['String'] | null),opponent_team_elo_avg?: (Scalars['float8'] | null),performance_multiplier?: (Scalars['float8'] | null),player_name?: (Scalars['String'] | null),player_steam_id?: (Scalars['bigint'] | null),player_team_elo_avg?: (Scalars['float8'] | null),team_avg_kda?: (Scalars['float8'] | null),updated_elo?: (Scalars['Int'] | null)}


/** aggregate sum on columns */
export interface v_player_elo_sum_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_player_elo_var_pop_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_player_elo_var_samp_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_player_elo_variance_fieldsGenqlSelection{
    actual_score?: boolean | number
    assists?: boolean | number
    current_elo?: boolean | number
    damage?: boolean | number
    damage_percent?: boolean | number
    deaths?: boolean | number
    elo_change?: boolean | number
    expected_score?: boolean | number
    k_factor?: boolean | number
    kda?: boolean | number
    kills?: boolean | number
    opponent_team_elo_avg?: boolean | number
    performance_multiplier?: boolean | number
    player_steam_id?: boolean | number
    player_team_elo_avg?: boolean | number
    team_avg_kda?: boolean | number
    updated_elo?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_map_losses" */
export interface v_player_map_lossesGenqlSelection{
    /** An object relationship */
    map?: mapsGenqlSelection
    map_id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_map_losses" */
export interface v_player_map_losses_aggregateGenqlSelection{
    aggregate?: v_player_map_losses_aggregate_fieldsGenqlSelection
    nodes?: v_player_map_lossesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_player_map_losses" */
export interface v_player_map_losses_aggregate_fieldsGenqlSelection{
    avg?: v_player_map_losses_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_map_losses_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_map_losses_max_fieldsGenqlSelection
    min?: v_player_map_losses_min_fieldsGenqlSelection
    stddev?: v_player_map_losses_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_map_losses_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_map_losses_stddev_samp_fieldsGenqlSelection
    sum?: v_player_map_losses_sum_fieldsGenqlSelection
    var_pop?: v_player_map_losses_var_pop_fieldsGenqlSelection
    var_samp?: v_player_map_losses_var_samp_fieldsGenqlSelection
    variance?: v_player_map_losses_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_player_map_losses_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_player_map_losses". All fields are combined with a logical 'AND'. */
export interface v_player_map_losses_bool_exp {_and?: (v_player_map_losses_bool_exp[] | null),_not?: (v_player_map_losses_bool_exp | null),_or?: (v_player_map_losses_bool_exp[] | null),map?: (maps_bool_exp | null),map_id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),started_at?: (timestamptz_comparison_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** aggregate max on columns */
export interface v_player_map_losses_max_fieldsGenqlSelection{
    map_id?: boolean | number
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_player_map_losses_min_fieldsGenqlSelection{
    map_id?: boolean | number
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_player_map_losses". */
export interface v_player_map_losses_order_by {map?: (maps_order_by | null),map_id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),started_at?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_map_losses_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_player_map_losses_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_player_map_losses_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_player_map_losses" */
export interface v_player_map_losses_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_map_losses_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_map_losses_stream_cursor_value_input {map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),started_at?: (Scalars['timestamptz'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface v_player_map_losses_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_player_map_losses_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_player_map_losses_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_player_map_losses_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_map_wins" */
export interface v_player_map_winsGenqlSelection{
    /** An object relationship */
    map?: mapsGenqlSelection
    map_id?: boolean | number
    /** An object relationship */
    match?: matchesGenqlSelection
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_map_wins" */
export interface v_player_map_wins_aggregateGenqlSelection{
    aggregate?: v_player_map_wins_aggregate_fieldsGenqlSelection
    nodes?: v_player_map_winsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate fields of "v_player_map_wins" */
export interface v_player_map_wins_aggregate_fieldsGenqlSelection{
    avg?: v_player_map_wins_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_map_wins_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_map_wins_max_fieldsGenqlSelection
    min?: v_player_map_wins_min_fieldsGenqlSelection
    stddev?: v_player_map_wins_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_map_wins_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_map_wins_stddev_samp_fieldsGenqlSelection
    sum?: v_player_map_wins_sum_fieldsGenqlSelection
    var_pop?: v_player_map_wins_var_pop_fieldsGenqlSelection
    var_samp?: v_player_map_wins_var_samp_fieldsGenqlSelection
    variance?: v_player_map_wins_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate avg on columns */
export interface v_player_map_wins_avg_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Boolean expression to filter rows from the table "v_player_map_wins". All fields are combined with a logical 'AND'. */
export interface v_player_map_wins_bool_exp {_and?: (v_player_map_wins_bool_exp[] | null),_not?: (v_player_map_wins_bool_exp | null),_or?: (v_player_map_wins_bool_exp[] | null),map?: (maps_bool_exp | null),map_id?: (uuid_comparison_exp | null),match?: (matches_bool_exp | null),match_id?: (uuid_comparison_exp | null),started_at?: (timestamptz_comparison_exp | null),steam_id?: (bigint_comparison_exp | null)}


/** aggregate max on columns */
export interface v_player_map_wins_max_fieldsGenqlSelection{
    map_id?: boolean | number
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate min on columns */
export interface v_player_map_wins_min_fieldsGenqlSelection{
    map_id?: boolean | number
    match_id?: boolean | number
    started_at?: boolean | number
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_player_map_wins". */
export interface v_player_map_wins_order_by {map?: (maps_order_by | null),map_id?: (order_by | null),match?: (matches_order_by | null),match_id?: (order_by | null),started_at?: (order_by | null),steam_id?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_map_wins_stddev_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_pop on columns */
export interface v_player_map_wins_stddev_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate stddev_samp on columns */
export interface v_player_map_wins_stddev_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Streaming cursor of the table "v_player_map_wins" */
export interface v_player_map_wins_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_map_wins_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_map_wins_stream_cursor_value_input {map_id?: (Scalars['uuid'] | null),match_id?: (Scalars['uuid'] | null),started_at?: (Scalars['timestamptz'] | null),steam_id?: (Scalars['bigint'] | null)}


/** aggregate sum on columns */
export interface v_player_map_wins_sum_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_pop on columns */
export interface v_player_map_wins_var_pop_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate var_samp on columns */
export interface v_player_map_wins_var_samp_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregate variance on columns */
export interface v_player_map_wins_variance_fieldsGenqlSelection{
    steam_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** columns and relationships of "v_player_multi_kills" */
export interface v_player_multi_killsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    match_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_player_multi_kills" */
export interface v_player_multi_kills_aggregateGenqlSelection{
    aggregate?: v_player_multi_kills_aggregate_fieldsGenqlSelection
    nodes?: v_player_multi_killsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface v_player_multi_kills_aggregate_bool_exp {count?: (v_player_multi_kills_aggregate_bool_exp_count | null)}

export interface v_player_multi_kills_aggregate_bool_exp_count {arguments?: (v_player_multi_kills_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (v_player_multi_kills_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "v_player_multi_kills" */
export interface v_player_multi_kills_aggregate_fieldsGenqlSelection{
    avg?: v_player_multi_kills_avg_fieldsGenqlSelection
    count?: { __args: {columns?: (v_player_multi_kills_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_player_multi_kills_max_fieldsGenqlSelection
    min?: v_player_multi_kills_min_fieldsGenqlSelection
    stddev?: v_player_multi_kills_stddev_fieldsGenqlSelection
    stddev_pop?: v_player_multi_kills_stddev_pop_fieldsGenqlSelection
    stddev_samp?: v_player_multi_kills_stddev_samp_fieldsGenqlSelection
    sum?: v_player_multi_kills_sum_fieldsGenqlSelection
    var_pop?: v_player_multi_kills_var_pop_fieldsGenqlSelection
    var_samp?: v_player_multi_kills_var_samp_fieldsGenqlSelection
    variance?: v_player_multi_kills_variance_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "v_player_multi_kills" */
export interface v_player_multi_kills_aggregate_order_by {avg?: (v_player_multi_kills_avg_order_by | null),count?: (order_by | null),max?: (v_player_multi_kills_max_order_by | null),min?: (v_player_multi_kills_min_order_by | null),stddev?: (v_player_multi_kills_stddev_order_by | null),stddev_pop?: (v_player_multi_kills_stddev_pop_order_by | null),stddev_samp?: (v_player_multi_kills_stddev_samp_order_by | null),sum?: (v_player_multi_kills_sum_order_by | null),var_pop?: (v_player_multi_kills_var_pop_order_by | null),var_samp?: (v_player_multi_kills_var_samp_order_by | null),variance?: (v_player_multi_kills_variance_order_by | null)}


/** input type for inserting array relation for remote table "v_player_multi_kills" */
export interface v_player_multi_kills_arr_rel_insert_input {data: v_player_multi_kills_insert_input[]}


/** aggregate avg on columns */
export interface v_player_multi_kills_avg_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by avg() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_avg_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'. */
export interface v_player_multi_kills_bool_exp {_and?: (v_player_multi_kills_bool_exp[] | null),_not?: (v_player_multi_kills_bool_exp | null),_or?: (v_player_multi_kills_bool_exp[] | null),attacker_steam_id?: (bigint_comparison_exp | null),kills?: (bigint_comparison_exp | null),match_id?: (uuid_comparison_exp | null),round?: (Int_comparison_exp | null)}


/** input type for inserting data into table "v_player_multi_kills" */
export interface v_player_multi_kills_insert_input {attacker_steam_id?: (Scalars['bigint'] | null),kills?: (Scalars['bigint'] | null),match_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null)}


/** aggregate max on columns */
export interface v_player_multi_kills_max_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    match_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_max_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),match_id?: (order_by | null),round?: (order_by | null)}


/** aggregate min on columns */
export interface v_player_multi_kills_min_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    match_id?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_min_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),match_id?: (order_by | null),round?: (order_by | null)}


/** Ordering options when selecting data from "v_player_multi_kills". */
export interface v_player_multi_kills_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),match_id?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev on columns */
export interface v_player_multi_kills_stddev_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_stddev_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_pop on columns */
export interface v_player_multi_kills_stddev_pop_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_pop() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_stddev_pop_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** aggregate stddev_samp on columns */
export interface v_player_multi_kills_stddev_samp_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by stddev_samp() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_stddev_samp_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** Streaming cursor of the table "v_player_multi_kills" */
export interface v_player_multi_kills_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_player_multi_kills_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_player_multi_kills_stream_cursor_value_input {attacker_steam_id?: (Scalars['bigint'] | null),kills?: (Scalars['bigint'] | null),match_id?: (Scalars['uuid'] | null),round?: (Scalars['Int'] | null)}


/** aggregate sum on columns */
export interface v_player_multi_kills_sum_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by sum() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_sum_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** aggregate var_pop on columns */
export interface v_player_multi_kills_var_pop_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_pop() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_var_pop_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** aggregate var_samp on columns */
export interface v_player_multi_kills_var_samp_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by var_samp() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_var_samp_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** aggregate variance on columns */
export interface v_player_multi_kills_variance_fieldsGenqlSelection{
    attacker_steam_id?: boolean | number
    kills?: boolean | number
    round?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by variance() on columns of table "v_player_multi_kills" */
export interface v_player_multi_kills_variance_order_by {attacker_steam_id?: (order_by | null),kills?: (order_by | null),round?: (order_by | null)}


/** columns and relationships of "v_pool_maps" */
export interface v_pool_mapsGenqlSelection{
    active_pool?: boolean | number
    id?: boolean | number
    label?: boolean | number
    /** An object relationship */
    map_pool?: map_poolsGenqlSelection
    map_pool_id?: boolean | number
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    type?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** aggregated selection of "v_pool_maps" */
export interface v_pool_maps_aggregateGenqlSelection{
    aggregate?: v_pool_maps_aggregate_fieldsGenqlSelection
    nodes?: v_pool_mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface v_pool_maps_aggregate_bool_exp {bool_and?: (v_pool_maps_aggregate_bool_exp_bool_and | null),bool_or?: (v_pool_maps_aggregate_bool_exp_bool_or | null),count?: (v_pool_maps_aggregate_bool_exp_count | null)}

export interface v_pool_maps_aggregate_bool_exp_bool_and {arguments: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (v_pool_maps_bool_exp | null),predicate: Boolean_comparison_exp}

export interface v_pool_maps_aggregate_bool_exp_bool_or {arguments: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns,distinct?: (Scalars['Boolean'] | null),filter?: (v_pool_maps_bool_exp | null),predicate: Boolean_comparison_exp}

export interface v_pool_maps_aggregate_bool_exp_count {arguments?: (v_pool_maps_select_column[] | null),distinct?: (Scalars['Boolean'] | null),filter?: (v_pool_maps_bool_exp | null),predicate: Int_comparison_exp}


/** aggregate fields of "v_pool_maps" */
export interface v_pool_maps_aggregate_fieldsGenqlSelection{
    count?: { __args: {columns?: (v_pool_maps_select_column[] | null), distinct?: (Scalars['Boolean'] | null)} } | boolean | number
    max?: v_pool_maps_max_fieldsGenqlSelection
    min?: v_pool_maps_min_fieldsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by aggregate values of table "v_pool_maps" */
export interface v_pool_maps_aggregate_order_by {count?: (order_by | null),max?: (v_pool_maps_max_order_by | null),min?: (v_pool_maps_min_order_by | null)}


/** input type for inserting array relation for remote table "v_pool_maps" */
export interface v_pool_maps_arr_rel_insert_input {data: v_pool_maps_insert_input[]}


/** Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'. */
export interface v_pool_maps_bool_exp {_and?: (v_pool_maps_bool_exp[] | null),_not?: (v_pool_maps_bool_exp | null),_or?: (v_pool_maps_bool_exp[] | null),active_pool?: (Boolean_comparison_exp | null),id?: (uuid_comparison_exp | null),label?: (String_comparison_exp | null),map_pool?: (map_pools_bool_exp | null),map_pool_id?: (uuid_comparison_exp | null),name?: (String_comparison_exp | null),patch?: (String_comparison_exp | null),poster?: (String_comparison_exp | null),type?: (String_comparison_exp | null),workshop_map_id?: (String_comparison_exp | null)}


/** input type for inserting data into table "v_pool_maps" */
export interface v_pool_maps_insert_input {active_pool?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),map_pool?: (map_pools_obj_rel_insert_input | null),map_pool_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (Scalars['String'] | null),workshop_map_id?: (Scalars['String'] | null)}


/** aggregate max on columns */
export interface v_pool_maps_max_fieldsGenqlSelection{
    id?: boolean | number
    label?: boolean | number
    map_pool_id?: boolean | number
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    type?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by max() on columns of table "v_pool_maps" */
export interface v_pool_maps_max_order_by {id?: (order_by | null),label?: (order_by | null),map_pool_id?: (order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),type?: (order_by | null),workshop_map_id?: (order_by | null)}


/** aggregate min on columns */
export interface v_pool_maps_min_fieldsGenqlSelection{
    id?: boolean | number
    label?: boolean | number
    map_pool_id?: boolean | number
    name?: boolean | number
    patch?: boolean | number
    poster?: boolean | number
    type?: boolean | number
    workshop_map_id?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** order by min() on columns of table "v_pool_maps" */
export interface v_pool_maps_min_order_by {id?: (order_by | null),label?: (order_by | null),map_pool_id?: (order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),type?: (order_by | null),workshop_map_id?: (order_by | null)}


/** response of any mutation on the table "v_pool_maps" */
export interface v_pool_maps_mutation_responseGenqlSelection{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | number
    /** data from the rows affected by the mutation */
    returning?: v_pool_mapsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Ordering options when selecting data from "v_pool_maps". */
export interface v_pool_maps_order_by {active_pool?: (order_by | null),id?: (order_by | null),label?: (order_by | null),map_pool?: (map_pools_order_by | null),map_pool_id?: (order_by | null),name?: (order_by | null),patch?: (order_by | null),poster?: (order_by | null),type?: (order_by | null),workshop_map_id?: (order_by | null)}


/** input type for updating data in table "v_pool_maps" */
export interface v_pool_maps_set_input {active_pool?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),map_pool_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (Scalars['String'] | null),workshop_map_id?: (Scalars['String'] | null)}


/** Streaming cursor of the table "v_pool_maps" */
export interface v_pool_maps_stream_cursor_input {
/** Stream column input with initial value */
initial_value: v_pool_maps_stream_cursor_value_input,
/** cursor ordering */
ordering?: (cursor_ordering | null)}


/** Initial value of the column from where the streaming should start */
export interface v_pool_maps_stream_cursor_value_input {active_pool?: (Scalars['Boolean'] | null),id?: (Scalars['uuid'] | null),label?: (Scalars['String'] | null),map_pool_id?: (Scalars['uuid'] | null),name?: (Scalars['String'] | null),patch?: (Scalars['String'] | null),poster?: (Scalars['String'] | null),type?: (Scalars['String'] | null),workshop_map_id?: (Scalars['String'] | null)}

export interface v_pool_maps_updates {
/** sets the columns of the filtered rows to the given values */
_set?: (v_pool_maps_set_input | null),
/** filter the rows which have to be updated */
where: v_pool_maps_bool_exp}

export type QueryGenqlSelection = query_rootGenqlSelection
export type MutationGenqlSelection = mutation_rootGenqlSelection
export type SubscriptionGenqlSelection = subscription_rootGenqlSelection


    const CpuStat_possibleTypes: string[] = ['CpuStat']
    export const isCpuStat = (obj?: { __typename?: any } | null): obj is CpuStat => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCpuStat"')
      return CpuStat_possibleTypes.includes(obj.__typename)
    }
    


    const MeResponse_possibleTypes: string[] = ['MeResponse']
    export const isMeResponse = (obj?: { __typename?: any } | null): obj is MeResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMeResponse"')
      return MeResponse_possibleTypes.includes(obj.__typename)
    }
    


    const MemoryStat_possibleTypes: string[] = ['MemoryStat']
    export const isMemoryStat = (obj?: { __typename?: any } | null): obj is MemoryStat => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMemoryStat"')
      return MemoryStat_possibleTypes.includes(obj.__typename)
    }
    


    const NodeStats_possibleTypes: string[] = ['NodeStats']
    export const isNodeStats = (obj?: { __typename?: any } | null): obj is NodeStats => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNodeStats"')
      return NodeStats_possibleTypes.includes(obj.__typename)
    }
    


    const PodStats_possibleTypes: string[] = ['PodStats']
    export const isPodStats = (obj?: { __typename?: any } | null): obj is PodStats => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPodStats"')
      return PodStats_possibleTypes.includes(obj.__typename)
    }
    


    const SetupGameServeOutput_possibleTypes: string[] = ['SetupGameServeOutput']
    export const isSetupGameServeOutput = (obj?: { __typename?: any } | null): obj is SetupGameServeOutput => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSetupGameServeOutput"')
      return SetupGameServeOutput_possibleTypes.includes(obj.__typename)
    }
    


    const SuccessOutput_possibleTypes: string[] = ['SuccessOutput']
    export const isSuccessOutput = (obj?: { __typename?: any } | null): obj is SuccessOutput => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSuccessOutput"')
      return SuccessOutput_possibleTypes.includes(obj.__typename)
    }
    


    const TelemetryStats_possibleTypes: string[] = ['TelemetryStats']
    export const isTelemetryStats = (obj?: { __typename?: any } | null): obj is TelemetryStats => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTelemetryStats"')
      return TelemetryStats_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_possibleTypes: string[] = ['_map_pool']
    export const is_map_pool = (obj?: { __typename?: any } | null): obj is _map_pool => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool"')
      return _map_pool_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_aggregate_possibleTypes: string[] = ['_map_pool_aggregate']
    export const is_map_pool_aggregate = (obj?: { __typename?: any } | null): obj is _map_pool_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool_aggregate"')
      return _map_pool_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_aggregate_fields_possibleTypes: string[] = ['_map_pool_aggregate_fields']
    export const is_map_pool_aggregate_fields = (obj?: { __typename?: any } | null): obj is _map_pool_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool_aggregate_fields"')
      return _map_pool_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_max_fields_possibleTypes: string[] = ['_map_pool_max_fields']
    export const is_map_pool_max_fields = (obj?: { __typename?: any } | null): obj is _map_pool_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool_max_fields"')
      return _map_pool_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_min_fields_possibleTypes: string[] = ['_map_pool_min_fields']
    export const is_map_pool_min_fields = (obj?: { __typename?: any } | null): obj is _map_pool_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool_min_fields"')
      return _map_pool_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const _map_pool_mutation_response_possibleTypes: string[] = ['_map_pool_mutation_response']
    export const is_map_pool_mutation_response = (obj?: { __typename?: any } | null): obj is _map_pool_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_map_pool_mutation_response"')
      return _map_pool_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_possibleTypes: string[] = ['abandoned_matches']
    export const isabandoned_matches = (obj?: { __typename?: any } | null): obj is abandoned_matches => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches"')
      return abandoned_matches_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_aggregate_possibleTypes: string[] = ['abandoned_matches_aggregate']
    export const isabandoned_matches_aggregate = (obj?: { __typename?: any } | null): obj is abandoned_matches_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_aggregate"')
      return abandoned_matches_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_aggregate_fields_possibleTypes: string[] = ['abandoned_matches_aggregate_fields']
    export const isabandoned_matches_aggregate_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_aggregate_fields"')
      return abandoned_matches_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_avg_fields_possibleTypes: string[] = ['abandoned_matches_avg_fields']
    export const isabandoned_matches_avg_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_avg_fields"')
      return abandoned_matches_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_max_fields_possibleTypes: string[] = ['abandoned_matches_max_fields']
    export const isabandoned_matches_max_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_max_fields"')
      return abandoned_matches_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_min_fields_possibleTypes: string[] = ['abandoned_matches_min_fields']
    export const isabandoned_matches_min_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_min_fields"')
      return abandoned_matches_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_mutation_response_possibleTypes: string[] = ['abandoned_matches_mutation_response']
    export const isabandoned_matches_mutation_response = (obj?: { __typename?: any } | null): obj is abandoned_matches_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_mutation_response"')
      return abandoned_matches_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_stddev_fields_possibleTypes: string[] = ['abandoned_matches_stddev_fields']
    export const isabandoned_matches_stddev_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_stddev_fields"')
      return abandoned_matches_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_stddev_pop_fields_possibleTypes: string[] = ['abandoned_matches_stddev_pop_fields']
    export const isabandoned_matches_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_stddev_pop_fields"')
      return abandoned_matches_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_stddev_samp_fields_possibleTypes: string[] = ['abandoned_matches_stddev_samp_fields']
    export const isabandoned_matches_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_stddev_samp_fields"')
      return abandoned_matches_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_sum_fields_possibleTypes: string[] = ['abandoned_matches_sum_fields']
    export const isabandoned_matches_sum_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_sum_fields"')
      return abandoned_matches_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_var_pop_fields_possibleTypes: string[] = ['abandoned_matches_var_pop_fields']
    export const isabandoned_matches_var_pop_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_var_pop_fields"')
      return abandoned_matches_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_var_samp_fields_possibleTypes: string[] = ['abandoned_matches_var_samp_fields']
    export const isabandoned_matches_var_samp_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_var_samp_fields"')
      return abandoned_matches_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const abandoned_matches_variance_fields_possibleTypes: string[] = ['abandoned_matches_variance_fields']
    export const isabandoned_matches_variance_fields = (obj?: { __typename?: any } | null): obj is abandoned_matches_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isabandoned_matches_variance_fields"')
      return abandoned_matches_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_possibleTypes: string[] = ['e_friend_status']
    export const ise_friend_status = (obj?: { __typename?: any } | null): obj is e_friend_status => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status"')
      return e_friend_status_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_aggregate_possibleTypes: string[] = ['e_friend_status_aggregate']
    export const ise_friend_status_aggregate = (obj?: { __typename?: any } | null): obj is e_friend_status_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status_aggregate"')
      return e_friend_status_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_aggregate_fields_possibleTypes: string[] = ['e_friend_status_aggregate_fields']
    export const ise_friend_status_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_friend_status_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status_aggregate_fields"')
      return e_friend_status_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_max_fields_possibleTypes: string[] = ['e_friend_status_max_fields']
    export const ise_friend_status_max_fields = (obj?: { __typename?: any } | null): obj is e_friend_status_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status_max_fields"')
      return e_friend_status_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_min_fields_possibleTypes: string[] = ['e_friend_status_min_fields']
    export const ise_friend_status_min_fields = (obj?: { __typename?: any } | null): obj is e_friend_status_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status_min_fields"')
      return e_friend_status_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_friend_status_mutation_response_possibleTypes: string[] = ['e_friend_status_mutation_response']
    export const ise_friend_status_mutation_response = (obj?: { __typename?: any } | null): obj is e_friend_status_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_friend_status_mutation_response"')
      return e_friend_status_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_possibleTypes: string[] = ['e_game_server_node_statuses']
    export const ise_game_server_node_statuses = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses"')
      return e_game_server_node_statuses_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_aggregate_possibleTypes: string[] = ['e_game_server_node_statuses_aggregate']
    export const ise_game_server_node_statuses_aggregate = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses_aggregate"')
      return e_game_server_node_statuses_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_aggregate_fields_possibleTypes: string[] = ['e_game_server_node_statuses_aggregate_fields']
    export const ise_game_server_node_statuses_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses_aggregate_fields"')
      return e_game_server_node_statuses_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_max_fields_possibleTypes: string[] = ['e_game_server_node_statuses_max_fields']
    export const ise_game_server_node_statuses_max_fields = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses_max_fields"')
      return e_game_server_node_statuses_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_min_fields_possibleTypes: string[] = ['e_game_server_node_statuses_min_fields']
    export const ise_game_server_node_statuses_min_fields = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses_min_fields"')
      return e_game_server_node_statuses_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_game_server_node_statuses_mutation_response_possibleTypes: string[] = ['e_game_server_node_statuses_mutation_response']
    export const ise_game_server_node_statuses_mutation_response = (obj?: { __typename?: any } | null): obj is e_game_server_node_statuses_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_game_server_node_statuses_mutation_response"')
      return e_game_server_node_statuses_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_possibleTypes: string[] = ['e_lobby_access']
    export const ise_lobby_access = (obj?: { __typename?: any } | null): obj is e_lobby_access => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access"')
      return e_lobby_access_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_aggregate_possibleTypes: string[] = ['e_lobby_access_aggregate']
    export const ise_lobby_access_aggregate = (obj?: { __typename?: any } | null): obj is e_lobby_access_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access_aggregate"')
      return e_lobby_access_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_aggregate_fields_possibleTypes: string[] = ['e_lobby_access_aggregate_fields']
    export const ise_lobby_access_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_lobby_access_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access_aggregate_fields"')
      return e_lobby_access_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_max_fields_possibleTypes: string[] = ['e_lobby_access_max_fields']
    export const ise_lobby_access_max_fields = (obj?: { __typename?: any } | null): obj is e_lobby_access_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access_max_fields"')
      return e_lobby_access_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_min_fields_possibleTypes: string[] = ['e_lobby_access_min_fields']
    export const ise_lobby_access_min_fields = (obj?: { __typename?: any } | null): obj is e_lobby_access_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access_min_fields"')
      return e_lobby_access_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_access_mutation_response_possibleTypes: string[] = ['e_lobby_access_mutation_response']
    export const ise_lobby_access_mutation_response = (obj?: { __typename?: any } | null): obj is e_lobby_access_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_access_mutation_response"')
      return e_lobby_access_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_possibleTypes: string[] = ['e_lobby_player_status']
    export const ise_lobby_player_status = (obj?: { __typename?: any } | null): obj is e_lobby_player_status => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status"')
      return e_lobby_player_status_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_aggregate_possibleTypes: string[] = ['e_lobby_player_status_aggregate']
    export const ise_lobby_player_status_aggregate = (obj?: { __typename?: any } | null): obj is e_lobby_player_status_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status_aggregate"')
      return e_lobby_player_status_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_aggregate_fields_possibleTypes: string[] = ['e_lobby_player_status_aggregate_fields']
    export const ise_lobby_player_status_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_lobby_player_status_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status_aggregate_fields"')
      return e_lobby_player_status_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_max_fields_possibleTypes: string[] = ['e_lobby_player_status_max_fields']
    export const ise_lobby_player_status_max_fields = (obj?: { __typename?: any } | null): obj is e_lobby_player_status_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status_max_fields"')
      return e_lobby_player_status_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_min_fields_possibleTypes: string[] = ['e_lobby_player_status_min_fields']
    export const ise_lobby_player_status_min_fields = (obj?: { __typename?: any } | null): obj is e_lobby_player_status_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status_min_fields"')
      return e_lobby_player_status_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_lobby_player_status_mutation_response_possibleTypes: string[] = ['e_lobby_player_status_mutation_response']
    export const ise_lobby_player_status_mutation_response = (obj?: { __typename?: any } | null): obj is e_lobby_player_status_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_lobby_player_status_mutation_response"')
      return e_lobby_player_status_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_possibleTypes: string[] = ['e_map_pool_types']
    export const ise_map_pool_types = (obj?: { __typename?: any } | null): obj is e_map_pool_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types"')
      return e_map_pool_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_aggregate_possibleTypes: string[] = ['e_map_pool_types_aggregate']
    export const ise_map_pool_types_aggregate = (obj?: { __typename?: any } | null): obj is e_map_pool_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types_aggregate"')
      return e_map_pool_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_aggregate_fields_possibleTypes: string[] = ['e_map_pool_types_aggregate_fields']
    export const ise_map_pool_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_map_pool_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types_aggregate_fields"')
      return e_map_pool_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_max_fields_possibleTypes: string[] = ['e_map_pool_types_max_fields']
    export const ise_map_pool_types_max_fields = (obj?: { __typename?: any } | null): obj is e_map_pool_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types_max_fields"')
      return e_map_pool_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_min_fields_possibleTypes: string[] = ['e_map_pool_types_min_fields']
    export const ise_map_pool_types_min_fields = (obj?: { __typename?: any } | null): obj is e_map_pool_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types_min_fields"')
      return e_map_pool_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_map_pool_types_mutation_response_possibleTypes: string[] = ['e_map_pool_types_mutation_response']
    export const ise_map_pool_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_map_pool_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_map_pool_types_mutation_response"')
      return e_map_pool_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_possibleTypes: string[] = ['e_match_map_status']
    export const ise_match_map_status = (obj?: { __typename?: any } | null): obj is e_match_map_status => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status"')
      return e_match_map_status_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_aggregate_possibleTypes: string[] = ['e_match_map_status_aggregate']
    export const ise_match_map_status_aggregate = (obj?: { __typename?: any } | null): obj is e_match_map_status_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status_aggregate"')
      return e_match_map_status_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_aggregate_fields_possibleTypes: string[] = ['e_match_map_status_aggregate_fields']
    export const ise_match_map_status_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_match_map_status_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status_aggregate_fields"')
      return e_match_map_status_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_max_fields_possibleTypes: string[] = ['e_match_map_status_max_fields']
    export const ise_match_map_status_max_fields = (obj?: { __typename?: any } | null): obj is e_match_map_status_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status_max_fields"')
      return e_match_map_status_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_min_fields_possibleTypes: string[] = ['e_match_map_status_min_fields']
    export const ise_match_map_status_min_fields = (obj?: { __typename?: any } | null): obj is e_match_map_status_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status_min_fields"')
      return e_match_map_status_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_map_status_mutation_response_possibleTypes: string[] = ['e_match_map_status_mutation_response']
    export const ise_match_map_status_mutation_response = (obj?: { __typename?: any } | null): obj is e_match_map_status_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_map_status_mutation_response"')
      return e_match_map_status_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_possibleTypes: string[] = ['e_match_status']
    export const ise_match_status = (obj?: { __typename?: any } | null): obj is e_match_status => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status"')
      return e_match_status_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_aggregate_possibleTypes: string[] = ['e_match_status_aggregate']
    export const ise_match_status_aggregate = (obj?: { __typename?: any } | null): obj is e_match_status_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status_aggregate"')
      return e_match_status_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_aggregate_fields_possibleTypes: string[] = ['e_match_status_aggregate_fields']
    export const ise_match_status_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_match_status_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status_aggregate_fields"')
      return e_match_status_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_max_fields_possibleTypes: string[] = ['e_match_status_max_fields']
    export const ise_match_status_max_fields = (obj?: { __typename?: any } | null): obj is e_match_status_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status_max_fields"')
      return e_match_status_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_min_fields_possibleTypes: string[] = ['e_match_status_min_fields']
    export const ise_match_status_min_fields = (obj?: { __typename?: any } | null): obj is e_match_status_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status_min_fields"')
      return e_match_status_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_status_mutation_response_possibleTypes: string[] = ['e_match_status_mutation_response']
    export const ise_match_status_mutation_response = (obj?: { __typename?: any } | null): obj is e_match_status_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_status_mutation_response"')
      return e_match_status_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_possibleTypes: string[] = ['e_match_types']
    export const ise_match_types = (obj?: { __typename?: any } | null): obj is e_match_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types"')
      return e_match_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_aggregate_possibleTypes: string[] = ['e_match_types_aggregate']
    export const ise_match_types_aggregate = (obj?: { __typename?: any } | null): obj is e_match_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types_aggregate"')
      return e_match_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_aggregate_fields_possibleTypes: string[] = ['e_match_types_aggregate_fields']
    export const ise_match_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_match_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types_aggregate_fields"')
      return e_match_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_max_fields_possibleTypes: string[] = ['e_match_types_max_fields']
    export const ise_match_types_max_fields = (obj?: { __typename?: any } | null): obj is e_match_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types_max_fields"')
      return e_match_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_min_fields_possibleTypes: string[] = ['e_match_types_min_fields']
    export const ise_match_types_min_fields = (obj?: { __typename?: any } | null): obj is e_match_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types_min_fields"')
      return e_match_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_match_types_mutation_response_possibleTypes: string[] = ['e_match_types_mutation_response']
    export const ise_match_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_match_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_match_types_mutation_response"')
      return e_match_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_possibleTypes: string[] = ['e_notification_types']
    export const ise_notification_types = (obj?: { __typename?: any } | null): obj is e_notification_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types"')
      return e_notification_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_aggregate_possibleTypes: string[] = ['e_notification_types_aggregate']
    export const ise_notification_types_aggregate = (obj?: { __typename?: any } | null): obj is e_notification_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types_aggregate"')
      return e_notification_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_aggregate_fields_possibleTypes: string[] = ['e_notification_types_aggregate_fields']
    export const ise_notification_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_notification_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types_aggregate_fields"')
      return e_notification_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_max_fields_possibleTypes: string[] = ['e_notification_types_max_fields']
    export const ise_notification_types_max_fields = (obj?: { __typename?: any } | null): obj is e_notification_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types_max_fields"')
      return e_notification_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_min_fields_possibleTypes: string[] = ['e_notification_types_min_fields']
    export const ise_notification_types_min_fields = (obj?: { __typename?: any } | null): obj is e_notification_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types_min_fields"')
      return e_notification_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_notification_types_mutation_response_possibleTypes: string[] = ['e_notification_types_mutation_response']
    export const ise_notification_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_notification_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_notification_types_mutation_response"')
      return e_notification_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_possibleTypes: string[] = ['e_objective_types']
    export const ise_objective_types = (obj?: { __typename?: any } | null): obj is e_objective_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types"')
      return e_objective_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_aggregate_possibleTypes: string[] = ['e_objective_types_aggregate']
    export const ise_objective_types_aggregate = (obj?: { __typename?: any } | null): obj is e_objective_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types_aggregate"')
      return e_objective_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_aggregate_fields_possibleTypes: string[] = ['e_objective_types_aggregate_fields']
    export const ise_objective_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_objective_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types_aggregate_fields"')
      return e_objective_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_max_fields_possibleTypes: string[] = ['e_objective_types_max_fields']
    export const ise_objective_types_max_fields = (obj?: { __typename?: any } | null): obj is e_objective_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types_max_fields"')
      return e_objective_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_min_fields_possibleTypes: string[] = ['e_objective_types_min_fields']
    export const ise_objective_types_min_fields = (obj?: { __typename?: any } | null): obj is e_objective_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types_min_fields"')
      return e_objective_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_objective_types_mutation_response_possibleTypes: string[] = ['e_objective_types_mutation_response']
    export const ise_objective_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_objective_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_objective_types_mutation_response"')
      return e_objective_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_possibleTypes: string[] = ['e_player_roles']
    export const ise_player_roles = (obj?: { __typename?: any } | null): obj is e_player_roles => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles"')
      return e_player_roles_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_aggregate_possibleTypes: string[] = ['e_player_roles_aggregate']
    export const ise_player_roles_aggregate = (obj?: { __typename?: any } | null): obj is e_player_roles_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles_aggregate"')
      return e_player_roles_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_aggregate_fields_possibleTypes: string[] = ['e_player_roles_aggregate_fields']
    export const ise_player_roles_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_player_roles_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles_aggregate_fields"')
      return e_player_roles_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_max_fields_possibleTypes: string[] = ['e_player_roles_max_fields']
    export const ise_player_roles_max_fields = (obj?: { __typename?: any } | null): obj is e_player_roles_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles_max_fields"')
      return e_player_roles_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_min_fields_possibleTypes: string[] = ['e_player_roles_min_fields']
    export const ise_player_roles_min_fields = (obj?: { __typename?: any } | null): obj is e_player_roles_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles_min_fields"')
      return e_player_roles_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_player_roles_mutation_response_possibleTypes: string[] = ['e_player_roles_mutation_response']
    export const ise_player_roles_mutation_response = (obj?: { __typename?: any } | null): obj is e_player_roles_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_player_roles_mutation_response"')
      return e_player_roles_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_possibleTypes: string[] = ['e_ready_settings']
    export const ise_ready_settings = (obj?: { __typename?: any } | null): obj is e_ready_settings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings"')
      return e_ready_settings_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_aggregate_possibleTypes: string[] = ['e_ready_settings_aggregate']
    export const ise_ready_settings_aggregate = (obj?: { __typename?: any } | null): obj is e_ready_settings_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings_aggregate"')
      return e_ready_settings_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_aggregate_fields_possibleTypes: string[] = ['e_ready_settings_aggregate_fields']
    export const ise_ready_settings_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_ready_settings_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings_aggregate_fields"')
      return e_ready_settings_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_max_fields_possibleTypes: string[] = ['e_ready_settings_max_fields']
    export const ise_ready_settings_max_fields = (obj?: { __typename?: any } | null): obj is e_ready_settings_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings_max_fields"')
      return e_ready_settings_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_min_fields_possibleTypes: string[] = ['e_ready_settings_min_fields']
    export const ise_ready_settings_min_fields = (obj?: { __typename?: any } | null): obj is e_ready_settings_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings_min_fields"')
      return e_ready_settings_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_ready_settings_mutation_response_possibleTypes: string[] = ['e_ready_settings_mutation_response']
    export const ise_ready_settings_mutation_response = (obj?: { __typename?: any } | null): obj is e_ready_settings_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_ready_settings_mutation_response"')
      return e_ready_settings_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_possibleTypes: string[] = ['e_sanction_types']
    export const ise_sanction_types = (obj?: { __typename?: any } | null): obj is e_sanction_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types"')
      return e_sanction_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_aggregate_possibleTypes: string[] = ['e_sanction_types_aggregate']
    export const ise_sanction_types_aggregate = (obj?: { __typename?: any } | null): obj is e_sanction_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types_aggregate"')
      return e_sanction_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_aggregate_fields_possibleTypes: string[] = ['e_sanction_types_aggregate_fields']
    export const ise_sanction_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_sanction_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types_aggregate_fields"')
      return e_sanction_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_max_fields_possibleTypes: string[] = ['e_sanction_types_max_fields']
    export const ise_sanction_types_max_fields = (obj?: { __typename?: any } | null): obj is e_sanction_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types_max_fields"')
      return e_sanction_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_min_fields_possibleTypes: string[] = ['e_sanction_types_min_fields']
    export const ise_sanction_types_min_fields = (obj?: { __typename?: any } | null): obj is e_sanction_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types_min_fields"')
      return e_sanction_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sanction_types_mutation_response_possibleTypes: string[] = ['e_sanction_types_mutation_response']
    export const ise_sanction_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_sanction_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sanction_types_mutation_response"')
      return e_sanction_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_possibleTypes: string[] = ['e_sides']
    export const ise_sides = (obj?: { __typename?: any } | null): obj is e_sides => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides"')
      return e_sides_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_aggregate_possibleTypes: string[] = ['e_sides_aggregate']
    export const ise_sides_aggregate = (obj?: { __typename?: any } | null): obj is e_sides_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides_aggregate"')
      return e_sides_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_aggregate_fields_possibleTypes: string[] = ['e_sides_aggregate_fields']
    export const ise_sides_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_sides_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides_aggregate_fields"')
      return e_sides_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_max_fields_possibleTypes: string[] = ['e_sides_max_fields']
    export const ise_sides_max_fields = (obj?: { __typename?: any } | null): obj is e_sides_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides_max_fields"')
      return e_sides_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_min_fields_possibleTypes: string[] = ['e_sides_min_fields']
    export const ise_sides_min_fields = (obj?: { __typename?: any } | null): obj is e_sides_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides_min_fields"')
      return e_sides_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_sides_mutation_response_possibleTypes: string[] = ['e_sides_mutation_response']
    export const ise_sides_mutation_response = (obj?: { __typename?: any } | null): obj is e_sides_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_sides_mutation_response"')
      return e_sides_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_possibleTypes: string[] = ['e_team_roles']
    export const ise_team_roles = (obj?: { __typename?: any } | null): obj is e_team_roles => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles"')
      return e_team_roles_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_aggregate_possibleTypes: string[] = ['e_team_roles_aggregate']
    export const ise_team_roles_aggregate = (obj?: { __typename?: any } | null): obj is e_team_roles_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles_aggregate"')
      return e_team_roles_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_aggregate_fields_possibleTypes: string[] = ['e_team_roles_aggregate_fields']
    export const ise_team_roles_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_team_roles_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles_aggregate_fields"')
      return e_team_roles_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_max_fields_possibleTypes: string[] = ['e_team_roles_max_fields']
    export const ise_team_roles_max_fields = (obj?: { __typename?: any } | null): obj is e_team_roles_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles_max_fields"')
      return e_team_roles_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_min_fields_possibleTypes: string[] = ['e_team_roles_min_fields']
    export const ise_team_roles_min_fields = (obj?: { __typename?: any } | null): obj is e_team_roles_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles_min_fields"')
      return e_team_roles_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_team_roles_mutation_response_possibleTypes: string[] = ['e_team_roles_mutation_response']
    export const ise_team_roles_mutation_response = (obj?: { __typename?: any } | null): obj is e_team_roles_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_team_roles_mutation_response"')
      return e_team_roles_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_possibleTypes: string[] = ['e_timeout_settings']
    export const ise_timeout_settings = (obj?: { __typename?: any } | null): obj is e_timeout_settings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings"')
      return e_timeout_settings_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_aggregate_possibleTypes: string[] = ['e_timeout_settings_aggregate']
    export const ise_timeout_settings_aggregate = (obj?: { __typename?: any } | null): obj is e_timeout_settings_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings_aggregate"')
      return e_timeout_settings_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_aggregate_fields_possibleTypes: string[] = ['e_timeout_settings_aggregate_fields']
    export const ise_timeout_settings_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_timeout_settings_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings_aggregate_fields"')
      return e_timeout_settings_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_max_fields_possibleTypes: string[] = ['e_timeout_settings_max_fields']
    export const ise_timeout_settings_max_fields = (obj?: { __typename?: any } | null): obj is e_timeout_settings_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings_max_fields"')
      return e_timeout_settings_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_min_fields_possibleTypes: string[] = ['e_timeout_settings_min_fields']
    export const ise_timeout_settings_min_fields = (obj?: { __typename?: any } | null): obj is e_timeout_settings_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings_min_fields"')
      return e_timeout_settings_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_timeout_settings_mutation_response_possibleTypes: string[] = ['e_timeout_settings_mutation_response']
    export const ise_timeout_settings_mutation_response = (obj?: { __typename?: any } | null): obj is e_timeout_settings_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_timeout_settings_mutation_response"')
      return e_timeout_settings_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_possibleTypes: string[] = ['e_tournament_stage_types']
    export const ise_tournament_stage_types = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types"')
      return e_tournament_stage_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_aggregate_possibleTypes: string[] = ['e_tournament_stage_types_aggregate']
    export const ise_tournament_stage_types_aggregate = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types_aggregate"')
      return e_tournament_stage_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_aggregate_fields_possibleTypes: string[] = ['e_tournament_stage_types_aggregate_fields']
    export const ise_tournament_stage_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types_aggregate_fields"')
      return e_tournament_stage_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_max_fields_possibleTypes: string[] = ['e_tournament_stage_types_max_fields']
    export const ise_tournament_stage_types_max_fields = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types_max_fields"')
      return e_tournament_stage_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_min_fields_possibleTypes: string[] = ['e_tournament_stage_types_min_fields']
    export const ise_tournament_stage_types_min_fields = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types_min_fields"')
      return e_tournament_stage_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_stage_types_mutation_response_possibleTypes: string[] = ['e_tournament_stage_types_mutation_response']
    export const ise_tournament_stage_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_tournament_stage_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_stage_types_mutation_response"')
      return e_tournament_stage_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_possibleTypes: string[] = ['e_tournament_status']
    export const ise_tournament_status = (obj?: { __typename?: any } | null): obj is e_tournament_status => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status"')
      return e_tournament_status_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_aggregate_possibleTypes: string[] = ['e_tournament_status_aggregate']
    export const ise_tournament_status_aggregate = (obj?: { __typename?: any } | null): obj is e_tournament_status_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status_aggregate"')
      return e_tournament_status_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_aggregate_fields_possibleTypes: string[] = ['e_tournament_status_aggregate_fields']
    export const ise_tournament_status_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_tournament_status_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status_aggregate_fields"')
      return e_tournament_status_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_max_fields_possibleTypes: string[] = ['e_tournament_status_max_fields']
    export const ise_tournament_status_max_fields = (obj?: { __typename?: any } | null): obj is e_tournament_status_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status_max_fields"')
      return e_tournament_status_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_min_fields_possibleTypes: string[] = ['e_tournament_status_min_fields']
    export const ise_tournament_status_min_fields = (obj?: { __typename?: any } | null): obj is e_tournament_status_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status_min_fields"')
      return e_tournament_status_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_tournament_status_mutation_response_possibleTypes: string[] = ['e_tournament_status_mutation_response']
    export const ise_tournament_status_mutation_response = (obj?: { __typename?: any } | null): obj is e_tournament_status_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_tournament_status_mutation_response"')
      return e_tournament_status_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_possibleTypes: string[] = ['e_utility_types']
    export const ise_utility_types = (obj?: { __typename?: any } | null): obj is e_utility_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types"')
      return e_utility_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_aggregate_possibleTypes: string[] = ['e_utility_types_aggregate']
    export const ise_utility_types_aggregate = (obj?: { __typename?: any } | null): obj is e_utility_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types_aggregate"')
      return e_utility_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_aggregate_fields_possibleTypes: string[] = ['e_utility_types_aggregate_fields']
    export const ise_utility_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_utility_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types_aggregate_fields"')
      return e_utility_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_max_fields_possibleTypes: string[] = ['e_utility_types_max_fields']
    export const ise_utility_types_max_fields = (obj?: { __typename?: any } | null): obj is e_utility_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types_max_fields"')
      return e_utility_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_min_fields_possibleTypes: string[] = ['e_utility_types_min_fields']
    export const ise_utility_types_min_fields = (obj?: { __typename?: any } | null): obj is e_utility_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types_min_fields"')
      return e_utility_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_utility_types_mutation_response_possibleTypes: string[] = ['e_utility_types_mutation_response']
    export const ise_utility_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_utility_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_utility_types_mutation_response"')
      return e_utility_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_possibleTypes: string[] = ['e_veto_pick_types']
    export const ise_veto_pick_types = (obj?: { __typename?: any } | null): obj is e_veto_pick_types => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types"')
      return e_veto_pick_types_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_aggregate_possibleTypes: string[] = ['e_veto_pick_types_aggregate']
    export const ise_veto_pick_types_aggregate = (obj?: { __typename?: any } | null): obj is e_veto_pick_types_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types_aggregate"')
      return e_veto_pick_types_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_aggregate_fields_possibleTypes: string[] = ['e_veto_pick_types_aggregate_fields']
    export const ise_veto_pick_types_aggregate_fields = (obj?: { __typename?: any } | null): obj is e_veto_pick_types_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types_aggregate_fields"')
      return e_veto_pick_types_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_max_fields_possibleTypes: string[] = ['e_veto_pick_types_max_fields']
    export const ise_veto_pick_types_max_fields = (obj?: { __typename?: any } | null): obj is e_veto_pick_types_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types_max_fields"')
      return e_veto_pick_types_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_min_fields_possibleTypes: string[] = ['e_veto_pick_types_min_fields']
    export const ise_veto_pick_types_min_fields = (obj?: { __typename?: any } | null): obj is e_veto_pick_types_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types_min_fields"')
      return e_veto_pick_types_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const e_veto_pick_types_mutation_response_possibleTypes: string[] = ['e_veto_pick_types_mutation_response']
    export const ise_veto_pick_types_mutation_response = (obj?: { __typename?: any } | null): obj is e_veto_pick_types_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ise_veto_pick_types_mutation_response"')
      return e_veto_pick_types_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const friends_possibleTypes: string[] = ['friends']
    export const isfriends = (obj?: { __typename?: any } | null): obj is friends => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends"')
      return friends_possibleTypes.includes(obj.__typename)
    }
    


    const friends_aggregate_possibleTypes: string[] = ['friends_aggregate']
    export const isfriends_aggregate = (obj?: { __typename?: any } | null): obj is friends_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_aggregate"')
      return friends_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const friends_aggregate_fields_possibleTypes: string[] = ['friends_aggregate_fields']
    export const isfriends_aggregate_fields = (obj?: { __typename?: any } | null): obj is friends_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_aggregate_fields"')
      return friends_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_avg_fields_possibleTypes: string[] = ['friends_avg_fields']
    export const isfriends_avg_fields = (obj?: { __typename?: any } | null): obj is friends_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_avg_fields"')
      return friends_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_max_fields_possibleTypes: string[] = ['friends_max_fields']
    export const isfriends_max_fields = (obj?: { __typename?: any } | null): obj is friends_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_max_fields"')
      return friends_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_min_fields_possibleTypes: string[] = ['friends_min_fields']
    export const isfriends_min_fields = (obj?: { __typename?: any } | null): obj is friends_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_min_fields"')
      return friends_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_mutation_response_possibleTypes: string[] = ['friends_mutation_response']
    export const isfriends_mutation_response = (obj?: { __typename?: any } | null): obj is friends_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_mutation_response"')
      return friends_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const friends_stddev_fields_possibleTypes: string[] = ['friends_stddev_fields']
    export const isfriends_stddev_fields = (obj?: { __typename?: any } | null): obj is friends_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_stddev_fields"')
      return friends_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_stddev_pop_fields_possibleTypes: string[] = ['friends_stddev_pop_fields']
    export const isfriends_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is friends_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_stddev_pop_fields"')
      return friends_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_stddev_samp_fields_possibleTypes: string[] = ['friends_stddev_samp_fields']
    export const isfriends_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is friends_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_stddev_samp_fields"')
      return friends_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_sum_fields_possibleTypes: string[] = ['friends_sum_fields']
    export const isfriends_sum_fields = (obj?: { __typename?: any } | null): obj is friends_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_sum_fields"')
      return friends_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_var_pop_fields_possibleTypes: string[] = ['friends_var_pop_fields']
    export const isfriends_var_pop_fields = (obj?: { __typename?: any } | null): obj is friends_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_var_pop_fields"')
      return friends_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_var_samp_fields_possibleTypes: string[] = ['friends_var_samp_fields']
    export const isfriends_var_samp_fields = (obj?: { __typename?: any } | null): obj is friends_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_var_samp_fields"')
      return friends_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const friends_variance_fields_possibleTypes: string[] = ['friends_variance_fields']
    export const isfriends_variance_fields = (obj?: { __typename?: any } | null): obj is friends_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfriends_variance_fields"')
      return friends_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_possibleTypes: string[] = ['game_server_nodes']
    export const isgame_server_nodes = (obj?: { __typename?: any } | null): obj is game_server_nodes => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes"')
      return game_server_nodes_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_aggregate_possibleTypes: string[] = ['game_server_nodes_aggregate']
    export const isgame_server_nodes_aggregate = (obj?: { __typename?: any } | null): obj is game_server_nodes_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_aggregate"')
      return game_server_nodes_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_aggregate_fields_possibleTypes: string[] = ['game_server_nodes_aggregate_fields']
    export const isgame_server_nodes_aggregate_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_aggregate_fields"')
      return game_server_nodes_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_avg_fields_possibleTypes: string[] = ['game_server_nodes_avg_fields']
    export const isgame_server_nodes_avg_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_avg_fields"')
      return game_server_nodes_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_max_fields_possibleTypes: string[] = ['game_server_nodes_max_fields']
    export const isgame_server_nodes_max_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_max_fields"')
      return game_server_nodes_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_min_fields_possibleTypes: string[] = ['game_server_nodes_min_fields']
    export const isgame_server_nodes_min_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_min_fields"')
      return game_server_nodes_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_mutation_response_possibleTypes: string[] = ['game_server_nodes_mutation_response']
    export const isgame_server_nodes_mutation_response = (obj?: { __typename?: any } | null): obj is game_server_nodes_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_mutation_response"')
      return game_server_nodes_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_stddev_fields_possibleTypes: string[] = ['game_server_nodes_stddev_fields']
    export const isgame_server_nodes_stddev_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_stddev_fields"')
      return game_server_nodes_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_stddev_pop_fields_possibleTypes: string[] = ['game_server_nodes_stddev_pop_fields']
    export const isgame_server_nodes_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_stddev_pop_fields"')
      return game_server_nodes_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_stddev_samp_fields_possibleTypes: string[] = ['game_server_nodes_stddev_samp_fields']
    export const isgame_server_nodes_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_stddev_samp_fields"')
      return game_server_nodes_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_sum_fields_possibleTypes: string[] = ['game_server_nodes_sum_fields']
    export const isgame_server_nodes_sum_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_sum_fields"')
      return game_server_nodes_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_var_pop_fields_possibleTypes: string[] = ['game_server_nodes_var_pop_fields']
    export const isgame_server_nodes_var_pop_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_var_pop_fields"')
      return game_server_nodes_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_var_samp_fields_possibleTypes: string[] = ['game_server_nodes_var_samp_fields']
    export const isgame_server_nodes_var_samp_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_var_samp_fields"')
      return game_server_nodes_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const game_server_nodes_variance_fields_possibleTypes: string[] = ['game_server_nodes_variance_fields']
    export const isgame_server_nodes_variance_fields = (obj?: { __typename?: any } | null): obj is game_server_nodes_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isgame_server_nodes_variance_fields"')
      return game_server_nodes_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_possibleTypes: string[] = ['lobbies']
    export const islobbies = (obj?: { __typename?: any } | null): obj is lobbies => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies"')
      return lobbies_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_aggregate_possibleTypes: string[] = ['lobbies_aggregate']
    export const islobbies_aggregate = (obj?: { __typename?: any } | null): obj is lobbies_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies_aggregate"')
      return lobbies_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_aggregate_fields_possibleTypes: string[] = ['lobbies_aggregate_fields']
    export const islobbies_aggregate_fields = (obj?: { __typename?: any } | null): obj is lobbies_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies_aggregate_fields"')
      return lobbies_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_max_fields_possibleTypes: string[] = ['lobbies_max_fields']
    export const islobbies_max_fields = (obj?: { __typename?: any } | null): obj is lobbies_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies_max_fields"')
      return lobbies_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_min_fields_possibleTypes: string[] = ['lobbies_min_fields']
    export const islobbies_min_fields = (obj?: { __typename?: any } | null): obj is lobbies_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies_min_fields"')
      return lobbies_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobbies_mutation_response_possibleTypes: string[] = ['lobbies_mutation_response']
    export const islobbies_mutation_response = (obj?: { __typename?: any } | null): obj is lobbies_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobbies_mutation_response"')
      return lobbies_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_possibleTypes: string[] = ['lobby_players']
    export const islobby_players = (obj?: { __typename?: any } | null): obj is lobby_players => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players"')
      return lobby_players_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_aggregate_possibleTypes: string[] = ['lobby_players_aggregate']
    export const islobby_players_aggregate = (obj?: { __typename?: any } | null): obj is lobby_players_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_aggregate"')
      return lobby_players_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_aggregate_fields_possibleTypes: string[] = ['lobby_players_aggregate_fields']
    export const islobby_players_aggregate_fields = (obj?: { __typename?: any } | null): obj is lobby_players_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_aggregate_fields"')
      return lobby_players_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_avg_fields_possibleTypes: string[] = ['lobby_players_avg_fields']
    export const islobby_players_avg_fields = (obj?: { __typename?: any } | null): obj is lobby_players_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_avg_fields"')
      return lobby_players_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_max_fields_possibleTypes: string[] = ['lobby_players_max_fields']
    export const islobby_players_max_fields = (obj?: { __typename?: any } | null): obj is lobby_players_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_max_fields"')
      return lobby_players_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_min_fields_possibleTypes: string[] = ['lobby_players_min_fields']
    export const islobby_players_min_fields = (obj?: { __typename?: any } | null): obj is lobby_players_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_min_fields"')
      return lobby_players_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_mutation_response_possibleTypes: string[] = ['lobby_players_mutation_response']
    export const islobby_players_mutation_response = (obj?: { __typename?: any } | null): obj is lobby_players_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_mutation_response"')
      return lobby_players_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_stddev_fields_possibleTypes: string[] = ['lobby_players_stddev_fields']
    export const islobby_players_stddev_fields = (obj?: { __typename?: any } | null): obj is lobby_players_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_stddev_fields"')
      return lobby_players_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_stddev_pop_fields_possibleTypes: string[] = ['lobby_players_stddev_pop_fields']
    export const islobby_players_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is lobby_players_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_stddev_pop_fields"')
      return lobby_players_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_stddev_samp_fields_possibleTypes: string[] = ['lobby_players_stddev_samp_fields']
    export const islobby_players_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is lobby_players_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_stddev_samp_fields"')
      return lobby_players_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_sum_fields_possibleTypes: string[] = ['lobby_players_sum_fields']
    export const islobby_players_sum_fields = (obj?: { __typename?: any } | null): obj is lobby_players_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_sum_fields"')
      return lobby_players_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_var_pop_fields_possibleTypes: string[] = ['lobby_players_var_pop_fields']
    export const islobby_players_var_pop_fields = (obj?: { __typename?: any } | null): obj is lobby_players_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_var_pop_fields"')
      return lobby_players_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_var_samp_fields_possibleTypes: string[] = ['lobby_players_var_samp_fields']
    export const islobby_players_var_samp_fields = (obj?: { __typename?: any } | null): obj is lobby_players_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_var_samp_fields"')
      return lobby_players_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const lobby_players_variance_fields_possibleTypes: string[] = ['lobby_players_variance_fields']
    export const islobby_players_variance_fields = (obj?: { __typename?: any } | null): obj is lobby_players_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islobby_players_variance_fields"')
      return lobby_players_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_possibleTypes: string[] = ['map_pools']
    export const ismap_pools = (obj?: { __typename?: any } | null): obj is map_pools => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools"')
      return map_pools_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_aggregate_possibleTypes: string[] = ['map_pools_aggregate']
    export const ismap_pools_aggregate = (obj?: { __typename?: any } | null): obj is map_pools_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools_aggregate"')
      return map_pools_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_aggregate_fields_possibleTypes: string[] = ['map_pools_aggregate_fields']
    export const ismap_pools_aggregate_fields = (obj?: { __typename?: any } | null): obj is map_pools_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools_aggregate_fields"')
      return map_pools_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_max_fields_possibleTypes: string[] = ['map_pools_max_fields']
    export const ismap_pools_max_fields = (obj?: { __typename?: any } | null): obj is map_pools_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools_max_fields"')
      return map_pools_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_min_fields_possibleTypes: string[] = ['map_pools_min_fields']
    export const ismap_pools_min_fields = (obj?: { __typename?: any } | null): obj is map_pools_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools_min_fields"')
      return map_pools_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const map_pools_mutation_response_possibleTypes: string[] = ['map_pools_mutation_response']
    export const ismap_pools_mutation_response = (obj?: { __typename?: any } | null): obj is map_pools_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismap_pools_mutation_response"')
      return map_pools_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const maps_possibleTypes: string[] = ['maps']
    export const ismaps = (obj?: { __typename?: any } | null): obj is maps => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps"')
      return maps_possibleTypes.includes(obj.__typename)
    }
    


    const maps_aggregate_possibleTypes: string[] = ['maps_aggregate']
    export const ismaps_aggregate = (obj?: { __typename?: any } | null): obj is maps_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps_aggregate"')
      return maps_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const maps_aggregate_fields_possibleTypes: string[] = ['maps_aggregate_fields']
    export const ismaps_aggregate_fields = (obj?: { __typename?: any } | null): obj is maps_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps_aggregate_fields"')
      return maps_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const maps_max_fields_possibleTypes: string[] = ['maps_max_fields']
    export const ismaps_max_fields = (obj?: { __typename?: any } | null): obj is maps_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps_max_fields"')
      return maps_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const maps_min_fields_possibleTypes: string[] = ['maps_min_fields']
    export const ismaps_min_fields = (obj?: { __typename?: any } | null): obj is maps_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps_min_fields"')
      return maps_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const maps_mutation_response_possibleTypes: string[] = ['maps_mutation_response']
    export const ismaps_mutation_response = (obj?: { __typename?: any } | null): obj is maps_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismaps_mutation_response"')
      return maps_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_possibleTypes: string[] = ['match_invites']
    export const ismatch_invites = (obj?: { __typename?: any } | null): obj is match_invites => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites"')
      return match_invites_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_aggregate_possibleTypes: string[] = ['match_invites_aggregate']
    export const ismatch_invites_aggregate = (obj?: { __typename?: any } | null): obj is match_invites_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_aggregate"')
      return match_invites_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_aggregate_fields_possibleTypes: string[] = ['match_invites_aggregate_fields']
    export const ismatch_invites_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_invites_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_aggregate_fields"')
      return match_invites_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_avg_fields_possibleTypes: string[] = ['match_invites_avg_fields']
    export const ismatch_invites_avg_fields = (obj?: { __typename?: any } | null): obj is match_invites_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_avg_fields"')
      return match_invites_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_max_fields_possibleTypes: string[] = ['match_invites_max_fields']
    export const ismatch_invites_max_fields = (obj?: { __typename?: any } | null): obj is match_invites_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_max_fields"')
      return match_invites_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_min_fields_possibleTypes: string[] = ['match_invites_min_fields']
    export const ismatch_invites_min_fields = (obj?: { __typename?: any } | null): obj is match_invites_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_min_fields"')
      return match_invites_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_mutation_response_possibleTypes: string[] = ['match_invites_mutation_response']
    export const ismatch_invites_mutation_response = (obj?: { __typename?: any } | null): obj is match_invites_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_mutation_response"')
      return match_invites_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_stddev_fields_possibleTypes: string[] = ['match_invites_stddev_fields']
    export const ismatch_invites_stddev_fields = (obj?: { __typename?: any } | null): obj is match_invites_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_stddev_fields"')
      return match_invites_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_stddev_pop_fields_possibleTypes: string[] = ['match_invites_stddev_pop_fields']
    export const ismatch_invites_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_invites_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_stddev_pop_fields"')
      return match_invites_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_stddev_samp_fields_possibleTypes: string[] = ['match_invites_stddev_samp_fields']
    export const ismatch_invites_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_invites_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_stddev_samp_fields"')
      return match_invites_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_sum_fields_possibleTypes: string[] = ['match_invites_sum_fields']
    export const ismatch_invites_sum_fields = (obj?: { __typename?: any } | null): obj is match_invites_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_sum_fields"')
      return match_invites_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_var_pop_fields_possibleTypes: string[] = ['match_invites_var_pop_fields']
    export const ismatch_invites_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_invites_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_var_pop_fields"')
      return match_invites_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_var_samp_fields_possibleTypes: string[] = ['match_invites_var_samp_fields']
    export const ismatch_invites_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_invites_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_var_samp_fields"')
      return match_invites_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_invites_variance_fields_possibleTypes: string[] = ['match_invites_variance_fields']
    export const ismatch_invites_variance_fields = (obj?: { __typename?: any } | null): obj is match_invites_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_invites_variance_fields"')
      return match_invites_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_possibleTypes: string[] = ['match_lineup_players']
    export const ismatch_lineup_players = (obj?: { __typename?: any } | null): obj is match_lineup_players => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players"')
      return match_lineup_players_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_aggregate_possibleTypes: string[] = ['match_lineup_players_aggregate']
    export const ismatch_lineup_players_aggregate = (obj?: { __typename?: any } | null): obj is match_lineup_players_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_aggregate"')
      return match_lineup_players_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_aggregate_fields_possibleTypes: string[] = ['match_lineup_players_aggregate_fields']
    export const ismatch_lineup_players_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_aggregate_fields"')
      return match_lineup_players_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_avg_fields_possibleTypes: string[] = ['match_lineup_players_avg_fields']
    export const ismatch_lineup_players_avg_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_avg_fields"')
      return match_lineup_players_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_max_fields_possibleTypes: string[] = ['match_lineup_players_max_fields']
    export const ismatch_lineup_players_max_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_max_fields"')
      return match_lineup_players_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_min_fields_possibleTypes: string[] = ['match_lineup_players_min_fields']
    export const ismatch_lineup_players_min_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_min_fields"')
      return match_lineup_players_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_mutation_response_possibleTypes: string[] = ['match_lineup_players_mutation_response']
    export const ismatch_lineup_players_mutation_response = (obj?: { __typename?: any } | null): obj is match_lineup_players_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_mutation_response"')
      return match_lineup_players_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_stddev_fields_possibleTypes: string[] = ['match_lineup_players_stddev_fields']
    export const ismatch_lineup_players_stddev_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_stddev_fields"')
      return match_lineup_players_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_stddev_pop_fields_possibleTypes: string[] = ['match_lineup_players_stddev_pop_fields']
    export const ismatch_lineup_players_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_stddev_pop_fields"')
      return match_lineup_players_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_stddev_samp_fields_possibleTypes: string[] = ['match_lineup_players_stddev_samp_fields']
    export const ismatch_lineup_players_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_stddev_samp_fields"')
      return match_lineup_players_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_sum_fields_possibleTypes: string[] = ['match_lineup_players_sum_fields']
    export const ismatch_lineup_players_sum_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_sum_fields"')
      return match_lineup_players_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_var_pop_fields_possibleTypes: string[] = ['match_lineup_players_var_pop_fields']
    export const ismatch_lineup_players_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_var_pop_fields"')
      return match_lineup_players_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_var_samp_fields_possibleTypes: string[] = ['match_lineup_players_var_samp_fields']
    export const ismatch_lineup_players_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_var_samp_fields"')
      return match_lineup_players_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineup_players_variance_fields_possibleTypes: string[] = ['match_lineup_players_variance_fields']
    export const ismatch_lineup_players_variance_fields = (obj?: { __typename?: any } | null): obj is match_lineup_players_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineup_players_variance_fields"')
      return match_lineup_players_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_possibleTypes: string[] = ['match_lineups']
    export const ismatch_lineups = (obj?: { __typename?: any } | null): obj is match_lineups => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups"')
      return match_lineups_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_aggregate_possibleTypes: string[] = ['match_lineups_aggregate']
    export const ismatch_lineups_aggregate = (obj?: { __typename?: any } | null): obj is match_lineups_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_aggregate"')
      return match_lineups_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_aggregate_fields_possibleTypes: string[] = ['match_lineups_aggregate_fields']
    export const ismatch_lineups_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_lineups_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_aggregate_fields"')
      return match_lineups_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_avg_fields_possibleTypes: string[] = ['match_lineups_avg_fields']
    export const ismatch_lineups_avg_fields = (obj?: { __typename?: any } | null): obj is match_lineups_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_avg_fields"')
      return match_lineups_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_max_fields_possibleTypes: string[] = ['match_lineups_max_fields']
    export const ismatch_lineups_max_fields = (obj?: { __typename?: any } | null): obj is match_lineups_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_max_fields"')
      return match_lineups_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_min_fields_possibleTypes: string[] = ['match_lineups_min_fields']
    export const ismatch_lineups_min_fields = (obj?: { __typename?: any } | null): obj is match_lineups_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_min_fields"')
      return match_lineups_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_mutation_response_possibleTypes: string[] = ['match_lineups_mutation_response']
    export const ismatch_lineups_mutation_response = (obj?: { __typename?: any } | null): obj is match_lineups_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_mutation_response"')
      return match_lineups_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_stddev_fields_possibleTypes: string[] = ['match_lineups_stddev_fields']
    export const ismatch_lineups_stddev_fields = (obj?: { __typename?: any } | null): obj is match_lineups_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_stddev_fields"')
      return match_lineups_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_stddev_pop_fields_possibleTypes: string[] = ['match_lineups_stddev_pop_fields']
    export const ismatch_lineups_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_lineups_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_stddev_pop_fields"')
      return match_lineups_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_stddev_samp_fields_possibleTypes: string[] = ['match_lineups_stddev_samp_fields']
    export const ismatch_lineups_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_lineups_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_stddev_samp_fields"')
      return match_lineups_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_sum_fields_possibleTypes: string[] = ['match_lineups_sum_fields']
    export const ismatch_lineups_sum_fields = (obj?: { __typename?: any } | null): obj is match_lineups_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_sum_fields"')
      return match_lineups_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_var_pop_fields_possibleTypes: string[] = ['match_lineups_var_pop_fields']
    export const ismatch_lineups_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_lineups_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_var_pop_fields"')
      return match_lineups_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_var_samp_fields_possibleTypes: string[] = ['match_lineups_var_samp_fields']
    export const ismatch_lineups_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_lineups_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_var_samp_fields"')
      return match_lineups_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_lineups_variance_fields_possibleTypes: string[] = ['match_lineups_variance_fields']
    export const ismatch_lineups_variance_fields = (obj?: { __typename?: any } | null): obj is match_lineups_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_lineups_variance_fields"')
      return match_lineups_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_possibleTypes: string[] = ['match_map_demos']
    export const ismatch_map_demos = (obj?: { __typename?: any } | null): obj is match_map_demos => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos"')
      return match_map_demos_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_aggregate_possibleTypes: string[] = ['match_map_demos_aggregate']
    export const ismatch_map_demos_aggregate = (obj?: { __typename?: any } | null): obj is match_map_demos_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_aggregate"')
      return match_map_demos_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_aggregate_fields_possibleTypes: string[] = ['match_map_demos_aggregate_fields']
    export const ismatch_map_demos_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_aggregate_fields"')
      return match_map_demos_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_avg_fields_possibleTypes: string[] = ['match_map_demos_avg_fields']
    export const ismatch_map_demos_avg_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_avg_fields"')
      return match_map_demos_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_max_fields_possibleTypes: string[] = ['match_map_demos_max_fields']
    export const ismatch_map_demos_max_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_max_fields"')
      return match_map_demos_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_min_fields_possibleTypes: string[] = ['match_map_demos_min_fields']
    export const ismatch_map_demos_min_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_min_fields"')
      return match_map_demos_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_mutation_response_possibleTypes: string[] = ['match_map_demos_mutation_response']
    export const ismatch_map_demos_mutation_response = (obj?: { __typename?: any } | null): obj is match_map_demos_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_mutation_response"')
      return match_map_demos_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_stddev_fields_possibleTypes: string[] = ['match_map_demos_stddev_fields']
    export const ismatch_map_demos_stddev_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_stddev_fields"')
      return match_map_demos_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_stddev_pop_fields_possibleTypes: string[] = ['match_map_demos_stddev_pop_fields']
    export const ismatch_map_demos_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_stddev_pop_fields"')
      return match_map_demos_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_stddev_samp_fields_possibleTypes: string[] = ['match_map_demos_stddev_samp_fields']
    export const ismatch_map_demos_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_stddev_samp_fields"')
      return match_map_demos_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_sum_fields_possibleTypes: string[] = ['match_map_demos_sum_fields']
    export const ismatch_map_demos_sum_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_sum_fields"')
      return match_map_demos_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_var_pop_fields_possibleTypes: string[] = ['match_map_demos_var_pop_fields']
    export const ismatch_map_demos_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_var_pop_fields"')
      return match_map_demos_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_var_samp_fields_possibleTypes: string[] = ['match_map_demos_var_samp_fields']
    export const ismatch_map_demos_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_var_samp_fields"')
      return match_map_demos_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_demos_variance_fields_possibleTypes: string[] = ['match_map_demos_variance_fields']
    export const ismatch_map_demos_variance_fields = (obj?: { __typename?: any } | null): obj is match_map_demos_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_demos_variance_fields"')
      return match_map_demos_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_possibleTypes: string[] = ['match_map_rounds']
    export const ismatch_map_rounds = (obj?: { __typename?: any } | null): obj is match_map_rounds => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds"')
      return match_map_rounds_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_aggregate_possibleTypes: string[] = ['match_map_rounds_aggregate']
    export const ismatch_map_rounds_aggregate = (obj?: { __typename?: any } | null): obj is match_map_rounds_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_aggregate"')
      return match_map_rounds_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_aggregate_fields_possibleTypes: string[] = ['match_map_rounds_aggregate_fields']
    export const ismatch_map_rounds_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_aggregate_fields"')
      return match_map_rounds_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_avg_fields_possibleTypes: string[] = ['match_map_rounds_avg_fields']
    export const ismatch_map_rounds_avg_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_avg_fields"')
      return match_map_rounds_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_max_fields_possibleTypes: string[] = ['match_map_rounds_max_fields']
    export const ismatch_map_rounds_max_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_max_fields"')
      return match_map_rounds_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_min_fields_possibleTypes: string[] = ['match_map_rounds_min_fields']
    export const ismatch_map_rounds_min_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_min_fields"')
      return match_map_rounds_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_mutation_response_possibleTypes: string[] = ['match_map_rounds_mutation_response']
    export const ismatch_map_rounds_mutation_response = (obj?: { __typename?: any } | null): obj is match_map_rounds_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_mutation_response"')
      return match_map_rounds_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_stddev_fields_possibleTypes: string[] = ['match_map_rounds_stddev_fields']
    export const ismatch_map_rounds_stddev_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_stddev_fields"')
      return match_map_rounds_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_stddev_pop_fields_possibleTypes: string[] = ['match_map_rounds_stddev_pop_fields']
    export const ismatch_map_rounds_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_stddev_pop_fields"')
      return match_map_rounds_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_stddev_samp_fields_possibleTypes: string[] = ['match_map_rounds_stddev_samp_fields']
    export const ismatch_map_rounds_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_stddev_samp_fields"')
      return match_map_rounds_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_sum_fields_possibleTypes: string[] = ['match_map_rounds_sum_fields']
    export const ismatch_map_rounds_sum_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_sum_fields"')
      return match_map_rounds_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_var_pop_fields_possibleTypes: string[] = ['match_map_rounds_var_pop_fields']
    export const ismatch_map_rounds_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_var_pop_fields"')
      return match_map_rounds_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_var_samp_fields_possibleTypes: string[] = ['match_map_rounds_var_samp_fields']
    export const ismatch_map_rounds_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_var_samp_fields"')
      return match_map_rounds_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_rounds_variance_fields_possibleTypes: string[] = ['match_map_rounds_variance_fields']
    export const ismatch_map_rounds_variance_fields = (obj?: { __typename?: any } | null): obj is match_map_rounds_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_rounds_variance_fields"')
      return match_map_rounds_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_possibleTypes: string[] = ['match_map_veto_picks']
    export const ismatch_map_veto_picks = (obj?: { __typename?: any } | null): obj is match_map_veto_picks => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks"')
      return match_map_veto_picks_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_aggregate_possibleTypes: string[] = ['match_map_veto_picks_aggregate']
    export const ismatch_map_veto_picks_aggregate = (obj?: { __typename?: any } | null): obj is match_map_veto_picks_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks_aggregate"')
      return match_map_veto_picks_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_aggregate_fields_possibleTypes: string[] = ['match_map_veto_picks_aggregate_fields']
    export const ismatch_map_veto_picks_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_map_veto_picks_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks_aggregate_fields"')
      return match_map_veto_picks_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_max_fields_possibleTypes: string[] = ['match_map_veto_picks_max_fields']
    export const ismatch_map_veto_picks_max_fields = (obj?: { __typename?: any } | null): obj is match_map_veto_picks_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks_max_fields"')
      return match_map_veto_picks_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_min_fields_possibleTypes: string[] = ['match_map_veto_picks_min_fields']
    export const ismatch_map_veto_picks_min_fields = (obj?: { __typename?: any } | null): obj is match_map_veto_picks_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks_min_fields"')
      return match_map_veto_picks_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_map_veto_picks_mutation_response_possibleTypes: string[] = ['match_map_veto_picks_mutation_response']
    export const ismatch_map_veto_picks_mutation_response = (obj?: { __typename?: any } | null): obj is match_map_veto_picks_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_map_veto_picks_mutation_response"')
      return match_map_veto_picks_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_possibleTypes: string[] = ['match_maps']
    export const ismatch_maps = (obj?: { __typename?: any } | null): obj is match_maps => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps"')
      return match_maps_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_aggregate_possibleTypes: string[] = ['match_maps_aggregate']
    export const ismatch_maps_aggregate = (obj?: { __typename?: any } | null): obj is match_maps_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_aggregate"')
      return match_maps_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_aggregate_fields_possibleTypes: string[] = ['match_maps_aggregate_fields']
    export const ismatch_maps_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_maps_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_aggregate_fields"')
      return match_maps_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_avg_fields_possibleTypes: string[] = ['match_maps_avg_fields']
    export const ismatch_maps_avg_fields = (obj?: { __typename?: any } | null): obj is match_maps_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_avg_fields"')
      return match_maps_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_max_fields_possibleTypes: string[] = ['match_maps_max_fields']
    export const ismatch_maps_max_fields = (obj?: { __typename?: any } | null): obj is match_maps_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_max_fields"')
      return match_maps_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_min_fields_possibleTypes: string[] = ['match_maps_min_fields']
    export const ismatch_maps_min_fields = (obj?: { __typename?: any } | null): obj is match_maps_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_min_fields"')
      return match_maps_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_mutation_response_possibleTypes: string[] = ['match_maps_mutation_response']
    export const ismatch_maps_mutation_response = (obj?: { __typename?: any } | null): obj is match_maps_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_mutation_response"')
      return match_maps_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_stddev_fields_possibleTypes: string[] = ['match_maps_stddev_fields']
    export const ismatch_maps_stddev_fields = (obj?: { __typename?: any } | null): obj is match_maps_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_stddev_fields"')
      return match_maps_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_stddev_pop_fields_possibleTypes: string[] = ['match_maps_stddev_pop_fields']
    export const ismatch_maps_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_maps_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_stddev_pop_fields"')
      return match_maps_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_stddev_samp_fields_possibleTypes: string[] = ['match_maps_stddev_samp_fields']
    export const ismatch_maps_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_maps_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_stddev_samp_fields"')
      return match_maps_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_sum_fields_possibleTypes: string[] = ['match_maps_sum_fields']
    export const ismatch_maps_sum_fields = (obj?: { __typename?: any } | null): obj is match_maps_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_sum_fields"')
      return match_maps_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_var_pop_fields_possibleTypes: string[] = ['match_maps_var_pop_fields']
    export const ismatch_maps_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_maps_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_var_pop_fields"')
      return match_maps_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_var_samp_fields_possibleTypes: string[] = ['match_maps_var_samp_fields']
    export const ismatch_maps_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_maps_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_var_samp_fields"')
      return match_maps_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_maps_variance_fields_possibleTypes: string[] = ['match_maps_variance_fields']
    export const ismatch_maps_variance_fields = (obj?: { __typename?: any } | null): obj is match_maps_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_maps_variance_fields"')
      return match_maps_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_possibleTypes: string[] = ['match_options']
    export const ismatch_options = (obj?: { __typename?: any } | null): obj is match_options => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options"')
      return match_options_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_aggregate_possibleTypes: string[] = ['match_options_aggregate']
    export const ismatch_options_aggregate = (obj?: { __typename?: any } | null): obj is match_options_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_aggregate"')
      return match_options_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_aggregate_fields_possibleTypes: string[] = ['match_options_aggregate_fields']
    export const ismatch_options_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_options_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_aggregate_fields"')
      return match_options_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_avg_fields_possibleTypes: string[] = ['match_options_avg_fields']
    export const ismatch_options_avg_fields = (obj?: { __typename?: any } | null): obj is match_options_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_avg_fields"')
      return match_options_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_max_fields_possibleTypes: string[] = ['match_options_max_fields']
    export const ismatch_options_max_fields = (obj?: { __typename?: any } | null): obj is match_options_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_max_fields"')
      return match_options_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_min_fields_possibleTypes: string[] = ['match_options_min_fields']
    export const ismatch_options_min_fields = (obj?: { __typename?: any } | null): obj is match_options_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_min_fields"')
      return match_options_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_mutation_response_possibleTypes: string[] = ['match_options_mutation_response']
    export const ismatch_options_mutation_response = (obj?: { __typename?: any } | null): obj is match_options_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_mutation_response"')
      return match_options_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_stddev_fields_possibleTypes: string[] = ['match_options_stddev_fields']
    export const ismatch_options_stddev_fields = (obj?: { __typename?: any } | null): obj is match_options_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_stddev_fields"')
      return match_options_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_stddev_pop_fields_possibleTypes: string[] = ['match_options_stddev_pop_fields']
    export const ismatch_options_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is match_options_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_stddev_pop_fields"')
      return match_options_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_stddev_samp_fields_possibleTypes: string[] = ['match_options_stddev_samp_fields']
    export const ismatch_options_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is match_options_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_stddev_samp_fields"')
      return match_options_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_sum_fields_possibleTypes: string[] = ['match_options_sum_fields']
    export const ismatch_options_sum_fields = (obj?: { __typename?: any } | null): obj is match_options_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_sum_fields"')
      return match_options_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_var_pop_fields_possibleTypes: string[] = ['match_options_var_pop_fields']
    export const ismatch_options_var_pop_fields = (obj?: { __typename?: any } | null): obj is match_options_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_var_pop_fields"')
      return match_options_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_var_samp_fields_possibleTypes: string[] = ['match_options_var_samp_fields']
    export const ismatch_options_var_samp_fields = (obj?: { __typename?: any } | null): obj is match_options_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_var_samp_fields"')
      return match_options_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_options_variance_fields_possibleTypes: string[] = ['match_options_variance_fields']
    export const ismatch_options_variance_fields = (obj?: { __typename?: any } | null): obj is match_options_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_options_variance_fields"')
      return match_options_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_possibleTypes: string[] = ['match_region_veto_picks']
    export const ismatch_region_veto_picks = (obj?: { __typename?: any } | null): obj is match_region_veto_picks => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks"')
      return match_region_veto_picks_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_aggregate_possibleTypes: string[] = ['match_region_veto_picks_aggregate']
    export const ismatch_region_veto_picks_aggregate = (obj?: { __typename?: any } | null): obj is match_region_veto_picks_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks_aggregate"')
      return match_region_veto_picks_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_aggregate_fields_possibleTypes: string[] = ['match_region_veto_picks_aggregate_fields']
    export const ismatch_region_veto_picks_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_region_veto_picks_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks_aggregate_fields"')
      return match_region_veto_picks_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_max_fields_possibleTypes: string[] = ['match_region_veto_picks_max_fields']
    export const ismatch_region_veto_picks_max_fields = (obj?: { __typename?: any } | null): obj is match_region_veto_picks_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks_max_fields"')
      return match_region_veto_picks_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_min_fields_possibleTypes: string[] = ['match_region_veto_picks_min_fields']
    export const ismatch_region_veto_picks_min_fields = (obj?: { __typename?: any } | null): obj is match_region_veto_picks_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks_min_fields"')
      return match_region_veto_picks_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_region_veto_picks_mutation_response_possibleTypes: string[] = ['match_region_veto_picks_mutation_response']
    export const ismatch_region_veto_picks_mutation_response = (obj?: { __typename?: any } | null): obj is match_region_veto_picks_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_region_veto_picks_mutation_response"')
      return match_region_veto_picks_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_possibleTypes: string[] = ['match_type_cfgs']
    export const ismatch_type_cfgs = (obj?: { __typename?: any } | null): obj is match_type_cfgs => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs"')
      return match_type_cfgs_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_aggregate_possibleTypes: string[] = ['match_type_cfgs_aggregate']
    export const ismatch_type_cfgs_aggregate = (obj?: { __typename?: any } | null): obj is match_type_cfgs_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs_aggregate"')
      return match_type_cfgs_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_aggregate_fields_possibleTypes: string[] = ['match_type_cfgs_aggregate_fields']
    export const ismatch_type_cfgs_aggregate_fields = (obj?: { __typename?: any } | null): obj is match_type_cfgs_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs_aggregate_fields"')
      return match_type_cfgs_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_max_fields_possibleTypes: string[] = ['match_type_cfgs_max_fields']
    export const ismatch_type_cfgs_max_fields = (obj?: { __typename?: any } | null): obj is match_type_cfgs_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs_max_fields"')
      return match_type_cfgs_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_min_fields_possibleTypes: string[] = ['match_type_cfgs_min_fields']
    export const ismatch_type_cfgs_min_fields = (obj?: { __typename?: any } | null): obj is match_type_cfgs_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs_min_fields"')
      return match_type_cfgs_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const match_type_cfgs_mutation_response_possibleTypes: string[] = ['match_type_cfgs_mutation_response']
    export const ismatch_type_cfgs_mutation_response = (obj?: { __typename?: any } | null): obj is match_type_cfgs_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatch_type_cfgs_mutation_response"')
      return match_type_cfgs_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const matches_possibleTypes: string[] = ['matches']
    export const ismatches = (obj?: { __typename?: any } | null): obj is matches => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches"')
      return matches_possibleTypes.includes(obj.__typename)
    }
    


    const matches_aggregate_possibleTypes: string[] = ['matches_aggregate']
    export const ismatches_aggregate = (obj?: { __typename?: any } | null): obj is matches_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_aggregate"')
      return matches_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const matches_aggregate_fields_possibleTypes: string[] = ['matches_aggregate_fields']
    export const ismatches_aggregate_fields = (obj?: { __typename?: any } | null): obj is matches_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_aggregate_fields"')
      return matches_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_avg_fields_possibleTypes: string[] = ['matches_avg_fields']
    export const ismatches_avg_fields = (obj?: { __typename?: any } | null): obj is matches_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_avg_fields"')
      return matches_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_max_fields_possibleTypes: string[] = ['matches_max_fields']
    export const ismatches_max_fields = (obj?: { __typename?: any } | null): obj is matches_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_max_fields"')
      return matches_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_min_fields_possibleTypes: string[] = ['matches_min_fields']
    export const ismatches_min_fields = (obj?: { __typename?: any } | null): obj is matches_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_min_fields"')
      return matches_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_mutation_response_possibleTypes: string[] = ['matches_mutation_response']
    export const ismatches_mutation_response = (obj?: { __typename?: any } | null): obj is matches_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_mutation_response"')
      return matches_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const matches_stddev_fields_possibleTypes: string[] = ['matches_stddev_fields']
    export const ismatches_stddev_fields = (obj?: { __typename?: any } | null): obj is matches_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_stddev_fields"')
      return matches_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_stddev_pop_fields_possibleTypes: string[] = ['matches_stddev_pop_fields']
    export const ismatches_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is matches_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_stddev_pop_fields"')
      return matches_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_stddev_samp_fields_possibleTypes: string[] = ['matches_stddev_samp_fields']
    export const ismatches_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is matches_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_stddev_samp_fields"')
      return matches_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_sum_fields_possibleTypes: string[] = ['matches_sum_fields']
    export const ismatches_sum_fields = (obj?: { __typename?: any } | null): obj is matches_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_sum_fields"')
      return matches_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_var_pop_fields_possibleTypes: string[] = ['matches_var_pop_fields']
    export const ismatches_var_pop_fields = (obj?: { __typename?: any } | null): obj is matches_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_var_pop_fields"')
      return matches_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_var_samp_fields_possibleTypes: string[] = ['matches_var_samp_fields']
    export const ismatches_var_samp_fields = (obj?: { __typename?: any } | null): obj is matches_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_var_samp_fields"')
      return matches_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const matches_variance_fields_possibleTypes: string[] = ['matches_variance_fields']
    export const ismatches_variance_fields = (obj?: { __typename?: any } | null): obj is matches_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismatches_variance_fields"')
      return matches_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_possibleTypes: string[] = ['migration_hashes_hashes']
    export const ismigration_hashes_hashes = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes"')
      return migration_hashes_hashes_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_aggregate_possibleTypes: string[] = ['migration_hashes_hashes_aggregate']
    export const ismigration_hashes_hashes_aggregate = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes_aggregate"')
      return migration_hashes_hashes_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_aggregate_fields_possibleTypes: string[] = ['migration_hashes_hashes_aggregate_fields']
    export const ismigration_hashes_hashes_aggregate_fields = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes_aggregate_fields"')
      return migration_hashes_hashes_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_max_fields_possibleTypes: string[] = ['migration_hashes_hashes_max_fields']
    export const ismigration_hashes_hashes_max_fields = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes_max_fields"')
      return migration_hashes_hashes_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_min_fields_possibleTypes: string[] = ['migration_hashes_hashes_min_fields']
    export const ismigration_hashes_hashes_min_fields = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes_min_fields"')
      return migration_hashes_hashes_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const migration_hashes_hashes_mutation_response_possibleTypes: string[] = ['migration_hashes_hashes_mutation_response']
    export const ismigration_hashes_hashes_mutation_response = (obj?: { __typename?: any } | null): obj is migration_hashes_hashes_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismigration_hashes_hashes_mutation_response"')
      return migration_hashes_hashes_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const mutation_root_possibleTypes: string[] = ['mutation_root']
    export const ismutation_root = (obj?: { __typename?: any } | null): obj is mutation_root => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismutation_root"')
      return mutation_root_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_possibleTypes: string[] = ['my_friends']
    export const ismy_friends = (obj?: { __typename?: any } | null): obj is my_friends => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends"')
      return my_friends_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_aggregate_possibleTypes: string[] = ['my_friends_aggregate']
    export const ismy_friends_aggregate = (obj?: { __typename?: any } | null): obj is my_friends_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_aggregate"')
      return my_friends_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_aggregate_fields_possibleTypes: string[] = ['my_friends_aggregate_fields']
    export const ismy_friends_aggregate_fields = (obj?: { __typename?: any } | null): obj is my_friends_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_aggregate_fields"')
      return my_friends_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_avg_fields_possibleTypes: string[] = ['my_friends_avg_fields']
    export const ismy_friends_avg_fields = (obj?: { __typename?: any } | null): obj is my_friends_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_avg_fields"')
      return my_friends_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_max_fields_possibleTypes: string[] = ['my_friends_max_fields']
    export const ismy_friends_max_fields = (obj?: { __typename?: any } | null): obj is my_friends_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_max_fields"')
      return my_friends_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_min_fields_possibleTypes: string[] = ['my_friends_min_fields']
    export const ismy_friends_min_fields = (obj?: { __typename?: any } | null): obj is my_friends_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_min_fields"')
      return my_friends_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_mutation_response_possibleTypes: string[] = ['my_friends_mutation_response']
    export const ismy_friends_mutation_response = (obj?: { __typename?: any } | null): obj is my_friends_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_mutation_response"')
      return my_friends_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_stddev_fields_possibleTypes: string[] = ['my_friends_stddev_fields']
    export const ismy_friends_stddev_fields = (obj?: { __typename?: any } | null): obj is my_friends_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_stddev_fields"')
      return my_friends_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_stddev_pop_fields_possibleTypes: string[] = ['my_friends_stddev_pop_fields']
    export const ismy_friends_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is my_friends_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_stddev_pop_fields"')
      return my_friends_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_stddev_samp_fields_possibleTypes: string[] = ['my_friends_stddev_samp_fields']
    export const ismy_friends_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is my_friends_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_stddev_samp_fields"')
      return my_friends_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_sum_fields_possibleTypes: string[] = ['my_friends_sum_fields']
    export const ismy_friends_sum_fields = (obj?: { __typename?: any } | null): obj is my_friends_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_sum_fields"')
      return my_friends_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_var_pop_fields_possibleTypes: string[] = ['my_friends_var_pop_fields']
    export const ismy_friends_var_pop_fields = (obj?: { __typename?: any } | null): obj is my_friends_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_var_pop_fields"')
      return my_friends_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_var_samp_fields_possibleTypes: string[] = ['my_friends_var_samp_fields']
    export const ismy_friends_var_samp_fields = (obj?: { __typename?: any } | null): obj is my_friends_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_var_samp_fields"')
      return my_friends_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const my_friends_variance_fields_possibleTypes: string[] = ['my_friends_variance_fields']
    export const ismy_friends_variance_fields = (obj?: { __typename?: any } | null): obj is my_friends_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismy_friends_variance_fields"')
      return my_friends_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_possibleTypes: string[] = ['notifications']
    export const isnotifications = (obj?: { __typename?: any } | null): obj is notifications => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications"')
      return notifications_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_aggregate_possibleTypes: string[] = ['notifications_aggregate']
    export const isnotifications_aggregate = (obj?: { __typename?: any } | null): obj is notifications_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_aggregate"')
      return notifications_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_aggregate_fields_possibleTypes: string[] = ['notifications_aggregate_fields']
    export const isnotifications_aggregate_fields = (obj?: { __typename?: any } | null): obj is notifications_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_aggregate_fields"')
      return notifications_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_avg_fields_possibleTypes: string[] = ['notifications_avg_fields']
    export const isnotifications_avg_fields = (obj?: { __typename?: any } | null): obj is notifications_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_avg_fields"')
      return notifications_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_max_fields_possibleTypes: string[] = ['notifications_max_fields']
    export const isnotifications_max_fields = (obj?: { __typename?: any } | null): obj is notifications_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_max_fields"')
      return notifications_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_min_fields_possibleTypes: string[] = ['notifications_min_fields']
    export const isnotifications_min_fields = (obj?: { __typename?: any } | null): obj is notifications_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_min_fields"')
      return notifications_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_mutation_response_possibleTypes: string[] = ['notifications_mutation_response']
    export const isnotifications_mutation_response = (obj?: { __typename?: any } | null): obj is notifications_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_mutation_response"')
      return notifications_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_stddev_fields_possibleTypes: string[] = ['notifications_stddev_fields']
    export const isnotifications_stddev_fields = (obj?: { __typename?: any } | null): obj is notifications_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_stddev_fields"')
      return notifications_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_stddev_pop_fields_possibleTypes: string[] = ['notifications_stddev_pop_fields']
    export const isnotifications_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is notifications_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_stddev_pop_fields"')
      return notifications_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_stddev_samp_fields_possibleTypes: string[] = ['notifications_stddev_samp_fields']
    export const isnotifications_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is notifications_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_stddev_samp_fields"')
      return notifications_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_sum_fields_possibleTypes: string[] = ['notifications_sum_fields']
    export const isnotifications_sum_fields = (obj?: { __typename?: any } | null): obj is notifications_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_sum_fields"')
      return notifications_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_var_pop_fields_possibleTypes: string[] = ['notifications_var_pop_fields']
    export const isnotifications_var_pop_fields = (obj?: { __typename?: any } | null): obj is notifications_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_var_pop_fields"')
      return notifications_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_var_samp_fields_possibleTypes: string[] = ['notifications_var_samp_fields']
    export const isnotifications_var_samp_fields = (obj?: { __typename?: any } | null): obj is notifications_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_var_samp_fields"')
      return notifications_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const notifications_variance_fields_possibleTypes: string[] = ['notifications_variance_fields']
    export const isnotifications_variance_fields = (obj?: { __typename?: any } | null): obj is notifications_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isnotifications_variance_fields"')
      return notifications_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_possibleTypes: string[] = ['player_assists']
    export const isplayer_assists = (obj?: { __typename?: any } | null): obj is player_assists => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists"')
      return player_assists_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_aggregate_possibleTypes: string[] = ['player_assists_aggregate']
    export const isplayer_assists_aggregate = (obj?: { __typename?: any } | null): obj is player_assists_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_aggregate"')
      return player_assists_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_aggregate_fields_possibleTypes: string[] = ['player_assists_aggregate_fields']
    export const isplayer_assists_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_assists_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_aggregate_fields"')
      return player_assists_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_avg_fields_possibleTypes: string[] = ['player_assists_avg_fields']
    export const isplayer_assists_avg_fields = (obj?: { __typename?: any } | null): obj is player_assists_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_avg_fields"')
      return player_assists_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_max_fields_possibleTypes: string[] = ['player_assists_max_fields']
    export const isplayer_assists_max_fields = (obj?: { __typename?: any } | null): obj is player_assists_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_max_fields"')
      return player_assists_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_min_fields_possibleTypes: string[] = ['player_assists_min_fields']
    export const isplayer_assists_min_fields = (obj?: { __typename?: any } | null): obj is player_assists_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_min_fields"')
      return player_assists_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_mutation_response_possibleTypes: string[] = ['player_assists_mutation_response']
    export const isplayer_assists_mutation_response = (obj?: { __typename?: any } | null): obj is player_assists_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_mutation_response"')
      return player_assists_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_stddev_fields_possibleTypes: string[] = ['player_assists_stddev_fields']
    export const isplayer_assists_stddev_fields = (obj?: { __typename?: any } | null): obj is player_assists_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_stddev_fields"')
      return player_assists_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_stddev_pop_fields_possibleTypes: string[] = ['player_assists_stddev_pop_fields']
    export const isplayer_assists_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_assists_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_stddev_pop_fields"')
      return player_assists_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_stddev_samp_fields_possibleTypes: string[] = ['player_assists_stddev_samp_fields']
    export const isplayer_assists_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_assists_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_stddev_samp_fields"')
      return player_assists_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_sum_fields_possibleTypes: string[] = ['player_assists_sum_fields']
    export const isplayer_assists_sum_fields = (obj?: { __typename?: any } | null): obj is player_assists_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_sum_fields"')
      return player_assists_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_var_pop_fields_possibleTypes: string[] = ['player_assists_var_pop_fields']
    export const isplayer_assists_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_assists_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_var_pop_fields"')
      return player_assists_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_var_samp_fields_possibleTypes: string[] = ['player_assists_var_samp_fields']
    export const isplayer_assists_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_assists_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_var_samp_fields"')
      return player_assists_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_assists_variance_fields_possibleTypes: string[] = ['player_assists_variance_fields']
    export const isplayer_assists_variance_fields = (obj?: { __typename?: any } | null): obj is player_assists_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_assists_variance_fields"')
      return player_assists_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_possibleTypes: string[] = ['player_damages']
    export const isplayer_damages = (obj?: { __typename?: any } | null): obj is player_damages => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages"')
      return player_damages_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_aggregate_possibleTypes: string[] = ['player_damages_aggregate']
    export const isplayer_damages_aggregate = (obj?: { __typename?: any } | null): obj is player_damages_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_aggregate"')
      return player_damages_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_aggregate_fields_possibleTypes: string[] = ['player_damages_aggregate_fields']
    export const isplayer_damages_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_damages_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_aggregate_fields"')
      return player_damages_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_avg_fields_possibleTypes: string[] = ['player_damages_avg_fields']
    export const isplayer_damages_avg_fields = (obj?: { __typename?: any } | null): obj is player_damages_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_avg_fields"')
      return player_damages_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_max_fields_possibleTypes: string[] = ['player_damages_max_fields']
    export const isplayer_damages_max_fields = (obj?: { __typename?: any } | null): obj is player_damages_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_max_fields"')
      return player_damages_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_min_fields_possibleTypes: string[] = ['player_damages_min_fields']
    export const isplayer_damages_min_fields = (obj?: { __typename?: any } | null): obj is player_damages_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_min_fields"')
      return player_damages_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_mutation_response_possibleTypes: string[] = ['player_damages_mutation_response']
    export const isplayer_damages_mutation_response = (obj?: { __typename?: any } | null): obj is player_damages_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_mutation_response"')
      return player_damages_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_stddev_fields_possibleTypes: string[] = ['player_damages_stddev_fields']
    export const isplayer_damages_stddev_fields = (obj?: { __typename?: any } | null): obj is player_damages_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_stddev_fields"')
      return player_damages_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_stddev_pop_fields_possibleTypes: string[] = ['player_damages_stddev_pop_fields']
    export const isplayer_damages_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_damages_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_stddev_pop_fields"')
      return player_damages_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_stddev_samp_fields_possibleTypes: string[] = ['player_damages_stddev_samp_fields']
    export const isplayer_damages_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_damages_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_stddev_samp_fields"')
      return player_damages_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_sum_fields_possibleTypes: string[] = ['player_damages_sum_fields']
    export const isplayer_damages_sum_fields = (obj?: { __typename?: any } | null): obj is player_damages_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_sum_fields"')
      return player_damages_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_var_pop_fields_possibleTypes: string[] = ['player_damages_var_pop_fields']
    export const isplayer_damages_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_damages_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_var_pop_fields"')
      return player_damages_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_var_samp_fields_possibleTypes: string[] = ['player_damages_var_samp_fields']
    export const isplayer_damages_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_damages_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_var_samp_fields"')
      return player_damages_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_damages_variance_fields_possibleTypes: string[] = ['player_damages_variance_fields']
    export const isplayer_damages_variance_fields = (obj?: { __typename?: any } | null): obj is player_damages_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_damages_variance_fields"')
      return player_damages_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_possibleTypes: string[] = ['player_elo']
    export const isplayer_elo = (obj?: { __typename?: any } | null): obj is player_elo => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo"')
      return player_elo_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_aggregate_possibleTypes: string[] = ['player_elo_aggregate']
    export const isplayer_elo_aggregate = (obj?: { __typename?: any } | null): obj is player_elo_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_aggregate"')
      return player_elo_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_aggregate_fields_possibleTypes: string[] = ['player_elo_aggregate_fields']
    export const isplayer_elo_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_elo_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_aggregate_fields"')
      return player_elo_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_avg_fields_possibleTypes: string[] = ['player_elo_avg_fields']
    export const isplayer_elo_avg_fields = (obj?: { __typename?: any } | null): obj is player_elo_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_avg_fields"')
      return player_elo_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_max_fields_possibleTypes: string[] = ['player_elo_max_fields']
    export const isplayer_elo_max_fields = (obj?: { __typename?: any } | null): obj is player_elo_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_max_fields"')
      return player_elo_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_min_fields_possibleTypes: string[] = ['player_elo_min_fields']
    export const isplayer_elo_min_fields = (obj?: { __typename?: any } | null): obj is player_elo_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_min_fields"')
      return player_elo_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_mutation_response_possibleTypes: string[] = ['player_elo_mutation_response']
    export const isplayer_elo_mutation_response = (obj?: { __typename?: any } | null): obj is player_elo_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_mutation_response"')
      return player_elo_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_stddev_fields_possibleTypes: string[] = ['player_elo_stddev_fields']
    export const isplayer_elo_stddev_fields = (obj?: { __typename?: any } | null): obj is player_elo_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_stddev_fields"')
      return player_elo_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_stddev_pop_fields_possibleTypes: string[] = ['player_elo_stddev_pop_fields']
    export const isplayer_elo_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_elo_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_stddev_pop_fields"')
      return player_elo_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_stddev_samp_fields_possibleTypes: string[] = ['player_elo_stddev_samp_fields']
    export const isplayer_elo_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_elo_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_stddev_samp_fields"')
      return player_elo_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_sum_fields_possibleTypes: string[] = ['player_elo_sum_fields']
    export const isplayer_elo_sum_fields = (obj?: { __typename?: any } | null): obj is player_elo_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_sum_fields"')
      return player_elo_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_var_pop_fields_possibleTypes: string[] = ['player_elo_var_pop_fields']
    export const isplayer_elo_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_elo_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_var_pop_fields"')
      return player_elo_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_var_samp_fields_possibleTypes: string[] = ['player_elo_var_samp_fields']
    export const isplayer_elo_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_elo_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_var_samp_fields"')
      return player_elo_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_elo_variance_fields_possibleTypes: string[] = ['player_elo_variance_fields']
    export const isplayer_elo_variance_fields = (obj?: { __typename?: any } | null): obj is player_elo_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_elo_variance_fields"')
      return player_elo_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_possibleTypes: string[] = ['player_flashes']
    export const isplayer_flashes = (obj?: { __typename?: any } | null): obj is player_flashes => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes"')
      return player_flashes_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_aggregate_possibleTypes: string[] = ['player_flashes_aggregate']
    export const isplayer_flashes_aggregate = (obj?: { __typename?: any } | null): obj is player_flashes_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_aggregate"')
      return player_flashes_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_aggregate_fields_possibleTypes: string[] = ['player_flashes_aggregate_fields']
    export const isplayer_flashes_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_flashes_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_aggregate_fields"')
      return player_flashes_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_avg_fields_possibleTypes: string[] = ['player_flashes_avg_fields']
    export const isplayer_flashes_avg_fields = (obj?: { __typename?: any } | null): obj is player_flashes_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_avg_fields"')
      return player_flashes_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_max_fields_possibleTypes: string[] = ['player_flashes_max_fields']
    export const isplayer_flashes_max_fields = (obj?: { __typename?: any } | null): obj is player_flashes_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_max_fields"')
      return player_flashes_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_min_fields_possibleTypes: string[] = ['player_flashes_min_fields']
    export const isplayer_flashes_min_fields = (obj?: { __typename?: any } | null): obj is player_flashes_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_min_fields"')
      return player_flashes_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_mutation_response_possibleTypes: string[] = ['player_flashes_mutation_response']
    export const isplayer_flashes_mutation_response = (obj?: { __typename?: any } | null): obj is player_flashes_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_mutation_response"')
      return player_flashes_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_stddev_fields_possibleTypes: string[] = ['player_flashes_stddev_fields']
    export const isplayer_flashes_stddev_fields = (obj?: { __typename?: any } | null): obj is player_flashes_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_stddev_fields"')
      return player_flashes_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_stddev_pop_fields_possibleTypes: string[] = ['player_flashes_stddev_pop_fields']
    export const isplayer_flashes_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_flashes_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_stddev_pop_fields"')
      return player_flashes_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_stddev_samp_fields_possibleTypes: string[] = ['player_flashes_stddev_samp_fields']
    export const isplayer_flashes_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_flashes_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_stddev_samp_fields"')
      return player_flashes_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_sum_fields_possibleTypes: string[] = ['player_flashes_sum_fields']
    export const isplayer_flashes_sum_fields = (obj?: { __typename?: any } | null): obj is player_flashes_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_sum_fields"')
      return player_flashes_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_var_pop_fields_possibleTypes: string[] = ['player_flashes_var_pop_fields']
    export const isplayer_flashes_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_flashes_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_var_pop_fields"')
      return player_flashes_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_var_samp_fields_possibleTypes: string[] = ['player_flashes_var_samp_fields']
    export const isplayer_flashes_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_flashes_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_var_samp_fields"')
      return player_flashes_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_flashes_variance_fields_possibleTypes: string[] = ['player_flashes_variance_fields']
    export const isplayer_flashes_variance_fields = (obj?: { __typename?: any } | null): obj is player_flashes_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_flashes_variance_fields"')
      return player_flashes_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_possibleTypes: string[] = ['player_kills']
    export const isplayer_kills = (obj?: { __typename?: any } | null): obj is player_kills => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills"')
      return player_kills_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_aggregate_possibleTypes: string[] = ['player_kills_aggregate']
    export const isplayer_kills_aggregate = (obj?: { __typename?: any } | null): obj is player_kills_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_aggregate"')
      return player_kills_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_aggregate_fields_possibleTypes: string[] = ['player_kills_aggregate_fields']
    export const isplayer_kills_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_kills_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_aggregate_fields"')
      return player_kills_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_avg_fields_possibleTypes: string[] = ['player_kills_avg_fields']
    export const isplayer_kills_avg_fields = (obj?: { __typename?: any } | null): obj is player_kills_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_avg_fields"')
      return player_kills_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_max_fields_possibleTypes: string[] = ['player_kills_max_fields']
    export const isplayer_kills_max_fields = (obj?: { __typename?: any } | null): obj is player_kills_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_max_fields"')
      return player_kills_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_min_fields_possibleTypes: string[] = ['player_kills_min_fields']
    export const isplayer_kills_min_fields = (obj?: { __typename?: any } | null): obj is player_kills_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_min_fields"')
      return player_kills_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_mutation_response_possibleTypes: string[] = ['player_kills_mutation_response']
    export const isplayer_kills_mutation_response = (obj?: { __typename?: any } | null): obj is player_kills_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_mutation_response"')
      return player_kills_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_stddev_fields_possibleTypes: string[] = ['player_kills_stddev_fields']
    export const isplayer_kills_stddev_fields = (obj?: { __typename?: any } | null): obj is player_kills_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_stddev_fields"')
      return player_kills_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_stddev_pop_fields_possibleTypes: string[] = ['player_kills_stddev_pop_fields']
    export const isplayer_kills_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_kills_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_stddev_pop_fields"')
      return player_kills_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_stddev_samp_fields_possibleTypes: string[] = ['player_kills_stddev_samp_fields']
    export const isplayer_kills_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_kills_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_stddev_samp_fields"')
      return player_kills_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_sum_fields_possibleTypes: string[] = ['player_kills_sum_fields']
    export const isplayer_kills_sum_fields = (obj?: { __typename?: any } | null): obj is player_kills_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_sum_fields"')
      return player_kills_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_var_pop_fields_possibleTypes: string[] = ['player_kills_var_pop_fields']
    export const isplayer_kills_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_kills_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_var_pop_fields"')
      return player_kills_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_var_samp_fields_possibleTypes: string[] = ['player_kills_var_samp_fields']
    export const isplayer_kills_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_kills_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_var_samp_fields"')
      return player_kills_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_kills_variance_fields_possibleTypes: string[] = ['player_kills_variance_fields']
    export const isplayer_kills_variance_fields = (obj?: { __typename?: any } | null): obj is player_kills_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_kills_variance_fields"')
      return player_kills_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_possibleTypes: string[] = ['player_objectives']
    export const isplayer_objectives = (obj?: { __typename?: any } | null): obj is player_objectives => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives"')
      return player_objectives_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_aggregate_possibleTypes: string[] = ['player_objectives_aggregate']
    export const isplayer_objectives_aggregate = (obj?: { __typename?: any } | null): obj is player_objectives_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_aggregate"')
      return player_objectives_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_aggregate_fields_possibleTypes: string[] = ['player_objectives_aggregate_fields']
    export const isplayer_objectives_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_objectives_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_aggregate_fields"')
      return player_objectives_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_avg_fields_possibleTypes: string[] = ['player_objectives_avg_fields']
    export const isplayer_objectives_avg_fields = (obj?: { __typename?: any } | null): obj is player_objectives_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_avg_fields"')
      return player_objectives_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_max_fields_possibleTypes: string[] = ['player_objectives_max_fields']
    export const isplayer_objectives_max_fields = (obj?: { __typename?: any } | null): obj is player_objectives_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_max_fields"')
      return player_objectives_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_min_fields_possibleTypes: string[] = ['player_objectives_min_fields']
    export const isplayer_objectives_min_fields = (obj?: { __typename?: any } | null): obj is player_objectives_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_min_fields"')
      return player_objectives_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_mutation_response_possibleTypes: string[] = ['player_objectives_mutation_response']
    export const isplayer_objectives_mutation_response = (obj?: { __typename?: any } | null): obj is player_objectives_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_mutation_response"')
      return player_objectives_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_stddev_fields_possibleTypes: string[] = ['player_objectives_stddev_fields']
    export const isplayer_objectives_stddev_fields = (obj?: { __typename?: any } | null): obj is player_objectives_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_stddev_fields"')
      return player_objectives_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_stddev_pop_fields_possibleTypes: string[] = ['player_objectives_stddev_pop_fields']
    export const isplayer_objectives_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_objectives_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_stddev_pop_fields"')
      return player_objectives_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_stddev_samp_fields_possibleTypes: string[] = ['player_objectives_stddev_samp_fields']
    export const isplayer_objectives_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_objectives_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_stddev_samp_fields"')
      return player_objectives_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_sum_fields_possibleTypes: string[] = ['player_objectives_sum_fields']
    export const isplayer_objectives_sum_fields = (obj?: { __typename?: any } | null): obj is player_objectives_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_sum_fields"')
      return player_objectives_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_var_pop_fields_possibleTypes: string[] = ['player_objectives_var_pop_fields']
    export const isplayer_objectives_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_objectives_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_var_pop_fields"')
      return player_objectives_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_var_samp_fields_possibleTypes: string[] = ['player_objectives_var_samp_fields']
    export const isplayer_objectives_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_objectives_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_var_samp_fields"')
      return player_objectives_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_objectives_variance_fields_possibleTypes: string[] = ['player_objectives_variance_fields']
    export const isplayer_objectives_variance_fields = (obj?: { __typename?: any } | null): obj is player_objectives_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_objectives_variance_fields"')
      return player_objectives_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_possibleTypes: string[] = ['player_sanctions']
    export const isplayer_sanctions = (obj?: { __typename?: any } | null): obj is player_sanctions => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions"')
      return player_sanctions_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_aggregate_possibleTypes: string[] = ['player_sanctions_aggregate']
    export const isplayer_sanctions_aggregate = (obj?: { __typename?: any } | null): obj is player_sanctions_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_aggregate"')
      return player_sanctions_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_aggregate_fields_possibleTypes: string[] = ['player_sanctions_aggregate_fields']
    export const isplayer_sanctions_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_aggregate_fields"')
      return player_sanctions_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_avg_fields_possibleTypes: string[] = ['player_sanctions_avg_fields']
    export const isplayer_sanctions_avg_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_avg_fields"')
      return player_sanctions_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_max_fields_possibleTypes: string[] = ['player_sanctions_max_fields']
    export const isplayer_sanctions_max_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_max_fields"')
      return player_sanctions_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_min_fields_possibleTypes: string[] = ['player_sanctions_min_fields']
    export const isplayer_sanctions_min_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_min_fields"')
      return player_sanctions_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_mutation_response_possibleTypes: string[] = ['player_sanctions_mutation_response']
    export const isplayer_sanctions_mutation_response = (obj?: { __typename?: any } | null): obj is player_sanctions_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_mutation_response"')
      return player_sanctions_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_stddev_fields_possibleTypes: string[] = ['player_sanctions_stddev_fields']
    export const isplayer_sanctions_stddev_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_stddev_fields"')
      return player_sanctions_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_stddev_pop_fields_possibleTypes: string[] = ['player_sanctions_stddev_pop_fields']
    export const isplayer_sanctions_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_stddev_pop_fields"')
      return player_sanctions_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_stddev_samp_fields_possibleTypes: string[] = ['player_sanctions_stddev_samp_fields']
    export const isplayer_sanctions_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_stddev_samp_fields"')
      return player_sanctions_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_sum_fields_possibleTypes: string[] = ['player_sanctions_sum_fields']
    export const isplayer_sanctions_sum_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_sum_fields"')
      return player_sanctions_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_var_pop_fields_possibleTypes: string[] = ['player_sanctions_var_pop_fields']
    export const isplayer_sanctions_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_var_pop_fields"')
      return player_sanctions_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_var_samp_fields_possibleTypes: string[] = ['player_sanctions_var_samp_fields']
    export const isplayer_sanctions_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_var_samp_fields"')
      return player_sanctions_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_sanctions_variance_fields_possibleTypes: string[] = ['player_sanctions_variance_fields']
    export const isplayer_sanctions_variance_fields = (obj?: { __typename?: any } | null): obj is player_sanctions_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_sanctions_variance_fields"')
      return player_sanctions_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_possibleTypes: string[] = ['player_unused_utility']
    export const isplayer_unused_utility = (obj?: { __typename?: any } | null): obj is player_unused_utility => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility"')
      return player_unused_utility_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_aggregate_possibleTypes: string[] = ['player_unused_utility_aggregate']
    export const isplayer_unused_utility_aggregate = (obj?: { __typename?: any } | null): obj is player_unused_utility_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_aggregate"')
      return player_unused_utility_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_aggregate_fields_possibleTypes: string[] = ['player_unused_utility_aggregate_fields']
    export const isplayer_unused_utility_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_aggregate_fields"')
      return player_unused_utility_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_avg_fields_possibleTypes: string[] = ['player_unused_utility_avg_fields']
    export const isplayer_unused_utility_avg_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_avg_fields"')
      return player_unused_utility_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_max_fields_possibleTypes: string[] = ['player_unused_utility_max_fields']
    export const isplayer_unused_utility_max_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_max_fields"')
      return player_unused_utility_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_min_fields_possibleTypes: string[] = ['player_unused_utility_min_fields']
    export const isplayer_unused_utility_min_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_min_fields"')
      return player_unused_utility_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_mutation_response_possibleTypes: string[] = ['player_unused_utility_mutation_response']
    export const isplayer_unused_utility_mutation_response = (obj?: { __typename?: any } | null): obj is player_unused_utility_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_mutation_response"')
      return player_unused_utility_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_stddev_fields_possibleTypes: string[] = ['player_unused_utility_stddev_fields']
    export const isplayer_unused_utility_stddev_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_stddev_fields"')
      return player_unused_utility_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_stddev_pop_fields_possibleTypes: string[] = ['player_unused_utility_stddev_pop_fields']
    export const isplayer_unused_utility_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_stddev_pop_fields"')
      return player_unused_utility_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_stddev_samp_fields_possibleTypes: string[] = ['player_unused_utility_stddev_samp_fields']
    export const isplayer_unused_utility_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_stddev_samp_fields"')
      return player_unused_utility_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_sum_fields_possibleTypes: string[] = ['player_unused_utility_sum_fields']
    export const isplayer_unused_utility_sum_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_sum_fields"')
      return player_unused_utility_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_var_pop_fields_possibleTypes: string[] = ['player_unused_utility_var_pop_fields']
    export const isplayer_unused_utility_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_var_pop_fields"')
      return player_unused_utility_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_var_samp_fields_possibleTypes: string[] = ['player_unused_utility_var_samp_fields']
    export const isplayer_unused_utility_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_var_samp_fields"')
      return player_unused_utility_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_unused_utility_variance_fields_possibleTypes: string[] = ['player_unused_utility_variance_fields']
    export const isplayer_unused_utility_variance_fields = (obj?: { __typename?: any } | null): obj is player_unused_utility_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_unused_utility_variance_fields"')
      return player_unused_utility_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_possibleTypes: string[] = ['player_utility']
    export const isplayer_utility = (obj?: { __typename?: any } | null): obj is player_utility => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility"')
      return player_utility_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_aggregate_possibleTypes: string[] = ['player_utility_aggregate']
    export const isplayer_utility_aggregate = (obj?: { __typename?: any } | null): obj is player_utility_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_aggregate"')
      return player_utility_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_aggregate_fields_possibleTypes: string[] = ['player_utility_aggregate_fields']
    export const isplayer_utility_aggregate_fields = (obj?: { __typename?: any } | null): obj is player_utility_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_aggregate_fields"')
      return player_utility_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_avg_fields_possibleTypes: string[] = ['player_utility_avg_fields']
    export const isplayer_utility_avg_fields = (obj?: { __typename?: any } | null): obj is player_utility_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_avg_fields"')
      return player_utility_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_max_fields_possibleTypes: string[] = ['player_utility_max_fields']
    export const isplayer_utility_max_fields = (obj?: { __typename?: any } | null): obj is player_utility_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_max_fields"')
      return player_utility_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_min_fields_possibleTypes: string[] = ['player_utility_min_fields']
    export const isplayer_utility_min_fields = (obj?: { __typename?: any } | null): obj is player_utility_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_min_fields"')
      return player_utility_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_mutation_response_possibleTypes: string[] = ['player_utility_mutation_response']
    export const isplayer_utility_mutation_response = (obj?: { __typename?: any } | null): obj is player_utility_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_mutation_response"')
      return player_utility_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_stddev_fields_possibleTypes: string[] = ['player_utility_stddev_fields']
    export const isplayer_utility_stddev_fields = (obj?: { __typename?: any } | null): obj is player_utility_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_stddev_fields"')
      return player_utility_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_stddev_pop_fields_possibleTypes: string[] = ['player_utility_stddev_pop_fields']
    export const isplayer_utility_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is player_utility_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_stddev_pop_fields"')
      return player_utility_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_stddev_samp_fields_possibleTypes: string[] = ['player_utility_stddev_samp_fields']
    export const isplayer_utility_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is player_utility_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_stddev_samp_fields"')
      return player_utility_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_sum_fields_possibleTypes: string[] = ['player_utility_sum_fields']
    export const isplayer_utility_sum_fields = (obj?: { __typename?: any } | null): obj is player_utility_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_sum_fields"')
      return player_utility_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_var_pop_fields_possibleTypes: string[] = ['player_utility_var_pop_fields']
    export const isplayer_utility_var_pop_fields = (obj?: { __typename?: any } | null): obj is player_utility_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_var_pop_fields"')
      return player_utility_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_var_samp_fields_possibleTypes: string[] = ['player_utility_var_samp_fields']
    export const isplayer_utility_var_samp_fields = (obj?: { __typename?: any } | null): obj is player_utility_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_var_samp_fields"')
      return player_utility_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const player_utility_variance_fields_possibleTypes: string[] = ['player_utility_variance_fields']
    export const isplayer_utility_variance_fields = (obj?: { __typename?: any } | null): obj is player_utility_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayer_utility_variance_fields"')
      return player_utility_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_possibleTypes: string[] = ['players']
    export const isplayers = (obj?: { __typename?: any } | null): obj is players => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers"')
      return players_possibleTypes.includes(obj.__typename)
    }
    


    const players_aggregate_possibleTypes: string[] = ['players_aggregate']
    export const isplayers_aggregate = (obj?: { __typename?: any } | null): obj is players_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_aggregate"')
      return players_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const players_aggregate_fields_possibleTypes: string[] = ['players_aggregate_fields']
    export const isplayers_aggregate_fields = (obj?: { __typename?: any } | null): obj is players_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_aggregate_fields"')
      return players_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_avg_fields_possibleTypes: string[] = ['players_avg_fields']
    export const isplayers_avg_fields = (obj?: { __typename?: any } | null): obj is players_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_avg_fields"')
      return players_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_max_fields_possibleTypes: string[] = ['players_max_fields']
    export const isplayers_max_fields = (obj?: { __typename?: any } | null): obj is players_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_max_fields"')
      return players_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_min_fields_possibleTypes: string[] = ['players_min_fields']
    export const isplayers_min_fields = (obj?: { __typename?: any } | null): obj is players_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_min_fields"')
      return players_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_mutation_response_possibleTypes: string[] = ['players_mutation_response']
    export const isplayers_mutation_response = (obj?: { __typename?: any } | null): obj is players_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_mutation_response"')
      return players_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const players_stddev_fields_possibleTypes: string[] = ['players_stddev_fields']
    export const isplayers_stddev_fields = (obj?: { __typename?: any } | null): obj is players_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_stddev_fields"')
      return players_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_stddev_pop_fields_possibleTypes: string[] = ['players_stddev_pop_fields']
    export const isplayers_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is players_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_stddev_pop_fields"')
      return players_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_stddev_samp_fields_possibleTypes: string[] = ['players_stddev_samp_fields']
    export const isplayers_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is players_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_stddev_samp_fields"')
      return players_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_sum_fields_possibleTypes: string[] = ['players_sum_fields']
    export const isplayers_sum_fields = (obj?: { __typename?: any } | null): obj is players_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_sum_fields"')
      return players_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_var_pop_fields_possibleTypes: string[] = ['players_var_pop_fields']
    export const isplayers_var_pop_fields = (obj?: { __typename?: any } | null): obj is players_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_var_pop_fields"')
      return players_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_var_samp_fields_possibleTypes: string[] = ['players_var_samp_fields']
    export const isplayers_var_samp_fields = (obj?: { __typename?: any } | null): obj is players_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_var_samp_fields"')
      return players_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const players_variance_fields_possibleTypes: string[] = ['players_variance_fields']
    export const isplayers_variance_fields = (obj?: { __typename?: any } | null): obj is players_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isplayers_variance_fields"')
      return players_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const query_root_possibleTypes: string[] = ['query_root']
    export const isquery_root = (obj?: { __typename?: any } | null): obj is query_root => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isquery_root"')
      return query_root_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_possibleTypes: string[] = ['server_regions']
    export const isserver_regions = (obj?: { __typename?: any } | null): obj is server_regions => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions"')
      return server_regions_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_aggregate_possibleTypes: string[] = ['server_regions_aggregate']
    export const isserver_regions_aggregate = (obj?: { __typename?: any } | null): obj is server_regions_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_aggregate"')
      return server_regions_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_aggregate_fields_possibleTypes: string[] = ['server_regions_aggregate_fields']
    export const isserver_regions_aggregate_fields = (obj?: { __typename?: any } | null): obj is server_regions_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_aggregate_fields"')
      return server_regions_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_avg_fields_possibleTypes: string[] = ['server_regions_avg_fields']
    export const isserver_regions_avg_fields = (obj?: { __typename?: any } | null): obj is server_regions_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_avg_fields"')
      return server_regions_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_max_fields_possibleTypes: string[] = ['server_regions_max_fields']
    export const isserver_regions_max_fields = (obj?: { __typename?: any } | null): obj is server_regions_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_max_fields"')
      return server_regions_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_min_fields_possibleTypes: string[] = ['server_regions_min_fields']
    export const isserver_regions_min_fields = (obj?: { __typename?: any } | null): obj is server_regions_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_min_fields"')
      return server_regions_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_mutation_response_possibleTypes: string[] = ['server_regions_mutation_response']
    export const isserver_regions_mutation_response = (obj?: { __typename?: any } | null): obj is server_regions_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_mutation_response"')
      return server_regions_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_stddev_fields_possibleTypes: string[] = ['server_regions_stddev_fields']
    export const isserver_regions_stddev_fields = (obj?: { __typename?: any } | null): obj is server_regions_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_stddev_fields"')
      return server_regions_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_stddev_pop_fields_possibleTypes: string[] = ['server_regions_stddev_pop_fields']
    export const isserver_regions_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is server_regions_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_stddev_pop_fields"')
      return server_regions_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_stddev_samp_fields_possibleTypes: string[] = ['server_regions_stddev_samp_fields']
    export const isserver_regions_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is server_regions_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_stddev_samp_fields"')
      return server_regions_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_sum_fields_possibleTypes: string[] = ['server_regions_sum_fields']
    export const isserver_regions_sum_fields = (obj?: { __typename?: any } | null): obj is server_regions_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_sum_fields"')
      return server_regions_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_var_pop_fields_possibleTypes: string[] = ['server_regions_var_pop_fields']
    export const isserver_regions_var_pop_fields = (obj?: { __typename?: any } | null): obj is server_regions_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_var_pop_fields"')
      return server_regions_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_var_samp_fields_possibleTypes: string[] = ['server_regions_var_samp_fields']
    export const isserver_regions_var_samp_fields = (obj?: { __typename?: any } | null): obj is server_regions_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_var_samp_fields"')
      return server_regions_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const server_regions_variance_fields_possibleTypes: string[] = ['server_regions_variance_fields']
    export const isserver_regions_variance_fields = (obj?: { __typename?: any } | null): obj is server_regions_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isserver_regions_variance_fields"')
      return server_regions_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_possibleTypes: string[] = ['servers']
    export const isservers = (obj?: { __typename?: any } | null): obj is servers => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers"')
      return servers_possibleTypes.includes(obj.__typename)
    }
    


    const servers_aggregate_possibleTypes: string[] = ['servers_aggregate']
    export const isservers_aggregate = (obj?: { __typename?: any } | null): obj is servers_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_aggregate"')
      return servers_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const servers_aggregate_fields_possibleTypes: string[] = ['servers_aggregate_fields']
    export const isservers_aggregate_fields = (obj?: { __typename?: any } | null): obj is servers_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_aggregate_fields"')
      return servers_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_avg_fields_possibleTypes: string[] = ['servers_avg_fields']
    export const isservers_avg_fields = (obj?: { __typename?: any } | null): obj is servers_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_avg_fields"')
      return servers_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_max_fields_possibleTypes: string[] = ['servers_max_fields']
    export const isservers_max_fields = (obj?: { __typename?: any } | null): obj is servers_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_max_fields"')
      return servers_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_min_fields_possibleTypes: string[] = ['servers_min_fields']
    export const isservers_min_fields = (obj?: { __typename?: any } | null): obj is servers_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_min_fields"')
      return servers_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_mutation_response_possibleTypes: string[] = ['servers_mutation_response']
    export const isservers_mutation_response = (obj?: { __typename?: any } | null): obj is servers_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_mutation_response"')
      return servers_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const servers_stddev_fields_possibleTypes: string[] = ['servers_stddev_fields']
    export const isservers_stddev_fields = (obj?: { __typename?: any } | null): obj is servers_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_stddev_fields"')
      return servers_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_stddev_pop_fields_possibleTypes: string[] = ['servers_stddev_pop_fields']
    export const isservers_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is servers_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_stddev_pop_fields"')
      return servers_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_stddev_samp_fields_possibleTypes: string[] = ['servers_stddev_samp_fields']
    export const isservers_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is servers_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_stddev_samp_fields"')
      return servers_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_sum_fields_possibleTypes: string[] = ['servers_sum_fields']
    export const isservers_sum_fields = (obj?: { __typename?: any } | null): obj is servers_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_sum_fields"')
      return servers_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_var_pop_fields_possibleTypes: string[] = ['servers_var_pop_fields']
    export const isservers_var_pop_fields = (obj?: { __typename?: any } | null): obj is servers_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_var_pop_fields"')
      return servers_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_var_samp_fields_possibleTypes: string[] = ['servers_var_samp_fields']
    export const isservers_var_samp_fields = (obj?: { __typename?: any } | null): obj is servers_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_var_samp_fields"')
      return servers_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const servers_variance_fields_possibleTypes: string[] = ['servers_variance_fields']
    export const isservers_variance_fields = (obj?: { __typename?: any } | null): obj is servers_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isservers_variance_fields"')
      return servers_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const settings_possibleTypes: string[] = ['settings']
    export const issettings = (obj?: { __typename?: any } | null): obj is settings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings"')
      return settings_possibleTypes.includes(obj.__typename)
    }
    


    const settings_aggregate_possibleTypes: string[] = ['settings_aggregate']
    export const issettings_aggregate = (obj?: { __typename?: any } | null): obj is settings_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings_aggregate"')
      return settings_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const settings_aggregate_fields_possibleTypes: string[] = ['settings_aggregate_fields']
    export const issettings_aggregate_fields = (obj?: { __typename?: any } | null): obj is settings_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings_aggregate_fields"')
      return settings_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const settings_max_fields_possibleTypes: string[] = ['settings_max_fields']
    export const issettings_max_fields = (obj?: { __typename?: any } | null): obj is settings_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings_max_fields"')
      return settings_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const settings_min_fields_possibleTypes: string[] = ['settings_min_fields']
    export const issettings_min_fields = (obj?: { __typename?: any } | null): obj is settings_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings_min_fields"')
      return settings_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const settings_mutation_response_possibleTypes: string[] = ['settings_mutation_response']
    export const issettings_mutation_response = (obj?: { __typename?: any } | null): obj is settings_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issettings_mutation_response"')
      return settings_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const subscription_root_possibleTypes: string[] = ['subscription_root']
    export const issubscription_root = (obj?: { __typename?: any } | null): obj is subscription_root => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issubscription_root"')
      return subscription_root_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_possibleTypes: string[] = ['team_invites']
    export const isteam_invites = (obj?: { __typename?: any } | null): obj is team_invites => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites"')
      return team_invites_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_aggregate_possibleTypes: string[] = ['team_invites_aggregate']
    export const isteam_invites_aggregate = (obj?: { __typename?: any } | null): obj is team_invites_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_aggregate"')
      return team_invites_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_aggregate_fields_possibleTypes: string[] = ['team_invites_aggregate_fields']
    export const isteam_invites_aggregate_fields = (obj?: { __typename?: any } | null): obj is team_invites_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_aggregate_fields"')
      return team_invites_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_avg_fields_possibleTypes: string[] = ['team_invites_avg_fields']
    export const isteam_invites_avg_fields = (obj?: { __typename?: any } | null): obj is team_invites_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_avg_fields"')
      return team_invites_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_max_fields_possibleTypes: string[] = ['team_invites_max_fields']
    export const isteam_invites_max_fields = (obj?: { __typename?: any } | null): obj is team_invites_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_max_fields"')
      return team_invites_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_min_fields_possibleTypes: string[] = ['team_invites_min_fields']
    export const isteam_invites_min_fields = (obj?: { __typename?: any } | null): obj is team_invites_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_min_fields"')
      return team_invites_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_mutation_response_possibleTypes: string[] = ['team_invites_mutation_response']
    export const isteam_invites_mutation_response = (obj?: { __typename?: any } | null): obj is team_invites_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_mutation_response"')
      return team_invites_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_stddev_fields_possibleTypes: string[] = ['team_invites_stddev_fields']
    export const isteam_invites_stddev_fields = (obj?: { __typename?: any } | null): obj is team_invites_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_stddev_fields"')
      return team_invites_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_stddev_pop_fields_possibleTypes: string[] = ['team_invites_stddev_pop_fields']
    export const isteam_invites_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is team_invites_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_stddev_pop_fields"')
      return team_invites_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_stddev_samp_fields_possibleTypes: string[] = ['team_invites_stddev_samp_fields']
    export const isteam_invites_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is team_invites_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_stddev_samp_fields"')
      return team_invites_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_sum_fields_possibleTypes: string[] = ['team_invites_sum_fields']
    export const isteam_invites_sum_fields = (obj?: { __typename?: any } | null): obj is team_invites_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_sum_fields"')
      return team_invites_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_var_pop_fields_possibleTypes: string[] = ['team_invites_var_pop_fields']
    export const isteam_invites_var_pop_fields = (obj?: { __typename?: any } | null): obj is team_invites_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_var_pop_fields"')
      return team_invites_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_var_samp_fields_possibleTypes: string[] = ['team_invites_var_samp_fields']
    export const isteam_invites_var_samp_fields = (obj?: { __typename?: any } | null): obj is team_invites_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_var_samp_fields"')
      return team_invites_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_invites_variance_fields_possibleTypes: string[] = ['team_invites_variance_fields']
    export const isteam_invites_variance_fields = (obj?: { __typename?: any } | null): obj is team_invites_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_invites_variance_fields"')
      return team_invites_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_possibleTypes: string[] = ['team_roster']
    export const isteam_roster = (obj?: { __typename?: any } | null): obj is team_roster => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster"')
      return team_roster_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_aggregate_possibleTypes: string[] = ['team_roster_aggregate']
    export const isteam_roster_aggregate = (obj?: { __typename?: any } | null): obj is team_roster_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_aggregate"')
      return team_roster_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_aggregate_fields_possibleTypes: string[] = ['team_roster_aggregate_fields']
    export const isteam_roster_aggregate_fields = (obj?: { __typename?: any } | null): obj is team_roster_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_aggregate_fields"')
      return team_roster_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_avg_fields_possibleTypes: string[] = ['team_roster_avg_fields']
    export const isteam_roster_avg_fields = (obj?: { __typename?: any } | null): obj is team_roster_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_avg_fields"')
      return team_roster_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_max_fields_possibleTypes: string[] = ['team_roster_max_fields']
    export const isteam_roster_max_fields = (obj?: { __typename?: any } | null): obj is team_roster_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_max_fields"')
      return team_roster_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_min_fields_possibleTypes: string[] = ['team_roster_min_fields']
    export const isteam_roster_min_fields = (obj?: { __typename?: any } | null): obj is team_roster_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_min_fields"')
      return team_roster_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_mutation_response_possibleTypes: string[] = ['team_roster_mutation_response']
    export const isteam_roster_mutation_response = (obj?: { __typename?: any } | null): obj is team_roster_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_mutation_response"')
      return team_roster_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_stddev_fields_possibleTypes: string[] = ['team_roster_stddev_fields']
    export const isteam_roster_stddev_fields = (obj?: { __typename?: any } | null): obj is team_roster_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_stddev_fields"')
      return team_roster_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_stddev_pop_fields_possibleTypes: string[] = ['team_roster_stddev_pop_fields']
    export const isteam_roster_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is team_roster_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_stddev_pop_fields"')
      return team_roster_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_stddev_samp_fields_possibleTypes: string[] = ['team_roster_stddev_samp_fields']
    export const isteam_roster_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is team_roster_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_stddev_samp_fields"')
      return team_roster_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_sum_fields_possibleTypes: string[] = ['team_roster_sum_fields']
    export const isteam_roster_sum_fields = (obj?: { __typename?: any } | null): obj is team_roster_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_sum_fields"')
      return team_roster_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_var_pop_fields_possibleTypes: string[] = ['team_roster_var_pop_fields']
    export const isteam_roster_var_pop_fields = (obj?: { __typename?: any } | null): obj is team_roster_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_var_pop_fields"')
      return team_roster_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_var_samp_fields_possibleTypes: string[] = ['team_roster_var_samp_fields']
    export const isteam_roster_var_samp_fields = (obj?: { __typename?: any } | null): obj is team_roster_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_var_samp_fields"')
      return team_roster_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const team_roster_variance_fields_possibleTypes: string[] = ['team_roster_variance_fields']
    export const isteam_roster_variance_fields = (obj?: { __typename?: any } | null): obj is team_roster_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteam_roster_variance_fields"')
      return team_roster_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_possibleTypes: string[] = ['teams']
    export const isteams = (obj?: { __typename?: any } | null): obj is teams => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams"')
      return teams_possibleTypes.includes(obj.__typename)
    }
    


    const teams_aggregate_possibleTypes: string[] = ['teams_aggregate']
    export const isteams_aggregate = (obj?: { __typename?: any } | null): obj is teams_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_aggregate"')
      return teams_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const teams_aggregate_fields_possibleTypes: string[] = ['teams_aggregate_fields']
    export const isteams_aggregate_fields = (obj?: { __typename?: any } | null): obj is teams_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_aggregate_fields"')
      return teams_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_avg_fields_possibleTypes: string[] = ['teams_avg_fields']
    export const isteams_avg_fields = (obj?: { __typename?: any } | null): obj is teams_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_avg_fields"')
      return teams_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_max_fields_possibleTypes: string[] = ['teams_max_fields']
    export const isteams_max_fields = (obj?: { __typename?: any } | null): obj is teams_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_max_fields"')
      return teams_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_min_fields_possibleTypes: string[] = ['teams_min_fields']
    export const isteams_min_fields = (obj?: { __typename?: any } | null): obj is teams_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_min_fields"')
      return teams_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_mutation_response_possibleTypes: string[] = ['teams_mutation_response']
    export const isteams_mutation_response = (obj?: { __typename?: any } | null): obj is teams_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_mutation_response"')
      return teams_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const teams_stddev_fields_possibleTypes: string[] = ['teams_stddev_fields']
    export const isteams_stddev_fields = (obj?: { __typename?: any } | null): obj is teams_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_stddev_fields"')
      return teams_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_stddev_pop_fields_possibleTypes: string[] = ['teams_stddev_pop_fields']
    export const isteams_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is teams_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_stddev_pop_fields"')
      return teams_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_stddev_samp_fields_possibleTypes: string[] = ['teams_stddev_samp_fields']
    export const isteams_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is teams_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_stddev_samp_fields"')
      return teams_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_sum_fields_possibleTypes: string[] = ['teams_sum_fields']
    export const isteams_sum_fields = (obj?: { __typename?: any } | null): obj is teams_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_sum_fields"')
      return teams_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_var_pop_fields_possibleTypes: string[] = ['teams_var_pop_fields']
    export const isteams_var_pop_fields = (obj?: { __typename?: any } | null): obj is teams_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_var_pop_fields"')
      return teams_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_var_samp_fields_possibleTypes: string[] = ['teams_var_samp_fields']
    export const isteams_var_samp_fields = (obj?: { __typename?: any } | null): obj is teams_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_var_samp_fields"')
      return teams_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const teams_variance_fields_possibleTypes: string[] = ['teams_variance_fields']
    export const isteams_variance_fields = (obj?: { __typename?: any } | null): obj is teams_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isteams_variance_fields"')
      return teams_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_possibleTypes: string[] = ['tournament_brackets']
    export const istournament_brackets = (obj?: { __typename?: any } | null): obj is tournament_brackets => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets"')
      return tournament_brackets_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_aggregate_possibleTypes: string[] = ['tournament_brackets_aggregate']
    export const istournament_brackets_aggregate = (obj?: { __typename?: any } | null): obj is tournament_brackets_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_aggregate"')
      return tournament_brackets_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_aggregate_fields_possibleTypes: string[] = ['tournament_brackets_aggregate_fields']
    export const istournament_brackets_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_aggregate_fields"')
      return tournament_brackets_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_avg_fields_possibleTypes: string[] = ['tournament_brackets_avg_fields']
    export const istournament_brackets_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_avg_fields"')
      return tournament_brackets_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_max_fields_possibleTypes: string[] = ['tournament_brackets_max_fields']
    export const istournament_brackets_max_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_max_fields"')
      return tournament_brackets_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_min_fields_possibleTypes: string[] = ['tournament_brackets_min_fields']
    export const istournament_brackets_min_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_min_fields"')
      return tournament_brackets_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_mutation_response_possibleTypes: string[] = ['tournament_brackets_mutation_response']
    export const istournament_brackets_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_brackets_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_mutation_response"')
      return tournament_brackets_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_stddev_fields_possibleTypes: string[] = ['tournament_brackets_stddev_fields']
    export const istournament_brackets_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_stddev_fields"')
      return tournament_brackets_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_stddev_pop_fields_possibleTypes: string[] = ['tournament_brackets_stddev_pop_fields']
    export const istournament_brackets_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_stddev_pop_fields"')
      return tournament_brackets_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_stddev_samp_fields_possibleTypes: string[] = ['tournament_brackets_stddev_samp_fields']
    export const istournament_brackets_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_stddev_samp_fields"')
      return tournament_brackets_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_sum_fields_possibleTypes: string[] = ['tournament_brackets_sum_fields']
    export const istournament_brackets_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_sum_fields"')
      return tournament_brackets_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_var_pop_fields_possibleTypes: string[] = ['tournament_brackets_var_pop_fields']
    export const istournament_brackets_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_var_pop_fields"')
      return tournament_brackets_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_var_samp_fields_possibleTypes: string[] = ['tournament_brackets_var_samp_fields']
    export const istournament_brackets_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_var_samp_fields"')
      return tournament_brackets_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_brackets_variance_fields_possibleTypes: string[] = ['tournament_brackets_variance_fields']
    export const istournament_brackets_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_brackets_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_brackets_variance_fields"')
      return tournament_brackets_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_possibleTypes: string[] = ['tournament_organizers']
    export const istournament_organizers = (obj?: { __typename?: any } | null): obj is tournament_organizers => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers"')
      return tournament_organizers_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_aggregate_possibleTypes: string[] = ['tournament_organizers_aggregate']
    export const istournament_organizers_aggregate = (obj?: { __typename?: any } | null): obj is tournament_organizers_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_aggregate"')
      return tournament_organizers_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_aggregate_fields_possibleTypes: string[] = ['tournament_organizers_aggregate_fields']
    export const istournament_organizers_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_aggregate_fields"')
      return tournament_organizers_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_avg_fields_possibleTypes: string[] = ['tournament_organizers_avg_fields']
    export const istournament_organizers_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_avg_fields"')
      return tournament_organizers_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_max_fields_possibleTypes: string[] = ['tournament_organizers_max_fields']
    export const istournament_organizers_max_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_max_fields"')
      return tournament_organizers_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_min_fields_possibleTypes: string[] = ['tournament_organizers_min_fields']
    export const istournament_organizers_min_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_min_fields"')
      return tournament_organizers_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_mutation_response_possibleTypes: string[] = ['tournament_organizers_mutation_response']
    export const istournament_organizers_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_organizers_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_mutation_response"')
      return tournament_organizers_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_stddev_fields_possibleTypes: string[] = ['tournament_organizers_stddev_fields']
    export const istournament_organizers_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_stddev_fields"')
      return tournament_organizers_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_stddev_pop_fields_possibleTypes: string[] = ['tournament_organizers_stddev_pop_fields']
    export const istournament_organizers_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_stddev_pop_fields"')
      return tournament_organizers_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_stddev_samp_fields_possibleTypes: string[] = ['tournament_organizers_stddev_samp_fields']
    export const istournament_organizers_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_stddev_samp_fields"')
      return tournament_organizers_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_sum_fields_possibleTypes: string[] = ['tournament_organizers_sum_fields']
    export const istournament_organizers_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_sum_fields"')
      return tournament_organizers_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_var_pop_fields_possibleTypes: string[] = ['tournament_organizers_var_pop_fields']
    export const istournament_organizers_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_var_pop_fields"')
      return tournament_organizers_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_var_samp_fields_possibleTypes: string[] = ['tournament_organizers_var_samp_fields']
    export const istournament_organizers_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_var_samp_fields"')
      return tournament_organizers_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_organizers_variance_fields_possibleTypes: string[] = ['tournament_organizers_variance_fields']
    export const istournament_organizers_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_organizers_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_organizers_variance_fields"')
      return tournament_organizers_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_possibleTypes: string[] = ['tournament_stages']
    export const istournament_stages = (obj?: { __typename?: any } | null): obj is tournament_stages => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages"')
      return tournament_stages_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_aggregate_possibleTypes: string[] = ['tournament_stages_aggregate']
    export const istournament_stages_aggregate = (obj?: { __typename?: any } | null): obj is tournament_stages_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_aggregate"')
      return tournament_stages_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_aggregate_fields_possibleTypes: string[] = ['tournament_stages_aggregate_fields']
    export const istournament_stages_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_aggregate_fields"')
      return tournament_stages_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_avg_fields_possibleTypes: string[] = ['tournament_stages_avg_fields']
    export const istournament_stages_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_avg_fields"')
      return tournament_stages_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_max_fields_possibleTypes: string[] = ['tournament_stages_max_fields']
    export const istournament_stages_max_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_max_fields"')
      return tournament_stages_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_min_fields_possibleTypes: string[] = ['tournament_stages_min_fields']
    export const istournament_stages_min_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_min_fields"')
      return tournament_stages_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_mutation_response_possibleTypes: string[] = ['tournament_stages_mutation_response']
    export const istournament_stages_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_stages_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_mutation_response"')
      return tournament_stages_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_stddev_fields_possibleTypes: string[] = ['tournament_stages_stddev_fields']
    export const istournament_stages_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_stddev_fields"')
      return tournament_stages_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_stddev_pop_fields_possibleTypes: string[] = ['tournament_stages_stddev_pop_fields']
    export const istournament_stages_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_stddev_pop_fields"')
      return tournament_stages_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_stddev_samp_fields_possibleTypes: string[] = ['tournament_stages_stddev_samp_fields']
    export const istournament_stages_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_stddev_samp_fields"')
      return tournament_stages_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_sum_fields_possibleTypes: string[] = ['tournament_stages_sum_fields']
    export const istournament_stages_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_sum_fields"')
      return tournament_stages_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_var_pop_fields_possibleTypes: string[] = ['tournament_stages_var_pop_fields']
    export const istournament_stages_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_var_pop_fields"')
      return tournament_stages_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_var_samp_fields_possibleTypes: string[] = ['tournament_stages_var_samp_fields']
    export const istournament_stages_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_var_samp_fields"')
      return tournament_stages_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_stages_variance_fields_possibleTypes: string[] = ['tournament_stages_variance_fields']
    export const istournament_stages_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_stages_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_stages_variance_fields"')
      return tournament_stages_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_possibleTypes: string[] = ['tournament_team_invites']
    export const istournament_team_invites = (obj?: { __typename?: any } | null): obj is tournament_team_invites => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites"')
      return tournament_team_invites_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_aggregate_possibleTypes: string[] = ['tournament_team_invites_aggregate']
    export const istournament_team_invites_aggregate = (obj?: { __typename?: any } | null): obj is tournament_team_invites_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_aggregate"')
      return tournament_team_invites_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_aggregate_fields_possibleTypes: string[] = ['tournament_team_invites_aggregate_fields']
    export const istournament_team_invites_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_aggregate_fields"')
      return tournament_team_invites_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_avg_fields_possibleTypes: string[] = ['tournament_team_invites_avg_fields']
    export const istournament_team_invites_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_avg_fields"')
      return tournament_team_invites_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_max_fields_possibleTypes: string[] = ['tournament_team_invites_max_fields']
    export const istournament_team_invites_max_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_max_fields"')
      return tournament_team_invites_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_min_fields_possibleTypes: string[] = ['tournament_team_invites_min_fields']
    export const istournament_team_invites_min_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_min_fields"')
      return tournament_team_invites_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_mutation_response_possibleTypes: string[] = ['tournament_team_invites_mutation_response']
    export const istournament_team_invites_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_team_invites_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_mutation_response"')
      return tournament_team_invites_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_stddev_fields_possibleTypes: string[] = ['tournament_team_invites_stddev_fields']
    export const istournament_team_invites_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_stddev_fields"')
      return tournament_team_invites_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_stddev_pop_fields_possibleTypes: string[] = ['tournament_team_invites_stddev_pop_fields']
    export const istournament_team_invites_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_stddev_pop_fields"')
      return tournament_team_invites_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_stddev_samp_fields_possibleTypes: string[] = ['tournament_team_invites_stddev_samp_fields']
    export const istournament_team_invites_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_stddev_samp_fields"')
      return tournament_team_invites_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_sum_fields_possibleTypes: string[] = ['tournament_team_invites_sum_fields']
    export const istournament_team_invites_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_sum_fields"')
      return tournament_team_invites_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_var_pop_fields_possibleTypes: string[] = ['tournament_team_invites_var_pop_fields']
    export const istournament_team_invites_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_var_pop_fields"')
      return tournament_team_invites_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_var_samp_fields_possibleTypes: string[] = ['tournament_team_invites_var_samp_fields']
    export const istournament_team_invites_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_var_samp_fields"')
      return tournament_team_invites_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_invites_variance_fields_possibleTypes: string[] = ['tournament_team_invites_variance_fields']
    export const istournament_team_invites_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_team_invites_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_invites_variance_fields"')
      return tournament_team_invites_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_possibleTypes: string[] = ['tournament_team_roster']
    export const istournament_team_roster = (obj?: { __typename?: any } | null): obj is tournament_team_roster => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster"')
      return tournament_team_roster_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_aggregate_possibleTypes: string[] = ['tournament_team_roster_aggregate']
    export const istournament_team_roster_aggregate = (obj?: { __typename?: any } | null): obj is tournament_team_roster_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_aggregate"')
      return tournament_team_roster_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_aggregate_fields_possibleTypes: string[] = ['tournament_team_roster_aggregate_fields']
    export const istournament_team_roster_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_aggregate_fields"')
      return tournament_team_roster_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_avg_fields_possibleTypes: string[] = ['tournament_team_roster_avg_fields']
    export const istournament_team_roster_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_avg_fields"')
      return tournament_team_roster_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_max_fields_possibleTypes: string[] = ['tournament_team_roster_max_fields']
    export const istournament_team_roster_max_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_max_fields"')
      return tournament_team_roster_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_min_fields_possibleTypes: string[] = ['tournament_team_roster_min_fields']
    export const istournament_team_roster_min_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_min_fields"')
      return tournament_team_roster_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_mutation_response_possibleTypes: string[] = ['tournament_team_roster_mutation_response']
    export const istournament_team_roster_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_team_roster_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_mutation_response"')
      return tournament_team_roster_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_stddev_fields_possibleTypes: string[] = ['tournament_team_roster_stddev_fields']
    export const istournament_team_roster_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_stddev_fields"')
      return tournament_team_roster_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_stddev_pop_fields_possibleTypes: string[] = ['tournament_team_roster_stddev_pop_fields']
    export const istournament_team_roster_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_stddev_pop_fields"')
      return tournament_team_roster_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_stddev_samp_fields_possibleTypes: string[] = ['tournament_team_roster_stddev_samp_fields']
    export const istournament_team_roster_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_stddev_samp_fields"')
      return tournament_team_roster_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_sum_fields_possibleTypes: string[] = ['tournament_team_roster_sum_fields']
    export const istournament_team_roster_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_sum_fields"')
      return tournament_team_roster_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_var_pop_fields_possibleTypes: string[] = ['tournament_team_roster_var_pop_fields']
    export const istournament_team_roster_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_var_pop_fields"')
      return tournament_team_roster_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_var_samp_fields_possibleTypes: string[] = ['tournament_team_roster_var_samp_fields']
    export const istournament_team_roster_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_var_samp_fields"')
      return tournament_team_roster_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_team_roster_variance_fields_possibleTypes: string[] = ['tournament_team_roster_variance_fields']
    export const istournament_team_roster_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_team_roster_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_team_roster_variance_fields"')
      return tournament_team_roster_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_possibleTypes: string[] = ['tournament_teams']
    export const istournament_teams = (obj?: { __typename?: any } | null): obj is tournament_teams => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams"')
      return tournament_teams_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_aggregate_possibleTypes: string[] = ['tournament_teams_aggregate']
    export const istournament_teams_aggregate = (obj?: { __typename?: any } | null): obj is tournament_teams_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_aggregate"')
      return tournament_teams_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_aggregate_fields_possibleTypes: string[] = ['tournament_teams_aggregate_fields']
    export const istournament_teams_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_aggregate_fields"')
      return tournament_teams_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_avg_fields_possibleTypes: string[] = ['tournament_teams_avg_fields']
    export const istournament_teams_avg_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_avg_fields"')
      return tournament_teams_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_max_fields_possibleTypes: string[] = ['tournament_teams_max_fields']
    export const istournament_teams_max_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_max_fields"')
      return tournament_teams_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_min_fields_possibleTypes: string[] = ['tournament_teams_min_fields']
    export const istournament_teams_min_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_min_fields"')
      return tournament_teams_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_mutation_response_possibleTypes: string[] = ['tournament_teams_mutation_response']
    export const istournament_teams_mutation_response = (obj?: { __typename?: any } | null): obj is tournament_teams_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_mutation_response"')
      return tournament_teams_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_stddev_fields_possibleTypes: string[] = ['tournament_teams_stddev_fields']
    export const istournament_teams_stddev_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_stddev_fields"')
      return tournament_teams_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_stddev_pop_fields_possibleTypes: string[] = ['tournament_teams_stddev_pop_fields']
    export const istournament_teams_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_stddev_pop_fields"')
      return tournament_teams_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_stddev_samp_fields_possibleTypes: string[] = ['tournament_teams_stddev_samp_fields']
    export const istournament_teams_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_stddev_samp_fields"')
      return tournament_teams_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_sum_fields_possibleTypes: string[] = ['tournament_teams_sum_fields']
    export const istournament_teams_sum_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_sum_fields"')
      return tournament_teams_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_var_pop_fields_possibleTypes: string[] = ['tournament_teams_var_pop_fields']
    export const istournament_teams_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_var_pop_fields"')
      return tournament_teams_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_var_samp_fields_possibleTypes: string[] = ['tournament_teams_var_samp_fields']
    export const istournament_teams_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_var_samp_fields"')
      return tournament_teams_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournament_teams_variance_fields_possibleTypes: string[] = ['tournament_teams_variance_fields']
    export const istournament_teams_variance_fields = (obj?: { __typename?: any } | null): obj is tournament_teams_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournament_teams_variance_fields"')
      return tournament_teams_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_possibleTypes: string[] = ['tournaments']
    export const istournaments = (obj?: { __typename?: any } | null): obj is tournaments => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments"')
      return tournaments_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_aggregate_possibleTypes: string[] = ['tournaments_aggregate']
    export const istournaments_aggregate = (obj?: { __typename?: any } | null): obj is tournaments_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_aggregate"')
      return tournaments_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_aggregate_fields_possibleTypes: string[] = ['tournaments_aggregate_fields']
    export const istournaments_aggregate_fields = (obj?: { __typename?: any } | null): obj is tournaments_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_aggregate_fields"')
      return tournaments_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_avg_fields_possibleTypes: string[] = ['tournaments_avg_fields']
    export const istournaments_avg_fields = (obj?: { __typename?: any } | null): obj is tournaments_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_avg_fields"')
      return tournaments_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_max_fields_possibleTypes: string[] = ['tournaments_max_fields']
    export const istournaments_max_fields = (obj?: { __typename?: any } | null): obj is tournaments_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_max_fields"')
      return tournaments_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_min_fields_possibleTypes: string[] = ['tournaments_min_fields']
    export const istournaments_min_fields = (obj?: { __typename?: any } | null): obj is tournaments_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_min_fields"')
      return tournaments_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_mutation_response_possibleTypes: string[] = ['tournaments_mutation_response']
    export const istournaments_mutation_response = (obj?: { __typename?: any } | null): obj is tournaments_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_mutation_response"')
      return tournaments_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_stddev_fields_possibleTypes: string[] = ['tournaments_stddev_fields']
    export const istournaments_stddev_fields = (obj?: { __typename?: any } | null): obj is tournaments_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_stddev_fields"')
      return tournaments_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_stddev_pop_fields_possibleTypes: string[] = ['tournaments_stddev_pop_fields']
    export const istournaments_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is tournaments_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_stddev_pop_fields"')
      return tournaments_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_stddev_samp_fields_possibleTypes: string[] = ['tournaments_stddev_samp_fields']
    export const istournaments_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is tournaments_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_stddev_samp_fields"')
      return tournaments_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_sum_fields_possibleTypes: string[] = ['tournaments_sum_fields']
    export const istournaments_sum_fields = (obj?: { __typename?: any } | null): obj is tournaments_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_sum_fields"')
      return tournaments_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_var_pop_fields_possibleTypes: string[] = ['tournaments_var_pop_fields']
    export const istournaments_var_pop_fields = (obj?: { __typename?: any } | null): obj is tournaments_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_var_pop_fields"')
      return tournaments_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_var_samp_fields_possibleTypes: string[] = ['tournaments_var_samp_fields']
    export const istournaments_var_samp_fields = (obj?: { __typename?: any } | null): obj is tournaments_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_var_samp_fields"')
      return tournaments_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const tournaments_variance_fields_possibleTypes: string[] = ['tournaments_variance_fields']
    export const istournaments_variance_fields = (obj?: { __typename?: any } | null): obj is tournaments_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "istournaments_variance_fields"')
      return tournaments_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_possibleTypes: string[] = ['v_match_captains']
    export const isv_match_captains = (obj?: { __typename?: any } | null): obj is v_match_captains => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains"')
      return v_match_captains_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_aggregate_possibleTypes: string[] = ['v_match_captains_aggregate']
    export const isv_match_captains_aggregate = (obj?: { __typename?: any } | null): obj is v_match_captains_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_aggregate"')
      return v_match_captains_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_aggregate_fields_possibleTypes: string[] = ['v_match_captains_aggregate_fields']
    export const isv_match_captains_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_aggregate_fields"')
      return v_match_captains_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_avg_fields_possibleTypes: string[] = ['v_match_captains_avg_fields']
    export const isv_match_captains_avg_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_avg_fields"')
      return v_match_captains_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_max_fields_possibleTypes: string[] = ['v_match_captains_max_fields']
    export const isv_match_captains_max_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_max_fields"')
      return v_match_captains_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_min_fields_possibleTypes: string[] = ['v_match_captains_min_fields']
    export const isv_match_captains_min_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_min_fields"')
      return v_match_captains_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_mutation_response_possibleTypes: string[] = ['v_match_captains_mutation_response']
    export const isv_match_captains_mutation_response = (obj?: { __typename?: any } | null): obj is v_match_captains_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_mutation_response"')
      return v_match_captains_mutation_response_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_stddev_fields_possibleTypes: string[] = ['v_match_captains_stddev_fields']
    export const isv_match_captains_stddev_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_stddev_fields"')
      return v_match_captains_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_stddev_pop_fields_possibleTypes: string[] = ['v_match_captains_stddev_pop_fields']
    export const isv_match_captains_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_stddev_pop_fields"')
      return v_match_captains_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_stddev_samp_fields_possibleTypes: string[] = ['v_match_captains_stddev_samp_fields']
    export const isv_match_captains_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_stddev_samp_fields"')
      return v_match_captains_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_sum_fields_possibleTypes: string[] = ['v_match_captains_sum_fields']
    export const isv_match_captains_sum_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_sum_fields"')
      return v_match_captains_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_var_pop_fields_possibleTypes: string[] = ['v_match_captains_var_pop_fields']
    export const isv_match_captains_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_var_pop_fields"')
      return v_match_captains_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_var_samp_fields_possibleTypes: string[] = ['v_match_captains_var_samp_fields']
    export const isv_match_captains_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_var_samp_fields"')
      return v_match_captains_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_captains_variance_fields_possibleTypes: string[] = ['v_match_captains_variance_fields']
    export const isv_match_captains_variance_fields = (obj?: { __typename?: any } | null): obj is v_match_captains_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_captains_variance_fields"')
      return v_match_captains_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_possibleTypes: string[] = ['v_match_lineups']
    export const isv_match_lineups = (obj?: { __typename?: any } | null): obj is v_match_lineups => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups"')
      return v_match_lineups_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_aggregate_possibleTypes: string[] = ['v_match_lineups_aggregate']
    export const isv_match_lineups_aggregate = (obj?: { __typename?: any } | null): obj is v_match_lineups_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_aggregate"')
      return v_match_lineups_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_aggregate_fields_possibleTypes: string[] = ['v_match_lineups_aggregate_fields']
    export const isv_match_lineups_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_aggregate_fields"')
      return v_match_lineups_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_avg_fields_possibleTypes: string[] = ['v_match_lineups_avg_fields']
    export const isv_match_lineups_avg_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_avg_fields"')
      return v_match_lineups_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_max_fields_possibleTypes: string[] = ['v_match_lineups_max_fields']
    export const isv_match_lineups_max_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_max_fields"')
      return v_match_lineups_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_min_fields_possibleTypes: string[] = ['v_match_lineups_min_fields']
    export const isv_match_lineups_min_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_min_fields"')
      return v_match_lineups_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_stddev_fields_possibleTypes: string[] = ['v_match_lineups_stddev_fields']
    export const isv_match_lineups_stddev_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_stddev_fields"')
      return v_match_lineups_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_stddev_pop_fields_possibleTypes: string[] = ['v_match_lineups_stddev_pop_fields']
    export const isv_match_lineups_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_stddev_pop_fields"')
      return v_match_lineups_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_stddev_samp_fields_possibleTypes: string[] = ['v_match_lineups_stddev_samp_fields']
    export const isv_match_lineups_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_stddev_samp_fields"')
      return v_match_lineups_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_sum_fields_possibleTypes: string[] = ['v_match_lineups_sum_fields']
    export const isv_match_lineups_sum_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_sum_fields"')
      return v_match_lineups_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_var_pop_fields_possibleTypes: string[] = ['v_match_lineups_var_pop_fields']
    export const isv_match_lineups_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_var_pop_fields"')
      return v_match_lineups_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_var_samp_fields_possibleTypes: string[] = ['v_match_lineups_var_samp_fields']
    export const isv_match_lineups_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_var_samp_fields"')
      return v_match_lineups_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_match_lineups_variance_fields_possibleTypes: string[] = ['v_match_lineups_variance_fields']
    export const isv_match_lineups_variance_fields = (obj?: { __typename?: any } | null): obj is v_match_lineups_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_match_lineups_variance_fields"')
      return v_match_lineups_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_possibleTypes: string[] = ['v_player_arch_nemesis']
    export const isv_player_arch_nemesis = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis"')
      return v_player_arch_nemesis_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_aggregate_possibleTypes: string[] = ['v_player_arch_nemesis_aggregate']
    export const isv_player_arch_nemesis_aggregate = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_aggregate"')
      return v_player_arch_nemesis_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_aggregate_fields_possibleTypes: string[] = ['v_player_arch_nemesis_aggregate_fields']
    export const isv_player_arch_nemesis_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_aggregate_fields"')
      return v_player_arch_nemesis_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_avg_fields_possibleTypes: string[] = ['v_player_arch_nemesis_avg_fields']
    export const isv_player_arch_nemesis_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_avg_fields"')
      return v_player_arch_nemesis_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_max_fields_possibleTypes: string[] = ['v_player_arch_nemesis_max_fields']
    export const isv_player_arch_nemesis_max_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_max_fields"')
      return v_player_arch_nemesis_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_min_fields_possibleTypes: string[] = ['v_player_arch_nemesis_min_fields']
    export const isv_player_arch_nemesis_min_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_min_fields"')
      return v_player_arch_nemesis_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_stddev_fields_possibleTypes: string[] = ['v_player_arch_nemesis_stddev_fields']
    export const isv_player_arch_nemesis_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_stddev_fields"')
      return v_player_arch_nemesis_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_stddev_pop_fields_possibleTypes: string[] = ['v_player_arch_nemesis_stddev_pop_fields']
    export const isv_player_arch_nemesis_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_stddev_pop_fields"')
      return v_player_arch_nemesis_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_stddev_samp_fields_possibleTypes: string[] = ['v_player_arch_nemesis_stddev_samp_fields']
    export const isv_player_arch_nemesis_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_stddev_samp_fields"')
      return v_player_arch_nemesis_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_sum_fields_possibleTypes: string[] = ['v_player_arch_nemesis_sum_fields']
    export const isv_player_arch_nemesis_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_sum_fields"')
      return v_player_arch_nemesis_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_var_pop_fields_possibleTypes: string[] = ['v_player_arch_nemesis_var_pop_fields']
    export const isv_player_arch_nemesis_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_var_pop_fields"')
      return v_player_arch_nemesis_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_var_samp_fields_possibleTypes: string[] = ['v_player_arch_nemesis_var_samp_fields']
    export const isv_player_arch_nemesis_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_var_samp_fields"')
      return v_player_arch_nemesis_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_arch_nemesis_variance_fields_possibleTypes: string[] = ['v_player_arch_nemesis_variance_fields']
    export const isv_player_arch_nemesis_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_arch_nemesis_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_arch_nemesis_variance_fields"')
      return v_player_arch_nemesis_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_possibleTypes: string[] = ['v_player_damage']
    export const isv_player_damage = (obj?: { __typename?: any } | null): obj is v_player_damage => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage"')
      return v_player_damage_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_aggregate_possibleTypes: string[] = ['v_player_damage_aggregate']
    export const isv_player_damage_aggregate = (obj?: { __typename?: any } | null): obj is v_player_damage_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_aggregate"')
      return v_player_damage_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_aggregate_fields_possibleTypes: string[] = ['v_player_damage_aggregate_fields']
    export const isv_player_damage_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_aggregate_fields"')
      return v_player_damage_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_avg_fields_possibleTypes: string[] = ['v_player_damage_avg_fields']
    export const isv_player_damage_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_avg_fields"')
      return v_player_damage_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_max_fields_possibleTypes: string[] = ['v_player_damage_max_fields']
    export const isv_player_damage_max_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_max_fields"')
      return v_player_damage_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_min_fields_possibleTypes: string[] = ['v_player_damage_min_fields']
    export const isv_player_damage_min_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_min_fields"')
      return v_player_damage_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_stddev_fields_possibleTypes: string[] = ['v_player_damage_stddev_fields']
    export const isv_player_damage_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_stddev_fields"')
      return v_player_damage_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_stddev_pop_fields_possibleTypes: string[] = ['v_player_damage_stddev_pop_fields']
    export const isv_player_damage_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_stddev_pop_fields"')
      return v_player_damage_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_stddev_samp_fields_possibleTypes: string[] = ['v_player_damage_stddev_samp_fields']
    export const isv_player_damage_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_stddev_samp_fields"')
      return v_player_damage_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_sum_fields_possibleTypes: string[] = ['v_player_damage_sum_fields']
    export const isv_player_damage_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_sum_fields"')
      return v_player_damage_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_var_pop_fields_possibleTypes: string[] = ['v_player_damage_var_pop_fields']
    export const isv_player_damage_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_var_pop_fields"')
      return v_player_damage_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_var_samp_fields_possibleTypes: string[] = ['v_player_damage_var_samp_fields']
    export const isv_player_damage_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_var_samp_fields"')
      return v_player_damage_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_damage_variance_fields_possibleTypes: string[] = ['v_player_damage_variance_fields']
    export const isv_player_damage_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_damage_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_damage_variance_fields"')
      return v_player_damage_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_possibleTypes: string[] = ['v_player_elo']
    export const isv_player_elo = (obj?: { __typename?: any } | null): obj is v_player_elo => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo"')
      return v_player_elo_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_aggregate_possibleTypes: string[] = ['v_player_elo_aggregate']
    export const isv_player_elo_aggregate = (obj?: { __typename?: any } | null): obj is v_player_elo_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_aggregate"')
      return v_player_elo_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_aggregate_fields_possibleTypes: string[] = ['v_player_elo_aggregate_fields']
    export const isv_player_elo_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_aggregate_fields"')
      return v_player_elo_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_avg_fields_possibleTypes: string[] = ['v_player_elo_avg_fields']
    export const isv_player_elo_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_avg_fields"')
      return v_player_elo_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_max_fields_possibleTypes: string[] = ['v_player_elo_max_fields']
    export const isv_player_elo_max_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_max_fields"')
      return v_player_elo_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_min_fields_possibleTypes: string[] = ['v_player_elo_min_fields']
    export const isv_player_elo_min_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_min_fields"')
      return v_player_elo_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_stddev_fields_possibleTypes: string[] = ['v_player_elo_stddev_fields']
    export const isv_player_elo_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_stddev_fields"')
      return v_player_elo_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_stddev_pop_fields_possibleTypes: string[] = ['v_player_elo_stddev_pop_fields']
    export const isv_player_elo_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_stddev_pop_fields"')
      return v_player_elo_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_stddev_samp_fields_possibleTypes: string[] = ['v_player_elo_stddev_samp_fields']
    export const isv_player_elo_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_stddev_samp_fields"')
      return v_player_elo_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_sum_fields_possibleTypes: string[] = ['v_player_elo_sum_fields']
    export const isv_player_elo_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_sum_fields"')
      return v_player_elo_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_var_pop_fields_possibleTypes: string[] = ['v_player_elo_var_pop_fields']
    export const isv_player_elo_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_var_pop_fields"')
      return v_player_elo_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_var_samp_fields_possibleTypes: string[] = ['v_player_elo_var_samp_fields']
    export const isv_player_elo_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_var_samp_fields"')
      return v_player_elo_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_elo_variance_fields_possibleTypes: string[] = ['v_player_elo_variance_fields']
    export const isv_player_elo_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_elo_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_elo_variance_fields"')
      return v_player_elo_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_possibleTypes: string[] = ['v_player_map_losses']
    export const isv_player_map_losses = (obj?: { __typename?: any } | null): obj is v_player_map_losses => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses"')
      return v_player_map_losses_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_aggregate_possibleTypes: string[] = ['v_player_map_losses_aggregate']
    export const isv_player_map_losses_aggregate = (obj?: { __typename?: any } | null): obj is v_player_map_losses_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_aggregate"')
      return v_player_map_losses_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_aggregate_fields_possibleTypes: string[] = ['v_player_map_losses_aggregate_fields']
    export const isv_player_map_losses_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_aggregate_fields"')
      return v_player_map_losses_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_avg_fields_possibleTypes: string[] = ['v_player_map_losses_avg_fields']
    export const isv_player_map_losses_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_avg_fields"')
      return v_player_map_losses_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_max_fields_possibleTypes: string[] = ['v_player_map_losses_max_fields']
    export const isv_player_map_losses_max_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_max_fields"')
      return v_player_map_losses_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_min_fields_possibleTypes: string[] = ['v_player_map_losses_min_fields']
    export const isv_player_map_losses_min_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_min_fields"')
      return v_player_map_losses_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_stddev_fields_possibleTypes: string[] = ['v_player_map_losses_stddev_fields']
    export const isv_player_map_losses_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_stddev_fields"')
      return v_player_map_losses_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_stddev_pop_fields_possibleTypes: string[] = ['v_player_map_losses_stddev_pop_fields']
    export const isv_player_map_losses_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_stddev_pop_fields"')
      return v_player_map_losses_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_stddev_samp_fields_possibleTypes: string[] = ['v_player_map_losses_stddev_samp_fields']
    export const isv_player_map_losses_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_stddev_samp_fields"')
      return v_player_map_losses_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_sum_fields_possibleTypes: string[] = ['v_player_map_losses_sum_fields']
    export const isv_player_map_losses_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_sum_fields"')
      return v_player_map_losses_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_var_pop_fields_possibleTypes: string[] = ['v_player_map_losses_var_pop_fields']
    export const isv_player_map_losses_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_var_pop_fields"')
      return v_player_map_losses_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_var_samp_fields_possibleTypes: string[] = ['v_player_map_losses_var_samp_fields']
    export const isv_player_map_losses_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_var_samp_fields"')
      return v_player_map_losses_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_losses_variance_fields_possibleTypes: string[] = ['v_player_map_losses_variance_fields']
    export const isv_player_map_losses_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_map_losses_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_losses_variance_fields"')
      return v_player_map_losses_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_possibleTypes: string[] = ['v_player_map_wins']
    export const isv_player_map_wins = (obj?: { __typename?: any } | null): obj is v_player_map_wins => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins"')
      return v_player_map_wins_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_aggregate_possibleTypes: string[] = ['v_player_map_wins_aggregate']
    export const isv_player_map_wins_aggregate = (obj?: { __typename?: any } | null): obj is v_player_map_wins_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_aggregate"')
      return v_player_map_wins_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_aggregate_fields_possibleTypes: string[] = ['v_player_map_wins_aggregate_fields']
    export const isv_player_map_wins_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_aggregate_fields"')
      return v_player_map_wins_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_avg_fields_possibleTypes: string[] = ['v_player_map_wins_avg_fields']
    export const isv_player_map_wins_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_avg_fields"')
      return v_player_map_wins_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_max_fields_possibleTypes: string[] = ['v_player_map_wins_max_fields']
    export const isv_player_map_wins_max_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_max_fields"')
      return v_player_map_wins_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_min_fields_possibleTypes: string[] = ['v_player_map_wins_min_fields']
    export const isv_player_map_wins_min_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_min_fields"')
      return v_player_map_wins_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_stddev_fields_possibleTypes: string[] = ['v_player_map_wins_stddev_fields']
    export const isv_player_map_wins_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_stddev_fields"')
      return v_player_map_wins_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_stddev_pop_fields_possibleTypes: string[] = ['v_player_map_wins_stddev_pop_fields']
    export const isv_player_map_wins_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_stddev_pop_fields"')
      return v_player_map_wins_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_stddev_samp_fields_possibleTypes: string[] = ['v_player_map_wins_stddev_samp_fields']
    export const isv_player_map_wins_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_stddev_samp_fields"')
      return v_player_map_wins_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_sum_fields_possibleTypes: string[] = ['v_player_map_wins_sum_fields']
    export const isv_player_map_wins_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_sum_fields"')
      return v_player_map_wins_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_var_pop_fields_possibleTypes: string[] = ['v_player_map_wins_var_pop_fields']
    export const isv_player_map_wins_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_var_pop_fields"')
      return v_player_map_wins_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_var_samp_fields_possibleTypes: string[] = ['v_player_map_wins_var_samp_fields']
    export const isv_player_map_wins_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_var_samp_fields"')
      return v_player_map_wins_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_map_wins_variance_fields_possibleTypes: string[] = ['v_player_map_wins_variance_fields']
    export const isv_player_map_wins_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_map_wins_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_map_wins_variance_fields"')
      return v_player_map_wins_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_possibleTypes: string[] = ['v_player_multi_kills']
    export const isv_player_multi_kills = (obj?: { __typename?: any } | null): obj is v_player_multi_kills => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills"')
      return v_player_multi_kills_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_aggregate_possibleTypes: string[] = ['v_player_multi_kills_aggregate']
    export const isv_player_multi_kills_aggregate = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_aggregate"')
      return v_player_multi_kills_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_aggregate_fields_possibleTypes: string[] = ['v_player_multi_kills_aggregate_fields']
    export const isv_player_multi_kills_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_aggregate_fields"')
      return v_player_multi_kills_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_avg_fields_possibleTypes: string[] = ['v_player_multi_kills_avg_fields']
    export const isv_player_multi_kills_avg_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_avg_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_avg_fields"')
      return v_player_multi_kills_avg_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_max_fields_possibleTypes: string[] = ['v_player_multi_kills_max_fields']
    export const isv_player_multi_kills_max_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_max_fields"')
      return v_player_multi_kills_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_min_fields_possibleTypes: string[] = ['v_player_multi_kills_min_fields']
    export const isv_player_multi_kills_min_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_min_fields"')
      return v_player_multi_kills_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_stddev_fields_possibleTypes: string[] = ['v_player_multi_kills_stddev_fields']
    export const isv_player_multi_kills_stddev_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_stddev_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_stddev_fields"')
      return v_player_multi_kills_stddev_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_stddev_pop_fields_possibleTypes: string[] = ['v_player_multi_kills_stddev_pop_fields']
    export const isv_player_multi_kills_stddev_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_stddev_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_stddev_pop_fields"')
      return v_player_multi_kills_stddev_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_stddev_samp_fields_possibleTypes: string[] = ['v_player_multi_kills_stddev_samp_fields']
    export const isv_player_multi_kills_stddev_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_stddev_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_stddev_samp_fields"')
      return v_player_multi_kills_stddev_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_sum_fields_possibleTypes: string[] = ['v_player_multi_kills_sum_fields']
    export const isv_player_multi_kills_sum_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_sum_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_sum_fields"')
      return v_player_multi_kills_sum_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_var_pop_fields_possibleTypes: string[] = ['v_player_multi_kills_var_pop_fields']
    export const isv_player_multi_kills_var_pop_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_var_pop_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_var_pop_fields"')
      return v_player_multi_kills_var_pop_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_var_samp_fields_possibleTypes: string[] = ['v_player_multi_kills_var_samp_fields']
    export const isv_player_multi_kills_var_samp_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_var_samp_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_var_samp_fields"')
      return v_player_multi_kills_var_samp_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_player_multi_kills_variance_fields_possibleTypes: string[] = ['v_player_multi_kills_variance_fields']
    export const isv_player_multi_kills_variance_fields = (obj?: { __typename?: any } | null): obj is v_player_multi_kills_variance_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_player_multi_kills_variance_fields"')
      return v_player_multi_kills_variance_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_possibleTypes: string[] = ['v_pool_maps']
    export const isv_pool_maps = (obj?: { __typename?: any } | null): obj is v_pool_maps => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps"')
      return v_pool_maps_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_aggregate_possibleTypes: string[] = ['v_pool_maps_aggregate']
    export const isv_pool_maps_aggregate = (obj?: { __typename?: any } | null): obj is v_pool_maps_aggregate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps_aggregate"')
      return v_pool_maps_aggregate_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_aggregate_fields_possibleTypes: string[] = ['v_pool_maps_aggregate_fields']
    export const isv_pool_maps_aggregate_fields = (obj?: { __typename?: any } | null): obj is v_pool_maps_aggregate_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps_aggregate_fields"')
      return v_pool_maps_aggregate_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_max_fields_possibleTypes: string[] = ['v_pool_maps_max_fields']
    export const isv_pool_maps_max_fields = (obj?: { __typename?: any } | null): obj is v_pool_maps_max_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps_max_fields"')
      return v_pool_maps_max_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_min_fields_possibleTypes: string[] = ['v_pool_maps_min_fields']
    export const isv_pool_maps_min_fields = (obj?: { __typename?: any } | null): obj is v_pool_maps_min_fields => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps_min_fields"')
      return v_pool_maps_min_fields_possibleTypes.includes(obj.__typename)
    }
    


    const v_pool_maps_mutation_response_possibleTypes: string[] = ['v_pool_maps_mutation_response']
    export const isv_pool_maps_mutation_response = (obj?: { __typename?: any } | null): obj is v_pool_maps_mutation_response => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isv_pool_maps_mutation_response"')
      return v_pool_maps_mutation_response_possibleTypes.includes(obj.__typename)
    }
    

export const enum_mapPoolConstraint = {
   map_pool_pkey: 'map_pool_pkey' as const
}

export const enum_mapPoolSelectColumn = {
   map_id: 'map_id' as const,
   map_pool_id: 'map_pool_id' as const
}

export const enum_mapPoolUpdateColumn = {
   map_id: 'map_id' as const,
   map_pool_id: 'map_pool_id' as const
}

export const enumAbandonedMatchesConstraint = {
   abandoned_matches_pkey: 'abandoned_matches_pkey' as const
}

export const enumAbandonedMatchesSelectColumn = {
   abandoned_at: 'abandoned_at' as const,
   id: 'id' as const,
   steam_id: 'steam_id' as const
}

export const enumAbandonedMatchesUpdateColumn = {
   abandoned_at: 'abandoned_at' as const,
   id: 'id' as const,
   steam_id: 'steam_id' as const
}

export const enumCursorOrdering = {
   ASC: 'ASC' as const,
   DESC: 'DESC' as const
}

export const enumEFriendStatusConstraint = {
   e_friend_status_pkey: 'e_friend_status_pkey' as const
}

export const enumEFriendStatusEnum = {
   Accepted: 'Accepted' as const,
   Pending: 'Pending' as const
}

export const enumEFriendStatusSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEFriendStatusUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEGameServerNodeStatusesConstraint = {
   e_game_server_node_statuses_pkey: 'e_game_server_node_statuses_pkey' as const
}

export const enumEGameServerNodeStatusesEnum = {
   NotAcceptingNewMatches: 'NotAcceptingNewMatches' as const,
   Offline: 'Offline' as const,
   Online: 'Online' as const,
   Setup: 'Setup' as const
}

export const enumEGameServerNodeStatusesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEGameServerNodeStatusesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumELobbyAccessConstraint = {
   e_lobby_access_pkey: 'e_lobby_access_pkey' as const
}

export const enumELobbyAccessEnum = {
   Friends: 'Friends' as const,
   Invite: 'Invite' as const,
   Open: 'Open' as const,
   Private: 'Private' as const
}

export const enumELobbyAccessSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumELobbyAccessUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumELobbyPlayerStatusConstraint = {
   e_lobby_player_status_pkey: 'e_lobby_player_status_pkey' as const
}

export const enumELobbyPlayerStatusEnum = {
   Accepted: 'Accepted' as const,
   Invited: 'Invited' as const
}

export const enumELobbyPlayerStatusSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumELobbyPlayerStatusUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMapPoolTypesConstraint = {
   e_map_pool_types_pkey: 'e_map_pool_types_pkey' as const
}

export const enumEMapPoolTypesEnum = {
   Competitive: 'Competitive' as const,
   Custom: 'Custom' as const,
   Duel: 'Duel' as const,
   Wingman: 'Wingman' as const
}

export const enumEMapPoolTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMapPoolTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchMapStatusConstraint = {
   match_map_status_pkey: 'match_map_status_pkey' as const
}

export const enumEMatchMapStatusEnum = {
   Canceled: 'Canceled' as const,
   Finished: 'Finished' as const,
   Knife: 'Knife' as const,
   Live: 'Live' as const,
   Overtime: 'Overtime' as const,
   Paused: 'Paused' as const,
   Scheduled: 'Scheduled' as const,
   Warmup: 'Warmup' as const
}

export const enumEMatchMapStatusSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchMapStatusUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchStatusConstraint = {
   e_match_status_pkey: 'e_match_status_pkey' as const
}

export const enumEMatchStatusEnum = {
   Canceled: 'Canceled' as const,
   Finished: 'Finished' as const,
   Forfeit: 'Forfeit' as const,
   Live: 'Live' as const,
   PickingPlayers: 'PickingPlayers' as const,
   Scheduled: 'Scheduled' as const,
   Surrendered: 'Surrendered' as const,
   Tie: 'Tie' as const,
   Veto: 'Veto' as const,
   WaitingForCheckIn: 'WaitingForCheckIn' as const,
   WaitingForServer: 'WaitingForServer' as const
}

export const enumEMatchStatusSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchStatusUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchTypesConstraint = {
   e_match_types_pkey: 'e_match_types_pkey' as const
}

export const enumEMatchTypesEnum = {
   Competitive: 'Competitive' as const,
   Duel: 'Duel' as const,
   Wingman: 'Wingman' as const
}

export const enumEMatchTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEMatchTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumENotificationTypesConstraint = {
   e_notification_types_pkey: 'e_notification_types_pkey' as const
}

export const enumENotificationTypesEnum = {
   DedicatedServerRconStatus: 'DedicatedServerRconStatus' as const,
   DedicatedServerStatus: 'DedicatedServerStatus' as const,
   GameNodeStatus: 'GameNodeStatus' as const,
   GameUpdate: 'GameUpdate' as const,
   MatchSupport: 'MatchSupport' as const,
   NameChangeRequest: 'NameChangeRequest' as const
}

export const enumENotificationTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumENotificationTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEObjectiveTypesConstraint = {
   e_objective__pkey: 'e_objective__pkey' as const
}

export const enumEObjectiveTypesEnum = {
   Defused: 'Defused' as const,
   Exploded: 'Exploded' as const,
   Planted: 'Planted' as const
}

export const enumEObjectiveTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEObjectiveTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEPlayerRolesConstraint = {
   e_player_roles_pkey: 'e_player_roles_pkey' as const
}

export const enumEPlayerRolesEnum = {
   administrator: 'administrator' as const,
   match_organizer: 'match_organizer' as const,
   streamer: 'streamer' as const,
   tournament_organizer: 'tournament_organizer' as const,
   user: 'user' as const,
   verified_user: 'verified_user' as const
}

export const enumEPlayerRolesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEPlayerRolesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEReadySettingsConstraint = {
   e_ready_settings_pkey: 'e_ready_settings_pkey' as const
}

export const enumEReadySettingsEnum = {
   Admin: 'Admin' as const,
   Captains: 'Captains' as const,
   Coach: 'Coach' as const,
   Players: 'Players' as const
}

export const enumEReadySettingsSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEReadySettingsUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumESanctionTypesConstraint = {
   e_sanction_types_pkey: 'e_sanction_types_pkey' as const
}

export const enumESanctionTypesEnum = {
   ban: 'ban' as const,
   gag: 'gag' as const,
   mute: 'mute' as const,
   silence: 'silence' as const
}

export const enumESanctionTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumESanctionTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumESidesConstraint = {
   e_teams_pkey: 'e_teams_pkey' as const
}

export const enumESidesEnum = {
   CT: 'CT' as const,
   None: 'None' as const,
   Spectator: 'Spectator' as const,
   TERRORIST: 'TERRORIST' as const
}

export const enumESidesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumESidesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETeamRolesConstraint = {
   e_team_roles_pkey: 'e_team_roles_pkey' as const
}

export const enumETeamRolesEnum = {
   Admin: 'Admin' as const,
   Invite: 'Invite' as const,
   Member: 'Member' as const
}

export const enumETeamRolesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETeamRolesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETimeoutSettingsConstraint = {
   e_timeout_settings_pkey: 'e_timeout_settings_pkey' as const
}

export const enumETimeoutSettingsEnum = {
   Admin: 'Admin' as const,
   Coach: 'Coach' as const,
   CoachAndCaptains: 'CoachAndCaptains' as const,
   CoachAndPlayers: 'CoachAndPlayers' as const
}

export const enumETimeoutSettingsSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETimeoutSettingsUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETournamentStageTypesConstraint = {
   e_tournament_stage_types_pkey: 'e_tournament_stage_types_pkey' as const
}

export const enumETournamentStageTypesEnum = {
   SingleElimination: 'SingleElimination' as const
}

export const enumETournamentStageTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETournamentStageTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETournamentStatusConstraint = {
   e_tournament_status_pkey: 'e_tournament_status_pkey' as const
}

export const enumETournamentStatusEnum = {
   Cancelled: 'Cancelled' as const,
   CancelledMinTeams: 'CancelledMinTeams' as const,
   Finished: 'Finished' as const,
   Live: 'Live' as const,
   RegistrationClosed: 'RegistrationClosed' as const,
   RegistrationOpen: 'RegistrationOpen' as const,
   Setup: 'Setup' as const
}

export const enumETournamentStatusSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumETournamentStatusUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEUtilityTypesConstraint = {
   e_utility_types_pkey: 'e_utility_types_pkey' as const
}

export const enumEUtilityTypesEnum = {
   Decoy: 'Decoy' as const,
   Flash: 'Flash' as const,
   HighExplosive: 'HighExplosive' as const,
   Molotov: 'Molotov' as const,
   Smoke: 'Smoke' as const
}

export const enumEUtilityTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEUtilityTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEVetoPickTypesConstraint = {
   e_veto_pick_type_pkey: 'e_veto_pick_type_pkey' as const
}

export const enumEVetoPickTypesEnum = {
   Ban: 'Ban' as const,
   Decider: 'Decider' as const,
   Pick: 'Pick' as const,
   Side: 'Side' as const
}

export const enumEVetoPickTypesSelectColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumEVetoPickTypesUpdateColumn = {
   description: 'description' as const,
   value: 'value' as const
}

export const enumFriendsConstraint = {
   friends_pkey: 'friends_pkey' as const
}

export const enumFriendsSelectColumn = {
   other_player_steam_id: 'other_player_steam_id' as const,
   player_steam_id: 'player_steam_id' as const,
   status: 'status' as const
}

export const enumFriendsUpdateColumn = {
   other_player_steam_id: 'other_player_steam_id' as const,
   player_steam_id: 'player_steam_id' as const,
   status: 'status' as const
}

export const enumGameServerNodesConstraint = {
   game_server_nodes_pkey: 'game_server_nodes_pkey' as const
}

export const enumGameServerNodesSelectColumn = {
   build_id: 'build_id' as const,
   enabled: 'enabled' as const,
   end_port_range: 'end_port_range' as const,
   id: 'id' as const,
   label: 'label' as const,
   lan_ip: 'lan_ip' as const,
   node_ip: 'node_ip' as const,
   public_ip: 'public_ip' as const,
   region: 'region' as const,
   start_port_range: 'start_port_range' as const,
   status: 'status' as const,
   supports_cpu_pinning: 'supports_cpu_pinning' as const,
   supports_low_latency: 'supports_low_latency' as const,
   token: 'token' as const,
   update_status: 'update_status' as const
}

export const enumGameServerNodesSelectColumnGameServerNodesAggregateBoolExpBoolAndArgumentsColumns = {
   enabled: 'enabled' as const,
   supports_cpu_pinning: 'supports_cpu_pinning' as const,
   supports_low_latency: 'supports_low_latency' as const
}

export const enumGameServerNodesSelectColumnGameServerNodesAggregateBoolExpBoolOrArgumentsColumns = {
   enabled: 'enabled' as const,
   supports_cpu_pinning: 'supports_cpu_pinning' as const,
   supports_low_latency: 'supports_low_latency' as const
}

export const enumGameServerNodesUpdateColumn = {
   build_id: 'build_id' as const,
   enabled: 'enabled' as const,
   end_port_range: 'end_port_range' as const,
   id: 'id' as const,
   label: 'label' as const,
   lan_ip: 'lan_ip' as const,
   node_ip: 'node_ip' as const,
   public_ip: 'public_ip' as const,
   region: 'region' as const,
   start_port_range: 'start_port_range' as const,
   status: 'status' as const,
   supports_cpu_pinning: 'supports_cpu_pinning' as const,
   supports_low_latency: 'supports_low_latency' as const,
   token: 'token' as const,
   update_status: 'update_status' as const
}

export const enumLobbiesConstraint = {
   lobbies_pkey: 'lobbies_pkey' as const
}

export const enumLobbiesSelectColumn = {
   access: 'access' as const,
   created_at: 'created_at' as const,
   id: 'id' as const
}

export const enumLobbiesUpdateColumn = {
   access: 'access' as const,
   created_at: 'created_at' as const,
   id: 'id' as const
}

export const enumLobbyPlayersConstraint = {
   lobby_players_pkey: 'lobby_players_pkey' as const
}

export const enumLobbyPlayersSelectColumn = {
   captain: 'captain' as const,
   invited_by_steam_id: 'invited_by_steam_id' as const,
   lobby_id: 'lobby_id' as const,
   status: 'status' as const,
   steam_id: 'steam_id' as const
}

export const enumLobbyPlayersSelectColumnLobbyPlayersAggregateBoolExpBoolAndArgumentsColumns = {
   captain: 'captain' as const
}

export const enumLobbyPlayersSelectColumnLobbyPlayersAggregateBoolExpBoolOrArgumentsColumns = {
   captain: 'captain' as const
}

export const enumLobbyPlayersUpdateColumn = {
   captain: 'captain' as const,
   invited_by_steam_id: 'invited_by_steam_id' as const,
   lobby_id: 'lobby_id' as const,
   status: 'status' as const,
   steam_id: 'steam_id' as const
}

export const enumMapPoolsConstraint = {
   map_pools_pkey: 'map_pools_pkey' as const
}

export const enumMapPoolsSelectColumn = {
   enabled: 'enabled' as const,
   id: 'id' as const,
   seed: 'seed' as const,
   type: 'type' as const
}

export const enumMapPoolsUpdateColumn = {
   enabled: 'enabled' as const,
   id: 'id' as const,
   seed: 'seed' as const,
   type: 'type' as const
}

export const enumMapsConstraint = {
   maps_name_type_key: 'maps_name_type_key' as const,
   maps_pkey: 'maps_pkey' as const
}

export const enumMapsSelectColumn = {
   active_pool: 'active_pool' as const,
   enabled: 'enabled' as const,
   id: 'id' as const,
   label: 'label' as const,
   name: 'name' as const,
   patch: 'patch' as const,
   poster: 'poster' as const,
   type: 'type' as const,
   workshop_map_id: 'workshop_map_id' as const
}

export const enumMapsSelectColumnMapsAggregateBoolExpBoolAndArgumentsColumns = {
   active_pool: 'active_pool' as const,
   enabled: 'enabled' as const
}

export const enumMapsSelectColumnMapsAggregateBoolExpBoolOrArgumentsColumns = {
   active_pool: 'active_pool' as const,
   enabled: 'enabled' as const
}

export const enumMapsUpdateColumn = {
   active_pool: 'active_pool' as const,
   enabled: 'enabled' as const,
   id: 'id' as const,
   label: 'label' as const,
   name: 'name' as const,
   patch: 'patch' as const,
   poster: 'poster' as const,
   type: 'type' as const,
   workshop_map_id: 'workshop_map_id' as const
}

export const enumMatchInvitesConstraint = {
   match_invites_match_id_invited_by_player_steam_id_steam_id_key: 'match_invites_match_id_invited_by_player_steam_id_steam_id_key' as const,
   match_invites_pkey: 'match_invites_pkey' as const
}

export const enumMatchInvitesSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   match_id: 'match_id' as const,
   steam_id: 'steam_id' as const
}

export const enumMatchInvitesUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   match_id: 'match_id' as const,
   steam_id: 'steam_id' as const
}

export const enumMatchLineupPlayersConstraint = {
   match_lineup_players_match_lineup_id_placeholder_name_key: 'match_lineup_players_match_lineup_id_placeholder_name_key' as const,
   match_lineup_players_match_lineup_id_steam_id_key: 'match_lineup_players_match_lineup_id_steam_id_key' as const,
   match_members_pkey: 'match_members_pkey' as const
}

export const enumMatchLineupPlayersSelectColumn = {
   captain: 'captain' as const,
   checked_in: 'checked_in' as const,
   discord_id: 'discord_id' as const,
   id: 'id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   placeholder_name: 'placeholder_name' as const,
   steam_id: 'steam_id' as const
}

export const enumMatchLineupPlayersSelectColumnMatchLineupPlayersAggregateBoolExpBoolAndArgumentsColumns = {
   captain: 'captain' as const,
   checked_in: 'checked_in' as const
}

export const enumMatchLineupPlayersSelectColumnMatchLineupPlayersAggregateBoolExpBoolOrArgumentsColumns = {
   captain: 'captain' as const,
   checked_in: 'checked_in' as const
}

export const enumMatchLineupPlayersUpdateColumn = {
   captain: 'captain' as const,
   checked_in: 'checked_in' as const,
   discord_id: 'discord_id' as const,
   id: 'id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   placeholder_name: 'placeholder_name' as const,
   steam_id: 'steam_id' as const
}

export const enumMatchLineupsConstraint = {
   match_teams_pkey: 'match_teams_pkey' as const
}

export const enumMatchLineupsSelectColumn = {
   coach_steam_id: 'coach_steam_id' as const,
   id: 'id' as const,
   team_id: 'team_id' as const
}

export const enumMatchLineupsUpdateColumn = {
   coach_steam_id: 'coach_steam_id' as const,
   id: 'id' as const,
   team_id: 'team_id' as const
}

export const enumMatchMapDemosConstraint = {
   match_demos_pkey: 'match_demos_pkey' as const
}

export const enumMatchMapDemosSelectColumn = {
   file: 'file' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   size: 'size' as const
}

export const enumMatchMapDemosUpdateColumn = {
   file: 'file' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   size: 'size' as const
}

export const enumMatchMapRoundsConstraint = {
   match_rounds__id_key: 'match_rounds__id_key' as const,
   match_rounds_match_id_round_key: 'match_rounds_match_id_round_key' as const,
   match_rounds_pkey: 'match_rounds_pkey' as const
}

export const enumMatchMapRoundsSelectColumn = {
   backup_file: 'backup_file' as const,
   id: 'id' as const,
   lineup_1_money: 'lineup_1_money' as const,
   lineup_1_score: 'lineup_1_score' as const,
   lineup_1_side: 'lineup_1_side' as const,
   lineup_1_timeouts_available: 'lineup_1_timeouts_available' as const,
   lineup_2_money: 'lineup_2_money' as const,
   lineup_2_score: 'lineup_2_score' as const,
   lineup_2_side: 'lineup_2_side' as const,
   lineup_2_timeouts_available: 'lineup_2_timeouts_available' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   time: 'time' as const,
   winning_side: 'winning_side' as const
}

export const enumMatchMapRoundsUpdateColumn = {
   backup_file: 'backup_file' as const,
   id: 'id' as const,
   lineup_1_money: 'lineup_1_money' as const,
   lineup_1_score: 'lineup_1_score' as const,
   lineup_1_side: 'lineup_1_side' as const,
   lineup_1_timeouts_available: 'lineup_1_timeouts_available' as const,
   lineup_2_money: 'lineup_2_money' as const,
   lineup_2_score: 'lineup_2_score' as const,
   lineup_2_side: 'lineup_2_side' as const,
   lineup_2_timeouts_available: 'lineup_2_timeouts_available' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   time: 'time' as const,
   winning_side: 'winning_side' as const
}

export const enumMatchMapVetoPicksConstraint = {
   match_map_veto_picks_pkey: 'match_map_veto_picks_pkey' as const
}

export const enumMatchMapVetoPicksSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   side: 'side' as const,
   type: 'type' as const
}

export const enumMatchMapVetoPicksUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   side: 'side' as const,
   type: 'type' as const
}

export const enumMatchMapsConstraint = {
   match_maps_match_id_order_key: 'match_maps_match_id_order_key' as const,
   match_maps_pkey: 'match_maps_pkey' as const
}

export const enumMatchMapsSelectColumn = {
   created_at: 'created_at' as const,
   ended_at: 'ended_at' as const,
   id: 'id' as const,
   lineup_1_side: 'lineup_1_side' as const,
   lineup_1_timeouts_available: 'lineup_1_timeouts_available' as const,
   lineup_2_side: 'lineup_2_side' as const,
   lineup_2_timeouts_available: 'lineup_2_timeouts_available' as const,
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   order: 'order' as const,
   started_at: 'started_at' as const,
   status: 'status' as const,
   winning_lineup_id: 'winning_lineup_id' as const
}

export const enumMatchMapsUpdateColumn = {
   created_at: 'created_at' as const,
   ended_at: 'ended_at' as const,
   id: 'id' as const,
   lineup_1_side: 'lineup_1_side' as const,
   lineup_1_timeouts_available: 'lineup_1_timeouts_available' as const,
   lineup_2_side: 'lineup_2_side' as const,
   lineup_2_timeouts_available: 'lineup_2_timeouts_available' as const,
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   order: 'order' as const,
   started_at: 'started_at' as const,
   status: 'status' as const,
   winning_lineup_id: 'winning_lineup_id' as const
}

export const enumMatchOptionsConstraint = {
   match_options_pkey: 'match_options_pkey' as const
}

export const enumMatchOptionsSelectColumn = {
   best_of: 'best_of' as const,
   coaches: 'coaches' as const,
   id: 'id' as const,
   invite_code: 'invite_code' as const,
   knife_round: 'knife_round' as const,
   lobby_access: 'lobby_access' as const,
   map_pool_id: 'map_pool_id' as const,
   map_veto: 'map_veto' as const,
   mr: 'mr' as const,
   number_of_substitutes: 'number_of_substitutes' as const,
   overtime: 'overtime' as const,
   prefer_dedicated_server: 'prefer_dedicated_server' as const,
   ready_setting: 'ready_setting' as const,
   region_veto: 'region_veto' as const,
   regions: 'regions' as const,
   tech_timeout_setting: 'tech_timeout_setting' as const,
   timeout_setting: 'timeout_setting' as const,
   tv_delay: 'tv_delay' as const,
   type: 'type' as const
}

export const enumMatchOptionsUpdateColumn = {
   best_of: 'best_of' as const,
   coaches: 'coaches' as const,
   id: 'id' as const,
   invite_code: 'invite_code' as const,
   knife_round: 'knife_round' as const,
   lobby_access: 'lobby_access' as const,
   map_pool_id: 'map_pool_id' as const,
   map_veto: 'map_veto' as const,
   mr: 'mr' as const,
   number_of_substitutes: 'number_of_substitutes' as const,
   overtime: 'overtime' as const,
   prefer_dedicated_server: 'prefer_dedicated_server' as const,
   ready_setting: 'ready_setting' as const,
   region_veto: 'region_veto' as const,
   regions: 'regions' as const,
   tech_timeout_setting: 'tech_timeout_setting' as const,
   timeout_setting: 'timeout_setting' as const,
   tv_delay: 'tv_delay' as const,
   type: 'type' as const
}

export const enumMatchRegionVetoPicksConstraint = {
   match_region_veto_picks_pkey: 'match_region_veto_picks_pkey' as const
}

export const enumMatchRegionVetoPicksSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   region: 'region' as const,
   type: 'type' as const
}

export const enumMatchRegionVetoPicksUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   region: 'region' as const,
   type: 'type' as const
}

export const enumMatchTypeCfgsConstraint = {
   match_type_cfgs_pkey: 'match_type_cfgs_pkey' as const
}

export const enumMatchTypeCfgsSelectColumn = {
   cfg: 'cfg' as const,
   type: 'type' as const
}

export const enumMatchTypeCfgsUpdateColumn = {
   cfg: 'cfg' as const,
   type: 'type' as const
}

export const enumMatchesConstraint = {
   matches_lineup_1_id_key: 'matches_lineup_1_id_key' as const,
   matches_lineup_1_id_lineup_2_id_key: 'matches_lineup_1_id_lineup_2_id_key' as const,
   matches_lineup_2_id_key: 'matches_lineup_2_id_key' as const,
   matches_pkey: 'matches_pkey' as const
}

export const enumMatchesSelectColumn = {
   cancels_at: 'cancels_at' as const,
   created_at: 'created_at' as const,
   ended_at: 'ended_at' as const,
   id: 'id' as const,
   label: 'label' as const,
   lineup_1_id: 'lineup_1_id' as const,
   lineup_2_id: 'lineup_2_id' as const,
   match_options_id: 'match_options_id' as const,
   organizer_steam_id: 'organizer_steam_id' as const,
   password: 'password' as const,
   region: 'region' as const,
   scheduled_at: 'scheduled_at' as const,
   server_id: 'server_id' as const,
   started_at: 'started_at' as const,
   status: 'status' as const,
   winning_lineup_id: 'winning_lineup_id' as const
}

export const enumMatchesUpdateColumn = {
   cancels_at: 'cancels_at' as const,
   created_at: 'created_at' as const,
   ended_at: 'ended_at' as const,
   id: 'id' as const,
   label: 'label' as const,
   lineup_1_id: 'lineup_1_id' as const,
   lineup_2_id: 'lineup_2_id' as const,
   match_options_id: 'match_options_id' as const,
   organizer_steam_id: 'organizer_steam_id' as const,
   password: 'password' as const,
   region: 'region' as const,
   scheduled_at: 'scheduled_at' as const,
   server_id: 'server_id' as const,
   started_at: 'started_at' as const,
   status: 'status' as const,
   winning_lineup_id: 'winning_lineup_id' as const
}

export const enumMigrationHashesHashesConstraint = {
   hashes_pkey: 'hashes_pkey' as const
}

export const enumMigrationHashesHashesSelectColumn = {
   hash: 'hash' as const,
   name: 'name' as const
}

export const enumMigrationHashesHashesUpdateColumn = {
   hash: 'hash' as const,
   name: 'name' as const
}

export const enumMyFriendsSelectColumn = {
   avatar_url: 'avatar_url' as const,
   country: 'country' as const,
   created_at: 'created_at' as const,
   discord_id: 'discord_id' as const,
   elo: 'elo' as const,
   friend_steam_id: 'friend_steam_id' as const,
   invited_by_steam_id: 'invited_by_steam_id' as const,
   name: 'name' as const,
   name_registered: 'name_registered' as const,
   profile_url: 'profile_url' as const,
   role: 'role' as const,
   status: 'status' as const,
   steam_id: 'steam_id' as const
}

export const enumMyFriendsSelectColumnMyFriendsAggregateBoolExpBoolAndArgumentsColumns = {
   name_registered: 'name_registered' as const
}

export const enumMyFriendsSelectColumnMyFriendsAggregateBoolExpBoolOrArgumentsColumns = {
   name_registered: 'name_registered' as const
}

export const enumNotificationsConstraint = {
   notifications_pkey: 'notifications_pkey' as const
}

export const enumNotificationsSelectColumn = {
   actions: 'actions' as const,
   created_at: 'created_at' as const,
   deleted_at: 'deleted_at' as const,
   entity_id: 'entity_id' as const,
   id: 'id' as const,
   is_read: 'is_read' as const,
   message: 'message' as const,
   role: 'role' as const,
   steam_id: 'steam_id' as const,
   title: 'title' as const,
   type: 'type' as const
}

export const enumNotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumns = {
   is_read: 'is_read' as const
}

export const enumNotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumns = {
   is_read: 'is_read' as const
}

export const enumNotificationsUpdateColumn = {
   actions: 'actions' as const,
   created_at: 'created_at' as const,
   deleted_at: 'deleted_at' as const,
   entity_id: 'entity_id' as const,
   id: 'id' as const,
   is_read: 'is_read' as const,
   message: 'message' as const,
   role: 'role' as const,
   steam_id: 'steam_id' as const,
   title: 'title' as const,
   type: 'type' as const
}

export const enumOrderBy = {
   asc: 'asc' as const,
   asc_nulls_first: 'asc_nulls_first' as const,
   asc_nulls_last: 'asc_nulls_last' as const,
   desc: 'desc' as const,
   desc_nulls_first: 'desc_nulls_first' as const,
   desc_nulls_last: 'desc_nulls_last' as const
}

export const enumPlayerAssistsSelectColumn = {
   attacked_steam_id: 'attacked_steam_id' as const,
   attacked_team: 'attacked_team' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   attacker_team: 'attacker_team' as const,
   flash: 'flash' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   time: 'time' as const
}

export const enumPlayerAssistsSelectColumnPlayerAssistsAggregateBoolExpBoolAndArgumentsColumns = {
   flash: 'flash' as const
}

export const enumPlayerAssistsSelectColumnPlayerAssistsAggregateBoolExpBoolOrArgumentsColumns = {
   flash: 'flash' as const
}

export const enumPlayerDamagesSelectColumn = {
   armor: 'armor' as const,
   attacked_location: 'attacked_location' as const,
   attacked_location_coordinates: 'attacked_location_coordinates' as const,
   attacked_steam_id: 'attacked_steam_id' as const,
   attacked_team: 'attacked_team' as const,
   attacker_location: 'attacker_location' as const,
   attacker_location_coordinates: 'attacker_location_coordinates' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   attacker_team: 'attacker_team' as const,
   damage: 'damage' as const,
   damage_armor: 'damage_armor' as const,
   health: 'health' as const,
   hitgroup: 'hitgroup' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   time: 'time' as const,
   with: 'with' as const
}

export const enumPlayerEloConstraint = {
   player_elo_pkey: 'player_elo_pkey' as const
}

export const enumPlayerEloSelectColumn = {
   change: 'change' as const,
   created_at: 'created_at' as const,
   current: 'current' as const,
   match_id: 'match_id' as const,
   steam_id: 'steam_id' as const
}

export const enumPlayerEloUpdateColumn = {
   change: 'change' as const,
   created_at: 'created_at' as const,
   current: 'current' as const,
   match_id: 'match_id' as const,
   steam_id: 'steam_id' as const
}

export const enumPlayerFlashesSelectColumn = {
   attacked_steam_id: 'attacked_steam_id' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   duration: 'duration' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   team_flash: 'team_flash' as const,
   time: 'time' as const
}

export const enumPlayerFlashesSelectColumnPlayerFlashesAggregateBoolExpBoolAndArgumentsColumns = {
   team_flash: 'team_flash' as const
}

export const enumPlayerFlashesSelectColumnPlayerFlashesAggregateBoolExpBoolOrArgumentsColumns = {
   team_flash: 'team_flash' as const
}

export const enumPlayerKillsConstraint = {
   player_kills_pkey: 'player_kills_pkey' as const
}

export const enumPlayerKillsSelectColumn = {
   assisted: 'assisted' as const,
   attacked_location: 'attacked_location' as const,
   attacked_location_coordinates: 'attacked_location_coordinates' as const,
   attacked_steam_id: 'attacked_steam_id' as const,
   attacked_team: 'attacked_team' as const,
   attacker_location: 'attacker_location' as const,
   attacker_location_coordinates: 'attacker_location_coordinates' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   attacker_team: 'attacker_team' as const,
   blinded: 'blinded' as const,
   headshot: 'headshot' as const,
   hitgroup: 'hitgroup' as const,
   id: 'id' as const,
   in_air: 'in_air' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   no_scope: 'no_scope' as const,
   round: 'round' as const,
   thru_smoke: 'thru_smoke' as const,
   thru_wall: 'thru_wall' as const,
   time: 'time' as const,
   with: 'with' as const
}

export const enumPlayerKillsSelectColumnPlayerKillsAggregateBoolExpBoolAndArgumentsColumns = {
   assisted: 'assisted' as const,
   blinded: 'blinded' as const,
   headshot: 'headshot' as const,
   in_air: 'in_air' as const,
   no_scope: 'no_scope' as const,
   thru_smoke: 'thru_smoke' as const,
   thru_wall: 'thru_wall' as const
}

export const enumPlayerKillsSelectColumnPlayerKillsAggregateBoolExpBoolOrArgumentsColumns = {
   assisted: 'assisted' as const,
   blinded: 'blinded' as const,
   headshot: 'headshot' as const,
   in_air: 'in_air' as const,
   no_scope: 'no_scope' as const,
   thru_smoke: 'thru_smoke' as const,
   thru_wall: 'thru_wall' as const
}

export const enumPlayerKillsUpdateColumn = {
   assisted: 'assisted' as const,
   attacked_location: 'attacked_location' as const,
   attacked_location_coordinates: 'attacked_location_coordinates' as const,
   attacked_steam_id: 'attacked_steam_id' as const,
   attacked_team: 'attacked_team' as const,
   attacker_location: 'attacker_location' as const,
   attacker_location_coordinates: 'attacker_location_coordinates' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   attacker_team: 'attacker_team' as const,
   blinded: 'blinded' as const,
   headshot: 'headshot' as const,
   hitgroup: 'hitgroup' as const,
   id: 'id' as const,
   in_air: 'in_air' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   no_scope: 'no_scope' as const,
   round: 'round' as const,
   thru_smoke: 'thru_smoke' as const,
   thru_wall: 'thru_wall' as const,
   time: 'time' as const,
   with: 'with' as const
}

export const enumPlayerObjectivesSelectColumn = {
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   player_steam_id: 'player_steam_id' as const,
   round: 'round' as const,
   time: 'time' as const,
   type: 'type' as const
}

export const enumPlayerSanctionsSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   player_steam_id: 'player_steam_id' as const,
   reason: 'reason' as const,
   remove_sanction_date: 'remove_sanction_date' as const,
   sanctioned_by_steam_id: 'sanctioned_by_steam_id' as const,
   type: 'type' as const
}

export const enumPlayerUnusedUtilityConstraint = {
   player_unused_utility_pkey: 'player_unused_utility_pkey' as const
}

export const enumPlayerUnusedUtilitySelectColumn = {
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   player_steam_id: 'player_steam_id' as const,
   round: 'round' as const,
   unused: 'unused' as const
}

export const enumPlayerUnusedUtilityUpdateColumn = {
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   player_steam_id: 'player_steam_id' as const,
   round: 'round' as const,
   unused: 'unused' as const
}

export const enumPlayerUtilitySelectColumn = {
   attacker_location_coordinates: 'attacker_location_coordinates' as const,
   attacker_steam_id: 'attacker_steam_id' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_map_id: 'match_map_id' as const,
   round: 'round' as const,
   time: 'time' as const,
   type: 'type' as const
}

export const enumPlayersConstraint = {
   players_discord_id_key: 'players_discord_id_key' as const,
   players_pkey: 'players_pkey' as const,
   players_steam_id_key: 'players_steam_id_key' as const
}

export const enumPlayersSelectColumn = {
   avatar_url: 'avatar_url' as const,
   country: 'country' as const,
   created_at: 'created_at' as const,
   discord_id: 'discord_id' as const,
   language: 'language' as const,
   name: 'name' as const,
   name_registered: 'name_registered' as const,
   profile_url: 'profile_url' as const,
   role: 'role' as const,
   steam_id: 'steam_id' as const
}

export const enumPlayersUpdateColumn = {
   avatar_url: 'avatar_url' as const,
   country: 'country' as const,
   created_at: 'created_at' as const,
   discord_id: 'discord_id' as const,
   language: 'language' as const,
   name: 'name' as const,
   name_registered: 'name_registered' as const,
   profile_url: 'profile_url' as const,
   role: 'role' as const,
   steam_id: 'steam_id' as const
}

export const enumServerRegionsConstraint = {
   e_server_regions_pkey: 'e_server_regions_pkey' as const
}

export const enumServerRegionsSelectColumn = {
   description: 'description' as const,
   is_lan: 'is_lan' as const,
   value: 'value' as const
}

export const enumServerRegionsUpdateColumn = {
   description: 'description' as const,
   is_lan: 'is_lan' as const,
   value: 'value' as const
}

export const enumServersConstraint = {
   servers_pkey: 'servers_pkey' as const,
   servers_reserved_by_match_id_key: 'servers_reserved_by_match_id_key' as const
}

export const enumServersSelectColumn = {
   api_password: 'api_password' as const,
   connected: 'connected' as const,
   enabled: 'enabled' as const,
   game_server_node_id: 'game_server_node_id' as const,
   host: 'host' as const,
   id: 'id' as const,
   label: 'label' as const,
   port: 'port' as const,
   rcon_password: 'rcon_password' as const,
   rcon_status: 'rcon_status' as const,
   region: 'region' as const,
   reserved_by_match_id: 'reserved_by_match_id' as const,
   tv_port: 'tv_port' as const
}

export const enumServersSelectColumnServersAggregateBoolExpBoolAndArgumentsColumns = {
   connected: 'connected' as const,
   enabled: 'enabled' as const,
   rcon_status: 'rcon_status' as const
}

export const enumServersSelectColumnServersAggregateBoolExpBoolOrArgumentsColumns = {
   connected: 'connected' as const,
   enabled: 'enabled' as const,
   rcon_status: 'rcon_status' as const
}

export const enumServersUpdateColumn = {
   api_password: 'api_password' as const,
   connected: 'connected' as const,
   enabled: 'enabled' as const,
   game_server_node_id: 'game_server_node_id' as const,
   host: 'host' as const,
   id: 'id' as const,
   label: 'label' as const,
   port: 'port' as const,
   rcon_password: 'rcon_password' as const,
   rcon_status: 'rcon_status' as const,
   region: 'region' as const,
   reserved_by_match_id: 'reserved_by_match_id' as const,
   tv_port: 'tv_port' as const
}

export const enumSettingsConstraint = {
   settings_pkey: 'settings_pkey' as const
}

export const enumSettingsSelectColumn = {
   name: 'name' as const,
   value: 'value' as const
}

export const enumSettingsUpdateColumn = {
   name: 'name' as const,
   value: 'value' as const
}

export const enumTeamInvitesConstraint = {
   team_invites_pkey: 'team_invites_pkey' as const,
   team_invites_team_id_steam_id_key: 'team_invites_team_id_steam_id_key' as const
}

export const enumTeamInvitesSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   steam_id: 'steam_id' as const,
   team_id: 'team_id' as const
}

export const enumTeamInvitesUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   steam_id: 'steam_id' as const,
   team_id: 'team_id' as const
}

export const enumTeamRosterConstraint = {
   team_members_pkey: 'team_members_pkey' as const
}

export const enumTeamRosterSelectColumn = {
   player_steam_id: 'player_steam_id' as const,
   role: 'role' as const,
   team_id: 'team_id' as const
}

export const enumTeamRosterUpdateColumn = {
   player_steam_id: 'player_steam_id' as const,
   role: 'role' as const,
   team_id: 'team_id' as const
}

export const enumTeamsConstraint = {
   teams_name_key: 'teams_name_key' as const,
   teams_pkey: 'teams_pkey' as const
}

export const enumTeamsSelectColumn = {
   id: 'id' as const,
   name: 'name' as const,
   owner_steam_id: 'owner_steam_id' as const,
   short_name: 'short_name' as const
}

export const enumTeamsUpdateColumn = {
   id: 'id' as const,
   name: 'name' as const,
   owner_steam_id: 'owner_steam_id' as const,
   short_name: 'short_name' as const
}

export const enumTournamentBracketsConstraint = {
   touarnment_brackets_pkey: 'touarnment_brackets_pkey' as const,
   tournament_brackets_id_tournament_team_id_1_tournament_team_id_: 'tournament_brackets_id_tournament_team_id_1_tournament_team_id_' as const
}

export const enumTournamentBracketsSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_number: 'match_number' as const,
   parent_bracket_id: 'parent_bracket_id' as const,
   round: 'round' as const,
   tournament_stage_id: 'tournament_stage_id' as const,
   tournament_team_id_1: 'tournament_team_id_1' as const,
   tournament_team_id_2: 'tournament_team_id_2' as const
}

export const enumTournamentBracketsUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   match_number: 'match_number' as const,
   parent_bracket_id: 'parent_bracket_id' as const,
   round: 'round' as const,
   tournament_stage_id: 'tournament_stage_id' as const,
   tournament_team_id_1: 'tournament_team_id_1' as const,
   tournament_team_id_2: 'tournament_team_id_2' as const
}

export const enumTournamentOrganizersConstraint = {
   tournament_organizers_pkey: 'tournament_organizers_pkey' as const
}

export const enumTournamentOrganizersSelectColumn = {
   steam_id: 'steam_id' as const,
   tournament_id: 'tournament_id' as const
}

export const enumTournamentOrganizersUpdateColumn = {
   steam_id: 'steam_id' as const,
   tournament_id: 'tournament_id' as const
}

export const enumTournamentStagesConstraint = {
   tournament_stages_pkey: 'tournament_stages_pkey' as const
}

export const enumTournamentStagesSelectColumn = {
   id: 'id' as const,
   max_teams: 'max_teams' as const,
   min_teams: 'min_teams' as const,
   order: 'order' as const,
   settings: 'settings' as const,
   tournament_id: 'tournament_id' as const,
   type: 'type' as const
}

export const enumTournamentStagesUpdateColumn = {
   id: 'id' as const,
   max_teams: 'max_teams' as const,
   min_teams: 'min_teams' as const,
   order: 'order' as const,
   settings: 'settings' as const,
   tournament_id: 'tournament_id' as const,
   type: 'type' as const
}

export const enumTournamentTeamInvitesConstraint = {
   tournament_team_invites_pkey: 'tournament_team_invites_pkey' as const,
   tournament_team_invites_steam_id_tournament_team_id_key: 'tournament_team_invites_steam_id_tournament_team_id_key' as const
}

export const enumTournamentTeamInvitesSelectColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   steam_id: 'steam_id' as const,
   tournament_team_id: 'tournament_team_id' as const
}

export const enumTournamentTeamInvitesUpdateColumn = {
   created_at: 'created_at' as const,
   id: 'id' as const,
   invited_by_player_steam_id: 'invited_by_player_steam_id' as const,
   steam_id: 'steam_id' as const,
   tournament_team_id: 'tournament_team_id' as const
}

export const enumTournamentTeamRosterConstraint = {
   tournament_roster_pkey: 'tournament_roster_pkey' as const,
   tournament_roster_player_steam_id_tournament_id_key: 'tournament_roster_player_steam_id_tournament_id_key' as const
}

export const enumTournamentTeamRosterSelectColumn = {
   player_steam_id: 'player_steam_id' as const,
   role: 'role' as const,
   tournament_id: 'tournament_id' as const,
   tournament_team_id: 'tournament_team_id' as const
}

export const enumTournamentTeamRosterUpdateColumn = {
   player_steam_id: 'player_steam_id' as const,
   role: 'role' as const,
   tournament_id: 'tournament_id' as const,
   tournament_team_id: 'tournament_team_id' as const
}

export const enumTournamentTeamsConstraint = {
   tournament_teams_creator_steam_id_tournament_id_key: 'tournament_teams_creator_steam_id_tournament_id_key' as const,
   tournament_teams_pkey: 'tournament_teams_pkey' as const,
   tournament_teams_tournament_id_name_key: 'tournament_teams_tournament_id_name_key' as const,
   tournament_teams_tournament_id_team_id_key: 'tournament_teams_tournament_id_team_id_key' as const
}

export const enumTournamentTeamsSelectColumn = {
   eligible_at: 'eligible_at' as const,
   id: 'id' as const,
   name: 'name' as const,
   owner_steam_id: 'owner_steam_id' as const,
   seed: 'seed' as const,
   team_id: 'team_id' as const,
   tournament_id: 'tournament_id' as const
}

export const enumTournamentTeamsUpdateColumn = {
   eligible_at: 'eligible_at' as const,
   id: 'id' as const,
   name: 'name' as const,
   owner_steam_id: 'owner_steam_id' as const,
   seed: 'seed' as const,
   team_id: 'team_id' as const,
   tournament_id: 'tournament_id' as const
}

export const enumTournamentsConstraint = {
   tournaments_match_options_id_key: 'tournaments_match_options_id_key' as const,
   tournaments_pkey: 'tournaments_pkey' as const
}

export const enumTournamentsSelectColumn = {
   description: 'description' as const,
   id: 'id' as const,
   match_options_id: 'match_options_id' as const,
   name: 'name' as const,
   organizer_steam_id: 'organizer_steam_id' as const,
   start: 'start' as const,
   status: 'status' as const
}

export const enumTournamentsUpdateColumn = {
   description: 'description' as const,
   id: 'id' as const,
   match_options_id: 'match_options_id' as const,
   name: 'name' as const,
   organizer_steam_id: 'organizer_steam_id' as const,
   start: 'start' as const,
   status: 'status' as const
}

export const enumVMatchCaptainsSelectColumn = {
   captain: 'captain' as const,
   discord_id: 'discord_id' as const,
   id: 'id' as const,
   match_lineup_id: 'match_lineup_id' as const,
   placeholder_name: 'placeholder_name' as const,
   steam_id: 'steam_id' as const
}

export const enumVMatchLineupsSelectColumn = {
   coach_steam_id: 'coach_steam_id' as const,
   id: 'id' as const,
   match_id: 'match_id' as const,
   team_id: 'team_id' as const
}

export const enumVPlayerArchNemesisSelectColumn = {
   attacker_id: 'attacker_id' as const,
   kill_count: 'kill_count' as const,
   victim_id: 'victim_id' as const
}

export const enumVPlayerDamageSelectColumn = {
   avg_damage_per_round: 'avg_damage_per_round' as const,
   player_steam_id: 'player_steam_id' as const,
   total_damage: 'total_damage' as const,
   total_rounds: 'total_rounds' as const
}

export const enumVPlayerEloSelectColumn = {
   actual_score: 'actual_score' as const,
   assists: 'assists' as const,
   current_elo: 'current_elo' as const,
   damage: 'damage' as const,
   damage_percent: 'damage_percent' as const,
   deaths: 'deaths' as const,
   elo_change: 'elo_change' as const,
   expected_score: 'expected_score' as const,
   k_factor: 'k_factor' as const,
   kda: 'kda' as const,
   kills: 'kills' as const,
   match_created_at: 'match_created_at' as const,
   match_id: 'match_id' as const,
   match_result: 'match_result' as const,
   opponent_team_elo_avg: 'opponent_team_elo_avg' as const,
   performance_multiplier: 'performance_multiplier' as const,
   player_name: 'player_name' as const,
   player_steam_id: 'player_steam_id' as const,
   player_team_elo_avg: 'player_team_elo_avg' as const,
   team_avg_kda: 'team_avg_kda' as const,
   updated_elo: 'updated_elo' as const
}

export const enumVPlayerMapLossesSelectColumn = {
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   started_at: 'started_at' as const,
   steam_id: 'steam_id' as const
}

export const enumVPlayerMapWinsSelectColumn = {
   map_id: 'map_id' as const,
   match_id: 'match_id' as const,
   started_at: 'started_at' as const,
   steam_id: 'steam_id' as const
}

export const enumVPlayerMultiKillsSelectColumn = {
   attacker_steam_id: 'attacker_steam_id' as const,
   kills: 'kills' as const,
   match_id: 'match_id' as const,
   round: 'round' as const
}

export const enumVPoolMapsSelectColumn = {
   active_pool: 'active_pool' as const,
   id: 'id' as const,
   label: 'label' as const,
   map_pool_id: 'map_pool_id' as const,
   name: 'name' as const,
   patch: 'patch' as const,
   poster: 'poster' as const,
   type: 'type' as const,
   workshop_map_id: 'workshop_map_id' as const
}

export const enumVPoolMapsSelectColumnVPoolMapsAggregateBoolExpBoolAndArgumentsColumns = {
   active_pool: 'active_pool' as const
}

export const enumVPoolMapsSelectColumnVPoolMapsAggregateBoolExpBoolOrArgumentsColumns = {
   active_pool: 'active_pool' as const
}
